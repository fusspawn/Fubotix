var config = {
    http_port: 1337,
    gamescom_game_secret: "f6mwrlcy896ck00b3cylrh9gjd",
    facebook_app_id: "324922124269528"
};

!function(name, context, definition) {
    "undefined" != typeof module && module.exports ? module.exports = definition() : "function" == typeof define && define.amd ? define(definition) : context[name] = definition();
}("Fingerprint2", this, function() {
    var mixin = function(target) {
        this.options = this.extend(target, {
            swfContainerId: "fingerprintjs2",
            swfPath: "flash/compiled/FontList.swf"
        });
        this.nativeForEach = Array.prototype.forEach;
        this.nativeMap = Array.prototype.map;
    };
    return mixin.prototype = {
        extend: function(b, a) {
            if (null == b) return a;
            for (var i in b) null != b[i] && a[i] !== b[i] && (a[i] = b[i]);
            return a;
        },
        log: function(e) {
            window.console && console.log(e);
        },
        get: function(success) {
            var vals = [], vals = this.userAgentKey(vals), vals = this.languageKey(vals), vals = this.colorDepthKey(vals), vals = this.screenResolutionKey(vals), vals = this.timezoneOffsetKey(vals), vals = this.sessionStorageKey(vals), vals = this.localStorageKey(vals), vals = this.indexedDbKey(vals), vals = this.addBehaviorKey(vals), vals = this.openDatabaseKey(vals), vals = this.cpuClassKey(vals), vals = this.platformKey(vals), vals = this.doNotTrackKey(vals), vals = this.pluginsKey(vals), vals = this.canvasKey(vals), vals = this.webglKey(vals), $this = this;
            this.fontsKey(vals, function(v) {
                v = $this.x64hash128(v.join("~~~"), 31);
                return success(v);
            });
        },
        userAgentKey: function(html) {
            return this.options.excludeUserAgent || html.push(navigator.userAgent), html;
        },
        languageKey: function(keys) {
            return this.options.excludeLanguage || keys.push(navigator.language), keys;
        },
        colorDepthKey: function(keys) {
            return this.options.excludeColorDepth || keys.push(screen.colorDepth), keys;
        },
        screenResolutionKey: function(path) {
            return this.options.excludeScreenResolution ? path : this.getScreenResolution(path);
        },
        getScreenResolution: function(a) {
            var o, op;
            return o = this.options.detectScreenOrientation ? screen.height > screen.width ? [ screen.height, screen.width ] : [ screen.width, screen.height ] : [ screen.height, screen.width ], 
            "undefined" != typeof o && a.push(o), screen.availWidth && screen.availHeight && (op = this.options.detectScreenOrientation ? screen.availHeight > screen.availWidth ? [ screen.availHeight, screen.availWidth ] : [ screen.availWidth, screen.availHeight ] : [ screen.availHeight, screen.availWidth ]), 
            "undefined" != typeof op && a.push(op), a;
        },
        timezoneOffsetKey: function(keys) {
            return this.options.excludeTimezoneOffset || keys.push(new Date().getTimezoneOffset()), 
            keys;
        },
        sessionStorageKey: function(self_effects) {
            return !this.options.excludeSessionStorage && this.hasSessionStorage() && self_effects.push("sessionStorageKey"), 
            self_effects;
        },
        localStorageKey: function(self_effects) {
            return !this.options.excludeSessionStorage && this.hasLocalStorage() && self_effects.push("localStorageKey"), 
            self_effects;
        },
        indexedDbKey: function(self_effects) {
            return !this.options.excludeIndexedDB && this.hasIndexedDB() && self_effects.push("indexedDbKey"), 
            self_effects;
        },
        addBehaviorKey: function(self_effects) {
            return document.body && !this.options.excludeAddBehavior && document.body.addBehavior && self_effects.push("addBehaviorKey"), 
            self_effects;
        },
        openDatabaseKey: function(self_effects) {
            return !this.options.excludeOpenDatabase && window.openDatabase && self_effects.push("openDatabase"), 
            self_effects;
        },
        cpuClassKey: function(self_effects) {
            return this.options.excludeCpuClass || self_effects.push(this.getNavigatorCpuClass()), 
            self_effects;
        },
        platformKey: function(self_effects) {
            return this.options.excludePlatform || self_effects.push(this.getNavigatorPlatform()), 
            self_effects;
        },
        doNotTrackKey: function(self_effects) {
            return this.options.excludeDoNotTrack || self_effects.push(this.getDoNotTrack()), 
            self_effects;
        },
        canvasKey: function(self_effects) {
            return !this.options.excludeCanvas && this.isCanvasSupported() && self_effects.push(this.getCanvasFp()), 
            self_effects;
        },
        webglKey: function(self_effects) {
            return !this.options.excludeWebGL && this.isCanvasSupported() && self_effects.push(this.getWebglFp()), 
            self_effects;
        },
        fontsKey: function(element, className) {
            return this.options.excludeJsFonts ? this.flashFontsKey(element, className) : this.jsFontsKey(element, className);
        },
        flashFontsKey: function(target, attack) {
            return this.options.excludeFlashFonts ? attack(target) : this.hasSwfObjectLoaded() && this.hasMinFlashInstalled() ? "undefined" == typeof this.options.swfPath ? attack(target) : void this.loadSwfAndDetectFonts(function(value) {
                target.push(value.join(";"));
                attack(target);
            }) : attack(target);
        },
        jsFontsKey: function(target, attack) {
            return setTimeout(function() {
                var a = [ "monospace", "sans-serif", "serif" ], body = document.getElementsByTagName("body")[0], elem = document.createElement("span");
                elem.style.fontSize = "72px";
                elem.innerHTML = "mmmmmmmmmmlli";
                var args = {}, params = {}, i;
                for (i in a) elem.style.fontFamily = a[i], body.appendChild(elem), args[a[i]] = elem.offsetWidth, 
                params[a[i]] = elem.offsetHeight, body.removeChild(elem);
                i = "Abadi MT Condensed Light;Academy Engraved LET;ADOBE CASLON PRO;Adobe Garamond;ADOBE GARAMOND PRO;Agency FB;Aharoni;Albertus Extra Bold;Albertus Medium;Algerian;Amazone BT;American Typewriter;American Typewriter Condensed;AmerType Md BT;Andale Mono;Andalus;Angsana New;AngsanaUPC;Antique Olive;Aparajita;Apple Chancery;Apple Color Emoji;Apple SD Gothic Neo;Arabic Typesetting;ARCHER;Arial;Arial Black;Arial Hebrew;Arial MT;Arial Narrow;Arial Rounded MT Bold;Arial Unicode MS;ARNO PRO;Arrus BT;Aurora Cn BT;AvantGarde Bk BT;AvantGarde Md BT;AVENIR;Ayuthaya;Bandy;Bangla Sangam MN;Bank Gothic;BankGothic Md BT;Baskerville;Baskerville Old Face;Batang;BatangChe;Bauer Bodoni;Bauhaus 93;Bazooka;Bell MT;Bembo;Benguiat Bk BT;Berlin Sans FB;Berlin Sans FB Demi;Bernard MT Condensed;BernhardFashion BT;BernhardMod BT;Big Caslon;BinnerD;Bitstream Vera Sans Mono;Blackadder ITC;BlairMdITC TT;Bodoni 72;Bodoni 72 Oldstyle;Bodoni 72 Smallcaps;Bodoni MT;Bodoni MT Black;Bodoni MT Condensed;Bodoni MT Poster Compressed;Book Antiqua;Bookman Old Style;Bookshelf Symbol 7;Boulder;Bradley Hand;Bradley Hand ITC;Bremen Bd BT;Britannic Bold;Broadway;Browallia New;BrowalliaUPC;Brush Script MT;Calibri;Californian FB;Calisto MT;Calligrapher;Cambria;Cambria Math;Candara;CaslonOpnface BT;Castellar;Centaur;Century;Century Gothic;Century Schoolbook;Cezanne;CG Omega;CG Times;Chalkboard;Chalkboard SE;Chalkduster;Charlesworth;Charter Bd BT;Charter BT;Chaucer;ChelthmITC Bk BT;Chiller;Clarendon;Clarendon Condensed;CloisterBlack BT;Cochin;Colonna MT;Comic Sans;Comic Sans MS;Consolas;Constantia;Cooper Black;Copperplate;Copperplate Gothic;Copperplate Gothic Bold;Copperplate Gothic Light;CopperplGoth Bd BT;Corbel;Cordia New;CordiaUPC;Cornerstone;Coronet;Courier;Courier New;Cuckoo;Curlz MT;DaunPenh;Dauphin;David;DB LCD Temp;DELICIOUS;Denmark;Devanagari Sangam MN;DFKai-SB;Didot;DilleniaUPC;DIN;DokChampa;Dotum;DotumChe;Ebrima;Edwardian Script ITC;Elephant;English 111 Vivace BT;Engravers MT;EngraversGothic BT;Eras Bold ITC;Eras Demi ITC;Eras Light ITC;Eras Medium ITC;Estrangelo Edessa;EucrosiaUPC;Euphemia;Euphemia UCAS;EUROSTILE;Exotc350 Bd BT;FangSong;Felix Titling;Fixedsys;FONTIN;Footlight MT Light;Forte;Franklin Gothic;Franklin Gothic Book;Franklin Gothic Demi;Franklin Gothic Demi Cond;Franklin Gothic Heavy;Franklin Gothic Medium;Franklin Gothic Medium Cond;FrankRuehl;Fransiscan;Freefrm721 Blk BT;FreesiaUPC;Freestyle Script;French Script MT;FrnkGothITC Bk BT;Fruitger;FRUTIGER;Futura;Futura Bk BT;Futura Lt BT;Futura Md BT;Futura ZBlk BT;FuturaBlack BT;Gabriola;Galliard BT;Garamond;Gautami;Geeza Pro;Geneva;Geometr231 BT;Geometr231 Hv BT;Geometr231 Lt BT;Georgia;GeoSlab 703 Lt BT;GeoSlab 703 XBd BT;Gigi;Gill Sans;Gill Sans MT;Gill Sans MT Condensed;Gill Sans MT Ext Condensed Bold;Gill Sans Ultra Bold;Gill Sans Ultra Bold Condensed;Gisha;Gloucester MT Extra Condensed;GOTHAM;GOTHAM BOLD;Goudy Old Style;Goudy Stout;GoudyHandtooled BT;GoudyOLSt BT;Gujarati Sangam MN;Gulim;GulimChe;Gungsuh;GungsuhChe;Gurmukhi MN;Haettenschweiler;Harlow Solid Italic;Harrington;Heather;Heiti SC;Heiti TC;HELV;Helvetica;Helvetica Neue;Herald;High Tower Text;Hiragino Kaku Gothic ProN;Hiragino Mincho ProN;Hoefler Text;Humanst 521 Cn BT;Humanst521 BT;Humanst521 Lt BT;Impact;Imprint MT Shadow;Incised901 Bd BT;Incised901 BT;Incised901 Lt BT;INCONSOLATA;Informal Roman;Informal011 BT;INTERSTATE;IrisUPC;Iskoola Pota;JasmineUPC;Jazz LET;Jenson;Jester;Jokerman;Juice ITC;Kabel Bk BT;Kabel Ult BT;Kailasa;KaiTi;Kalinga;Kannada Sangam MN;Kartika;Kaufmann Bd BT;Kaufmann BT;Khmer UI;KodchiangUPC;Kokila;Korinna BT;Kristen ITC;Krungthep;Kunstler Script;Lao UI;Latha;Leelawadee;Letter Gothic;Levenim MT;LilyUPC;Lithograph;Lithograph Light;Long Island;Lucida Bright;Lucida Calligraphy;Lucida Console;Lucida Fax;LUCIDA GRANDE;Lucida Handwriting;Lucida Sans;Lucida Sans Typewriter;Lucida Sans Unicode;Lydian BT;Magneto;Maiandra GD;Malayalam Sangam MN;Malgun Gothic;Mangal;Marigold;Marion;Marker Felt;Market;Marlett;Matisse ITC;Matura MT Script Capitals;Meiryo;Meiryo UI;Microsoft Himalaya;Microsoft JhengHei;Microsoft New Tai Lue;Microsoft PhagsPa;Microsoft Sans Serif;Microsoft Tai Le;Microsoft Uighur;Microsoft YaHei;Microsoft Yi Baiti;MingLiU;MingLiU_HKSCS;MingLiU_HKSCS-ExtB;MingLiU-ExtB;Minion;Minion Pro;Miriam;Miriam Fixed;Mistral;Modern;Modern No. 20;Mona Lisa Solid ITC TT;Monaco;Mongolian Baiti;MONO;Monotype Corsiva;MoolBoran;Mrs Eaves;MS Gothic;MS LineDraw;MS Mincho;MS Outlook;MS PGothic;MS PMincho;MS Reference Sans Serif;MS Reference Specialty;MS Sans Serif;MS Serif;MS UI Gothic;MT Extra;MUSEO;MV Boli;MYRIAD;MYRIAD PRO;Nadeem;Narkisim;NEVIS;News Gothic;News GothicMT;NewsGoth BT;Niagara Engraved;Niagara Solid;Noteworthy;NSimSun;Nyala;OCR A Extended;Old Century;Old English Text MT;Onyx;Onyx BT;OPTIMA;Oriya Sangam MN;OSAKA;OzHandicraft BT;Palace Script MT;Palatino;Palatino Linotype;Papyrus;Parchment;Party LET;Pegasus;Perpetua;Perpetua Titling MT;PetitaBold;Pickwick;Plantagenet Cherokee;Playbill;PMingLiU;PMingLiU-ExtB;Poor Richard;Poster;PosterBodoni BT;PRINCETOWN LET;Pristina;PTBarnum BT;Pythagoras;Raavi;Rage Italic;Ravie;Ribbon131 Bd BT;Rockwell;Rockwell Condensed;Rockwell Extra Bold;Rod;Roman;Sakkal Majalla;Santa Fe LET;Savoye LET;Sceptre;Script;Script MT Bold;SCRIPTINA;Segoe Print;Segoe Script;Segoe UI;Segoe UI Light;Segoe UI Semibold;Segoe UI Symbol;Serifa;Serifa BT;Serifa Th BT;ShelleyVolante BT;Sherwood;Shonar Bangla;Showcard Gothic;Shruti;Signboard;SILKSCREEN;SimHei;Simplified Arabic;Simplified Arabic Fixed;SimSun;SimSun-ExtB;Sinhala Sangam MN;Sketch Rockwell;Skia;Small Fonts;Snap ITC;Snell Roundhand;Socket;Souvenir Lt BT;Staccato222 BT;Steamer;Stencil;Storybook;Styllo;Subway;Swis721 BlkEx BT;Swiss911 XCm BT;Sylfaen;Synchro LET;System;Tahoma;Tamil Sangam MN;Technical;Teletype;Telugu Sangam MN;Tempus Sans ITC;Terminal;Thonburi;Times;Times New Roman;Times New Roman PS;Traditional Arabic;Trajan;TRAJAN PRO;Trebuchet MS;Tristan;Tubular;Tunga;Tw Cen MT;Tw Cen MT Condensed;Tw Cen MT Condensed Extra Bold;TypoUpright BT;Unicorn;Univers;Univers CE 55 Medium;Univers Condensed;Utsaah;Vagabond;Vani;Verdana;Vijaya;Viner Hand ITC;VisualUI;Vivaldi;Vladimir Script;Vrinda;Westminster;WHITNEY;Wide Latin;Wingdings;Wingdings 2;Wingdings 3;ZapfEllipt BT;ZapfHumnst BT;ZapfHumnst Dm BT;Zapfino;Zurich BlkEx BT;Zurich Ex BT;ZWAdobeF".split(";");
                for (var data = [], id = 0, o = i.length; o > id; id++) {
                    var n = i[id], e = !1, p = void 0;
                    for (p in a) {
                        elem.style.fontFamily = n + "," + a[p];
                        body.appendChild(elem);
                        var lastEvent = elem.offsetWidth !== args[a[p]] || elem.offsetHeight !== params[a[p]];
                        body.removeChild(elem);
                        e = e || lastEvent;
                    }
                    e && data.push(i[id]);
                }
                target.push(data.join(";"));
                attack(target);
            }, 1);
        },
        pluginsKey: function(a) {
            return a.push(this.isIE() ? this.getIEPluginsString() : this.getRegularPluginsString()), 
            a;
        },
        getRegularPluginsString: function() {
            return this.map(navigator.plugins, function(p) {
                var mimeTypes = this.map(p, function(mt) {
                    return [ mt.type, mt.suffixes ].join("~");
                }).join(",");
                return [ p.name, p.description, mimeTypes ].join("::");
            }, this).join(";");
        },
        getIEPluginsString: function() {
            return window.ActiveXObject ? this.map("AcroPDF.PDF;Adodb.Stream;AgControl.AgControl;DevalVRXCtrl.DevalVRXCtrl.1;MacromediaFlashPaper.MacromediaFlashPaper;Msxml2.DOMDocument;Msxml2.XMLHTTP;PDF.PdfCtrl;QuickTime.QuickTime;QuickTimeCheckObject.QuickTimeCheck.1;RealPlayer;RealPlayer.RealPlayer(tm) ActiveX Control (32-bit);RealVideo.RealVideo(tm) ActiveX Control (32-bit);Scripting.Dictionary;SWCtl.SWCtl;Shell.UIHelper;ShockwaveFlash.ShockwaveFlash;Skype.Detection;TDCCtl.TDCCtl;WMPlayer.OCX;rmocx.RealPlayer G2 Control;rmocx.RealPlayer G2 Control.1".split(";"), function(item) {
                try {
                    return new ActiveXObject(item), item;
                } catch (e) {
                    return null;
                }
            }).join(";") : "";
        },
        hasSessionStorage: function() {
            try {
                return !!window.sessionStorage;
            } catch (a) {
                return !0;
            }
        },
        hasLocalStorage: function() {
            try {
                return !!window.localStorage;
            } catch (a) {
                return !0;
            }
        },
        hasIndexedDB: function() {
            return !!window.indexedDB;
        },
        getNavigatorCpuClass: function() {
            return navigator.cpuClass ? "navigatorCpuClass: " + navigator.cpuClass : "navigatorCpuClass: unknown";
        },
        getNavigatorPlatform: function() {
            return navigator.platform ? "navigatorPlatform: " + navigator.platform : "navigatorPlatform: unknown";
        },
        getDoNotTrack: function() {
            return navigator.doNotTrack ? "doNotTrack: " + navigator.doNotTrack : "doNotTrack: unknown";
        },
        getCanvasFp: function() {
            var acc = [], canv2 = document.createElement("canvas");
            canv2.width = 2e3;
            canv2.height = 200;
            var ctx = canv2.getContext("2d");
            try {
                ctx.globalCompositeOperation = "screen";
            } catch (f) {}
            acc.push("canvas blending:" + ("screen" === ctx.globalCompositeOperation ? "yes" : "no"));
            ctx.rect(0, 0, 10, 10);
            ctx.rect(2, 2, 6, 6);
            acc.push("canvas winding:" + (!1 === ctx.isPointInPath(5, 5, "evenodd") ? "yes" : "no"));
            return ctx.textBaseline = "top", ctx.font = "72px 'DamascusLight'", ctx.fillStyle = "#f60", 
            ctx.fillRect(2, 0, 1e3, 70), ctx.fillStyle = "#069", ctx.fillText("https://github.com/valve for PEACE in Ukraine!", 2, 0), 
            ctx.font = "72px 'Roboto Condensed'", ctx.fillStyle = "rgba(102, 204, 0, 0.7)", 
            ctx.fillText("https://github.com/valve for PEACE in Ukraine!", 4, 2), ctx.strokeStyle = "rgba(202, 104, 0, 0.9)", 
            ctx.font = "72px 'Menlo'", ctx.strokeText("https://github.com/valve for PEACE in Ukraine!", 8, 4), 
            ctx.globalCompositeOperation = "multiply", ctx.fillStyle = "rgb(255,0,255)", ctx.beginPath(), 
            ctx.arc(50, 50, 50, 0, 2 * Math.PI, !0), ctx.closePath(), ctx.fill(), ctx.fillStyle = "rgb(0,255,255)", 
            ctx.beginPath(), ctx.arc(100, 50, 50, 0, 2 * Math.PI, !0), ctx.closePath(), ctx.fill(), 
            ctx.fillStyle = "rgb(255,255,0)", ctx.beginPath(), ctx.arc(75, 100, 50, 0, 2 * Math.PI, !0), 
            ctx.closePath(), ctx.fill(), ctx.fillStyle = "rgb(255,0,255)", ctx.arc(75, 75, 75, 0, 2 * Math.PI, !0), 
            ctx.arc(75, 75, 25, 0, 2 * Math.PI, !0), ctx.fill("evenodd"), acc.push("canvas fp:" + canv2.toDataURL()), 
            acc.join("§");
        },
        getWebglFp: function() {
            var gl, draw = function(pos) {
                return gl.clearColor(0, 0, 0, 1), gl.enable(gl.DEPTH_TEST), gl.depthFunc(gl.LEQUAL), 
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT), "[" + pos[0] + ", " + pos[1] + "]";
            };
            if (gl = this.getWebglCanvas(), !gl) return null;
            var modules = [], buffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            var shaderProgram = new Float32Array([ -.2, -.9, 0, .4, -.26, 0, 0, .732134444, 0 ]);
            gl.bufferData(gl.ARRAY_BUFFER, shaderProgram, gl.STATIC_DRAW);
            buffer.itemSize = 3;
            buffer.numItems = 3;
            var shaderProgram = gl.createProgram(), vs = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vs, "attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}");
            gl.compileShader(vs);
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            return gl.shaderSource(fragmentShader, "precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}"), 
            gl.compileShader(fragmentShader), gl.attachShader(shaderProgram, vs), gl.attachShader(shaderProgram, fragmentShader), 
            gl.linkProgram(shaderProgram), gl.useProgram(shaderProgram), shaderProgram.vertexPosAttrib = gl.getAttribLocation(shaderProgram, "attrVertex"), 
            shaderProgram.offsetUniform = gl.getUniformLocation(shaderProgram, "uniformOffset"), 
            gl.enableVertexAttribArray(shaderProgram.vertexPosArray), gl.vertexAttribPointer(shaderProgram.vertexPosAttrib, buffer.itemSize, gl.FLOAT, !1, 0, 0), 
            gl.uniform2f(shaderProgram.offsetUniform, 1, 1), gl.drawArrays(gl.TRIANGLE_STRIP, 0, buffer.numItems), 
            null != gl.canvas && modules.push(gl.canvas.toDataURL()), modules.push("extensions:" + gl.getSupportedExtensions().join(";")), 
            modules.push("webgl aliased line width range:" + draw(gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE))), 
            modules.push("webgl aliased point size range:" + draw(gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE))), 
            modules.push("webgl alpha bits:" + gl.getParameter(gl.ALPHA_BITS)), modules.push("webgl antialiasing:" + (gl.getContextAttributes().antialias ? "yes" : "no")), 
            modules.push("webgl blue bits:" + gl.getParameter(gl.BLUE_BITS)), modules.push("webgl depth bits:" + gl.getParameter(gl.DEPTH_BITS)), 
            modules.push("webgl green bits:" + gl.getParameter(gl.GREEN_BITS)), modules.push("webgl max anisotropy:" + function(gl) {
                var h, e = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
                return e ? (h = gl.getParameter(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT), 0 === h && (h = 2), 
                h) : null;
            }(gl)), modules.push("webgl max combined texture image units:" + gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)), 
            modules.push("webgl max cube map texture size:" + gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)), 
            modules.push("webgl max fragment uniform vectors:" + gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)), 
            modules.push("webgl max render buffer size:" + gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)), 
            modules.push("webgl max texture image units:" + gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)), 
            modules.push("webgl max texture size:" + gl.getParameter(gl.MAX_TEXTURE_SIZE)), 
            modules.push("webgl max varying vectors:" + gl.getParameter(gl.MAX_VARYING_VECTORS)), 
            modules.push("webgl max vertex attribs:" + gl.getParameter(gl.MAX_VERTEX_ATTRIBS)), 
            modules.push("webgl max vertex texture image units:" + gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)), 
            modules.push("webgl max vertex uniform vectors:" + gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)), 
            modules.push("webgl max viewport dims:" + draw(gl.getParameter(gl.MAX_VIEWPORT_DIMS))), 
            modules.push("webgl red bits:" + gl.getParameter(gl.RED_BITS)), modules.push("webgl renderer:" + gl.getParameter(gl.RENDERER)), 
            modules.push("webgl shading language version:" + gl.getParameter(gl.SHADING_LANGUAGE_VERSION)), 
            modules.push("webgl stencil bits:" + gl.getParameter(gl.STENCIL_BITS)), modules.push("webgl vendor:" + gl.getParameter(gl.VENDOR)), 
            modules.push("webgl version:" + gl.getParameter(gl.VERSION)), modules.push("webgl vertex shader high float precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision), 
            modules.push("webgl vertex shader high float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin), 
            modules.push("webgl vertex shader high float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax), 
            modules.push("webgl vertex shader medium float precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision), 
            modules.push("webgl vertex shader medium float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin), 
            modules.push("webgl vertex shader medium float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax), 
            modules.push("webgl vertex shader low float precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision), 
            modules.push("webgl vertex shader low float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin), 
            modules.push("webgl vertex shader low float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax), 
            modules.push("webgl fragment shader high float precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision), 
            modules.push("webgl fragment shader high float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin), 
            modules.push("webgl fragment shader high float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax), 
            modules.push("webgl fragment shader medium float precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision), 
            modules.push("webgl fragment shader medium float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin), 
            modules.push("webgl fragment shader medium float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax), 
            modules.push("webgl fragment shader low float precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision), 
            modules.push("webgl fragment shader low float precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin), 
            modules.push("webgl fragment shader low float precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax), 
            modules.push("webgl vertex shader high int precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision), 
            modules.push("webgl vertex shader high int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin), 
            modules.push("webgl vertex shader high int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax), 
            modules.push("webgl vertex shader medium int precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision), 
            modules.push("webgl vertex shader medium int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin), 
            modules.push("webgl vertex shader medium int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax), 
            modules.push("webgl vertex shader low int precision:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision), 
            modules.push("webgl vertex shader low int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin), 
            modules.push("webgl vertex shader low int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax), 
            modules.push("webgl fragment shader high int precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision), 
            modules.push("webgl fragment shader high int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin), 
            modules.push("webgl fragment shader high int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax), 
            modules.push("webgl fragment shader medium int precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision), 
            modules.push("webgl fragment shader medium int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin), 
            modules.push("webgl fragment shader medium int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax), 
            modules.push("webgl fragment shader low int precision:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision), 
            modules.push("webgl fragment shader low int precision rangeMin:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin), 
            modules.push("webgl fragment shader low int precision rangeMax:" + gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax), 
            modules.join("§");
        },
        isCanvasSupported: function() {
            var canvas = document.createElement("canvas");
            return !(!canvas.getContext || !canvas.getContext("2d"));
        },
        isIE: function() {
            return "Microsoft Internet Explorer" === navigator.appName ? !0 : "Netscape" === navigator.appName && /Trident/.test(navigator.userAgent) ? !0 : !1;
        },
        hasSwfObjectLoaded: function() {
            return "undefined" != typeof window.swfobject;
        },
        hasMinFlashInstalled: function() {
            return swfobject.hasFlashPlayerVersion("9.0.0");
        },
        addFlashDivNode: function() {
            var soundDIV = document.createElement("div");
            soundDIV.setAttribute("id", this.options.swfContainerId);
            document.body.appendChild(soundDIV);
        },
        loadSwfAndDetectFonts: function(isEventType) {
            window.___fp_swf_loaded = function(eventType) {
                isEventType(eventType);
            };
            var id = this.options.swfContainerId;
            this.addFlashDivNode();
            swfobject.embedSWF(this.options.swfPath, id, "1", "1", "9.0.0", !1, {
                onReady: "___fp_swf_loaded"
            }, {
                allowScriptAccess: "always",
                menu: "false"
            }, {});
        },
        getWebglCanvas: function() {
            var canvas = document.createElement("canvas"), image = null;
            try {
                image = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
            } catch (e) {}
            return image || (image = null), image;
        },
        each: function(obj, iterator, context) {
            if (null !== obj) if (this.nativeForEach && obj.forEach === this.nativeForEach) obj.forEach(iterator, context); else if (obj.length === +obj.length) for (var i = 0, l = obj.length; l > i && iterator.call(context, obj[i], i, obj) !== {}; i++) ; else for (i in obj) if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === {}) break;
        },
        map: function(obj, func, context) {
            var ret = [];
            return null == obj ? ret : this.nativeMap && obj.map === this.nativeMap ? obj.map(func, context) : (this.each(obj, function(v, k, i) {
                ret[ret.length] = func.call(context, v, k, i);
            }), ret);
        },
        x64Add: function(parts, rgb) {
            parts = [ parts[0] >>> 16, 65535 & parts[0], parts[1] >>> 16, 65535 & parts[1] ];
            rgb = [ rgb[0] >>> 16, 65535 & rgb[0], rgb[1] >>> 16, 65535 & rgb[1] ];
            var arrayA = [ 0, 0, 0, 0 ];
            return arrayA[3] += parts[3] + rgb[3], arrayA[2] += arrayA[3] >>> 16, arrayA[3] &= 65535, 
            arrayA[2] += parts[2] + rgb[2], arrayA[1] += arrayA[2] >>> 16, arrayA[2] &= 65535, 
            arrayA[1] += parts[1] + rgb[1], arrayA[0] += arrayA[1] >>> 16, arrayA[1] &= 65535, 
            arrayA[0] += parts[0] + rgb[0], arrayA[0] &= 65535, [ arrayA[0] << 16 | arrayA[1], arrayA[2] << 16 | arrayA[3] ];
        },
        x64Multiply: function(arrayA, arrayB) {
            arrayA = [ arrayA[0] >>> 16, 65535 & arrayA[0], arrayA[1] >>> 16, 65535 & arrayA[1] ];
            arrayB = [ arrayB[0] >>> 16, 65535 & arrayB[0], arrayB[1] >>> 16, 65535 & arrayB[1] ];
            var result = [ 0, 0, 0, 0 ];
            return result[3] += arrayA[3] * arrayB[3], result[2] += result[3] >>> 16, result[3] &= 65535, 
            result[2] += arrayA[2] * arrayB[3], result[1] += result[2] >>> 16, result[2] &= 65535, 
            result[2] += arrayA[3] * arrayB[2], result[1] += result[2] >>> 16, result[2] &= 65535, 
            result[1] += arrayA[1] * arrayB[3], result[0] += result[1] >>> 16, result[1] &= 65535, 
            result[1] += arrayA[2] * arrayB[2], result[0] += result[1] >>> 16, result[1] &= 65535, 
            result[1] += arrayA[3] * arrayB[1], result[0] += result[1] >>> 16, result[1] &= 65535, 
            result[0] += arrayA[0] * arrayB[3] + arrayA[1] * arrayB[2] + arrayA[2] * arrayB[1] + arrayA[3] * arrayB[0], 
            result[0] &= 65535, [ result[0] << 16 | result[1], result[2] << 16 | result[3] ];
        },
        x64Rotl: function(coord, b) {
            return b %= 64, 32 === b ? [ coord[1], coord[0] ] : 32 > b ? [ coord[0] << b | coord[1] >>> 32 - b, coord[1] << b | coord[0] >>> 32 - b ] : (b -= 32, 
            [ coord[1] << b | coord[0] >>> 32 - b, coord[0] << b | coord[1] >>> 32 - b ]);
        },
        x64LeftShift: function(TEST_BITS, len) {
            return len %= 64, 0 === len ? TEST_BITS : 32 > len ? [ TEST_BITS[0] << len | TEST_BITS[1] >>> 32 - len, TEST_BITS[1] << len ] : [ TEST_BITS[1] << len - 32, 0 ];
        },
        x64Xor: function(source, mask) {
            return [ source[0] ^ mask[0], source[1] ^ mask[1] ];
        },
        x64Fmix: function(buf) {
            return buf = this.x64Xor(buf, [ 0, buf[0] >>> 1 ]), buf = this.x64Multiply(buf, [ 4283543511, 3981806797 ]), 
            buf = this.x64Xor(buf, [ 0, buf[0] >>> 1 ]), buf = this.x64Multiply(buf, [ 3301882366, 444984403 ]), 
            this.x64Xor(buf, [ 0, buf[0] >>> 1 ]);
        },
        x64hash128: function(input, offset) {
            input = input || "";
            offset = offset || 0;
            for (var a = input.length % 16, l = input.length - a, j = [ 0, offset ], i = [ 0, offset ], r = [ 0, 0 ], m = [ 0, 0 ], n = [ 2277735313, 289559509 ], v = [ 1291169091, 658871167 ], index = 0; l > index; index += 16) r = [ 255 & input.charCodeAt(index + 4) | (255 & input.charCodeAt(index + 5)) << 8 | (255 & input.charCodeAt(index + 6)) << 16 | (255 & input.charCodeAt(index + 7)) << 24, 255 & input.charCodeAt(index) | (255 & input.charCodeAt(index + 1)) << 8 | (255 & input.charCodeAt(index + 2)) << 16 | (255 & input.charCodeAt(index + 3)) << 24 ], 
            m = [ 255 & input.charCodeAt(index + 12) | (255 & input.charCodeAt(index + 13)) << 8 | (255 & input.charCodeAt(index + 14)) << 16 | (255 & input.charCodeAt(index + 15)) << 24, 255 & input.charCodeAt(index + 8) | (255 & input.charCodeAt(index + 9)) << 8 | (255 & input.charCodeAt(index + 10)) << 16 | (255 & input.charCodeAt(index + 11)) << 24 ], 
            r = this.x64Multiply(r, n), r = this.x64Rotl(r, 31), r = this.x64Multiply(r, v), 
            j = this.x64Xor(j, r), j = this.x64Rotl(j, 27), j = this.x64Add(j, i), j = this.x64Add(this.x64Multiply(j, [ 0, 5 ]), [ 0, 1390208809 ]), 
            m = this.x64Multiply(m, v), m = this.x64Rotl(m, 33), m = this.x64Multiply(m, n), 
            i = this.x64Xor(i, m), i = this.x64Rotl(i, 31), i = this.x64Add(i, j), i = this.x64Add(this.x64Multiply(i, [ 0, 5 ]), [ 0, 944331445 ]);
            switch (r = [ 0, 0 ], m = [ 0, 0 ], a) {
              case 15:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 14) ], 48));

              case 14:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 13) ], 40));

              case 13:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 12) ], 32));

              case 12:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 11) ], 24));

              case 11:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 10) ], 16));

              case 10:
                m = this.x64Xor(m, this.x64LeftShift([ 0, input.charCodeAt(index + 9) ], 8));

              case 9:
                m = this.x64Xor(m, [ 0, input.charCodeAt(index + 8) ]), m = this.x64Multiply(m, v), 
                m = this.x64Rotl(m, 33), m = this.x64Multiply(m, n), i = this.x64Xor(i, m);

              case 8:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 7) ], 56));

              case 7:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 6) ], 48));

              case 6:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 5) ], 40));

              case 5:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 4) ], 32));

              case 4:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 3) ], 24));

              case 3:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 2) ], 16));

              case 2:
                r = this.x64Xor(r, this.x64LeftShift([ 0, input.charCodeAt(index + 1) ], 8));

              case 1:
                r = this.x64Xor(r, [ 0, input.charCodeAt(index) ]), r = this.x64Multiply(r, n), 
                r = this.x64Rotl(r, 31), r = this.x64Multiply(r, v), j = this.x64Xor(j, r);
            }
            return j = this.x64Xor(j, [ 0, input.length ]), i = this.x64Xor(i, [ 0, input.length ]), 
            j = this.x64Add(j, i), i = this.x64Add(i, j), j = this.x64Fmix(j), i = this.x64Fmix(i), 
            j = this.x64Add(j, i), i = this.x64Add(i, j), ("00000000" + (j[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (j[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (i[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (i[1] >>> 0).toString(16)).slice(-8);
        }
    }, mixin;
});

(function(global) {
    function configureProperties(obj) {
        if (Object.getOwnPropertyNames && Object.defineProperty) {
            var props = Object.getOwnPropertyNames(obj), i;
            for (i = 0; i < props.length; i += 1) Object.defineProperty(obj, props[i], {
                value: obj[props[i]],
                writable: !1,
                enumerable: !1,
                configurable: !1
            });
        }
    }
    function makeArrayAccessors(obj) {
        function makeArrayAccessor(index) {
            Object.defineProperty(obj, index, {
                get: function() {
                    return obj._getter(index);
                },
                set: function(v) {
                    obj._setter(index, v);
                },
                enumerable: !0,
                configurable: !1
            });
        }
        if (Object.defineProperty) {
            if (1e5 < obj.length) throw new RangeError("Array too large for polyfill");
            var i;
            for (i = 0; i < obj.length; i += 1) makeArrayAccessor(i);
        }
    }
    function as_signed(value, bits) {
        var s = 32 - bits;
        return value << s >> s;
    }
    function as_unsigned(value, bits) {
        var s = 32 - bits;
        return value << s >>> s;
    }
    function packUint8(n) {
        return [ n & 255 ];
    }
    function unpackUint8(bytes) {
        return as_signed(bytes[0], 8);
    }
    function packU8(n) {
        return [ n & 255 ];
    }
    function unpackU8(bytes) {
        return as_unsigned(bytes[0], 8);
    }
    function packU8Clamped(a) {
        a = round(Number(a));
        return [ 0 > a ? 0 : 255 < a ? 255 : a & 255 ];
    }
    function packInt16(n) {
        return [ n >> 8 & 255, n & 255 ];
    }
    function unpackInt16(bytes) {
        return as_signed(bytes[0] << 8 | bytes[1], 16);
    }
    function packUint16(n) {
        return [ n >> 8 & 255, n & 255 ];
    }
    function unpackUint16(bytes) {
        return as_unsigned(bytes[0] << 8 | bytes[1], 16);
    }
    function packI32(n) {
        return [ n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255 ];
    }
    function unpackI32(bytes) {
        return as_signed(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);
    }
    function packU32(n) {
        return [ n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255 ];
    }
    function unpackU32(bytes) {
        return as_unsigned(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);
    }
    function packIEEE754(v, c, fbits) {
        function roundToEven(l) {
            var w = floor(l);
            l -= w;
            return .5 > l ? w : .5 < l ? w + 1 : w % 2 ? w + 1 : w;
        }
        var i = (1 << c - 1) - 1, m, n, x;
        v !== v ? (n = (1 << c) - 1, x = pow(2, fbits - 1), m = 0) : Infinity === v || -Infinity === v ? (n = (1 << c) - 1, 
        x = 0, m = 0 > v ? 1 : 0) : 0 === v ? (x = n = 0, m = -Infinity === 1 / v ? 1 : 0) : (m = 0 > v, 
        v = abs(v), v >= pow(2, 1 - i) ? (n = min(floor(max(v) / LN2), 1023), x = roundToEven(v / pow(2, n) * pow(2, fbits)), 
        2 <= x / pow(2, fbits) && (n += 1, x = 1), n > i ? (n = (1 << c) - 1, x = 0) : (n += i, 
        x -= pow(2, fbits))) : (n = 0, x = roundToEven(v / pow(2, 1 - i - fbits))));
        for (v = []; fbits; --fbits) v.push(x % 2 ? 1 : 0), x = floor(x / 2);
        for (fbits = c; fbits; --fbits) v.push(n % 2 ? 1 : 0), n = floor(n / 2);
        v.push(m ? 1 : 0);
        v.reverse();
        c = v.join("");
        for (m = []; c.length; ) m.push(parseInt(c.substring(0, 8), 2)), c = c.substring(8);
        return m;
    }
    function unpackIEEE754(c, ebits, fbits) {
        var b = [], l, f, i;
        for (l = c.length; l; --l) for (i = c[l - 1], f = 8; f; --f) b.push(i % 2 ? 1 : 0), 
        i >>= 1;
        b.reverse();
        f = b.join("");
        c = (1 << ebits - 1) - 1;
        b = parseInt(f.substring(0, 1), 2) ? -1 : 1;
        l = parseInt(f.substring(1, 1 + ebits), 2);
        f = parseInt(f.substring(1 + ebits), 2);
        return l === (1 << ebits) - 1 ? 0 !== f ? NaN : Infinity * b : 0 < l ? b * pow(2, l - c) * (1 + f / pow(2, fbits)) : 0 !== f ? b * pow(2, -(c - 1)) * (f / pow(2, fbits)) : 0 > b ? -0 : 0;
    }
    function unpackFloat64(b) {
        return unpackIEEE754(b, 11, 52);
    }
    function packFloat64(v) {
        return packIEEE754(v, 11, 52);
    }
    function unpackFloat32(b) {
        return unpackIEEE754(b, 8, 23);
    }
    function packFloat32(v) {
        return packIEEE754(v, 8, 23);
    }
    var ECMAScript = function() {
        var getClass = Object.prototype.toString, hasOwnProp = Object.prototype.hasOwnProperty;
        return {
            Class: function(params) {
                return getClass.call(params).replace(/^\[object *|\]$/g, "");
            },
            HasProperty: function(a, b) {
                return b in a;
            },
            HasOwnProperty: function(o, p) {
                return hasOwnProp.call(o, p);
            },
            IsCallable: function(callbacks) {
                return "function" === typeof callbacks;
            },
            ToInt32: function(v) {
                return v >> 0;
            },
            ToUint32: function(v) {
                return v >>> 0;
            }
        };
    }(), LN2 = Math.LN2, abs = Math.abs, floor = Math.floor, max = Math.log, min = Math.min, pow = Math.pow, round = Math.round, shift;
    if (!(shift = !Object.defineProperty)) {
        var a;
        try {
            Object.defineProperty({}, "x", {}), a = !0;
        } catch (ma) {
            a = !1;
        }
        shift = !a;
    }
    shift && (Object.defineProperty = function(o, p, desc) {
        if (!o === Object(o)) throw new TypeError("Object.defineProperty called on non-object");
        ECMAScript.HasProperty(desc, "get") && Object.prototype.__defineGetter__ && Object.prototype.__defineGetter__.call(o, p, desc.get);
        ECMAScript.HasProperty(desc, "set") && Object.prototype.__defineSetter__ && Object.prototype.__defineSetter__.call(o, p, desc.set);
        ECMAScript.HasProperty(desc, "value") && (o[p] = desc.value);
        return o;
    });
    Object.getOwnPropertyNames || (Object.getOwnPropertyNames = function(o) {
        if (o !== Object(o)) throw new TypeError("Object.getOwnPropertyNames called on non-object");
        var ret = [], p;
        for (p in o) ECMAScript.HasOwnProperty(o, p) && ret.push(p);
        return ret;
    });
    (function() {
        function makeTypedArrayConstructor(bytesPerElement, pack, unpack) {
            var ctor;
            ctor = function(buffer, byteOffset, length) {
                var s, i, tmp;
                if (arguments.length && "number" !== typeof arguments[0]) if ("object" === typeof arguments[0] && arguments[0].constructor === ctor) for (s = arguments[0], 
                this.length = s.length, this.byteLength = this.length * this.BYTES_PER_ELEMENT, 
                this.buffer = new DataView(this.byteLength), i = this.byteOffset = 0; i < this.length; i += 1) this._setter(i, s._getter(i)); else if ("object" !== typeof arguments[0] || arguments[0] instanceof DataView || "ArrayBuffer" === ECMAScript.Class(arguments[0])) if ("object" === typeof arguments[0] && (arguments[0] instanceof DataView || "ArrayBuffer" === ECMAScript.Class(arguments[0]))) {
                    this.buffer = buffer;
                    this.byteOffset = ECMAScript.ToUint32(byteOffset);
                    if (this.byteOffset > this.buffer.byteLength) throw new RangeError("byteOffset out of range");
                    if (this.byteOffset % this.BYTES_PER_ELEMENT) throw new RangeError("ArrayBuffer length minus the byteOffset is not a multiple of the element size.");
                    if (3 > arguments.length) {
                        this.byteLength = this.buffer.byteLength - this.byteOffset;
                        if (this.byteLength % this.BYTES_PER_ELEMENT) throw new RangeError("length of buffer minus byteOffset not a multiple of the element size");
                        this.length = this.byteLength / this.BYTES_PER_ELEMENT;
                    } else this.length = ECMAScript.ToUint32(length), this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                    if (this.byteOffset + this.byteLength > this.buffer.byteLength) throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
                } else throw new TypeError("Unexpected argument type(s)"); else for (s = arguments[0], 
                this.length = ECMAScript.ToUint32(s.length), this.byteLength = this.length * this.BYTES_PER_ELEMENT, 
                this.buffer = new DataView(this.byteLength), i = this.byteOffset = 0; i < this.length; i += 1) tmp = s[i], 
                this._setter(i, Number(tmp)); else {
                    this.length = ECMAScript.ToInt32(arguments[0]);
                    if (0 > length) throw new RangeError("ArrayBufferView size is not a small enough positive integer.");
                    this.byteLength = this.length * this.BYTES_PER_ELEMENT;
                    this.buffer = new DataView(this.byteLength);
                    this.byteOffset = 0;
                }
                this.constructor = ctor;
                configureProperties(this);
                makeArrayAccessors(this);
            };
            ctor.prototype = new chains();
            ctor.prototype.BYTES_PER_ELEMENT = bytesPerElement;
            ctor.prototype._pack = pack;
            ctor.prototype._unpack = unpack;
            ctor.BYTES_PER_ELEMENT = bytesPerElement;
            ctor.prototype._getter = function(index) {
                if (1 > arguments.length) throw new SyntaxError("Not enough arguments");
                index = ECMAScript.ToUint32(index);
                if (!(index >= this.length)) {
                    var bytes = [], i, o;
                    i = 0;
                    for (o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, 
                    o += 1) bytes.push(this.buffer._bytes[o]);
                    return this._unpack(bytes);
                }
            };
            ctor.prototype.get = ctor.prototype._getter;
            ctor.prototype._setter = function(index, value) {
                if (2 > arguments.length) throw new SyntaxError("Not enough arguments");
                index = ECMAScript.ToUint32(index);
                if (!(index >= this.length)) {
                    var bytes = this._pack(value), i, o;
                    i = 0;
                    for (o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, 
                    o += 1) this.buffer._bytes[o] = bytes[i];
                }
            };
            ctor.prototype.set = function(key, value) {
                if (1 > arguments.length) throw new SyntaxError("Not enough arguments");
                var array, offset, length, i, s, d;
                if ("object" === typeof arguments[0] && arguments[0].constructor === this.constructor) {
                    array = arguments[0];
                    offset = ECMAScript.ToUint32(arguments[1]);
                    if (offset + array.length > this.length) throw new RangeError("Offset plus length of array is out of range");
                    d = this.byteOffset + offset * this.BYTES_PER_ELEMENT;
                    offset = array.length * this.BYTES_PER_ELEMENT;
                    if (array.buffer === this.buffer) {
                        length = [];
                        i = 0;
                        for (s = array.byteOffset; i < offset; i += 1, s += 1) length[i] = array.buffer._bytes[s];
                        for (i = 0; i < offset; i += 1, d += 1) this.buffer._bytes[d] = length[i];
                    } else for (i = 0, s = array.byteOffset; i < offset; i += 1, s += 1, d += 1) this.buffer._bytes[d] = array.buffer._bytes[s];
                } else if ("object" === typeof arguments[0] && "undefined" !== typeof arguments[0].length) {
                    array = arguments[0];
                    length = ECMAScript.ToUint32(array.length);
                    offset = ECMAScript.ToUint32(arguments[1]);
                    if (offset + length > this.length) throw new RangeError("Offset plus length of array is out of range");
                    for (i = 0; i < length; i += 1) s = array[i], this._setter(offset + i, Number(s));
                } else throw new TypeError("Unexpected argument type(s)");
            };
            ctor.prototype.subarray = function(start, end) {
                start = ECMAScript.ToInt32(start);
                end = ECMAScript.ToInt32(end);
                1 > arguments.length && (start = 0);
                2 > arguments.length && (end = this.length);
                0 > start && (start = this.length + start);
                0 > end && (end = this.length + end);
                var len = this.length;
                start = 0 > start ? 0 : start > len ? len : start;
                len = this.length;
                len = (0 > end ? 0 : end > len ? len : end) - start;
                0 > len && (len = 0);
                return new this.constructor(this.buffer, this.byteOffset + start * this.BYTES_PER_ELEMENT, len);
            };
            return ctor;
        }
        var DataView = function(i) {
            i = ECMAScript.ToInt32(i);
            if (0 > i) throw new RangeError("ArrayBuffer size is not a small enough positive integer.");
            this.byteLength = i;
            this._bytes = [];
            this._bytes.length = i;
            for (i = 0; i < this.byteLength; i += 1) this._bytes[i] = 0;
            configureProperties(this);
        };
        global.ArrayBuffer = global.ArrayBuffer || DataView;
        var chains = function() {}, k = makeTypedArrayConstructor(1, packUint8, unpackUint8), length = makeTypedArrayConstructor(1, packU8, unpackU8), next = makeTypedArrayConstructor(1, packU8Clamped, unpackU8), v = makeTypedArrayConstructor(2, packInt16, unpackInt16), x = makeTypedArrayConstructor(2, packUint16, unpackUint16), _i = makeTypedArrayConstructor(4, packI32, unpackI32), _j = makeTypedArrayConstructor(4, packU32, unpackU32), _ref2 = makeTypedArrayConstructor(4, packFloat32, unpackFloat32), _ref3 = makeTypedArrayConstructor(8, packFloat64, unpackFloat64);
        global.Int8Array = global.Int8Array || k;
        global.Uint8Array = global.Uint8Array || length;
        global.Uint8ClampedArray = global.Uint8ClampedArray || next;
        global.Int16Array = global.Int16Array || v;
        global.Uint16Array = global.Uint16Array || x;
        global.Int32Array = global.Int32Array || _i;
        global.Uint32Array = global.Uint32Array || _j;
        global.Float32Array = global.Float32Array || _ref2;
        global.Float64Array = global.Float64Array || _ref3;
    })();
    (function() {
        function r(array, index) {
            return ECMAScript.IsCallable(array.get) ? array.get(index) : array[index];
        }
        function makeGetter(arrayType) {
            return function(byteOffset, littleEndian) {
                byteOffset = ECMAScript.ToUint32(byteOffset);
                if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) throw new RangeError("Array index out of range");
                byteOffset += this.byteOffset;
                var uint8Array = new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT), bytes = [], i;
                for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) bytes.push(r(uint8Array, i));
                Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN) && bytes.reverse();
                return r(new arrayType(new Uint8Array(bytes).buffer), 0);
            };
        }
        function makeSetter(arrayType) {
            return function(byteOffset, value, littleEndian) {
                byteOffset = ECMAScript.ToUint32(byteOffset);
                if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) throw new RangeError("Array index out of range");
                value = new arrayType([ value ]);
                value = new Uint8Array(value.buffer);
                var bytes = [], i;
                for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) bytes.push(r(value, i));
                Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN) && bytes.reverse();
                new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT).set(bytes);
            };
        }
        var IS_BIG_ENDIAN = function() {
            var result = new Uint16Array([ 4660 ]), result = new Uint8Array(result.buffer);
            return 18 === r(result, 0);
        }(), DataView = function(buffer, byteOffset, length) {
            if (0 === arguments.length) buffer = new ArrayBuffer(0); else if (!(buffer instanceof ArrayBuffer || "ArrayBuffer" === ECMAScript.Class(buffer))) throw new TypeError("TypeError");
            this.buffer = buffer || new ArrayBuffer(0);
            this.byteOffset = ECMAScript.ToUint32(byteOffset);
            if (this.byteOffset > this.buffer.byteLength) throw new RangeError("byteOffset out of range");
            this.byteLength = 3 > arguments.length ? this.buffer.byteLength - this.byteOffset : ECMAScript.ToUint32(length);
            if (this.byteOffset + this.byteLength > this.buffer.byteLength) throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
            configureProperties(this);
        };
        DataView.prototype.getUint8 = makeGetter(Uint8Array);
        DataView.prototype.getInt8 = makeGetter(Int8Array);
        DataView.prototype.getUint16 = makeGetter(Uint16Array);
        DataView.prototype.getInt16 = makeGetter(Int16Array);
        DataView.prototype.getUint32 = makeGetter(Uint32Array);
        DataView.prototype.getInt32 = makeGetter(Int32Array);
        DataView.prototype.getFloat32 = makeGetter(Float32Array);
        DataView.prototype.getFloat64 = makeGetter(Float64Array);
        DataView.prototype.setUint8 = makeSetter(Uint8Array);
        DataView.prototype.setInt8 = makeSetter(Int8Array);
        DataView.prototype.setUint16 = makeSetter(Uint16Array);
        DataView.prototype.setInt16 = makeSetter(Int16Array);
        DataView.prototype.setUint32 = makeSetter(Uint32Array);
        DataView.prototype.setInt32 = makeSetter(Int32Array);
        DataView.prototype.setFloat32 = makeSetter(Float32Array);
        DataView.prototype.setFloat64 = makeSetter(Float64Array);
        global.DataView = global.DataView || DataView;
    })();
})(this);

!function(view) {
    var CanvasPrototype = view.HTMLCanvasElement && view.HTMLCanvasElement.prototype, len;
    if (len = view.Blob) try {
        len = Boolean(new Blob());
    } catch (e) {
        len = !1;
    }
    var hasBlobConstructor = len;
    if (len = hasBlobConstructor && view.Uint8Array) try {
        len = 100 === new Blob([ new Uint8Array(100) ]).size;
    } catch (g) {
        len = !1;
    }
    var length = len, BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || view.MSBlobBuilder, dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && view.atob && view.ArrayBuffer && view.Uint8Array && function(dataURI) {
        var x, data, ret, i, a, o;
        x = 0 <= dataURI.split(",")[0].indexOf("base64") ? atob(dataURI.split(",")[1]) : decodeURIComponent(dataURI.split(",")[1]);
        data = new ArrayBuffer(x.length);
        ret = new Uint8Array(data);
        for (i = 0; i < x.length; i += 1) ret[i] = x.charCodeAt(i);
        return a = dataURI.split(",")[0].split(":")[1].split(";")[0], hasBlobConstructor ? new Blob([ length ? ret : data ], {
            type: a
        }) : (o = new BlobBuilder(), o.append(data), o.getBlob(a));
    };
    view.HTMLCanvasElement && !CanvasPrototype.toBlob && (CanvasPrototype.mozGetAsFile ? CanvasPrototype.toBlob = function(callback, type, quality) {
        quality && CanvasPrototype.toDataURL && dataURLtoBlob ? callback(dataURLtoBlob(this.toDataURL(type, quality))) : callback(this.mozGetAsFile("blob", type));
    } : CanvasPrototype.toDataURL && dataURLtoBlob && (CanvasPrototype.toBlob = function(callback, type, quality) {
        callback(dataURLtoBlob(this.toDataURL(type, quality)));
    }));
    "function" == typeof define && define.amd ? define(function() {
        return dataURLtoBlob;
    }) : view.dataURLtoBlob = dataURLtoBlob;
}(this);

var saveAs = saveAs || "undefined" !== typeof navigator && navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator) || function(view) {
    if ("undefined" === typeof navigator || !/MSIE [1-9]\./.test(navigator.userAgent)) {
        var doc = view.document, i = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"), u = "download" in i, click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent("click", !0, !1, view, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null);
            node.dispatchEvent(event);
        }, limit = view.webkitRequestFileSystem, req_fs = view.requestFileSystem || limit || view.mozRequestFileSystem, v = function(pos) {
            (view.setImmediate || view.setTimeout)(function() {
                throw pos;
            }, 0);
        }, fs_min_size = 0, push = function(stream) {
            var cleanup = function() {
                "string" === typeof stream ? (view.URL || view.webkitURL || view).revokeObjectURL(stream) : stream.remove();
            };
            view.chrome ? cleanup() : setTimeout(cleanup, 500);
        }, dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            for (var i = event_types.length; i--; ) {
                var listener = filesaver["on" + event_types[i]];
                if ("function" === typeof listener) try {
                    listener.call(filesaver, event || filesaver);
                } catch (model) {
                    v(model);
                }
            }
        }, FileSaver = function(blob, name) {
            var filesaver = this, type = blob.type, blob_changed = !1, object_url, target_view, get_object_url = function() {
                dispatch(filesaver, [ "writestart", "progress", "write", "writeend" ]);
            }, fs_error = function() {
                if (blob_changed || !object_url) object_url = (view.URL || view.webkitURL || view).createObjectURL(blob);
                target_view ? target_view.location.href = object_url : void 0 == view.open(object_url, "_blank") && "undefined" !== typeof safari && (view.location.href = object_url);
                filesaver.readyState = filesaver.DONE;
                get_object_url();
                push(object_url);
            }, abortable = function(func) {
                return function() {
                    if (filesaver.readyState !== filesaver.DONE) return func.apply(this, arguments);
                };
            }, create_if_not_found = {
                create: !0,
                exclusive: !1
            }, slice;
            filesaver.readyState = filesaver.INIT;
            name || (name = "download");
            if (u) object_url = (view.URL || view.webkitURL || view).createObjectURL(blob), 
            i.href = object_url, i.download = name, click(i), filesaver.readyState = filesaver.DONE, 
            get_object_url(), push(object_url); else {
                view.chrome && type && "application/octet-stream" !== type && (slice = blob.slice || blob.webkitSlice, 
                blob = slice.call(blob, 0, blob.size, "application/octet-stream"), blob_changed = !0);
                limit && "download" !== name && (name += ".download");
                if ("application/octet-stream" === type || limit) target_view = view;
                req_fs ? (fs_min_size += blob.size, req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                    fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                        var save = function() {
                            dir.getFile(name, create_if_not_found, abortable(function(file) {
                                file.createWriter(abortable(function(writer) {
                                    writer.onwriteend = function(event) {
                                        target_view.location.href = file.toURL();
                                        filesaver.readyState = filesaver.DONE;
                                        dispatch(filesaver, "writeend", event);
                                        push(file);
                                    };
                                    writer.onerror = function() {
                                        var error = writer.error;
                                        error.code !== error.ABORT_ERR && fs_error();
                                    };
                                    [ "writestart", "progress", "write", "abort" ].forEach(function(event) {
                                        writer["on" + event] = filesaver["on" + event];
                                    });
                                    writer.write(blob);
                                    filesaver.abort = function() {
                                        writer.abort();
                                        filesaver.readyState = filesaver.DONE;
                                    };
                                    filesaver.readyState = filesaver.WRITING;
                                }), fs_error);
                            }), fs_error);
                        };
                        dir.getFile(name, {
                            create: !1
                        }, abortable(function(file) {
                            file.remove();
                            save();
                        }), abortable(function(ex) {
                            ex.code === ex.NOT_FOUND_ERR ? save() : fs_error();
                        }));
                    }), fs_error);
                }), fs_error)) : fs_error();
            }
        }, FS_proto = FileSaver.prototype;
        FS_proto.abort = function() {
            this.readyState = this.DONE;
            dispatch(this, "abort");
        };
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;
        FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
        return function(blob, name) {
            return new FileSaver(blob, name);
        };
    }
}("undefined" !== typeof self && self || "undefined" !== typeof window && window || this.content);

"undefined" !== typeof module && module.exports ? module.exports = saveAs : "undefined" !== typeof define && null !== define && null != define.amd && define([], function() {
    return saveAs;
});

var hidden, visibilityChange;

"undefined" !== typeof document.hidden ? (hidden = "hidden", visibilityChange = "visibilitychange") : "undefined" !== typeof document.mozHidden ? (hidden = "mozHidden", 
visibilityChange = "mozvisibilitychange") : "undefined" !== typeof document.msHidden ? (hidden = "msHidden", 
visibilityChange = "msvisibilitychange") : "undefined" !== typeof document.webkitHidden && (hidden = "webkitHidden", 
visibilityChange = "webkitvisibilitychange");

function handleVisibilityChange() {
    document[hidden] ? pageHidden() : pageVisible();
}

"undefined" === typeof pageVisible && (pageVisible = function() {
    console.log("pageVisible not implemented");
});

"undefined" === typeof pageHidden && (pageHidden = function() {
    console.log("pageHidden not implemented");
});

"undefined" === typeof hidden ? (window.onfocus = function() {
    pageVisible();
}, window.onblur = function() {
    pageHidden();
}) : document.addEventListener(visibilityChange, handleVisibilityChange, !1);

window.console || (console = {
    log: function(str) {
        addLog(str);
    }
});

var touchstart = "touchstart", touchmove = "touchmove", touchend = "touchend";

window.navigator.msPointerEnabled && (0 < window.navigator.maxTouchPoints || 0 < window.navigator.msMaxTouchPoints) && (touchstart = "MSPointerDown", 
touchmove = "MSPointerMove", touchend = "MSPointerUp");

(function() {
    var init = function() {
        var data = Array.prototype.slice.call(this.getContext("2d").getImageData(0, 0, this.width, this.height).data), w = this.width, h = this.height, stream = [ 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82 ];
        Array.prototype.push.apply(stream, w.bytes32());
        Array.prototype.push.apply(stream, h.bytes32());
        stream.push(8, 6, 0, 0, 0);
        Array.prototype.push.apply(stream, stream.crc32(12, 17).bytes32());
        for (var len = h * (4 * w + 1), i = 0; i < h; i++) data.splice(i * (4 * w + 1), 0, 0);
        w = Math.ceil(len / 32768);
        Array.prototype.push.apply(stream, (len + 5 * w + 6).bytes32());
        h = stream.length;
        i = len + 5 * w + 6 + 4;
        stream.push(73, 68, 65, 84, 120, 1);
        for (var x = 0; x < w; x++) {
            var c = Math.min(32768, len - 32768 * x);
            stream.push(x == w - 1 ? 1 : 0);
            Array.prototype.push.apply(stream, c.bytes16sw());
            Array.prototype.push.apply(stream, (~c).bytes16sw());
            c = data.slice(32768 * x, 32768 * x + c);
            Array.prototype.push.apply(stream, c);
        }
        Array.prototype.push.apply(stream, data.adler32().bytes32());
        Array.prototype.push.apply(stream, stream.crc32(h, i).bytes32());
        stream.push(0, 0, 0, 0, 73, 69, 78, 68);
        Array.prototype.push.apply(stream, stream.crc32(stream.length - 4, 4).bytes32());
        return "data:image/png;base64," + btoa(stream.map(function(c) {
            return String.fromCharCode(c);
        }).join(""));
    }, tdu = HTMLCanvasElement.prototype.toDataURL;
    HTMLCanvasElement.prototype.toDataURL = function(opt_type) {
        slow_mode = !1;
        var res = tdu.apply(this, arguments);
        if ("data:," == res) return slow_mode = !0, HTMLCanvasElement.prototype.toDataURL = init, 
        this.toDataURL();
        HTMLCanvasElement.prototype.toDataURL = tdu;
        return res;
    };
})();

Storage.prototype.setObject = function(key, value) {
    this.setItem(key, JSON.stringify(value));
};

Storage.prototype.getObject = function(key) {
    return (key = this.getItem(key)) && JSON.parse(key);
};

Number.prototype.toUInt = function() {
    return 0 > this ? this + 4294967296 : this;
};

Number.prototype.bytes32 = function() {
    return [ this >>> 24 & 255, this >>> 16 & 255, this >>> 8 & 255, this & 255 ];
};

Number.prototype.bytes16sw = function() {
    return [ this & 255, this >>> 8 & 255 ];
};

function isTouchDevice() {
    return !!("ontouchstart" in window);
}

function hasClass(obj, cls) {
    return obj && "undefined" != typeof obj.className ? obj.className.match(new RegExp("(\\s|^)" + cls + "(\\s|$)")) : !1;
}

function removeClass(node, cls) {
    node && "undefined" != typeof node.className && hasClass(node, cls) && (node.className = node.className.replace(new RegExp("(\\s|^)" + cls + "(\\s|$)"), " ").trim());
}

function addClass(element, name) {
    element && !hasClass(element, name) && (element.className = ((element.className || "") + " " + name).trim());
}

function is_child_of(buff_size, node) {
    if (null != node) for (;node.parentNode; ) if ((node = node.parentNode) == buff_size) return !0;
    return !1;
}

function fixOnMouseOut(e, lhs, d) {
    var rhs = null;
    e.toElement ? rhs = e.toElement : e.relatedTarget && (rhs = e.relatedTarget);
    is_child_of(lhs, rhs) || lhs == rhs || d();
}

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    name = new RegExp("[\\?&]" + name + "=([^&#]*)").exec(window.location.search);
    return null == name ? "" : decodeURIComponent(name[1].replace(/\+/g, " "));
}

function getHashParameterByName(a) {
    return decodeURIComponent((RegExp("[#|&]" + a + "=(.+?)(&|$)").exec(window.location.hash) || [ , "" ])[1]);
}

function elementThousandSeparate() {
    if (1 == arguments.length) arguments[0].value = thousandSeperate(arguments[0].value); else if (2 == arguments.length) document.getElementById(arguments[1]).innerHTML = thousandSeperate(document.getElementById(arguments[0]).value); else return !1;
}

function sortSelect(box) {
    for (var result = [], i = 0; i < box.options.length; i++) {
        result[i] = [];
        result[i][0] = box.options[i].text;
        for (var value = [], j = 0; j < box.options[i].attributes.length; j++) value.push({
            name: box.options[i].attributes[j].name,
            value: box.options[i].attributes[j].value
        });
        result[i][1] = value;
    }
    for (result.sort(); 0 < box.options.length; ) box.options[0] = null;
    for (i = 0; i < result.length; i++) for (value = new Option(result[i][0]), box.options[i] = value, 
    j = 0; j < result[i][1].length; j++) box.options[i].setAttribute(result[i][1][j].name, result[i][1][j].value);
}

function updateElementHTML(nodeID, newhtml) {
    var node = document.getElementById(nodeID);
    "undefined" != typeof node && null != node && (node.innerHTML = newhtml);
}

function isPlaceholderSupported() {
    return "placeholder" in document.createElement("input");
}

function makePlaceholder(input, text) {
    isPlaceholderSupported() || "" != input.value || (input.value = text, observeElement(input, "focus", function() {
        input.value == text && (input.value = "");
    }), observeElement(input, "blur", function() {
        "" == input.value && (input.value = text);
    }));
}

function observeElement(object, event, fn) {
    object.attachEvent ? object.attachEvent("on" + event, fn) : object.addEventListener(event, fn, !1);
}

if (!window.CustomEvent || "function" !== typeof window.CustomEvent) {
    var CustomEvent = function(event, params) {
        var evt;
        params = params || {
            bubbles: !1,
            cancelable: !1,
            detail: void 0
        };
        evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    };
    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
}

var EventEmitter = {
    emit: function(element, event, action) {
        event = new CustomEvent(event, {
            detail: action
        });
        element.dispatchEvent(event);
    }
};

function setKypsis(name, value, n) {
    var d = new Date();
    d.setDate(d.getDate() + n);
    value = escape(value) + (null == n ? "" : "; expires=" + d.toUTCString());
    document.cookie = name + "=" + value;
}

function getKypsis(c_name) {
    var i, x, y, ARRcookies = document.cookie.split(";");
    for (i = 0; i < ARRcookies.length; i++) if (x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("=")), 
    y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1), x = x.replace(/^\s+|\s+$/g, ""), 
    x == c_name) return unescape(y);
}

function loadRecaptcha() {
    "undefined" == typeof Recaptcha && (LazyLoad.js("https://www.google.com/recaptcha/api/js/recaptcha_ajax.js", function() {}), 
    setTimeout(function() {
        loadRecaptcha();
    }, 5e3));
}

function sendRequest(url, callback, postData, fncError) {
    var xhr = createXMLHTTPObject();
    xhr && (xhr.open(postData ? "POST" : "GET", url, !0), postData && xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), 
    xhr.onreadystatechange = function() {
        if (4 == xhr.readyState) {
            if (200 != xhr.status && 304 != xhr.status) return fncError();
            callback(xhr);
        }
    }, 4 != xhr.readyState && xhr.send(postData));
}

var XMLHttpFactories = [ function() {
    return new XMLHttpRequest();
}, function() {
    return new ActiveXObject("Msxml2.XMLHTTP");
}, function() {
    return new ActiveXObject("Msxml3.XMLHTTP");
}, function() {
    return new ActiveXObject("Microsoft.XMLHTTP");
} ];

function createXMLHTTPObject() {
    for (var xmlhttp = !1, i = 0; i < XMLHttpFactories.length; i++) {
        try {
            xmlhttp = XMLHttpFactories[i]();
        } catch (d) {
            continue;
        }
        break;
    }
    return xmlhttp;
}

function loadJSON(href, callback, next) {
    try {
        sendRequest(href, function(response) {
            callback(JSON.parse(response.response || response.responseText));
        }, void 0, function() {
            "undefined" !== typeof next && next();
        });
    } catch (e) {
        "undefined" !== typeof next && next();
    }
}

var interactiveArrows = {};

function interactiveArrow(a, d, args, e, c, f) {
    clearTimeout(interactiveArrows[a]);
    "undefined" == typeof f && (f = timestamp());
    if (!(c < timestamp() - f || d())) {
        var arr = "up" == e.toLowerCase() ? 27 : 28, arr = Magic[arr].animation;
        if ("string" == typeof args.id) {
            clearTimeout(interactiveArrows[a + "blink"]);
            var element = document.getElementById(args.id);
            addClass(element, "blink");
            interactiveArrows[a + "blink"] = setTimeout(function() {
                removeClass(element, "blink");
            }, 500);
        } else "string" == typeof args.menu ? addAnimation(arr, void 0, void 0, void 0, PlayerQuests.positions.menu_by_name(args.menu)) : addAnimation(arr, args.i - 1, args.j + 1, args.map);
        interactiveArrows[a] = setTimeout(function() {
            interactiveArrow(a, d, args, e, c, f);
        }, 440);
    }
}

function bindOnPress($fields, fxn) {
    var a = !1, r = !1, b = 0, l = 0;
    $fields.addEventListener("click", function(e) {
        r || fxn(e);
    });
    $fields.addEventListener(touchstart, function(e) {
        r = !0;
        a = !1;
        b = e.clientX || e.touches[0].clientX;
        l = e.clientY || e.touches[0].clientY;
    });
    $fields.addEventListener(touchmove, function(e) {
        a = 15 < Math.abs((e.clientX || e.touches[0].clientX) - b) || 15 < Math.abs((e.clientY || e.touches[0].clientY) - l) ? !0 : !1;
    });
    $fields.addEventListener(touchend, function(e) {
        e.preventDefault();
        a || fxn(e);
    });
}

var Notifications = {
    options: function() {
        return {
            icon: "http://mo.ee/48x48.png"
        };
    },
    supported: function() {
        return "pokki" != getParameterByName("inapp") && "Notification" in window ? !0 : !1;
    },
    enabled: function() {
        return "granted" == Notification.permission;
    },
    show: function(title) {
        if ("pokki" == getParameterByName("inapp")) return !1;
        if ("Notification" in window) "denied" != Notification.permission && ("default" != Notification.permission || Notifications.dialog_shown || (Popup.dialog("Accept to receive desktop notifications when you are tabbed out about <font color='" + COLOR.TEAL + "'>2x experience events</font>, <font color='" + COLOR.YELLOW + "'>whispers</font> and <font color='" + COLOR.RED + "'>captchas.</font>", null_function, "biggest"), 
        Notifications.dialog_shown = !0), "granted" == Notification.permission ? Notifications.create(title) : Notification.requestPermission(function() {
            Notification.create(title);
        })); else if (window.navigator.vibrate) try {
            window.navigator.vibrate(200);
        } catch (b) {}
    },
    create: function(data) {
        if (!isActive) {
            var item = Notifications.options();
            item.body = data;
            var n = new Notification("RPG MO", item);
            n.onshow = function() {
                setTimeout(function() {
                    n.close();
                }, 1e4);
            };
            n.onclick = function() {
                SpectateWindow.active && SpectateWindow.hide_iframe();
                window.focus();
            };
            Music.sound_effect("notification");
        }
    },
    dialog_shown: !1
}, Fullscreen = {
    supported: function() {
        return document.body.requestFullscreen || document.body.webkitRequestFullScreen || document.body.mozRequestFullScreen || document.body.msRequestFullscreen;
    },
    slave_supported: function() {
        return document.body.webkitRequestFullScreen;
    },
    is_enabled: function() {
        return document.fullscreenElement || document.webkitIsFullScreen || document.mozFullScreenElement || document.msFullscreenElement || SpectateWindow.fullscreen;
    },
    request: function() {
        document.body.requestFullscreen ? document.body.requestFullscreen() : document.body.mozRequestFullScreen ? document.body.mozRequestFullScreen() : document.body.webkitRequestFullScreen ? document.body.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT) : document.body.msRequestFullscreen && document.body.msRequestFullscreen();
    },
    toggle: function() {
        Fullscreen.is_enabled() ? Fullscreen.exit() : Fullscreen.request();
    },
    exit: function() {
        document.exitFullScreen ? document.exitFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullScreen ? document.msExitFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen();
    },
    add_listeners: function() {
        document.addEventListener("webkitfullscreenchange", function() {
            setCanvasSize(!0);
            SpectateWindow.sendMessage({
                action: "fullscreen_slave",
                fullscreen: document.webkitIsFullScreen
            });
        }, !1);
        document.addEventListener("mozfullscreenchange", function() {
            setCanvasSize(!0);
            SpectateWindow.sendMessage({
                action: "fullscreen_slave",
                fullscreen: document.mozFullScreenElement
            });
        }, !1);
        document.addEventListener("msfullscreenchange", function() {
            setCanvasSize(!0);
            SpectateWindow.sendMessage({
                action: "fullscreen_slave",
                fullscreen: document.msFullscreenElement
            });
        }, !1);
        document.addEventListener("fullscreenchange", function() {
            setCanvasSize(!0);
            SpectateWindow.sendMessage({
                action: "fullscreen_slave",
                fullscreen: document.fullscreenElement
            });
        }, !1);
    }
};

(function() {
    function init(valueAccessor) {
        valueAccessor || (valueAccessor = Math.random);
        this.p = new Uint8Array(256);
        this.perm = new Uint8Array(512);
        this.permMod12 = new Uint8Array(512);
        for (var i = 0; 256 > i; i++) this.p[i] = 256 * valueAccessor();
        for (i = 0; 512 > i; i++) this.perm[i] = this.p[i & 255], this.permMod12[i] = this.perm[i] % 12;
    }
    var w = .5 * (Math.sqrt(3) - 1), d = (3 - Math.sqrt(3)) / 6, f = 1 / 3, r = 1 / 6, o = (Math.sqrt(5) - 1) / 4, i = (5 - Math.sqrt(5)) / 20;
    init.prototype = {
        grad3: new Float32Array([ 1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1 ]),
        grad4: new Float32Array([ 0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0 ]),
        noise2D: function(s, xx) {
            var r = this.permMod12, i = this.perm, m = this.grad3, index = 0, k = 0, l = 0, x = (s + xx) * w, len = Math.floor(s + x), j = Math.floor(xx + x), x = (len + j) * d, tx = s - (len - x), ty = xx - (j - x), a, y;
            tx > ty ? (a = 1, y = 0) : (a = 0, y = 1);
            var v0 = tx - a + d, v1 = ty - y + d, x = tx - 1 + 2 * d, v3 = ty - 1 + 2 * d, len = len & 255, j = j & 255, start = .5 - tx * tx - ty * ty;
            0 <= start && (index = 3 * r[len + i[j]], start *= start, index = start * start * (m[index] * tx + m[index + 1] * ty));
            tx = .5 - v0 * v0 - v1 * v1;
            0 <= tx && (k = 3 * r[len + a + i[j + y]], tx *= tx, k = tx * tx * (m[k] * v0 + m[k + 1] * v1));
            v0 = .5 - x * x - v3 * v3;
            0 <= v0 && (r = 3 * r[len + 1 + i[j + 1]], v0 *= v0, l = v0 * v0 * (m[r] * x + m[r + 1] * v3));
            return 70 * (index + k + l);
        },
        noise3D: function(w, xin, yin) {
            var i = this.permMod12, a = this.perm, mat = this.grad3, d, x, s = (w + xin + yin) * f, p = Math.floor(w + s), n = Math.floor(xin + s), j = Math.floor(yin + s), s = (p + n + j) * r;
            d = w - (p - s);
            var content = xin - (n - s), max = yin - (j - s), row, h, y, _i, _len, _ref;
            d >= content ? content >= max ? (row = 1, y = h = 0, _len = _i = 1, _ref = 0) : (d >= max ? (row = 1, 
            y = h = 0) : (h = row = 0, y = 1), _i = 1, _len = 0, _ref = 1) : content < max ? (h = row = 0, 
            y = 1, _i = 0, _ref = _len = 1) : d < max ? (row = 0, h = 1, _i = y = 0, _ref = _len = 1) : (row = 0, 
            h = 1, y = 0, _len = _i = 1, _ref = 0);
            x = d - row + r;
            var z = content - h + r, signTheta2 = max - y + r;
            w = d - _i + 2 * r;
            var scale_y = content - _len + 2 * r, scale_z = max - _ref + 2 * r;
            yin = d - 1 + 3 * r;
            xin = content - 1 + 3 * r;
            var s = max - 1 + 3 * r, p = p & 255, n = n & 255, j = j & 255, min = .6 - d * d - content * content - max * max;
            if (0 > min) d = 0; else {
                var offset = 3 * i[p + a[n + a[j]]], min = min * min;
                d = min * min * (mat[offset] * d + mat[offset + 1] * content + mat[offset + 2] * max);
            }
            content = .6 - x * x - z * z - signTheta2 * signTheta2;
            0 > content ? x = 0 : (row = 3 * i[p + row + a[n + h + a[j + y]]], content *= content, 
            x = content * content * (mat[row] * x + mat[row + 1] * z + mat[row + 2] * signTheta2));
            z = .6 - w * w - scale_y * scale_y - scale_z * scale_z;
            0 > z ? w = 0 : (_i = 3 * i[p + _i + a[n + _len + a[j + _ref]]], z *= z, w = z * z * (mat[_i] * w + mat[_i + 1] * scale_y + mat[_i + 2] * scale_z));
            scale_y = .6 - yin * yin - xin * xin - s * s;
            0 > scale_y ? mat = 0 : (i = 3 * i[p + 1 + a[n + 1 + a[j + 1]]], scale_y *= scale_y, 
            mat = scale_y * scale_y * (mat[i] * yin + mat[i + 1] * xin + mat[i + 2] * s));
            return 32 * (d + x + w + mat);
        },
        noise4D: function(a, c, b, r) {
            var m = this.perm, data = this.grad4, width, height, x, n = (a + c + b + r) * o, w = Math.floor(a + n), h = Math.floor(c + n), j = Math.floor(b + n), k = Math.floor(r + n), n = (w + h + j + k) * i;
            width = a - (w - n);
            height = c - (h - n);
            var offset = b - (j - n), max = r - (k - n);
            r = b = n = c = 0;
            width > height ? c++ : n++;
            width > offset ? c++ : b++;
            width > max ? c++ : r++;
            height > offset ? n++ : b++;
            height > max ? n++ : r++;
            offset > max ? b++ : r++;
            var idx, len, length, v, p, val, _i, _len, _ref2, _ref3;
            idx = 3 <= c ? 1 : 0;
            len = 3 <= n ? 1 : 0;
            length = 3 <= b ? 1 : 0;
            v = 3 <= r ? 1 : 0;
            x = 2 <= c ? 1 : 0;
            p = 2 <= n ? 1 : 0;
            val = 2 <= b ? 1 : 0;
            _i = 2 <= r ? 1 : 0;
            a = 1 <= c ? 1 : 0;
            _len = 1 <= n ? 1 : 0;
            _ref2 = 1 <= b ? 1 : 0;
            _ref3 = 1 <= r ? 1 : 0;
            var eventName = width - idx + i, args = height - len + i, _j = offset - length + i, _k = max - v + i, _ref = width - x + 2 * i, _ref1 = height - p + 2 * i, _results = offset - val + 2 * i, _results1 = max - _i + 2 * i, x2 = width - a + 3 * i, y2 = height - _len + 3 * i, multiplier = offset - _ref2 + 3 * i, TO_RADIANS = max - _ref3 + 3 * i;
            r = width - 1 + 4 * i;
            b = height - 1 + 4 * i;
            n = offset - 1 + 4 * i;
            c = max - 1 + 4 * i;
            var w = w & 255, h = h & 255, j = j & 255, k = k & 255, d = .6 - width * width - height * height - offset * offset - max * max;
            if (0 > d) width = 0; else {
                var index = m[w + m[h + m[j + m[k]]]] % 32 * 4, d = d * d;
                width = d * d * (data[index] * width + data[index + 1] * height + data[index + 2] * offset + data[index + 3] * max);
            }
            height = .6 - eventName * eventName - args * args - _j * _j - _k * _k;
            0 > height ? height = 0 : (offset = m[w + idx + m[h + len + m[j + length + m[k + v]]]] % 32 * 4, 
            height *= height, height = height * height * (data[offset] * eventName + data[offset + 1] * args + data[offset + 2] * _j + data[offset + 3] * _k));
            offset = .6 - _ref * _ref - _ref1 * _ref1 - _results * _results - _results1 * _results1;
            0 > offset ? x = 0 : (x = m[w + x + m[h + p + m[j + val + m[k + _i]]]] % 32 * 4, 
            offset *= offset, x = offset * offset * (data[x] * _ref + data[x + 1] * _ref1 + data[x + 2] * _results + data[x + 3] * _results1));
            p = .6 - x2 * x2 - y2 * y2 - multiplier * multiplier - TO_RADIANS * TO_RADIANS;
            0 > p ? a = 0 : (a = m[w + a + m[h + _len + m[j + _ref2 + m[k + _ref3]]]] % 32 * 4, 
            p *= p, a = p * p * (data[a] * x2 + data[a + 1] * y2 + data[a + 2] * multiplier + data[a + 3] * TO_RADIANS));
            _len = .6 - r * r - b * b - n * n - c * c;
            0 > _len ? data = 0 : (m = m[w + 1 + m[h + 1 + m[j + 1 + m[k + 1]]]] % 32 * 4, _len *= _len, 
            data = _len * _len * (data[m] * r + data[m + 1] * b + data[m + 2] * n + data[m + 3] * c));
            return 27 * (width + height + x + a + data);
        }
    };
    "undefined" !== typeof define && define.amd ? define(function() {
        return init;
    }) : "undefined" !== typeof window && (window.SimplexNoise = init);
    "undefined" !== typeof exports && (exports.SimplexNoise = init);
    "undefined" !== typeof module && (module.exports = init);
})();

(function(global, pool, math, width, chunks, digits) {
    function ARC4(key) {
        var tmp, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
        for (keylen || (key = [ keylen++ ]); i < width; ) s[i] = i++;
        for (i = 0; i < width; i++) s[i] = s[j = mask & j + key[i % keylen] + (tmp = s[i])], 
        s[j] = tmp;
        (me.g = function(count) {
            for (var c, r = 0, i = me.i, j = me.j, s = me.S; count--; ) c = s[i = mask & i + 1], 
            r = r * width + s[mask & (s[i] = s[j = mask & j + c]) + (s[j] = c)];
            me.i = i;
            me.j = j;
            return r;
        })(width);
    }
    function flatten(obj, depth) {
        var result = [], typ = (typeof obj)[0], prop;
        if (depth && "o" == typ) for (prop in obj) try {
            result.push(flatten(obj[prop], depth - 1));
        } catch (g) {}
        return result.length ? result : "s" == typ ? obj : obj + "\x00";
    }
    function mixkey(seed, key) {
        for (var stringseed = seed + "", smear, j = 0; j < stringseed.length; ) key[mask & j] = mask & (smear ^= 19 * key[mask & j]) + stringseed.charCodeAt(j++);
        return tostring(key);
    }
    function autoseed(seed) {
        try {
            return global.crypto.getRandomValues(seed = new Uint8Array(width)), tostring(seed);
        } catch (f) {
            return [ +new Date(), global, global.navigator && global.navigator.plugins || Math.random().toString(), global.screen, tostring(pool) ];
        }
    }
    function tostring(a) {
        return String.fromCharCode.apply(0, a);
    }
    var startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = 2 * significance, mask = width - 1;
    math.seedrandom = function(seed, use_entropy) {
        var key = [], newObj = mixkey(flatten(use_entropy ? [ seed, tostring(pool) ] : 0 in arguments ? seed : autoseed(), 3), key), arc4 = new ARC4(key);
        mixkey(tostring(arc4.S), pool);
        math.random = function() {
            for (var n = arc4.g(chunks), d = startdenom, x = 0; n < significance; ) n = (n + x) * width, 
            d *= width, x = arc4.g(1);
            for (;n >= overflow; ) n /= 2, d /= 2, x >>>= 1;
            return (n + x) / d;
        };
        return newObj;
    };
    mixkey(math.random(), pool);
})(this, [], Math, 256, 6, 52);

var JSON;

JSON || (JSON = {});

(function() {
    function a(a) {
        return 10 > a ? "0" + a : a;
    }
    function b(s) {
        f.lastIndex = 0;
        return f.test(s) ? '"' + s.replace(f, function(i) {
            var type = l[i];
            return "string" === typeof type ? type : "\\u" + ("0000" + i.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + s + '"';
    }
    function d(e, c) {
        var i, n, h, l, j = g, f, x = c[e];
        x && "object" === typeof x && "function" === typeof x.toJSON && (x = x.toJSON(e));
        "function" === typeof m && (x = m.call(c, e, x));
        switch (typeof x) {
          case "string":
            return b(x);

          case "number":
            return isFinite(x) ? String(x) : "null";

          case "boolean":
          case "null":
            return String(x);

          case "object":
            if (!x) return "null";
            g += k;
            f = [];
            if ("[object Array]" === Object.prototype.toString.apply(x)) {
                l = x.length;
                for (i = 0; i < l; i += 1) f[i] = d(i, x) || "null";
                h = 0 === f.length ? "[]" : g ? "[\n" + g + f.join(",\n" + g) + "\n" + j + "]" : "[" + f.join(",") + "]";
                g = j;
                return h;
            }
            if (m && "object" === typeof m) for (l = m.length, i = 0; i < l; i += 1) "string" === typeof m[i] && (n = m[i], 
            (h = d(n, x)) && f.push(b(n) + (g ? ": " : ":") + h)); else for (n in x) Object.prototype.hasOwnProperty.call(x, n) && (h = d(n, x)) && f.push(b(n) + (g ? ": " : ":") + h);
            h = 0 === f.length ? "{}" : g ? "{\n" + g + f.join(",\n" + g) + "\n" + j + "}" : "{" + f.join(",") + "}";
            g = j;
            return h;
        }
    }
    "function" !== typeof Date.prototype.toJSON && (Date.prototype.toJSON = function(key) {
        return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "Z" : null;
    }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
        return this.valueOf();
    });
    var e = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, f = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, g, k, l = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, m;
    "function" !== typeof JSON.stringify && (JSON.stringify = function(a, b, c) {
        var i;
        k = g = "";
        if ("number" === typeof c) for (i = 0; i < c; i += 1) k += " "; else "string" === typeof c && (k = c);
        if ((m = b) && "function" !== typeof b && ("object" !== typeof b || "number" !== typeof b.length)) throw Error("JSON.stringify");
        return d("", {
            "": a
        });
    });
    "function" !== typeof JSON.parse && (JSON.parse = function(a, b) {
        function d(a, c) {
            var n, v, o = a[c];
            if (o && "object" === typeof o) for (n in o) Object.prototype.hasOwnProperty.call(o, n) && (v = d(o, n), 
            void 0 !== v ? o[n] = v : delete o[n]);
            return b.call(a, c, o);
        }
        var f;
        a = String(a);
        e.lastIndex = 0;
        e.test(a) && (a = a.replace(e, function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }));
        if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return f = eval("(" + a + ")"), 
        "function" === typeof b ? d({
            "": f
        }, "") : f;
        throw new SyntaxError("JSON.parse");
    });
})();

var chrsz = 8;

function safe_add(x, y) {
    var lsw = (x & 65535) + (y & 65535);
    return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
}

function S(mem, rotate) {
    return mem >>> rotate | mem << 32 - rotate;
}

function R(operator, status) {
    return operator >>> status;
}

function Ch(a, b, c) {
    return a & b ^ ~a & c;
}

function Maj(a, b, c) {
    return a & b ^ a & c ^ b & c;
}

function Sigma0256(result) {
    return S(result, 2) ^ S(result, 13) ^ S(result, 22);
}

function Sigma1256(result) {
    return S(result, 6) ^ S(result, 11) ^ S(result, 25);
}

function Gamma0256(x) {
    return S(x, 7) ^ S(x, 18) ^ R(x, 3);
}

function Gamma1256(x) {
    return S(x, 17) ^ S(x, 19) ^ R(x, 10);
}

function core_sha256(x, len) {
    var b = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ], H = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ], w = Array(64), d, c, f, g, e, i, j, h, l, index, n, o;
    x[len >> 5] |= 128 << 24 - len % 32;
    x[(len + 64 >> 9 << 4) + 15] = len;
    for (l = 0; l < x.length; l += 16) {
        d = H[0];
        c = H[1];
        f = H[2];
        g = H[3];
        e = H[4];
        i = H[5];
        j = H[6];
        h = H[7];
        for (index = 0; 64 > index; index++) w[index] = 16 > index ? x[index + l] : safe_add(safe_add(safe_add(Gamma1256(w[index - 2]), w[index - 7]), Gamma0256(w[index - 15])), w[index - 16]), 
        n = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, i, j)), b[index]), w[index]), 
        o = safe_add(Sigma0256(d), Maj(d, c, f)), h = j, j = i, i = e, e = safe_add(g, n), 
        g = f, f = c, c = d, d = safe_add(n, o);
        H[0] = safe_add(d, H[0]);
        H[1] = safe_add(c, H[1]);
        H[2] = safe_add(f, H[2]);
        H[3] = safe_add(g, H[3]);
        H[4] = safe_add(e, H[4]);
        H[5] = safe_add(i, H[5]);
        H[6] = safe_add(j, H[6]);
        H[7] = safe_add(h, H[7]);
    }
    return H;
}

function str2binb(str) {
    for (var bin = [], mask = (1 << chrsz) - 1, i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 24 - i % 32;
    return bin;
}

function binb2hex(binarray) {
    for (var str = "", i = 0; i < 4 * binarray.length; i++) str += "0123456789abcdef".charAt(binarray[i >> 2] >> 8 * (3 - i % 4) + 4 & 15) + "0123456789abcdef".charAt(binarray[i >> 2] >> 8 * (3 - i % 4) & 15);
    return str;
}

function hex_sha256(s) {
    return binb2hex(core_sha256(str2binb(s), s.length * chrsz));
}

LazyLoad = function(doc) {
    function createNode(tag, attrs) {
        var node = doc.createElement(tag), attr;
        for (attr in attrs) attrs.hasOwnProperty(attr) && node.setAttribute(attr, attrs[attr]);
        return node;
    }
    function finish(type) {
        var p = pending[type], callback, urls;
        p && (callback = p.callback, urls = p.urls, urls.shift(), pollCount = 0, urls.length || (callback && callback.call(p.context, p.obj), 
        pending[type] = null, queue[type].length && load(type)));
    }
    function getEnv() {
        var ua = navigator.userAgent;
        env = {
            async: !0 === doc.createElement("script").async
        };
        (env.webkit = /AppleWebKit\//.test(ua)) || (env.ie = /MSIE|Trident/.test(ua)) || (env.opera = /Opera/.test(ua)) || (env.gecko = /Gecko\//.test(ua)) || (env.unknown = !0);
    }
    function load(type, urls, url, req, path) {
        var _finish = function() {
            finish(type);
        }, isCSS = "css" === type, nodes = [], i, len, node, p;
        env || getEnv();
        if (urls) if (urls = "string" === typeof urls ? [ urls ] : urls.concat(), isCSS || env.async || env.gecko || env.opera) queue[type].push({
            urls: urls,
            callback: url,
            obj: req,
            context: path
        }); else for (i = 0, len = urls.length; i < len; ++i) queue[type].push({
            urls: [ urls[i] ],
            callback: i === len - 1 ? url : null,
            obj: req,
            context: path
        });
        if (!pending[type] && (p = pending[type] = queue[type].shift())) {
            head || (head = doc.head || doc.getElementsByTagName("head")[0]);
            urls = p.urls;
            i = 0;
            for (len = urls.length; i < len; ++i) url = urls[i], isCSS ? node = env.gecko ? createNode("style") : createNode("link", {
                href: url,
                rel: "stylesheet"
            }) : (node = createNode("script", {
                src: url
            }), node.async = !1), node.className = "lazyload", node.setAttribute("charset", "utf-8"), 
            env.ie && !isCSS && "onreadystatechange" in node && !("draggable" in node) ? node.onreadystatechange = function() {
                /loaded|complete/.test(node.readyState) && (node.onreadystatechange = null, _finish());
            } : isCSS && (env.gecko || env.webkit) ? env.webkit ? (p.urls[i] = node.href, pollWebKit()) : (node.innerHTML = '@import "' + url + '";', 
            pollGecko(node)) : node.onload = node.onerror = _finish, nodes.push(node);
            i = 0;
            for (len = nodes.length; i < len; ++i) head.appendChild(nodes[i]);
        }
    }
    function pollGecko(node) {
        var hasRules;
        try {
            hasRules = !!node.sheet.cssRules;
        } catch (e) {
            pollCount += 1;
            200 > pollCount ? setTimeout(function() {
                pollGecko(node);
            }, 50) : hasRules && finish("css");
            return;
        }
        finish("css");
    }
    function pollWebKit() {
        var css = pending.css, i;
        if (css) {
            for (i = styleSheets.length; 0 <= --i; ) if (styleSheets[i].href === css.urls[0]) {
                finish("css");
                break;
            }
            pollCount += 1;
            css && (200 > pollCount ? setTimeout(pollWebKit, 50) : finish("css"));
        }
    }
    var env, head, pending = {}, pollCount = 0, queue = {
        css: [],
        js: []
    }, styleSheets = doc.styleSheets;
    return {
        css: function(urls, callback, obj, context) {
            load("css", urls, callback, obj, context);
        },
        js: function(urls, callback, obj, context) {
            load("js", urls, callback, obj, context);
        }
    };
}(this.document);

var Handlebars = {};

(function(Handlebars, path) {
    Handlebars.VERSION = "1.0.0";
    Handlebars.COMPILER_REVISION = 4;
    Handlebars.REVISION_CHANGES = {
        1: "<= 1.0.rc.2",
        2: "== 1.0.0-rc.3",
        3: "== 1.0.0-rc.4",
        4: ">= 1.0.0"
    };
    Handlebars.helpers = {};
    Handlebars.partials = {};
    var uki = Object.prototype.toString;
    Handlebars.registerHelper = function(name, fn, inverse) {
        if ("[object Object]" === uki.call(name)) {
            if (inverse || fn) throw new Handlebars.Exception("Arg not supported with multiple helpers");
            Handlebars.Utils.extend(this.helpers, name);
        } else inverse && (fn.not = inverse), this.helpers[name] = fn;
    };
    Handlebars.registerPartial = function(name, str) {
        "[object Object]" === uki.call(name) ? Handlebars.Utils.extend(this.partials, name) : this.partials[name] = str;
    };
    Handlebars.registerHelper("helperMissing", function(arg) {
        if (2 === arguments.length) return path;
        throw Error("Missing helper: '" + arg + "'");
    });
    Handlebars.registerHelper("blockHelperMissing", function(context, done) {
        var inverse = done.inverse || function() {}, fn = done.fn, type = uki.call(context);
        "[object Function]" === type && (context = context.call(this));
        return !0 === context ? fn(this) : !1 === context || null == context ? inverse(this) : "[object Array]" === type ? 0 < context.length ? Handlebars.helpers.each(context, done) : inverse(this) : fn(context);
    });
    Handlebars.K = function() {};
    Handlebars.createFrame = Object.create || function(object) {
        Handlebars.K.prototype = object;
        object = new Handlebars.K();
        Handlebars.K.prototype = null;
        return object;
    };
    Handlebars.logger = {
        DEBUG: 0,
        INFO: 1,
        WARN: 2,
        ERROR: 3,
        level: 3,
        methodMap: {
            0: "debug",
            1: "info",
            2: "warn",
            3: "error"
        },
        log: function(level, obj) {
            if (Handlebars.logger.level <= level) {
                var method = Handlebars.logger.methodMap[level];
                "undefined" !== typeof console && console[method] && console[method].call(console, obj);
            }
        }
    };
    Handlebars.log = function(level, obj) {
        Handlebars.logger.log(level, obj);
    };
    Handlebars.registerHelper("each", function(context, block) {
        var fn = block.fn, inverse = block.inverse, i = 0, ret = "", data;
        "[object Function]" === uki.call(context) && (context = context.call(this));
        block.data && (data = Handlebars.createFrame(block.data));
        if (context && "object" === typeof context) if (context instanceof Array) for (var key = context.length; i < key; i++) data && (data.index = i), 
        ret += fn(context[i], {
            data: data
        }); else for (key in context) context.hasOwnProperty(key) && (data && (data.key = key), 
        ret += fn(context[key], {
            data: data
        }), i++);
        0 === i && (ret = inverse(this));
        return ret;
    });
    Handlebars.registerHelper("if", function(context, block) {
        "[object Function]" === uki.call(context) && (context = context.call(this));
        return !context || Handlebars.Utils.isEmpty(context) ? block.inverse(this) : block.fn(this);
    });
    Handlebars.registerHelper("unless", function(context, block) {
        return Handlebars.helpers["if"].call(this, context, {
            fn: block.inverse,
            inverse: block.fn
        });
    });
    Handlebars.registerHelper("with", function(context, fn) {
        "[object Function]" === uki.call(context) && (context = context.call(this));
        if (!Handlebars.Utils.isEmpty(context)) return fn.fn(context);
    });
    Handlebars.registerHelper("log", function(context, block) {
        var level = block.data && null != block.data.level ? parseInt(block.data.level, 10) : 1;
        Handlebars.log(level, context);
    });
    var types = function() {
        function Parser() {
            this.yy = {};
        }
        var parser = {
            trace: function() {},
            yy: {},
            symbols_: {
                error: 2,
                root: 3,
                program: 4,
                EOF: 5,
                simpleInverse: 6,
                statements: 7,
                statement: 8,
                openInverse: 9,
                closeBlock: 10,
                openBlock: 11,
                mustache: 12,
                partial: 13,
                CONTENT: 14,
                COMMENT: 15,
                OPEN_BLOCK: 16,
                inMustache: 17,
                CLOSE: 18,
                OPEN_INVERSE: 19,
                OPEN_ENDBLOCK: 20,
                path: 21,
                OPEN: 22,
                OPEN_UNESCAPED: 23,
                CLOSE_UNESCAPED: 24,
                OPEN_PARTIAL: 25,
                partialName: 26,
                params: 27,
                hash: 28,
                dataName: 29,
                param: 30,
                STRING: 31,
                INTEGER: 32,
                BOOLEAN: 33,
                hashSegments: 34,
                hashSegment: 35,
                ID: 36,
                EQUALS: 37,
                DATA: 38,
                pathSegments: 39,
                SEP: 40,
                $accept: 0,
                $end: 1
            },
            terminals_: {
                2: "error",
                5: "EOF",
                14: "CONTENT",
                15: "COMMENT",
                16: "OPEN_BLOCK",
                18: "CLOSE",
                19: "OPEN_INVERSE",
                20: "OPEN_ENDBLOCK",
                22: "OPEN",
                23: "OPEN_UNESCAPED",
                24: "CLOSE_UNESCAPED",
                25: "OPEN_PARTIAL",
                31: "STRING",
                32: "INTEGER",
                33: "BOOLEAN",
                36: "ID",
                37: "EQUALS",
                38: "DATA",
                40: "SEP"
            },
            productions_: [ 0, [ 3, 2 ], [ 4, 2 ], [ 4, 3 ], [ 4, 2 ], [ 4, 1 ], [ 4, 1 ], [ 4, 0 ], [ 7, 1 ], [ 7, 2 ], [ 8, 3 ], [ 8, 3 ], [ 8, 1 ], [ 8, 1 ], [ 8, 1 ], [ 8, 1 ], [ 11, 3 ], [ 9, 3 ], [ 10, 3 ], [ 12, 3 ], [ 12, 3 ], [ 13, 3 ], [ 13, 4 ], [ 6, 2 ], [ 17, 3 ], [ 17, 2 ], [ 17, 2 ], [ 17, 1 ], [ 17, 1 ], [ 27, 2 ], [ 27, 1 ], [ 30, 1 ], [ 30, 1 ], [ 30, 1 ], [ 30, 1 ], [ 30, 1 ], [ 28, 1 ], [ 34, 2 ], [ 34, 1 ], [ 35, 3 ], [ 35, 3 ], [ 35, 3 ], [ 35, 3 ], [ 35, 3 ], [ 26, 1 ], [ 26, 1 ], [ 26, 1 ], [ 29, 2 ], [ 21, 1 ], [ 39, 3 ], [ 39, 1 ] ],
            performAction: function($0, position, dataX, yy, fID, $$, dataClose) {
                $0 = $$.length - 1;
                switch (fID) {
                  case 1:
                    return $$[$0 - 1];

                  case 2:
                    this.$ = new yy.ProgramNode([], $$[$0]);
                    break;

                  case 3:
                    this.$ = new yy.ProgramNode($$[$0 - 2], $$[$0]);
                    break;

                  case 4:
                    this.$ = new yy.ProgramNode($$[$0 - 1], []);
                    break;

                  case 5:
                    this.$ = new yy.ProgramNode($$[$0]);
                    break;

                  case 6:
                    this.$ = new yy.ProgramNode([], []);
                    break;

                  case 7:
                    this.$ = new yy.ProgramNode([]);
                    break;

                  case 8:
                    this.$ = [ $$[$0] ];
                    break;

                  case 9:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 10:
                    this.$ = new yy.BlockNode($$[$0 - 2], $$[$0 - 1].inverse, $$[$0 - 1], $$[$0]);
                    break;

                  case 11:
                    this.$ = new yy.BlockNode($$[$0 - 2], $$[$0 - 1], $$[$0 - 1].inverse, $$[$0]);
                    break;

                  case 12:
                    this.$ = $$[$0];
                    break;

                  case 13:
                    this.$ = $$[$0];
                    break;

                  case 14:
                    this.$ = new yy.ContentNode($$[$0]);
                    break;

                  case 15:
                    this.$ = new yy.CommentNode($$[$0]);
                    break;

                  case 16:
                    this.$ = new yy.MustacheNode($$[$0 - 1][0], $$[$0 - 1][1]);
                    break;

                  case 17:
                    this.$ = new yy.MustacheNode($$[$0 - 1][0], $$[$0 - 1][1]);
                    break;

                  case 18:
                    this.$ = $$[$0 - 1];
                    break;

                  case 19:
                    this.$ = new yy.MustacheNode($$[$0 - 1][0], $$[$0 - 1][1], "&" === $$[$0 - 2][2]);
                    break;

                  case 20:
                    this.$ = new yy.MustacheNode($$[$0 - 1][0], $$[$0 - 1][1], !0);
                    break;

                  case 21:
                    this.$ = new yy.PartialNode($$[$0 - 1]);
                    break;

                  case 22:
                    this.$ = new yy.PartialNode($$[$0 - 2], $$[$0 - 1]);
                    break;

                  case 24:
                    this.$ = [ [ $$[$0 - 2] ].concat($$[$0 - 1]), $$[$0] ];
                    break;

                  case 25:
                    this.$ = [ [ $$[$0 - 1] ].concat($$[$0]), null ];
                    break;

                  case 26:
                    this.$ = [ [ $$[$0 - 1] ], $$[$0] ];
                    break;

                  case 27:
                    this.$ = [ [ $$[$0] ], null ];
                    break;

                  case 28:
                    this.$ = [ [ $$[$0] ], null ];
                    break;

                  case 29:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 30:
                    this.$ = [ $$[$0] ];
                    break;

                  case 31:
                    this.$ = $$[$0];
                    break;

                  case 32:
                    this.$ = new yy.StringNode($$[$0]);
                    break;

                  case 33:
                    this.$ = new yy.IntegerNode($$[$0]);
                    break;

                  case 34:
                    this.$ = new yy.BooleanNode($$[$0]);
                    break;

                  case 35:
                    this.$ = $$[$0];
                    break;

                  case 36:
                    this.$ = new yy.HashNode($$[$0]);
                    break;

                  case 37:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;

                  case 38:
                    this.$ = [ $$[$0] ];
                    break;

                  case 39:
                    this.$ = [ $$[$0 - 2], $$[$0] ];
                    break;

                  case 40:
                    this.$ = [ $$[$0 - 2], new yy.StringNode($$[$0]) ];
                    break;

                  case 41:
                    this.$ = [ $$[$0 - 2], new yy.IntegerNode($$[$0]) ];
                    break;

                  case 42:
                    this.$ = [ $$[$0 - 2], new yy.BooleanNode($$[$0]) ];
                    break;

                  case 43:
                    this.$ = [ $$[$0 - 2], $$[$0] ];
                    break;

                  case 44:
                    this.$ = new yy.PartialNameNode($$[$0]);
                    break;

                  case 45:
                    this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0]));
                    break;

                  case 46:
                    this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0]));
                    break;

                  case 47:
                    this.$ = new yy.DataNode($$[$0]);
                    break;

                  case 48:
                    this.$ = new yy.IdNode($$[$0]);
                    break;

                  case 49:
                    $$[$0 - 2].push({
                        part: $$[$0],
                        separator: $$[$0 - 1]
                    });
                    this.$ = $$[$0 - 2];
                    break;

                  case 50:
                    this.$ = [ {
                        part: $$[$0]
                    } ];
                }
            },
            table: [ {
                3: 1,
                4: 2,
                5: [ 2, 7 ],
                6: 3,
                7: 4,
                8: 6,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 5 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                1: [ 3 ]
            }, {
                5: [ 1, 17 ]
            }, {
                5: [ 2, 6 ],
                7: 18,
                8: 6,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 19 ],
                20: [ 2, 6 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                5: [ 2, 5 ],
                6: 20,
                8: 21,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 5 ],
                20: [ 2, 5 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                17: 23,
                18: [ 1, 22 ],
                21: 24,
                29: 25,
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                5: [ 2, 8 ],
                14: [ 2, 8 ],
                15: [ 2, 8 ],
                16: [ 2, 8 ],
                19: [ 2, 8 ],
                20: [ 2, 8 ],
                22: [ 2, 8 ],
                23: [ 2, 8 ],
                25: [ 2, 8 ]
            }, {
                4: 29,
                6: 3,
                7: 4,
                8: 6,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 5 ],
                20: [ 2, 7 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                4: 30,
                6: 3,
                7: 4,
                8: 6,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 5 ],
                20: [ 2, 7 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                5: [ 2, 12 ],
                14: [ 2, 12 ],
                15: [ 2, 12 ],
                16: [ 2, 12 ],
                19: [ 2, 12 ],
                20: [ 2, 12 ],
                22: [ 2, 12 ],
                23: [ 2, 12 ],
                25: [ 2, 12 ]
            }, {
                5: [ 2, 13 ],
                14: [ 2, 13 ],
                15: [ 2, 13 ],
                16: [ 2, 13 ],
                19: [ 2, 13 ],
                20: [ 2, 13 ],
                22: [ 2, 13 ],
                23: [ 2, 13 ],
                25: [ 2, 13 ]
            }, {
                5: [ 2, 14 ],
                14: [ 2, 14 ],
                15: [ 2, 14 ],
                16: [ 2, 14 ],
                19: [ 2, 14 ],
                20: [ 2, 14 ],
                22: [ 2, 14 ],
                23: [ 2, 14 ],
                25: [ 2, 14 ]
            }, {
                5: [ 2, 15 ],
                14: [ 2, 15 ],
                15: [ 2, 15 ],
                16: [ 2, 15 ],
                19: [ 2, 15 ],
                20: [ 2, 15 ],
                22: [ 2, 15 ],
                23: [ 2, 15 ],
                25: [ 2, 15 ]
            }, {
                17: 31,
                21: 24,
                29: 25,
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                17: 32,
                21: 24,
                29: 25,
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                17: 33,
                21: 24,
                29: 25,
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                21: 35,
                26: 34,
                31: [ 1, 36 ],
                32: [ 1, 37 ],
                36: [ 1, 28 ],
                39: 26
            }, {
                1: [ 2, 1 ]
            }, {
                5: [ 2, 2 ],
                8: 21,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 19 ],
                20: [ 2, 2 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                17: 23,
                21: 24,
                29: 25,
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                5: [ 2, 4 ],
                7: 38,
                8: 6,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 19 ],
                20: [ 2, 4 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                5: [ 2, 9 ],
                14: [ 2, 9 ],
                15: [ 2, 9 ],
                16: [ 2, 9 ],
                19: [ 2, 9 ],
                20: [ 2, 9 ],
                22: [ 2, 9 ],
                23: [ 2, 9 ],
                25: [ 2, 9 ]
            }, {
                5: [ 2, 23 ],
                14: [ 2, 23 ],
                15: [ 2, 23 ],
                16: [ 2, 23 ],
                19: [ 2, 23 ],
                20: [ 2, 23 ],
                22: [ 2, 23 ],
                23: [ 2, 23 ],
                25: [ 2, 23 ]
            }, {
                18: [ 1, 39 ]
            }, {
                18: [ 2, 27 ],
                21: 44,
                24: [ 2, 27 ],
                27: 40,
                28: 41,
                29: 48,
                30: 42,
                31: [ 1, 45 ],
                32: [ 1, 46 ],
                33: [ 1, 47 ],
                34: 43,
                35: 49,
                36: [ 1, 50 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                18: [ 2, 28 ],
                24: [ 2, 28 ]
            }, {
                18: [ 2, 48 ],
                24: [ 2, 48 ],
                31: [ 2, 48 ],
                32: [ 2, 48 ],
                33: [ 2, 48 ],
                36: [ 2, 48 ],
                38: [ 2, 48 ],
                40: [ 1, 51 ]
            }, {
                21: 52,
                36: [ 1, 28 ],
                39: 26
            }, {
                18: [ 2, 50 ],
                24: [ 2, 50 ],
                31: [ 2, 50 ],
                32: [ 2, 50 ],
                33: [ 2, 50 ],
                36: [ 2, 50 ],
                38: [ 2, 50 ],
                40: [ 2, 50 ]
            }, {
                10: 53,
                20: [ 1, 54 ]
            }, {
                10: 55,
                20: [ 1, 54 ]
            }, {
                18: [ 1, 56 ]
            }, {
                18: [ 1, 57 ]
            }, {
                24: [ 1, 58 ]
            }, {
                18: [ 1, 59 ],
                21: 60,
                36: [ 1, 28 ],
                39: 26
            }, {
                18: [ 2, 44 ],
                36: [ 2, 44 ]
            }, {
                18: [ 2, 45 ],
                36: [ 2, 45 ]
            }, {
                18: [ 2, 46 ],
                36: [ 2, 46 ]
            }, {
                5: [ 2, 3 ],
                8: 21,
                9: 7,
                11: 8,
                12: 9,
                13: 10,
                14: [ 1, 11 ],
                15: [ 1, 12 ],
                16: [ 1, 13 ],
                19: [ 1, 19 ],
                20: [ 2, 3 ],
                22: [ 1, 14 ],
                23: [ 1, 15 ],
                25: [ 1, 16 ]
            }, {
                14: [ 2, 17 ],
                15: [ 2, 17 ],
                16: [ 2, 17 ],
                19: [ 2, 17 ],
                20: [ 2, 17 ],
                22: [ 2, 17 ],
                23: [ 2, 17 ],
                25: [ 2, 17 ]
            }, {
                18: [ 2, 25 ],
                21: 44,
                24: [ 2, 25 ],
                28: 61,
                29: 48,
                30: 62,
                31: [ 1, 45 ],
                32: [ 1, 46 ],
                33: [ 1, 47 ],
                34: 43,
                35: 49,
                36: [ 1, 50 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                18: [ 2, 26 ],
                24: [ 2, 26 ]
            }, {
                18: [ 2, 30 ],
                24: [ 2, 30 ],
                31: [ 2, 30 ],
                32: [ 2, 30 ],
                33: [ 2, 30 ],
                36: [ 2, 30 ],
                38: [ 2, 30 ]
            }, {
                18: [ 2, 36 ],
                24: [ 2, 36 ],
                35: 63,
                36: [ 1, 64 ]
            }, {
                18: [ 2, 31 ],
                24: [ 2, 31 ],
                31: [ 2, 31 ],
                32: [ 2, 31 ],
                33: [ 2, 31 ],
                36: [ 2, 31 ],
                38: [ 2, 31 ]
            }, {
                18: [ 2, 32 ],
                24: [ 2, 32 ],
                31: [ 2, 32 ],
                32: [ 2, 32 ],
                33: [ 2, 32 ],
                36: [ 2, 32 ],
                38: [ 2, 32 ]
            }, {
                18: [ 2, 33 ],
                24: [ 2, 33 ],
                31: [ 2, 33 ],
                32: [ 2, 33 ],
                33: [ 2, 33 ],
                36: [ 2, 33 ],
                38: [ 2, 33 ]
            }, {
                18: [ 2, 34 ],
                24: [ 2, 34 ],
                31: [ 2, 34 ],
                32: [ 2, 34 ],
                33: [ 2, 34 ],
                36: [ 2, 34 ],
                38: [ 2, 34 ]
            }, {
                18: [ 2, 35 ],
                24: [ 2, 35 ],
                31: [ 2, 35 ],
                32: [ 2, 35 ],
                33: [ 2, 35 ],
                36: [ 2, 35 ],
                38: [ 2, 35 ]
            }, {
                18: [ 2, 38 ],
                24: [ 2, 38 ],
                36: [ 2, 38 ]
            }, {
                18: [ 2, 50 ],
                24: [ 2, 50 ],
                31: [ 2, 50 ],
                32: [ 2, 50 ],
                33: [ 2, 50 ],
                36: [ 2, 50 ],
                37: [ 1, 65 ],
                38: [ 2, 50 ],
                40: [ 2, 50 ]
            }, {
                36: [ 1, 66 ]
            }, {
                18: [ 2, 47 ],
                24: [ 2, 47 ],
                31: [ 2, 47 ],
                32: [ 2, 47 ],
                33: [ 2, 47 ],
                36: [ 2, 47 ],
                38: [ 2, 47 ]
            }, {
                5: [ 2, 10 ],
                14: [ 2, 10 ],
                15: [ 2, 10 ],
                16: [ 2, 10 ],
                19: [ 2, 10 ],
                20: [ 2, 10 ],
                22: [ 2, 10 ],
                23: [ 2, 10 ],
                25: [ 2, 10 ]
            }, {
                21: 67,
                36: [ 1, 28 ],
                39: 26
            }, {
                5: [ 2, 11 ],
                14: [ 2, 11 ],
                15: [ 2, 11 ],
                16: [ 2, 11 ],
                19: [ 2, 11 ],
                20: [ 2, 11 ],
                22: [ 2, 11 ],
                23: [ 2, 11 ],
                25: [ 2, 11 ]
            }, {
                14: [ 2, 16 ],
                15: [ 2, 16 ],
                16: [ 2, 16 ],
                19: [ 2, 16 ],
                20: [ 2, 16 ],
                22: [ 2, 16 ],
                23: [ 2, 16 ],
                25: [ 2, 16 ]
            }, {
                5: [ 2, 19 ],
                14: [ 2, 19 ],
                15: [ 2, 19 ],
                16: [ 2, 19 ],
                19: [ 2, 19 ],
                20: [ 2, 19 ],
                22: [ 2, 19 ],
                23: [ 2, 19 ],
                25: [ 2, 19 ]
            }, {
                5: [ 2, 20 ],
                14: [ 2, 20 ],
                15: [ 2, 20 ],
                16: [ 2, 20 ],
                19: [ 2, 20 ],
                20: [ 2, 20 ],
                22: [ 2, 20 ],
                23: [ 2, 20 ],
                25: [ 2, 20 ]
            }, {
                5: [ 2, 21 ],
                14: [ 2, 21 ],
                15: [ 2, 21 ],
                16: [ 2, 21 ],
                19: [ 2, 21 ],
                20: [ 2, 21 ],
                22: [ 2, 21 ],
                23: [ 2, 21 ],
                25: [ 2, 21 ]
            }, {
                18: [ 1, 68 ]
            }, {
                18: [ 2, 24 ],
                24: [ 2, 24 ]
            }, {
                18: [ 2, 29 ],
                24: [ 2, 29 ],
                31: [ 2, 29 ],
                32: [ 2, 29 ],
                33: [ 2, 29 ],
                36: [ 2, 29 ],
                38: [ 2, 29 ]
            }, {
                18: [ 2, 37 ],
                24: [ 2, 37 ],
                36: [ 2, 37 ]
            }, {
                37: [ 1, 65 ]
            }, {
                21: 69,
                29: 73,
                31: [ 1, 70 ],
                32: [ 1, 71 ],
                33: [ 1, 72 ],
                36: [ 1, 28 ],
                38: [ 1, 27 ],
                39: 26
            }, {
                18: [ 2, 49 ],
                24: [ 2, 49 ],
                31: [ 2, 49 ],
                32: [ 2, 49 ],
                33: [ 2, 49 ],
                36: [ 2, 49 ],
                38: [ 2, 49 ],
                40: [ 2, 49 ]
            }, {
                18: [ 1, 74 ]
            }, {
                5: [ 2, 22 ],
                14: [ 2, 22 ],
                15: [ 2, 22 ],
                16: [ 2, 22 ],
                19: [ 2, 22 ],
                20: [ 2, 22 ],
                22: [ 2, 22 ],
                23: [ 2, 22 ],
                25: [ 2, 22 ]
            }, {
                18: [ 2, 39 ],
                24: [ 2, 39 ],
                36: [ 2, 39 ]
            }, {
                18: [ 2, 40 ],
                24: [ 2, 40 ],
                36: [ 2, 40 ]
            }, {
                18: [ 2, 41 ],
                24: [ 2, 41 ],
                36: [ 2, 41 ]
            }, {
                18: [ 2, 42 ],
                24: [ 2, 42 ],
                36: [ 2, 42 ]
            }, {
                18: [ 2, 43 ],
                24: [ 2, 43 ],
                36: [ 2, 43 ]
            }, {
                5: [ 2, 18 ],
                14: [ 2, 18 ],
                15: [ 2, 18 ],
                16: [ 2, 18 ],
                19: [ 2, 18 ],
                20: [ 2, 18 ],
                22: [ 2, 18 ],
                23: [ 2, 18 ],
                25: [ 2, 18 ]
            } ],
            defaultActions: {
                17: [ 2, 1 ]
            },
            parseError: function(ex, str) {
                throw Error(ex);
            },
            parse: function(yyloc) {
                var stack = [ 0 ], vstack = [ null ], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0;
                this.lexer.setInput(yyloc);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                "undefined" == typeof this.lexer.yylloc && (this.lexer.yylloc = {});
                yyloc = this.lexer.yylloc;
                lstack.push(yyloc);
                var ranges = this.lexer.options && this.lexer.options.ranges;
                "function" === typeof this.yy.parseError && (this.parseError = this.yy.parseError);
                for (var symbol, data, state, action, yyval = {}, p, len; ;) {
                    state = stack[stack.length - 1];
                    if (this.defaultActions[state]) action = this.defaultActions[state]; else {
                        if (null === symbol || "undefined" == typeof symbol) symbol = void 0, symbol = this.lexer.lex() || 1, 
                        "number" !== typeof symbol && (symbol = this.symbols_[symbol] || symbol);
                        action = table[state] && table[state][symbol];
                    }
                    if ("undefined" === typeof action || !action.length || !action[0]) {
                        var errStr = "";
                        if (!recovering) {
                            len = [];
                            for (p in table[state]) this.terminals_[p] && 2 < p && len.push("'" + this.terminals_[p] + "'");
                            errStr = this.lexer.showPosition ? "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + len.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'" : "Parse error on line " + (yylineno + 1) + ": Unexpected " + (1 == symbol ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                            this.parseError(errStr, {
                                text: this.lexer.match,
                                token: this.terminals_[symbol] || symbol,
                                line: this.lexer.yylineno,
                                loc: yyloc,
                                expected: len
                            });
                        }
                    }
                    if (action[0] instanceof Array && 1 < action.length) throw Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                    switch (action[0]) {
                      case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        data ? (symbol = data, data = null) : (yyleng = this.lexer.yyleng, yytext = this.lexer.yytext, 
                        yylineno = this.lexer.yylineno, yyloc = this.lexer.yylloc, 0 < recovering && recovering--);
                        break;

                      case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        ranges && (yyval._$.range = [ lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1] ]);
                        state = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if ("undefined" !== typeof state) return state;
                        len && (stack = stack.slice(0, -2 * len), vstack = vstack.slice(0, -1 * len), lstack = lstack.slice(0, -1 * len));
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        action = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(action);
                        break;

                      case 3:
                        return !0;
                    }
                }
            }
        }, lexer = function() {
            return {
                EOF: 1,
                parseError: function(error, hash) {
                    if (this.yy.parser) this.yy.parser.parseError(error, hash); else throw Error(error);
                },
                setInput: function(input) {
                    this._input = input;
                    this._more = this._less = this.done = !1;
                    this.yylineno = this.yyleng = 0;
                    this.yytext = this.matched = this.match = "";
                    this.conditionStack = [ "INITIAL" ];
                    this.yylloc = {
                        first_line: 1,
                        first_column: 0,
                        last_line: 1,
                        last_column: 0
                    };
                    this.options.ranges && (this.yylloc.range = [ 0, 0 ]);
                    this.offset = 0;
                    return this;
                },
                input: function() {
                    var ch = this._input[0];
                    this.yytext += ch;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch;
                    this.matched += ch;
                    ch.match(/(?:\r\n?|\n).*/g) ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++;
                    this.options.ranges && this.yylloc.range[1]++;
                    this._input = this._input.slice(1);
                    return ch;
                },
                unput: function(oldLines) {
                    var len = oldLines.length, lines = oldLines.split(/(?:\r\n?|\n)/g);
                    this._input = oldLines + this._input;
                    this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                    this.offset -= len;
                    oldLines = this.match.split(/(?:\r\n?|\n)/g);
                    this.match = this.match.substr(0, this.match.length - 1);
                    this.matched = this.matched.substr(0, this.matched.length - 1);
                    lines.length - 1 && (this.yylineno -= lines.length - 1);
                    var r = this.yylloc.range;
                    this.yylloc = {
                        first_line: this.yylloc.first_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.first_column,
                        last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                    };
                    this.options.ranges && (this.yylloc.range = [ r[0], r[0] + this.yyleng - len ]);
                    return this;
                },
                more: function() {
                    this._more = !0;
                    return this;
                },
                less: function(n) {
                    this.unput(this.match.slice(n));
                },
                pastInput: function() {
                    var past = this.matched.substr(0, this.matched.length - this.match.length);
                    return (20 < past.length ? "..." : "") + past.substr(-20).replace(/\n/g, "");
                },
                upcomingInput: function() {
                    var next = this.match;
                    20 > next.length && (next += this._input.substr(0, 20 - next.length));
                    return (next.substr(0, 20) + (20 < next.length ? "..." : "")).replace(/\n/g, "");
                },
                showPosition: function() {
                    var pre = this.pastInput(), c = Array(pre.length + 1).join("-");
                    return pre + this.upcomingInput() + "\n" + c + "^";
                },
                next: function() {
                    if (this.done) return this.EOF;
                    this._input || (this.done = !0);
                    var match, lines, i;
                    this._more || (this.match = this.yytext = "");
                    for (var rules = this._currentRules(), index = 0; index < rules.length && (!(lines = this._input.match(this.rules[rules[index]])) || match && !(lines[0].length > match[0].length) || (match = lines, 
                    i = index, this.options.flex)); index++) ;
                    if (match) {
                        if (lines = match[0].match(/(?:\r\n?|\n).*/g)) this.yylineno += lines.length;
                        this.yylloc = {
                            first_line: this.yylloc.last_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.last_column,
                            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                        };
                        this.yytext += match[0];
                        this.match += match[0];
                        this.matches = match;
                        this.yyleng = this.yytext.length;
                        this.options.ranges && (this.yylloc.range = [ this.offset, this.offset += this.yyleng ]);
                        this._more = !1;
                        this._input = this._input.slice(match[0].length);
                        this.matched += match[0];
                        match = this.performAction.call(this, this.yy, this, rules[i], this.conditionStack[this.conditionStack.length - 1]);
                        this.done && this._input && (this.done = !1);
                        if (match) return match;
                    } else return "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                },
                lex: function() {
                    var nodes = this.next();
                    return "undefined" !== typeof nodes ? nodes : this.lex();
                },
                begin: function(condition) {
                    this.conditionStack.push(condition);
                },
                popState: function() {
                    return this.conditionStack.pop();
                },
                _currentRules: function() {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                },
                topState: function() {
                    return this.conditionStack[this.conditionStack.length - 2];
                },
                pushState: function(condition) {
                    this.begin(condition);
                },
                options: {},
                performAction: function(sender, yy_, command, context) {
                    switch (command) {
                      case 0:
                        return yy_.yytext = "\\", 14;

                      case 1:
                        "\\" !== yy_.yytext.slice(-1) && this.begin("mu");
                        "\\" === yy_.yytext.slice(-1) && (yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 1), 
                        this.begin("emu"));
                        if (yy_.yytext) return 14;
                        break;

                      case 2:
                        return 14;

                      case 3:
                        return "\\" !== yy_.yytext.slice(-1) && this.popState(), "\\" === yy_.yytext.slice(-1) && (yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 1)), 
                        14;

                      case 4:
                        return yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 4), this.popState(), 15;

                      case 5:
                        return 25;

                      case 6:
                        return 16;

                      case 7:
                        return 20;

                      case 8:
                        return 19;

                      case 9:
                        return 19;

                      case 10:
                        return 23;

                      case 11:
                        return 22;

                      case 12:
                        this.popState();
                        this.begin("com");
                        break;

                      case 13:
                        return yy_.yytext = yy_.yytext.substr(3, yy_.yyleng - 5), this.popState(), 15;

                      case 14:
                        return 22;

                      case 15:
                        return 37;

                      case 16:
                        return 36;

                      case 17:
                        return 36;

                      case 18:
                        return 40;

                      case 20:
                        return this.popState(), 24;

                      case 21:
                        return this.popState(), 18;

                      case 22:
                        return yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\"/g, '"'), 31;

                      case 23:
                        return yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2).replace(/\\'/g, "'"), 31;

                      case 24:
                        return 38;

                      case 25:
                        return 33;

                      case 26:
                        return 33;

                      case 27:
                        return 32;

                      case 28:
                        return 36;

                      case 29:
                        return yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2), 36;

                      case 30:
                        return "INVALID";

                      case 31:
                        return 5;
                    }
                },
                rules: [ /^(?:\\\\(?=(\{\{)))/, /^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|$)))/, /^(?:[\s\S]*?--\}\})/, /^(?:\{\{>)/, /^(?:\{\{#)/, /^(?:\{\{\/)/, /^(?:\{\{\^)/, /^(?:\{\{\s*else\b)/, /^(?:\{\{\{)/, /^(?:\{\{&)/, /^(?:\{\{!--)/, /^(?:\{\{![\s\S]*?\}\})/, /^(?:\{\{)/, /^(?:=)/, /^(?:\.(?=[}\/ ]))/, /^(?:\.\.)/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}\}\})/, /^(?:\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=[}\s]))/, /^(?:false(?=[}\s]))/, /^(?:-?[0-9]+(?=[}\s]))/, /^(?:[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.]))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/ ],
                conditions: {
                    mu: {
                        rules: [ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],
                        inclusive: !1
                    },
                    emu: {
                        rules: [ 3 ],
                        inclusive: !1
                    },
                    com: {
                        rules: [ 4 ],
                        inclusive: !1
                    },
                    INITIAL: {
                        rules: [ 0, 1, 2, 31 ],
                        inclusive: !0
                    }
                }
            };
        }();
        parser.lexer = lexer;
        Parser.prototype = parser;
        parser.Parser = Parser;
        return new Parser();
    }();
    Handlebars.Parser = types;
    Handlebars.parse = function(input) {
        if (input.constructor === Handlebars.AST.ProgramNode) return input;
        Handlebars.Parser.yy = Handlebars.AST;
        return Handlebars.Parser.parse(input);
    };
    Handlebars.AST = {};
    Handlebars.AST.ProgramNode = function(statements, inverse) {
        this.type = "program";
        this.statements = statements;
        inverse && (this.inverse = new Handlebars.AST.ProgramNode(inverse));
    };
    Handlebars.AST.MustacheNode = function(params, hash, unescaped) {
        this.type = "mustache";
        this.escaped = !unescaped;
        this.hash = hash;
        unescaped = this.id = params[0];
        params = this.params = params.slice(1);
        this.isHelper = (this.eligibleHelper = unescaped.isSimple) && (params.length || hash);
    };
    Handlebars.AST.PartialNode = function(partialName, context) {
        this.type = "partial";
        this.partialName = partialName;
        this.context = context;
    };
    Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
        var open = mustache.id;
        if (open.original !== close.original) throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
        this.type = "block";
        this.mustache = mustache;
        this.program = program;
        (this.inverse = inverse) && !this.program && (this.isInverse = !0);
    };
    Handlebars.AST.ContentNode = function(string) {
        this.type = "content";
        this.string = string;
    };
    Handlebars.AST.HashNode = function(pairs) {
        this.type = "hash";
        this.pairs = pairs;
    };
    Handlebars.AST.IdNode = function(parts) {
        this.type = "ID";
        for (var ret = "", files = [], f = 0, i = 0, l = parts.length; i < l; i++) {
            var part = parts[i].part, ret = ret + ((parts[i].separator || "") + part);
            if (".." === part || "." === part || "this" === part) {
                if (0 < files.length) throw new Handlebars.Exception("Invalid path: " + ret);
                ".." === part ? f++ : this.isScoped = !0;
            } else files.push(part);
        }
        this.original = ret;
        this.parts = files;
        this.string = files.join(".");
        this.depth = f;
        this.isSimple = 1 === parts.length && !this.isScoped && 0 === f;
        this.stringModeValue = this.string;
    };
    Handlebars.AST.PartialNameNode = function(name) {
        this.type = "PARTIAL_NAME";
        this.name = name.original;
    };
    Handlebars.AST.DataNode = function(id) {
        this.type = "DATA";
        this.id = id;
    };
    Handlebars.AST.StringNode = function(string) {
        this.type = "STRING";
        this.original = this.string = this.stringModeValue = string;
    };
    Handlebars.AST.IntegerNode = function(integer) {
        this.type = "INTEGER";
        this.original = this.integer = integer;
        this.stringModeValue = Number(integer);
    };
    Handlebars.AST.BooleanNode = function(bool) {
        this.type = "BOOLEAN";
        this.bool = bool;
        this.stringModeValue = "true" === bool;
    };
    Handlebars.AST.CommentNode = function(comment) {
        this.type = "comment";
        this.comment = comment;
    };
    var errorProps = "description fileName lineNumber message name number stack".split(" ");
    Handlebars.Exception = function(message) {
        for (var tmp = Error.prototype.constructor.apply(this, arguments), idx = 0; idx < errorProps.length; idx++) this[errorProps[idx]] = tmp[errorProps[idx]];
    };
    Handlebars.Exception.prototype = Error();
    Handlebars.SafeString = function(string) {
        this.string = string;
    };
    Handlebars.SafeString.prototype.toString = function() {
        return this.string.toString();
    };
    var that = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    }, array = /[&<>"'`]/g, possible = /[&<>"'`]/, value = function(d) {
        return that[d] || "&amp;";
    };
    Handlebars.Utils = {
        extend: function(a, b) {
            for (var i in b) b.hasOwnProperty(i) && (a[i] = b[i]);
        },
        escapeExpression: function(string) {
            if (string instanceof Handlebars.SafeString) return string.toString();
            if (null == string || !1 === string) return "";
            string = string.toString();
            return possible.test(string) ? string.replace(array, value) : string;
        },
        isEmpty: function(object) {
            return object || 0 === object ? "[object Array]" === uki.call(object) && 0 === object.length ? !0 : !1 : !0;
        }
    };
    var Compiler = Handlebars.Compiler = function() {}, JavaScriptCompiler = Handlebars.JavaScriptCompiler = function() {};
    Compiler.prototype = {
        compiler: Compiler,
        disassemble: function() {
            for (var a = this.opcodes, e, d = [], data, out, i = 0, l = a.length; i < l; i++) if (e = a[i], 
            "DECLARE" === e.opcode) d.push("DECLARE " + e.name + "=" + e.value); else {
                data = [];
                for (var j = 0; j < e.args.length; j++) out = e.args[j], "string" === typeof out && (out = '"' + out.replace("\n", "\\n") + '"'), 
                data.push(out);
                d.push(e.opcode + " " + data.join(" "));
            }
            return d.join("\n");
        },
        equals: function(other) {
            var len = this.opcodes.length;
            if (other.opcodes.length !== len) return !1;
            for (var i = 0; i < len; i++) {
                var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
                if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) return !1;
                for (var j = 0; j < opcode.args.length; j++) if (opcode.args[j] !== otherOpcode.args[j]) return !1;
            }
            len = this.children.length;
            if (other.children.length !== len) return !1;
            for (i = 0; i < len; i++) if (!this.children[i].equals(other.children[i])) return !1;
            return !0;
        },
        guid: 0,
        compile: function(program, callback) {
            this.children = [];
            this.depths = {
                list: []
            };
            this.options = callback;
            var knownHelpers = this.options.knownHelpers;
            this.options.knownHelpers = {
                helperMissing: !0,
                blockHelperMissing: !0,
                each: !0,
                "if": !0,
                unless: !0,
                "with": !0,
                log: !0
            };
            if (knownHelpers) for (var name in knownHelpers) this.options.knownHelpers[name] = knownHelpers[name];
            return this.program(program);
        },
        accept: function(node) {
            return this[node.type](node);
        },
        program: function(nodes) {
            nodes = nodes.statements;
            var node;
            this.opcodes = [];
            for (var i = 0, l = nodes.length; i < l; i++) node = nodes[i], this[node.type](node);
            this.isSimple = 1 === l;
            this.depths.list = this.depths.list.sort(function(a, b) {
                return a - b;
            });
            return this;
        },
        compileProgram: function(result) {
            result = new this.compiler().compile(result, this.options);
            var guid = this.guid++, depth;
            this.usePartial = this.usePartial || result.usePartial;
            this.children[guid] = result;
            for (var i = 0, l = result.depths.list.length; i < l; i++) depth = result.depths.list[i], 
            2 > depth || this.addDepth(depth - 1);
            return guid;
        },
        block: function(inverse) {
            var mustache = inverse.mustache, program = inverse.program;
            inverse = inverse.inverse;
            program && (program = this.compileProgram(program));
            inverse && (inverse = this.compileProgram(inverse));
            var type = this.classifyMustache(mustache);
            "helper" === type ? this.helperMustache(mustache, program, inverse) : "simple" === type ? (this.simpleMustache(mustache), 
            this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), this.opcode("emptyHash"), 
            this.opcode("blockValue")) : (this.ambiguousMustache(mustache, program, inverse), 
            this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), this.opcode("emptyHash"), 
            this.opcode("ambiguousBlockValue"));
            this.opcode("append");
        },
        hash: function(pairs) {
            pairs = pairs.pairs;
            var pair, val;
            this.opcode("pushHash");
            for (var i = 0, l = pairs.length; i < l; i++) pair = pairs[i], val = pair[1], this.options.stringParams ? (val.depth && this.addDepth(val.depth), 
            this.opcode("getContext", val.depth || 0), this.opcode("pushStringParam", val.stringModeValue, val.type)) : this.accept(val), 
            this.opcode("assignToHash", pair[0]);
            this.opcode("popHash");
        },
        partial: function(data) {
            var partialName = data.partialName;
            this.usePartial = !0;
            data.context ? this.ID(data.context) : this.opcode("push", "depth0");
            this.opcode("invokePartial", partialName.name);
            this.opcode("append");
        },
        content: function(string) {
            this.opcode("appendContent", string.string);
        },
        mustache: function(state) {
            var id = this.options, type = this.classifyMustache(state);
            "simple" === type ? this.simpleMustache(state) : "helper" === type ? this.helperMustache(state) : this.ambiguousMustache(state);
            state.escaped && !id.noEscape ? this.opcode("appendEscaped") : this.opcode("append");
        },
        ambiguousMustache: function(id, name, value) {
            id = id.id;
            var namespace = id.parts[0], isBlock = null != name || null != value;
            this.opcode("getContext", id.depth);
            this.opcode("pushProgram", name);
            this.opcode("pushProgram", value);
            this.opcode("invokeAmbiguous", namespace, isBlock);
        },
        simpleMustache: function(id) {
            id = id.id;
            "DATA" === id.type ? this.DATA(id) : id.parts.length ? this.ID(id) : (this.addDepth(id.depth), 
            this.opcode("getContext", id.depth), this.opcode("pushContext"));
            this.opcode("resolvePossibleLambda");
        },
        helperMustache: function(name, params, finish) {
            params = this.setupFullMustacheParams(name, params, finish);
            name = name.id.parts[0];
            if (this.options.knownHelpers[name]) this.opcode("invokeKnownHelper", params.length, name); else {
                if (this.options.knownHelpersOnly) throw Error("You specified knownHelpersOnly, but used the unknown helper " + name);
                this.opcode("invokeHelper", params.length, name);
            }
        },
        ID: function(id) {
            this.addDepth(id.depth);
            this.opcode("getContext", id.depth);
            id.parts[0] ? this.opcode("lookupOnContext", id.parts[0]) : this.opcode("pushContext");
            for (var i = 1, l = id.parts.length; i < l; i++) this.opcode("lookup", id.parts[i]);
        },
        DATA: function(data) {
            this.options.data = !0;
            if (data.id.isScoped || data.id.depth) throw new Handlebars.Exception("Scoped data references are not supported: " + data.original);
            this.opcode("lookupData");
            data = data.id.parts;
            for (var i = 0, l = data.length; i < l; i++) this.opcode("lookup", data[i]);
        },
        STRING: function(string) {
            this.opcode("pushString", string.string);
        },
        INTEGER: function(integer) {
            this.opcode("pushLiteral", integer.integer);
        },
        BOOLEAN: function(bool) {
            this.opcode("pushLiteral", bool.bool);
        },
        comment: function() {},
        opcode: function(name) {
            this.opcodes.push({
                opcode: name,
                args: [].slice.call(arguments, 1)
            });
        },
        declare: function(name, value) {
            this.opcodes.push({
                opcode: "DECLARE",
                name: name,
                value: value
            });
        },
        addDepth: function(depth) {
            if (isNaN(depth)) throw Error("EWOT");
            0 === depth || this.depths[depth] || (this.depths[depth] = !0, this.depths.list.push(depth));
        },
        classifyMustache: function(mustache) {
            var elem = mustache.isHelper, obj = mustache.eligibleHelper, props = this.options;
            obj && !elem && (props.knownHelpers[mustache.id.parts[0]] ? elem = !0 : props.knownHelpersOnly && (obj = !1));
            return elem ? "helper" : obj ? "ambiguous" : "simple";
        },
        pushParams: function(params) {
            for (var i = params.length, param; i--; ) if (param = params[i], this.options.stringParams) param.depth && this.addDepth(param.depth), 
            this.opcode("getContext", param.depth || 0), this.opcode("pushStringParam", param.stringModeValue, param.type); else this[param.type](param);
        },
        setupMustacheParams: function(mustache) {
            var params = mustache.params;
            this.pushParams(params);
            mustache.hash ? this.hash(mustache.hash) : this.opcode("emptyHash");
            return params;
        },
        setupFullMustacheParams: function(mustache, program, inverse) {
            var params = mustache.params;
            this.pushParams(params);
            this.opcode("pushProgram", program);
            this.opcode("pushProgram", inverse);
            mustache.hash ? this.hash(mustache.hash) : this.opcode("emptyHash");
            return params;
        }
    };
    var Literal = function(value) {
        this.value = value;
    };
    JavaScriptCompiler.prototype = {
        nameLookup: function(prefix, name) {
            return /^[0-9]+$/.test(name) ? prefix + "[" + name + "]" : JavaScriptCompiler.isValidJavaScriptVariableName(name) ? prefix + "." + name : prefix + "['" + name + "']";
        },
        appendToBuffer: function(string) {
            return this.environment.isSimple ? "return " + string + ";" : {
                appendToBuffer: !0,
                content: string,
                toString: function() {
                    return "buffer += " + string + ";";
                }
            };
        },
        initializeBuffer: function() {
            return this.quotedString("");
        },
        namespace: "Handlebars",
        compile: function(attrs, obj, context, asObject) {
            this.environment = attrs;
            this.options = obj || {};
            Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");
            this.name = this.environment.name;
            this.isChild = !!context;
            this.context = context || {
                programs: [],
                environments: [],
                aliases: {}
            };
            this.preamble();
            this.stackSlot = 0;
            this.stackVars = [];
            this.registers = {
                list: []
            };
            this.compileStack = [];
            this.inlineStack = [];
            this.compileChildren(attrs, obj);
            attrs = attrs.opcodes;
            this.i = 0;
            for (l = attrs.length; this.i < l; this.i++) obj = attrs[this.i], "DECLARE" === obj.opcode ? this[obj.name] = obj.value : this[obj.opcode].apply(this, obj.args);
            return this.createFunctionContext(asObject);
        },
        nextOpcode: function() {
            return this.environment.opcodes[this.i + 1];
        },
        eat: function() {
            this.i += 1;
        },
        preamble: function() {
            var out = [];
            if (this.isChild) out.push(""); else {
                var namespace = this.namespace, copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
                this.environment.usePartial && (copies = copies + " partials = this.merge(partials, " + namespace + ".partials);");
                this.options.data && (copies += " data = data || {};");
                out.push(copies);
            }
            this.environment.isSimple ? out.push("") : out.push(", buffer = " + this.initializeBuffer());
            this.lastContext = 0;
            this.source = out;
        },
        createFunctionContext: function(functionSource) {
            var params = this.stackVars.concat(this.registers.list);
            0 < params.length && (this.source[1] = this.source[1] + ", " + params.join(", "));
            if (!this.isChild) for (var i in this.context.aliases) this.context.aliases.hasOwnProperty(i) && (this.source[1] = this.source[1] + ", " + i + "=" + this.context.aliases[i]);
            this.source[1] && (this.source[1] = "var " + this.source[1].substring(2) + ";");
            this.isChild || (this.source[1] += "\n" + this.context.programs.join("\n") + "\n");
            this.environment.isSimple || this.source.push("return buffer;");
            params = this.isChild ? [ "depth0", "data" ] : [ "Handlebars", "depth0", "helpers", "partials", "data" ];
            i = 0;
            for (var l = this.environment.depths.list.length; i < l; i++) params.push("depth" + this.environment.depths.list[i]);
            i = this.mergeSource();
            this.isChild || (l = Handlebars.COMPILER_REVISION, i = "this.compilerInfo = [" + l + ",'" + Handlebars.REVISION_CHANGES[l] + "'];\n" + i);
            if (functionSource) return params.push(i), Function.apply(this, params);
            functionSource = "function " + (this.name || "") + "(" + params.join(",") + ") {\n  " + i + "}";
            Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
            return functionSource;
        },
        mergeSource: function() {
            for (var source = "", buffer, i = 0, len = this.source.length; i < len; i++) {
                var line = this.source[i];
                line.appendToBuffer ? buffer = buffer ? buffer + "\n    + " + line.content : line.content : (buffer && (source += "buffer += " + buffer + ";\n  ", 
                buffer = path), source += line + "\n  ");
            }
            return source;
        },
        blockValue: function() {
            this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
            var params = [ "depth0" ];
            this.setupParams(0, params);
            this.replaceStack(function(current) {
                params.splice(1, 0, current);
                return "blockHelperMissing.call(" + params.join(", ") + ")";
            });
        },
        ambiguousBlockValue: function() {
            this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
            var params = [ "depth0" ];
            this.setupParams(0, params);
            var current = this.topStack();
            params.splice(1, 0, current);
            params[params.length - 1] = "options";
            this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
        },
        appendContent: function(content) {
            this.source.push(this.appendToBuffer(this.quotedString(content)));
        },
        append: function() {
            this.flushInline();
            var local = this.popStack();
            this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
            this.environment.isSimple && this.source.push("else { " + this.appendToBuffer("''") + " }");
        },
        appendEscaped: function() {
            this.context.aliases.escapeExpression = "this.escapeExpression";
            this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
        },
        getContext: function(depth) {
            this.lastContext !== depth && (this.lastContext = depth);
        },
        lookupOnContext: function(name) {
            this.push(this.nameLookup("depth" + this.lastContext, name, "context"));
        },
        pushContext: function() {
            this.pushStackLiteral("depth" + this.lastContext);
        },
        resolvePossibleLambda: function() {
            this.context.aliases.functionType = '"function"';
            this.replaceStack(function(current) {
                return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
            });
        },
        lookup: function(name) {
            this.replaceStack(function(current) {
                return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, "context");
            });
        },
        lookupData: function(id) {
            this.push("data");
        },
        pushStringParam: function(string, type) {
            this.pushStackLiteral("depth" + this.lastContext);
            this.pushString(type);
            "string" === typeof string ? this.pushString(string) : this.pushStackLiteral(string);
        },
        emptyHash: function() {
            this.pushStackLiteral("{}");
            this.options.stringParams && (this.register("hashTypes", "{}"), this.register("hashContexts", "{}"));
        },
        pushHash: function() {
            this.hash = {
                values: [],
                types: [],
                contexts: []
            };
        },
        popHash: function() {
            var hash = this.hash;
            this.hash = path;
            this.options.stringParams && (this.register("hashContexts", "{" + hash.contexts.join(",") + "}"), 
            this.register("hashTypes", "{" + hash.types.join(",") + "}"));
            this.push("{\n    " + hash.values.join(",\n    ") + "\n  }");
        },
        pushString: function(string) {
            this.pushStackLiteral(this.quotedString(string));
        },
        push: function(expr) {
            this.inlineStack.push(expr);
            return expr;
        },
        pushLiteral: function(value) {
            this.pushStackLiteral(value);
        },
        pushProgram: function(guid) {
            null != guid ? this.pushStackLiteral(this.programExpression(guid)) : this.pushStackLiteral(null);
        },
        invokeHelper: function(paramSize, name) {
            this.context.aliases.helperMissing = "helpers.helperMissing";
            var helper = this.lastHelper = this.setupHelper(paramSize, name, !0), nonHelper = this.nameLookup("depth" + this.lastContext, name, "context");
            this.push(helper.name + " || " + nonHelper);
            this.replaceStack(function(name) {
                return name + " ? " + name + ".call(" + helper.callParams + ") : helperMissing.call(" + helper.helperMissingParams + ")";
            });
        },
        invokeKnownHelper: function(paramSize, name) {
            var helper = this.setupHelper(paramSize, name);
            this.push(helper.name + ".call(" + helper.callParams + ")");
        },
        invokeAmbiguous: function(name, helperCall) {
            this.context.aliases.functionType = '"function"';
            this.pushStackLiteral("{}");
            var helper = this.setupHelper(0, name, helperCall), helperName = this.lastHelper = this.nameLookup("helpers", name, "helper"), nonHelper = this.nameLookup("depth" + this.lastContext, name, "context"), nextStack = this.nextStack();
            this.source.push("if (" + nextStack + " = " + helperName + ") { " + nextStack + " = " + nextStack + ".call(" + helper.callParams + "); }");
            this.source.push("else { " + nextStack + " = " + nonHelper + "; " + nextStack + " = typeof " + nextStack + " === functionType ? " + nextStack + ".apply(depth0) : " + nextStack + "; }");
        },
        invokePartial: function(name) {
            name = [ this.nameLookup("partials", name, "partial"), "'" + name + "'", this.popStack(), "helpers", "partials" ];
            this.options.data && name.push("data");
            this.context.aliases.self = "this";
            this.push("self.invokePartial(" + name.join(", ") + ")");
        },
        assignToHash: function(key) {
            var value = this.popStack(), data, e;
            this.options.stringParams && (e = this.popStack(), data = this.popStack());
            var hash = this.hash;
            data && hash.contexts.push("'" + key + "': " + data);
            e && hash.types.push("'" + key + "': " + e);
            hash.values.push("'" + key + "': (" + value + ")");
        },
        compiler: JavaScriptCompiler,
        compileChildren: function(environment, destination) {
            for (var children = environment.children, child, compiler, i = 0, l = children.length; i < l; i++) {
                child = children[i];
                compiler = new this.compiler();
                var index = this.matchExistingProgram(child);
                null == index ? (this.context.programs.push(""), index = this.context.programs.length, 
                child.index = index, child.name = "program" + index, this.context.programs[index] = compiler.compile(child, destination, this.context), 
                this.context.environments[index] = child) : (child.index = index, child.name = "program" + index);
            }
        },
        matchExistingProgram: function(child) {
            for (var i = 0, len = this.context.environments.length; i < len; i++) {
                var environment = this.context.environments[i];
                if (environment && environment.equals(child)) return i;
            }
        },
        programExpression: function(c) {
            this.context.aliases.self = "this";
            if (null == c) return "self.noop";
            var child = this.environment.children[c];
            c = child.depths.list;
            for (var programParams = [ child.index, child.name, "data" ], i = 0, l = c.length; i < l; i++) child = c[i], 
            1 === child ? programParams.push("depth0") : programParams.push("depth" + (child - 1));
            return (0 === c.length ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
        },
        register: function(name, val) {
            this.useRegister(name);
            this.source.push(name + " = " + val + ";");
        },
        useRegister: function(name) {
            this.registers[name] || (this.registers[name] = !0, this.registers.list.push(name));
        },
        pushStackLiteral: function(item) {
            return this.push(new Literal(item));
        },
        pushStack: function(item) {
            this.flushInline();
            var stack = this.incrStack();
            item && this.source.push(stack + " = " + item + ";");
            this.compileStack.push(stack);
            return stack;
        },
        replaceStack: function(func) {
            var type = "", button = this.isInline(), item;
            button ? (item = this.popStack(!0), item instanceof Literal ? item = item.value : (type = this.stackSlot ? this.topStackName() : this.incrStack(), 
            type = "(" + this.push(type) + " = " + item + "),", item = this.topStack())) : item = this.topStack();
            func = func.call(this, item);
            button ? ((this.inlineStack.length || this.compileStack.length) && this.popStack(), 
            this.push("(" + type + func + ")")) : (/^stack/.test(item) || (item = this.nextStack()), 
            this.source.push(item + " = (" + type + func + ");"));
            return item;
        },
        nextStack: function() {
            return this.pushStack();
        },
        incrStack: function() {
            this.stackSlot++;
            this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot);
            return this.topStackName();
        },
        topStackName: function() {
            return "stack" + this.stackSlot;
        },
        flushInline: function() {
            var inlineStack = this.inlineStack;
            if (inlineStack.length) {
                this.inlineStack = [];
                for (var i = 0, len = inlineStack.length; i < len; i++) {
                    var entry = inlineStack[i];
                    entry instanceof Literal ? this.compileStack.push(entry) : this.pushStack(entry);
                }
            }
        },
        isInline: function() {
            return this.inlineStack.length;
        },
        popStack: function(wrapped) {
            var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
            if (!wrapped && item instanceof Literal) return item.value;
            inline || this.stackSlot--;
            return item;
        },
        topStack: function(wrapped) {
            var stack = this.isInline() ? this.inlineStack : this.compileStack, stack = stack[stack.length - 1];
            return !wrapped && stack instanceof Literal ? stack.value : stack;
        },
        quotedString: function(str) {
            return '"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
        },
        setupHelper: function(paramSize, name, missingParams) {
            var params = [];
            this.setupParams(paramSize, params, missingParams);
            paramSize = this.nameLookup("helpers", name, "helper");
            return {
                params: params,
                name: paramSize,
                callParams: [ "depth0" ].concat(params).join(", "),
                helperMissingParams: missingParams && [ "depth0", this.quotedString(name) ].concat(params).join(", ")
            };
        },
        setupParams: function(n, r, load) {
            var data = [], text = [], line = [], i, j;
            data.push("hash:" + this.popStack());
            i = this.popStack();
            if ((j = this.popStack()) || i) j || (this.context.aliases.self = "this", j = "self.noop"), 
            i || (this.context.aliases.self = "this", i = "self.noop"), data.push("inverse:" + i), 
            data.push("fn:" + j);
            for (j = 0; j < n; j++) i = this.popStack(), r.push(i), this.options.stringParams && (line.push(this.popStack()), 
            text.push(this.popStack()));
            this.options.stringParams && (data.push("contexts:[" + text.join(",") + "]"), data.push("types:[" + line.join(",") + "]"), 
            data.push("hashContexts:hashContexts"), data.push("hashTypes:hashTypes"));
            this.options.data && data.push("data:data");
            data = "{" + data.join(",") + "}";
            load ? (this.register("options", data), r.push("options")) : r.push(data);
            return r.join(", ");
        }
    };
    for (var types = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" "), events = JavaScriptCompiler.RESERVED_WORDS = {}, i = 0, l = types.length; i < l; i++) events[types[i]] = !0;
    JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
        return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name) ? !0 : !1;
    };
    Handlebars.precompile = function(input, context) {
        if (null == input || "string" !== typeof input && input.constructor !== Handlebars.AST.ProgramNode) throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
        context = context || {};
        "data" in context || (context.data = !0);
        var expr = Handlebars.parse(input), expr = new Compiler().compile(expr, context);
        return new JavaScriptCompiler().compile(expr, context);
    };
    Handlebars.compile = function(input, context) {
        if (null == input || "string" !== typeof input && input.constructor !== Handlebars.AST.ProgramNode) throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
        context = context || {};
        "data" in context || (context.data = !0);
        var f;
        return function(port, length) {
            if (!f) {
                var data = Handlebars.parse(input), data = new Compiler().compile(data, context), data = new JavaScriptCompiler().compile(data, context, path, !0);
                f = Handlebars.template(data);
            }
            return f.call(this, port, length);
        };
    };
    Handlebars.VM = {
        template: function(templateSpec) {
            var container = {
                escapeExpression: Handlebars.Utils.escapeExpression,
                invokePartial: Handlebars.VM.invokePartial,
                programs: [],
                program: function(i, fn, data) {
                    var programWrapper = this.programs[i];
                    data ? programWrapper = Handlebars.VM.program(i, fn, data) : programWrapper || (programWrapper = this.programs[i] = Handlebars.VM.program(i, fn));
                    return programWrapper;
                },
                merge: function(object, props) {
                    var result = object || props;
                    object && props && (result = {}, Handlebars.Utils.extend(result, props), Handlebars.Utils.extend(result, object));
                    return result;
                },
                programWithDepth: Handlebars.VM.programWithDepth,
                noop: Handlebars.VM.noop,
                compilerInfo: null
            };
            return function(context, args) {
                args = args || {};
                var result = templateSpec.call(container, Handlebars, context, args.helpers, args.partials, args.data), m = container.compilerInfo || [], s = m[0] || 1, str = Handlebars.COMPILER_REVISION;
                if (s !== str) {
                    if (s < str) throw "Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + Handlebars.REVISION_CHANGES[str] + ") or downgrade your runtime to an older version (" + Handlebars.REVISION_CHANGES[s] + ").";
                    throw "Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + m[1] + ").";
                }
                return result;
            };
        },
        programWithDepth: function(i, fn, data) {
            var args = Array.prototype.slice.call(arguments, 3), program = function(context, color) {
                color = color || {};
                return fn.apply(this, [ context, color.data || data ].concat(args));
            };
            program.program = i;
            program.depth = args.length;
            return program;
        },
        program: function(i, fn, data) {
            var prog = function(context, node) {
                node = node || {};
                return fn(context, node.data || data);
            };
            prog.program = i;
            prog.depth = 0;
            return prog;
        },
        noop: function() {
            return "";
        },
        invokePartial: function(partial, name, context, helpers, partials, data) {
            helpers = {
                helpers: helpers,
                partials: partials,
                data: data
            };
            if (partial === path) throw new Handlebars.Exception("The partial " + name + " could not be found");
            if (partial instanceof Function) return partial(context, helpers);
            if (Handlebars.compile) return partials[name] = Handlebars.compile(partial, {
                data: data !== path
            }), partials[name](context, helpers);
            throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
        }
    };
    Handlebars.template = Handlebars.VM.template;
})(Handlebars);

(function(win, _undefined) {
    function SoundManager(smURL, smID) {
        function _preferFlashCheck(kind) {
            return sm2.preferFlash && html5OK && !sm2.ignoreFlash && sm2.flash[kind] !== _undefined && sm2.flash[kind];
        }
        function html5_event(oFn) {
            return function(e) {
                var s = this._s;
                return s && s._a ? oFn.call(this, e) : null;
            };
        }
        this.setupOptions = {
            url: smURL || null,
            flashVersion: 8,
            debugMode: !0,
            debugFlash: !1,
            useConsole: !0,
            consoleOnly: !0,
            waitForWindowLoad: !1,
            bgColor: "#ffffff",
            useHighPerformance: !1,
            flashPollingInterval: null,
            html5PollingInterval: null,
            flashLoadTimeout: 1e3,
            wmode: null,
            allowScriptAccess: "always",
            useFlashBlock: !1,
            useHTML5Audio: !0,
            html5Test: /^(probably|maybe)$/i,
            preferFlash: !1,
            noSWFCache: !1,
            idPrefix: "sound"
        };
        this.defaultOptions = {
            autoLoad: !1,
            autoPlay: !1,
            from: null,
            loops: 1,
            onid3: null,
            onload: null,
            whileloading: null,
            onplay: null,
            onpause: null,
            onresume: null,
            whileplaying: null,
            onposition: null,
            onstop: null,
            onfailure: null,
            onfinish: null,
            multiShot: !0,
            multiShotEvents: !1,
            position: null,
            pan: 0,
            stream: !0,
            to: null,
            type: null,
            usePolicyFile: !1,
            volume: 100
        };
        this.flash9Options = {
            isMovieStar: null,
            usePeakData: !1,
            useWaveformData: !1,
            useEQData: !1,
            onbufferchange: null,
            ondataerror: null
        };
        this.movieStarOptions = {
            bufferTime: 3,
            serverURL: null,
            onconnect: null,
            duration: null
        };
        this.audioFormats = {
            mp3: {
                type: [ 'audio/mpeg; codecs="mp3"', "audio/mpeg", "audio/mp3", "audio/MPA", "audio/mpa-robust" ],
                required: !0
            },
            mp4: {
                related: [ "aac", "m4a", "m4b" ],
                type: [ 'audio/mp4; codecs="mp4a.40.2"', "audio/aac", "audio/x-m4a", "audio/MP4A-LATM", "audio/mpeg4-generic" ],
                required: !1
            },
            ogg: {
                type: [ "audio/ogg; codecs=vorbis" ],
                required: !1
            },
            opus: {
                type: [ "audio/ogg; codecs=opus", "audio/opus" ],
                required: !1
            },
            wav: {
                type: [ 'audio/wav; codecs="1"', "audio/wav", "audio/wave", "audio/x-wav" ],
                required: !1
            }
        };
        this.movieID = "sm2-container";
        this.id = smID || "sm2movie";
        this.debugID = "soundmanager-debug";
        this.debugURLParam = /([#?&])debug=1/i;
        this.versionNumber = "V2.97a.20131201";
        this.altURL = this.movieURL = this.version = null;
        this.enabled = this.swfLoaded = !1;
        this.oMC = null;
        this.sounds = {};
        this.soundIDs = [];
        this.didFlashBlock = this.muted = !1;
        this.filePattern = null;
        this.filePatterns = {
            flash8: /\.mp3(\?.*)?$/i,
            flash9: /\.mp3(\?.*)?$/i
        };
        this.features = {
            buffering: !1,
            peakData: !1,
            waveformData: !1,
            eqData: !1,
            movieStar: !1
        };
        this.sandbox = {};
        this.html5 = {
            usingFlash: null
        };
        this.flash = {};
        this.ignoreFlash = this.html5Only = !1;
        var SMSound, sm2 = this, globalHTML5Audio = null, flash = null, sm, smc = navigator.userAgent, h5 = win.location.href.toString(), id = document, ua, wl, doc, doNothing, setProperties = [], init = !1, fV = !1, on_queue = !1, debugOpen = !1, debugTS = !1, didAppend, appendSuccess, didInit, disabled, windowLoaded, _wDS, wdCount, initComplete, mixin, assign, extraOptions, addOnEvent, processOnEvents, initUserOnload, delayWaitForEI, waitForEI, setVersionInfo, handleFocus, strings, initMovie, preInit, domContentLoaded, winOnLoad, didDCLoaded, getDocument, createMovie, catchError = null, setPolling = null, initDebug, debugLevels, defaultFlashVersion, disableObject, failSafely, normalizeMovieURL, oRemoved = !1, oRemovedHTML = !1, str, flashBlockHandler, getSWFCSS, swfCSS = 0, toggleDebug = null, loopFix, policyFix = [], complain, idCheck = null, waitingForEI, initPending, startTimer, stopTimer, timerExecute, h5TimerCount, h5IntervalTimer, parseURL, messages = Array.prototype.slice, needsFlash = !1, featureCheck, html5OK, html5CanPlay, html5Ext, html5Unload, domContentLoadedIE, testHTML5 = 0, event = smc.match(/(ipad|iphone|ipod)/i), slice = smc.match(/android/i), useGlobalHTML5Audio = smc.match(/msie/i), lastGlobalHTML5URL = smc.match(/webkit/i), hasFlash = smc.match(/safari/i) && !smc.match(/chrome/i), detectFlash = smc.match(/opera/i), badSafariFix = smc.match(/(mobile|pre\/|xoom)/i) || event || slice, html5_events = !h5.match(/usehtml5audio/i) && !h5.match(/sm2\-ignorebadua/i) && hasFlash && !smc.match(/silk/i) && smc.match(/OS X 10_6_([3-7])/i), showSupport = id.hasFocus !== _undefined ? id.hasFocus() : null, flushMessages = hasFlash && (id.hasFocus === _undefined || !id.hasFocus()), is_iDevice = !flushMessages, isAndroid = /(mp3|mp4|mpa|m4a|m4b)/i, isIE = id.location ? id.location.protocol.match(/http/i) : null, isWebkit = isIE ? "" : "http://", isSafari = /^\s*audio\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4||m4v|m4a|m4b|mp4v|3gp|3g2)\s*(?:$|;)/i, isOpera = "mpeg4 aac flv mov mp4 m4v f4v m4a m4b mp4v 3gp 3g2".split(" "), mobileHTML5 = RegExp("\\.(" + isOpera.join("|") + ")(\\?.*)?$", "i");
        this.mimePattern = /^\s*audio\/(?:x-)?(?:mp(?:eg|3))\s*(?:$|;)/i;
        this.useAltURL = !isIE;
        var a;
        try {
            a = Audio !== _undefined && (detectFlash && opera !== _undefined && 10 > opera.version() ? new Audio(null) : new Audio()).canPlayType !== _undefined;
        } catch (jb) {
            a = !1;
        }
        this.hasHTML5 = a;
        this.setup = function(type) {
            var noURL = !sm2.url;
            type !== _undefined && on_queue && idCheck && sm2.ok();
            didInit(type);
            type && (noURL && handleFocus && type.url !== _undefined && sm2.beginDelayedInit(), 
            !handleFocus && type.url !== _undefined && "complete" === id.readyState && setTimeout(waitForEI, 1));
            return sm2;
        };
        this.supported = this.ok = function() {
            return idCheck ? on_queue && !debugOpen : sm2.useHTML5Audio && sm2.hasHTML5;
        };
        this.getMovie = function(classname) {
            return sm(classname) || id[classname] || win[classname];
        };
        this.createSound = function(oOptions, _url) {
            function make() {
                _tO = disableObject(_tO);
                sm2.sounds[_tO.id] = new SMSound(_tO);
                sm2.soundIDs.push(_tO.id);
                return sm2.sounds[_tO.id];
            }
            var _tO, oSound = null;
            if (!on_queue || !sm2.ok()) return !1;
            _url !== _undefined && (oOptions = {
                id: oOptions,
                url: _url
            });
            _tO = appendSuccess(oOptions);
            _tO.url = loopFix(_tO.url);
            void 0 === _tO.id && (_tO.id = sm2.setupOptions.idPrefix + testHTML5++);
            if (normalizeMovieURL(_tO.id, !0)) return sm2.sounds[_tO.id];
            if (initPending(_tO)) oSound = make(), oSound._setup_html5(_tO); else {
                if (sm2.html5Only || sm2.html5.usingFlash && _tO.url && _tO.url.match(/data\:/i)) return make();
                8 < doNothing && null === _tO.isMovieStar && (_tO.isMovieStar = !!(_tO.serverURL || _tO.type && _tO.type.match(isSafari) || _tO.url && _tO.url.match(mobileHTML5)));
                _tO = failSafely(_tO, void 0);
                oSound = make();
                8 === doNothing ? flash._createSound(_tO.id, _tO.loops || 1, _tO.usePolicyFile) : (flash._createSound(_tO.id, _tO.url, _tO.usePeakData, _tO.useWaveformData, _tO.useEQData, _tO.isMovieStar, _tO.isMovieStar ? _tO.bufferTime : !1, _tO.loops || 1, _tO.serverURL, _tO.duration || null, _tO.autoPlay, !0, _tO.autoLoad, _tO.usePolicyFile), 
                _tO.serverURL || (oSound.connected = !0, _tO.onconnect && _tO.onconnect.apply(oSound)));
                !_tO.serverURL && (_tO.autoLoad || _tO.autoPlay) && oSound.load(_tO);
            }
            !_tO.serverURL && _tO.autoPlay && oSound.play();
            return oSound;
        };
        this.destroySound = function(sID, _bFromSound) {
            if (!normalizeMovieURL(sID)) return !1;
            var oS = sm2.sounds[sID], i;
            oS._iO = {};
            oS.stop();
            oS.unload();
            for (i = 0; i < sm2.soundIDs.length; i++) if (sm2.soundIDs[i] === sID) {
                sm2.soundIDs.splice(i, 1);
                break;
            }
            _bFromSound || oS.destruct(!0);
            delete sm2.sounds[sID];
            return !0;
        };
        this.load = function(sID, oOptions) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].load(oOptions) : !1;
        };
        this.unload = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].unload() : !1;
        };
        this.onposition = this.onPosition = function(sID, nPosition, oMethod, oScope) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].onposition(nPosition, oMethod, oScope) : !1;
        };
        this.clearOnPosition = function(sID, nPosition, oMethod) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].clearOnPosition(nPosition, oMethod) : !1;
        };
        this.start = this.play = function(sID, oOptions) {
            var result = null, overloaded = oOptions && !(oOptions instanceof Object);
            if (!on_queue || !sm2.ok()) return !1;
            if (normalizeMovieURL(sID, overloaded)) overloaded && (oOptions = {
                url: oOptions
            }); else {
                if (!overloaded) return !1;
                overloaded && (oOptions = {
                    url: oOptions
                });
                oOptions && oOptions.url && (oOptions.id = sID, result = sm2.createSound(oOptions).play());
            }
            null === result && (result = sm2.sounds[sID].play(oOptions));
            return result;
        };
        this.setPosition = function(sID, nMsecOffset) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].setPosition(nMsecOffset) : !1;
        };
        this.stop = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].stop() : !1;
        };
        this.stopAll = function() {
            for (var oSound in sm2.sounds) sm2.sounds.hasOwnProperty(oSound) && sm2.sounds[oSound].stop();
        };
        this.pause = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].pause() : !1;
        };
        this.pauseAll = function() {
            var i;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].pause();
        };
        this.resume = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].resume() : !1;
        };
        this.resumeAll = function() {
            var i;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].resume();
        };
        this.togglePause = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].togglePause() : !1;
        };
        this.setPan = function(sID, nPan) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].setPan(nPan) : !1;
        };
        this.setVolume = function(sID, nVol) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].setVolume(nVol) : !1;
        };
        this.mute = function(sID) {
            var i = 0;
            sID instanceof String && (sID = null);
            if (sID) return normalizeMovieURL(sID) ? sm2.sounds[sID].mute() : !1;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].mute();
            return sm2.muted = !0;
        };
        this.muteAll = function() {
            sm2.mute();
        };
        this.unmute = function(i) {
            i instanceof String && (i = null);
            if (i) return normalizeMovieURL(i) ? sm2.sounds[i].unmute() : !1;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].unmute();
            sm2.muted = !1;
            return !0;
        };
        this.unmuteAll = function() {
            sm2.unmute();
        };
        this.toggleMute = function(sID) {
            return normalizeMovieURL(sID) ? sm2.sounds[sID].toggleMute() : !1;
        };
        this.getMemoryUse = function() {
            var ram = 0;
            flash && 8 !== doNothing && (ram = parseInt(flash._getMemoryUse(), 10));
            return ram;
        };
        this.disable = function(bNoDisable) {
            var i;
            bNoDisable === _undefined && (bNoDisable = !1);
            if (debugOpen) return !1;
            debugOpen = !0;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) didDCLoaded(sm2.sounds[sm2.soundIDs[i]]);
            didAppend(bNoDisable);
            parseURL.remove(win, "load", wdCount);
            return !0;
        };
        this.canPlayMIME = function(sMIME) {
            var result;
            sm2.hasHTML5 && (result = startTimer({
                type: sMIME
            }));
            !result && idCheck && (result = sMIME && sm2.ok() ? !!(8 < doNothing && sMIME.match(isSafari) || sMIME.match(sm2.mimePattern)) : null);
            return result;
        };
        this.canPlayURL = function(sURL) {
            var result;
            sm2.hasHTML5 && (result = startTimer({
                url: sURL
            }));
            !result && idCheck && (result = sURL && sm2.ok() ? !!sURL.match(sm2.filePattern) : null);
            return result;
        };
        this.canPlayLink = function(oLink) {
            return oLink.type !== _undefined && oLink.type && sm2.canPlayMIME(oLink.type) ? !0 : sm2.canPlayURL(oLink.href);
        };
        this.getSoundById = function(sID, _suppressDebug) {
            return sID ? sm2.sounds[sID] : null;
        };
        this.onready = function(event, handler) {
            if ("function" === typeof event) handler || (handler = win), windowLoaded("onready", event, handler), 
            _wDS(); else throw initDebug("needFunction", "onready");
            return !0;
        };
        this.ontimeout = function(social, photo) {
            if ("function" === typeof social) photo || (photo = win), windowLoaded("ontimeout", social, photo), 
            _wDS({
                type: "ontimeout"
            }); else throw initDebug("needFunction", "ontimeout");
            return !0;
        };
        this._wD = this._writeDebug = function(sText, sTypeOrObject) {
            return !0;
        };
        this._debug = function() {};
        this.reboot = function(resetEvents, excludeInit) {
            var i, j, len;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].destruct();
            if (flash) try {
                useGlobalHTML5Audio && (setPolling = flash.innerHTML), catchError = flash.parentNode.removeChild(flash);
            } catch (k) {}
            setPolling = catchError = idCheck = flash = null;
            sm2.enabled = handleFocus = on_queue = oRemoved = oRemovedHTML = init = fV = debugOpen = needsFlash = sm2.swfLoaded = !1;
            sm2.soundIDs = [];
            sm2.sounds = {};
            testHTML5 = 0;
            if (resetEvents) setProperties = []; else for (i in setProperties) if (setProperties.hasOwnProperty(i)) for (j = 0, 
            len = setProperties[i].length; j < len; j++) setProperties[i][j].fired = !1;
            sm2.html5 = {
                usingFlash: null
            };
            sm2.flash = {};
            sm2.html5Only = !1;
            sm2.ignoreFlash = !1;
            win.setTimeout(function() {
                delayWaitForEI();
                excludeInit || sm2.beginDelayedInit();
            }, 20);
            return sm2;
        };
        this.reset = function() {
            return sm2.reboot(!0, !0);
        };
        this.getMoviePercent = function() {
            return flash && "PercentLoaded" in flash ? flash.PercentLoaded() : null;
        };
        this.beginDelayedInit = function() {
            debugTS = !0;
            waitForEI();
            setTimeout(function() {
                if (oRemovedHTML) return !1;
                initMovie();
                initUserOnload();
                return oRemovedHTML = !0;
            }, 20);
            initComplete();
        };
        this.destruct = function() {
            sm2.disable(!0);
        };
        SMSound = function(oOptions) {
            var r, i, s = this, resetProperties, k, l, _stop_html5_timer, p, attachOnPosition, tag = !1, els = [], root = 0, _detachOnPosition, applyFromTo, lastURL = null, tokens;
            i = r = null;
            this.sID = this.id = oOptions.id;
            this.url = oOptions.url;
            this._iO = this.instanceOptions = this.options = appendSuccess(oOptions);
            this.pan = this.options.pan;
            this.volume = this.options.volume;
            this.isHTML5 = !1;
            this._a = null;
            tokens = this.url ? !1 : !0;
            this.id3 = {};
            this._debug = function() {};
            this.load = function(oOptions) {
                var oSound = null, instanceOptions;
                oOptions !== _undefined ? s._iO = appendSuccess(oOptions, s.options) : (oOptions = s.options, 
                s._iO = oOptions, lastURL && lastURL !== s.url && (s._iO.url = s.url, s.url = null));
                s._iO.url || (s._iO.url = s.url);
                s._iO.url = loopFix(s._iO.url);
                instanceOptions = s.instanceOptions = s._iO;
                if (!instanceOptions.url && !s.url) return s;
                if (instanceOptions.url === s.url && 0 !== s.readyState && 2 !== s.readyState) return 3 === s.readyState && instanceOptions.onload && domContentLoadedIE(s, function() {
                    instanceOptions.onload.apply(s, [ !!s.duration ]);
                }), s;
                s.loaded = !1;
                s.readyState = 1;
                s.playState = 0;
                s.id3 = {};
                if (initPending(instanceOptions)) oSound = s._setup_html5(instanceOptions), oSound._called_load || (s._html5_canplay = !1, 
                s.url !== instanceOptions.url && (s._a.src = instanceOptions.url, s.setPosition(0)), 
                s._a.autobuffer = "auto", s._a.preload = "auto", s._a._called_load = !0); else {
                    if (sm2.html5Only || s._iO.url && s._iO.url.match(/data\:/i)) return s;
                    try {
                        s.isHTML5 = !1, s._iO = failSafely(disableObject(instanceOptions)), instanceOptions = s._iO, 
                        8 === doNothing ? flash._load(s.id, instanceOptions.url, instanceOptions.stream, instanceOptions.autoPlay, instanceOptions.usePolicyFile) : flash._load(s.id, instanceOptions.url, !!instanceOptions.stream, !!instanceOptions.autoPlay, instanceOptions.loops || 1, !!instanceOptions.autoLoad, instanceOptions.usePolicyFile);
                    } catch (g) {
                        preInit({
                            type: "SMSOUND_LOAD_JS_EXCEPTION",
                            fatal: !0
                        });
                    }
                }
                s.url = instanceOptions.url;
                return s;
            };
            this.unload = function() {
                0 !== s.readyState && (s.isHTML5 ? (_stop_html5_timer(), s._a && (s._a.pause(), 
                lastURL = timerExecute(s._a))) : 8 === doNothing ? flash._unload(s.id, "about:blank") : flash._unload(s.id), 
                resetProperties());
                return s;
            };
            this.destruct = function(_bFromSM) {
                s.isHTML5 ? (_stop_html5_timer(), s._a && (s._a.pause(), timerExecute(s._a), needsFlash || l(), 
                s._a._s = null, s._a = null)) : (s._iO.onfailure = null, flash._destroySound(s.id));
                _bFromSM || sm2.destroySound(s.id, !0);
            };
            this.start = this.play = function(oOptions, _updatePlayState) {
                var allowMulti, a, audioClone, onended, oncanplay;
                a = !0;
                a = null;
                _updatePlayState = _updatePlayState === _undefined ? !0 : _updatePlayState;
                oOptions || (oOptions = {});
                s.url && (s._iO.url = s.url);
                s._iO = appendSuccess(s._iO, s.options);
                s._iO = appendSuccess(oOptions, s._iO);
                s._iO.url = loopFix(s._iO.url);
                s.instanceOptions = s._iO;
                if (!s.isHTML5 && s._iO.serverURL && !s.connected) return s.getAutoPlay() || s.setAutoPlay(!0), 
                s;
                initPending(s._iO) && (s._setup_html5(s._iO), p());
                1 === s.playState && !s.paused && (allowMulti = s._iO.multiShot, allowMulti || (s.isHTML5 && s.setPosition(s._iO.position), 
                a = s));
                if (null !== a) return a;
                oOptions.url && oOptions.url !== s.url && (s.readyState || s.isHTML5 || 8 !== doNothing || !tokens ? s.load(s._iO) : tokens = !1);
                s.loaded || (0 === s.readyState ? (s.isHTML5 || sm2.html5Only ? s.isHTML5 ? s.load(s._iO) : a = s : (s._iO.autoPlay = !0, 
                s.load(s._iO)), s.instanceOptions = s._iO) : 2 === s.readyState && (a = s));
                if (null !== a) return a;
                !s.isHTML5 && 9 === doNothing && 0 < s.position && s.position === s.duration && (oOptions.position = 0);
                if (s.paused && 0 <= s.position && (!s._iO.serverURL || 0 < s.position)) s.resume(); else {
                    s._iO = appendSuccess(oOptions, s._iO);
                    if (null !== s._iO.from && null !== s._iO.to && 0 === s.instanceCount && 0 === s.playState && !s._iO.serverURL) {
                        allowMulti = function() {
                            s._iO = appendSuccess(oOptions, s._iO);
                            s.play(s._iO);
                        };
                        s.isHTML5 && !s._html5_canplay ? (s.load({
                            _oncanplay: allowMulti
                        }), a = !1) : s.isHTML5 || s.loaded || s.readyState && 2 === s.readyState || (s.load({
                            onload: allowMulti
                        }), a = !1);
                        if (null !== a) return a;
                        s._iO = applyFromTo();
                    }
                    (!s.instanceCount || s._iO.multiShotEvents || s.isHTML5 && s._iO.multiShot && !needsFlash || !s.isHTML5 && 8 < doNothing && !s.getAutoPlay()) && s.instanceCount++;
                    s._iO.onposition && 0 === s.playState && attachOnPosition(s);
                    s.playState = 1;
                    s.paused = !1;
                    s.position = s._iO.position === _undefined || isNaN(s._iO.position) ? 0 : s._iO.position;
                    s.isHTML5 || (s._iO = failSafely(disableObject(s._iO)));
                    s._iO.onplay && _updatePlayState && (s._iO.onplay.apply(s), tag = !0);
                    s.setVolume(s._iO.volume, !0);
                    s.setPan(s._iO.pan, !0);
                    s.isHTML5 ? 2 > s.instanceCount ? (p(), a = s._setup_html5(), s.setPosition(s._iO.position), 
                    a.play()) : (audioClone = new Audio(s._iO.url), onended = function() {
                        parseURL.remove(audioClone, "ended", onended);
                        s._onfinish(s);
                        timerExecute(audioClone);
                        audioClone = null;
                    }, oncanplay = function() {
                        parseURL.remove(audioClone, "canplay", oncanplay);
                        try {
                            audioClone.currentTime = s._iO.position / 1e3;
                        } catch (a) {}
                        audioClone.play();
                    }, parseURL.add(audioClone, "ended", onended), void 0 !== s._iO.volume && (audioClone.volume = Math.max(0, Math.min(1, s._iO.volume / 100))), 
                    s.muted && (audioClone.muted = !0), s._iO.position ? parseURL.add(audioClone, "canplay", oncanplay) : audioClone.play()) : (a = flash._start(s.id, s._iO.loops || 1, 9 === doNothing ? s.position : s.position / 1e3, s._iO.multiShot || !1), 
                    9 === doNothing && !a && s._iO.onplayerror && s._iO.onplayerror.apply(s));
                }
                return s;
            };
            this.stop = function(bAll) {
                var instanceOptions = s._iO;
                1 === s.playState && (s._onbufferchange(0), s._resetOnPosition(0), s.paused = !1, 
                s.isHTML5 || (s.playState = 0), _detachOnPosition(), instanceOptions.to && s.clearOnPosition(instanceOptions.to), 
                s.isHTML5 ? s._a && (bAll = s.position, s.setPosition(0), s.position = bAll, s._a.pause(), 
                s.playState = 0, s._onTimer(), _stop_html5_timer()) : (flash._stop(s.id, bAll), 
                instanceOptions.serverURL && s.unload()), s.instanceCount = 0, s._iO = {}, instanceOptions.onstop && instanceOptions.onstop.apply(s));
                return s;
            };
            this.setAutoPlay = function(autoPlay) {
                s._iO.autoPlay = autoPlay;
                s.isHTML5 || (flash._setAutoPlay(s.id, autoPlay), autoPlay && !s.instanceCount && 1 === s.readyState && s.instanceCount++);
            };
            this.getAutoPlay = function() {
                return s._iO.autoPlay;
            };
            this.setPosition = function(position) {
                position === _undefined && (position = 0);
                var offset = s.isHTML5 ? Math.max(position, 0) : Math.min(s.duration || s._iO.duration, Math.max(position, 0));
                s.position = offset;
                position = s.position / 1e3;
                s._resetOnPosition(s.position);
                s._iO.position = offset;
                if (s.isHTML5) {
                    if (s._a) {
                        if (s._html5_canplay) {
                            if (s._a.currentTime !== position) try {
                                s._a.currentTime = position, (0 === s.playState || s.paused) && s._a.pause();
                            } catch (e) {}
                        } else if (position) return s;
                        s.paused && s._onTimer(!0);
                    }
                } else position = 9 === doNothing ? s.position : position, s.readyState && 2 !== s.readyState && flash._setPosition(s.id, position, s.paused || !s.playState, s._iO.multiShot);
                return s;
            };
            this.pause = function(_bCallFlash) {
                if (s.paused || 0 === s.playState && 1 !== s.readyState) return s;
                s.paused = !0;
                s.isHTML5 ? (s._setup_html5().pause(), _stop_html5_timer()) : (_bCallFlash || _bCallFlash === _undefined) && flash._pause(s.id, s._iO.multiShot);
                s._iO.onpause && s._iO.onpause.apply(s);
                return s;
            };
            this.resume = function() {
                var instanceOptions = s._iO;
                if (!s.paused) return s;
                s.paused = !1;
                s.playState = 1;
                s.isHTML5 ? (s._setup_html5().play(), p()) : (instanceOptions.isMovieStar && !instanceOptions.serverURL && s.setPosition(s.position), 
                flash._pause(s.id, instanceOptions.multiShot));
                !tag && instanceOptions.onplay ? (instanceOptions.onplay.apply(s), tag = !0) : instanceOptions.onresume && instanceOptions.onresume.apply(s);
                return s;
            };
            this.togglePause = function() {
                if (0 === s.playState) return s.play({
                    position: 9 !== doNothing || s.isHTML5 ? s.position / 1e3 : s.position
                }), s;
                s.paused ? s.resume() : s.pause();
                return s;
            };
            this.setPan = function(nPan, bInstanceOnly) {
                nPan === _undefined && (nPan = 0);
                bInstanceOnly === _undefined && (bInstanceOnly = !1);
                s.isHTML5 || flash._setPan(s.id, nPan);
                s._iO.pan = nPan;
                bInstanceOnly || (s.pan = nPan, s.options.pan = nPan);
                return s;
            };
            this.setVolume = function(nVol, _bInstanceOnly) {
                nVol === _undefined && (nVol = 100);
                _bInstanceOnly === _undefined && (_bInstanceOnly = !1);
                s.isHTML5 ? s._a && (sm2.muted && !s.muted && (s.muted = !0, s._a.muted = !0), s._a.volume = Math.max(0, Math.min(1, nVol / 100))) : flash._setVolume(s.id, sm2.muted && !s.muted || s.muted ? 0 : nVol);
                s._iO.volume = nVol;
                _bInstanceOnly || (s.volume = nVol, s.options.volume = nVol);
                return s;
            };
            this.mute = function() {
                s.muted = !0;
                s.isHTML5 ? s._a && (s._a.muted = !0) : flash._setVolume(s.id, 0);
                return s;
            };
            this.unmute = function() {
                s.muted = !1;
                var hasIO = s._iO.volume !== _undefined;
                s.isHTML5 ? s._a && (s._a.muted = !1) : flash._setVolume(s.id, hasIO ? s._iO.volume : s.options.volume);
                return s;
            };
            this.toggleMute = function() {
                return s.muted ? s.unmute() : s.mute();
            };
            this.onposition = this.onPosition = function(nPosition, oMethod, oScope) {
                els.push({
                    position: parseInt(nPosition, 10),
                    method: oMethod,
                    scope: oScope !== _undefined ? oScope : s,
                    fired: !1
                });
                return s;
            };
            this.clearOnPosition = function(nPosition, oMethod) {
                var i;
                nPosition = parseInt(nPosition, 10);
                if (isNaN(nPosition)) return !1;
                for (i = 0; i < els.length; i++) nPosition !== els[i].position || oMethod && oMethod !== els[i].method || (els[i].fired && root--, 
                els.splice(i, 1));
            };
            this._processOnPosition = function() {
                var j, item;
                j = els.length;
                if (!j || !s.playState || root >= j) return !1;
                for (--j; 0 <= j; j--) item = els[j], !item.fired && s.position >= item.position && (item.fired = !0, 
                root++, item.method.apply(item.scope, [ item.position ]));
                return !0;
            };
            this._resetOnPosition = function(nPosition) {
                var j, item;
                j = els.length;
                if (!j) return !1;
                for (--j; 0 <= j; j--) item = els[j], item.fired && nPosition <= item.position && (item.fired = !1, 
                root--);
                return !0;
            };
            applyFromTo = function() {
                var instanceOptions = s._iO, f = instanceOptions.from, result = instanceOptions.to, start, end;
                end = function() {
                    s.clearOnPosition(result, end);
                    s.stop();
                };
                start = function() {
                    if (null !== result && !isNaN(result)) s.onPosition(result, end);
                };
                null !== f && !isNaN(f) && (instanceOptions.position = f, instanceOptions.multiShot = !1, 
                start());
                return instanceOptions;
            };
            attachOnPosition = function() {
                var item, op = s._iO.onposition;
                if (op) for (item in op) if (op.hasOwnProperty(item)) s.onPosition(parseInt(item, 10), op[item]);
            };
            _detachOnPosition = function() {
                var item, op = s._iO.onposition;
                if (op) for (item in op) op.hasOwnProperty(item) && s.clearOnPosition(parseInt(item, 10));
            };
            p = function() {
                s.isHTML5 && str(s);
            };
            _stop_html5_timer = function() {
                s.isHTML5 && flashBlockHandler(s);
            };
            resetProperties = function(retainPosition) {
                retainPosition || (els = [], root = 0);
                tag = !1;
                s._hasTimer = null;
                s._a = null;
                s._html5_canplay = !1;
                s.bytesLoaded = null;
                s.bytesTotal = null;
                s.duration = s._iO && s._iO.duration ? s._iO.duration : null;
                s.durationEstimate = null;
                s.buffered = [];
                s.eqData = [];
                s.eqData.left = [];
                s.eqData.right = [];
                s.failures = 0;
                s.isBuffering = !1;
                s.instanceOptions = {};
                s.instanceCount = 0;
                s.loaded = !1;
                s.metadata = {};
                s.readyState = 0;
                s.muted = !1;
                s.paused = !1;
                s.peakData = {
                    left: 0,
                    right: 0
                };
                s.waveformData = {
                    left: [],
                    right: []
                };
                s.playState = 0;
                s.position = null;
                s.id3 = {};
            };
            resetProperties();
            this._onTimer = function(bForce) {
                var time, j = !1, x = {};
                if (s._hasTimer || bForce) return s._a && (bForce || (0 < s.playState || 1 === s.readyState) && !s.paused) && (time = s._get_html5_duration(), 
                time !== r && (r = time, s.duration = time, j = !0), s.durationEstimate = s.duration, 
                time = 1e3 * s._a.currentTime || 0, time !== i && (i = time, j = !0), (j || bForce) && s._whileplaying(time, x, x, x, x)), 
                j;
            };
            this._get_html5_duration = function() {
                var instanceOptions = s._iO;
                return (instanceOptions = s._a && s._a.duration ? 1e3 * s._a.duration : instanceOptions && instanceOptions.duration ? instanceOptions.duration : null) && !isNaN(instanceOptions) && Infinity !== instanceOptions ? instanceOptions : null;
            };
            this._apply_loop = function(a, nLoops) {
                a.loop = 1 < nLoops ? "loop" : "";
            };
            this._setup_html5 = function(instanceOptions) {
                instanceOptions = appendSuccess(s._iO, instanceOptions);
                var a = needsFlash ? globalHTML5Audio : s._a, dURL = decodeURI(instanceOptions.url), j;
                needsFlash ? dURL === decodeURI(featureCheck) && (j = !0) : dURL === decodeURI(lastURL) && (j = !0);
                if (a) {
                    if (a._s) if (needsFlash) a._s && a._s.playState && !j && a._s.stop(); else if (!needsFlash && dURL === decodeURI(lastURL)) return s._apply_loop(a, instanceOptions.loops), 
                    a;
                    j || (lastURL && resetProperties(!1), a.src = instanceOptions.url, featureCheck = lastURL = s.url = instanceOptions.url, 
                    a._called_load = !1);
                } else instanceOptions.autoLoad || instanceOptions.autoPlay ? (s._a = new Audio(instanceOptions.url), 
                s._a.load()) : s._a = detectFlash && 10 > opera.version() ? new Audio(null) : new Audio(), 
                a = s._a, a._called_load = !1, needsFlash && (globalHTML5Audio = a);
                s.isHTML5 = !0;
                s._a = a;
                a._s = s;
                k();
                s._apply_loop(a, instanceOptions.loops);
                instanceOptions.autoLoad || instanceOptions.autoPlay ? s.load() : (a.autobuffer = !1, 
                a.preload = "auto");
                return a;
            };
            k = function() {
                if (s._a._added_events) return !1;
                var d;
                s._a._added_events = !0;
                for (d in html5Unload) html5Unload.hasOwnProperty(d) && s._a && s._a.addEventListener(d, html5Unload[d], !1);
                return !0;
            };
            l = function() {
                var j;
                s._a._added_events = !1;
                for (j in html5Unload) html5Unload.hasOwnProperty(j) && s._a && s._a.removeEventListener(j, html5Unload[j], !1);
            };
            this._onload = function(nSuccess) {
                var loadOK = !!nSuccess || !s.isHTML5 && 8 === doNothing && s.duration;
                s.loaded = loadOK;
                s.readyState = loadOK ? 3 : 2;
                s._onbufferchange(0);
                s._iO.onload && domContentLoadedIE(s, function() {
                    s._iO.onload.apply(s, [ loadOK ]);
                });
                return !0;
            };
            this._onbufferchange = function(nIsBuffering) {
                if (0 === s.playState || nIsBuffering && s.isBuffering || !nIsBuffering && !s.isBuffering) return !1;
                s.isBuffering = 1 === nIsBuffering;
                s._iO.onbufferchange && s._iO.onbufferchange.apply(s);
                return !0;
            };
            this._onsuspend = function() {
                s._iO.onsuspend && s._iO.onsuspend.apply(s);
                return !0;
            };
            this._onfailure = function(a, b, result) {
                s.failures++;
                if (s._iO.onfailure && 1 === s.failures) s._iO.onfailure(s, a, b, result);
            };
            this._onfinish = function() {
                var io_onfinish = s._iO.onfinish;
                s._onbufferchange(0);
                s._resetOnPosition(0);
                s.instanceCount && (s.instanceCount--, s.instanceCount || (_detachOnPosition(), 
                s.playState = 0, s.paused = !1, s.instanceCount = 0, s.instanceOptions = {}, s._iO = {}, 
                _stop_html5_timer(), s.isHTML5 && (s.position = 0)), (!s.instanceCount || s._iO.multiShotEvents) && io_onfinish && domContentLoadedIE(s, function() {
                    io_onfinish.apply(s);
                }));
            };
            this._whileloading = function(nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {
                var instanceOptions = s._iO;
                s.bytesLoaded = nBytesLoaded;
                s.bytesTotal = nBytesTotal;
                s.duration = Math.floor(nDuration);
                s.bufferLength = nBufferLength;
                s.durationEstimate = s.isHTML5 || instanceOptions.isMovieStar ? s.duration : instanceOptions.duration ? s.duration > instanceOptions.duration ? s.duration : instanceOptions.duration : parseInt(s.bytesTotal / s.bytesLoaded * s.duration, 10);
                s.isHTML5 || (s.buffered = [ {
                    start: 0,
                    end: s.duration
                } ]);
                (3 !== s.readyState || s.isHTML5) && instanceOptions.whileloading && instanceOptions.whileloading.apply(s);
            };
            this._whileplaying = function(nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {
                var instanceOptions = s._iO;
                if (isNaN(nPosition) || null === nPosition) return !1;
                s.position = Math.max(0, nPosition);
                s._processOnPosition();
                !s.isHTML5 && 8 < doNothing && (instanceOptions.usePeakData && oPeakData !== _undefined && oPeakData && (s.peakData = {
                    left: oPeakData.leftPeak,
                    right: oPeakData.rightPeak
                }), instanceOptions.useWaveformData && oWaveformDataLeft !== _undefined && oWaveformDataLeft && (s.waveformData = {
                    left: oWaveformDataLeft.split(","),
                    right: oWaveformDataRight.split(",")
                }), instanceOptions.useEQData && oEQData !== _undefined && oEQData && oEQData.leftEQ && (nPosition = oEQData.leftEQ.split(","), 
                s.eqData = nPosition, s.eqData.left = nPosition, oEQData.rightEQ !== _undefined && oEQData.rightEQ && (s.eqData.right = oEQData.rightEQ.split(","))));
                1 === s.playState && (!s.isHTML5 && 8 === doNothing && !s.position && s.isBuffering && s._onbufferchange(0), 
                instanceOptions.whileplaying && instanceOptions.whileplaying.apply(s));
                return !0;
            };
            this._oncaptiondata = function(oData) {
                s.captiondata = oData;
                s._iO.oncaptiondata && s._iO.oncaptiondata.apply(s, [ oData ]);
            };
            this._onmetadata = function(keys, b) {
                var a = {}, j, i;
                j = 0;
                for (i = keys.length; j < i; j++) a[keys[j]] = b[j];
                s.metadata = a;
                s._iO.onmetadata && s._iO.onmetadata.apply(s);
            };
            this._onid3 = function(keys, values) {
                var result = [], j, i;
                j = 0;
                for (i = keys.length; j < i; j++) result[keys[j]] = values[j];
                s.id3 = appendSuccess(s.id3, result);
                s._iO.onid3 && s._iO.onid3.apply(s);
            };
            this._onconnect = function(bSuccess) {
                bSuccess = 1 === bSuccess;
                if (s.connected = bSuccess) s.failures = 0, normalizeMovieURL(s.id) && (s.getAutoPlay() ? s.play(_undefined, s.getAutoPlay()) : s._iO.autoLoad && s.load()), 
                s._iO.onconnect && s._iO.onconnect.apply(s, [ bSuccess ]);
            };
            this._ondataerror = function(sError) {
                0 < s.playState && s._iO.ondataerror && s._iO.ondataerror.apply(s);
            };
        };
        strings = function() {
            return id.body || id.getElementsByTagName("div")[0];
        };
        sm = function(key) {
            return id.getElementById(key);
        };
        appendSuccess = function(canvas, oAdd) {
            var target = canvas || {}, source, key;
            source = oAdd === _undefined ? sm2.defaultOptions : oAdd;
            for (key in source) source.hasOwnProperty(key) && target[key] === _undefined && (target[key] = "object" !== typeof source[key] || null === source[key] ? source[key] : appendSuccess(target[key], source[key]));
            return target;
        };
        domContentLoadedIE = function(oSound, callback) {
            oSound.isHTML5 || 8 !== doNothing ? callback() : win.setTimeout(callback, 0);
        };
        disabled = {
            onready: 1,
            ontimeout: 1,
            defaultOptions: 1,
            flash9Options: 1,
            movieStarOptions: 1
        };
        didInit = function(o, oParent) {
            var i, result = !0, hasParent = oParent !== _undefined, setupOptions = sm2.setupOptions;
            for (i in o) if (o.hasOwnProperty(i)) if ("object" !== typeof o[i] || null === o[i] || o[i] instanceof Array || o[i] instanceof RegExp) hasParent && disabled[oParent] !== _undefined ? sm2[oParent][i] = o[i] : setupOptions[i] !== _undefined ? (sm2.setupOptions[i] = o[i], 
            sm2[i] = o[i]) : disabled[i] === _undefined ? result = !1 : sm2[i] instanceof Function ? sm2[i].apply(sm2, o[i] instanceof Array ? o[i] : [ o[i] ]) : sm2[i] = o[i]; else if (disabled[i] === _undefined) result = !1; else return didInit(o[i], i);
            return result;
        };
        parseURL = function() {
            function getArgs(args) {
                args = messages.call(args);
                var len = args.length;
                old ? (args[1] = "on" + args[1], 3 < len && args.pop()) : 3 === len && args.push(!1);
                return args;
            }
            function apply(args, sType) {
                var element = args.shift(), method = [ evt[sType] ];
                if (old) element[method](args[0], args[1]); else element[method].apply(element, args);
            }
            var old = win.attachEvent, evt = {
                add: old ? "attachEvent" : "addEventListener",
                remove: old ? "detachEvent" : "removeEventListener"
            };
            return {
                add: function() {
                    apply(getArgs(arguments), "add");
                },
                remove: function() {
                    apply(getArgs(arguments), "remove");
                }
            };
        }();
        html5Unload = {
            abort: html5_event(function() {}),
            canplay: html5_event(function() {
                var s = this._s, position1K;
                if (s._html5_canplay) return !0;
                s._html5_canplay = !0;
                s._onbufferchange(0);
                position1K = s._iO.position === _undefined || isNaN(s._iO.position) ? null : s._iO.position / 1e3;
                if (s.position && this.currentTime !== position1K) try {
                    this.currentTime = position1K;
                } catch (e) {}
                s._iO._oncanplay && s._iO._oncanplay();
            }),
            canplaythrough: html5_event(function() {
                var s = this._s;
                s.loaded || (s._onbufferchange(0), s._whileloading(s.bytesLoaded, s.bytesTotal, s._get_html5_duration()), 
                s._onload(!0));
            }),
            ended: html5_event(function() {
                this._s._onfinish();
            }),
            error: html5_event(function() {
                this._s._onload(!1);
            }),
            loadeddata: html5_event(function() {
                var s = this._s;
                s._loaded || hasFlash || (s.duration = s._get_html5_duration());
            }),
            loadedmetadata: html5_event(function() {}),
            loadstart: html5_event(function() {
                this._s._onbufferchange(1);
            }),
            play: html5_event(function() {
                this._s._onbufferchange(0);
            }),
            playing: html5_event(function() {
                this._s._onbufferchange(0);
            }),
            progress: html5_event(function(e) {
                var s = this._s, i, l, r = 0, r = e.target.buffered;
                i = e.loaded || 0;
                var total = e.total || 1;
                s.buffered = [];
                if (r && r.length) {
                    i = 0;
                    for (l = r.length; i < l; i++) s.buffered.push({
                        start: 1e3 * r.start(i),
                        end: 1e3 * r.end(i)
                    });
                    r = 1e3 * (r.end(0) - r.start(0));
                    i = Math.min(1, r / (1e3 * e.target.duration));
                }
                isNaN(i) || (s._onbufferchange(0), s._whileloading(i, total, s._get_html5_duration()), 
                i && total && i === total && html5Unload.canplaythrough.call(this, e));
            }),
            ratechange: html5_event(function() {}),
            suspend: html5_event(function(e) {
                var s = this._s;
                html5Unload.progress.call(this, e);
                s._onsuspend();
            }),
            stalled: html5_event(function() {}),
            timeupdate: html5_event(function() {
                this._s._onTimer();
            }),
            waiting: html5_event(function() {
                this._s._onbufferchange(1);
            })
        };
        initPending = function(iO) {
            return iO && (iO.type || iO.url || iO.serverURL) ? iO.serverURL || iO.type && _preferFlashCheck(iO.type) ? !1 : iO.type ? startTimer({
                type: iO.type
            }) : startTimer({
                url: iO.url
            }) || sm2.html5Only || iO.url.match(/data\:/i) : !1;
        };
        timerExecute = function(oAudio) {
            var url;
            oAudio && (url = hasFlash ? "about:blank" : sm2.html5.canPlayType("audio/wav") ? "data:audio/wave;base64,/UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD//w==" : "about:blank", 
            oAudio.src = url, void 0 !== oAudio._called_unload && (oAudio._called_load = !1));
            needsFlash && (featureCheck = null);
            return url;
        };
        startTimer = function(mime) {
            if (!sm2.useHTML5Audio || !sm2.hasHTML5) return !1;
            var result = mime.url || null;
            mime = mime.type || null;
            var aF = sm2.audioFormats, fileExt;
            if (mime && sm2.html5[mime] !== _undefined) return sm2.html5[mime] && !_preferFlashCheck(mime);
            if (!stopTimer) {
                stopTimer = [];
                for (fileExt in aF) aF.hasOwnProperty(fileExt) && (stopTimer.push(fileExt), aF[fileExt].related && (stopTimer = stopTimer.concat(aF[fileExt].related)));
                stopTimer = RegExp("\\.(" + stopTimer.join("|") + ")(\\?.*)?$", "i");
            }
            (fileExt = result ? result.toLowerCase().match(stopTimer) : null) && fileExt.length ? fileExt = fileExt[1] : mime && (result = mime.indexOf(";"), 
            fileExt = (-1 !== result ? mime.substr(0, result) : mime).substr(6));
            fileExt && sm2.html5[fileExt] !== _undefined ? result = sm2.html5[fileExt] && !_preferFlashCheck(fileExt) : (mime = "audio/" + fileExt, 
            result = sm2.html5.canPlayType({
                type: mime
            }), result = (sm2.html5[fileExt] = result) && sm2.html5[mime] && !_preferFlashCheck(mime));
            return result;
        };
        h5IntervalTimer = function() {
            function _cp(m) {
                var i, c = i = !1;
                if (!a || "function" !== typeof a.canPlayType) return i;
                if (m instanceof Array) {
                    j = 0;
                    for (i = m.length; j < i; j++) if (sm2.html5[m[j]] || a.canPlayType(m[j]).match(sm2.html5Test)) c = !0, 
                    sm2.html5[m[j]] = !0, sm2.flash[m[j]] = !!m[j].match(isAndroid);
                    i = c;
                } else m = a && "function" === typeof a.canPlayType ? a.canPlayType(m) : !1, i = !(!m || !m.match(sm2.html5Test));
                return i;
            }
            if (!sm2.useHTML5Audio || !sm2.hasHTML5) return idCheck = sm2.html5.usingFlash = !0, 
            !1;
            var a = Audio !== _undefined ? detectFlash && 10 > opera.version() ? new Audio(null) : new Audio() : null, item, lookup, support = {}, aF, j;
            aF = sm2.audioFormats;
            for (item in aF) if (aF.hasOwnProperty(item) && (lookup = "audio/" + item, support[item] = _cp(aF[item].type), 
            support[lookup] = support[item], item.match(isAndroid) ? (sm2.flash[item] = !0, 
            sm2.flash[lookup] = !0) : (sm2.flash[item] = !1, sm2.flash[lookup] = !1), aF[item] && aF[item].related)) for (j = aF[item].related.length - 1; 0 <= j; j--) support["audio/" + aF[item].related[j]] = support[item], 
            sm2.html5[aF[item].related[j]] = support[item], sm2.flash[aF[item].related[j]] = support[item];
            support.canPlayType = a ? _cp : null;
            sm2.html5 = appendSuccess(sm2.html5, support);
            sm2.html5.usingFlash = waitingForEI();
            idCheck = sm2.html5.usingFlash;
            return !0;
        };
        processOnEvents = {};
        initDebug = function() {};
        disableObject = function(parts) {
            8 === doNothing && 1 < parts.loops && parts.stream && (parts.stream = !1);
            return parts;
        };
        failSafely = function(sOpt, sPre) {
            sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData) && (sOpt.usePolicyFile = !0);
            return sOpt;
        };
        ua = function() {
            return !1;
        };
        didDCLoaded = function(data) {
            for (var name in data) data.hasOwnProperty(name) && "function" === typeof data[name] && (data[name] = ua);
        };
        getDocument = function(obj) {
            obj === _undefined && (obj = !1);
            (debugOpen || obj) && sm2.disable(obj);
        };
        createMovie = function(smURL) {
            if (smURL) if (smURL.match(/\.swf(\?.*)?$/i)) {
                if (smURL.substr(smURL.toLowerCase().lastIndexOf(".swf?") + 4)) return smURL;
            } else smURL.lastIndexOf("/") !== smURL.length - 1 && (smURL += "/");
            smURL = (smURL && -1 !== smURL.lastIndexOf("/") ? smURL.substr(0, smURL.lastIndexOf("/") + 1) : "./") + sm2.movieURL;
            sm2.noSWFCache && (smURL += "?ts=" + new Date().getTime());
            return smURL;
        };
        extraOptions = function() {
            doNothing = parseInt(sm2.flashVersion, 10);
            8 !== doNothing && 9 !== doNothing && (sm2.flashVersion = doNothing = 8);
            var isDebug = sm2.debugMode || sm2.debugFlash ? "_debug.swf" : ".swf";
            sm2.useHTML5Audio && !sm2.html5Only && sm2.audioFormats.mp4.required && 9 > doNothing && (sm2.flashVersion = doNothing = 9);
            sm2.version = sm2.versionNumber + (sm2.html5Only ? " (HTML5-only mode)" : 9 === doNothing ? " (AS3/Flash 9)" : " (AS2/Flash 8)");
            8 < doNothing ? (sm2.defaultOptions = appendSuccess(sm2.defaultOptions, sm2.flash9Options), 
            sm2.features.buffering = !0, sm2.defaultOptions = appendSuccess(sm2.defaultOptions, sm2.movieStarOptions), 
            sm2.filePatterns.flash9 = RegExp("\\.(mp3|" + isOpera.join("|") + ")(\\?.*)?$", "i"), 
            sm2.features.movieStar = !0) : sm2.features.movieStar = !1;
            sm2.filePattern = sm2.filePatterns[8 !== doNothing ? "flash9" : "flash8"];
            sm2.movieURL = (8 === doNothing ? "soundmanager2.swf" : "soundmanager2_flash9.swf").replace(".swf", isDebug);
            sm2.features.peakData = sm2.features.waveformData = sm2.features.eqData = 8 < doNothing;
        };
        domContentLoaded = function(a, b) {
            if (!flash) return !1;
            flash._setPolling(a, b);
        };
        winOnLoad = function() {};
        normalizeMovieURL = this.getSoundById;
        defaultFlashVersion = function() {
            var acc = [];
            sm2.debugMode && acc.push("sm2_debug");
            sm2.debugFlash && acc.push("flash_debug");
            sm2.useHighPerformance && acc.push("high_performance");
            return acc.join(" ");
        };
        debugLevels = function() {
            initDebug("fbHandler");
            var result = sm2.getMoviePercent(), types = {
                type: "FLASHBLOCK"
            };
            if (sm2.html5Only) return !1;
            sm2.ok() ? sm2.oMC && (sm2.oMC.className = [ defaultFlashVersion(), "movieContainer", "swf_loaded" + (sm2.didFlashBlock ? " swf_unblocked" : "") ].join(" ")) : (idCheck && (sm2.oMC.className = defaultFlashVersion() + " movieContainer " + (null === result ? "swf_timedout" : "swf_error")), 
            sm2.didFlashBlock = !0, _wDS({
                type: "ontimeout",
                ignoreInit: !0,
                error: types
            }), preInit(types));
        };
        windowLoaded = function(format, args, message) {
            setProperties[format] === _undefined && (setProperties[format] = []);
            setProperties[format].push({
                method: args,
                scope: message || null,
                fired: !1
            });
        };
        _wDS = function(i) {
            i || (i = {
                type: sm2.ok() ? "onready" : "ontimeout"
            });
            if (!on_queue && i && !i.ignoreInit || "ontimeout" === i.type && (sm2.ok() || debugOpen && !i.ignoreInit)) return !1;
            var args = {
                success: i && i.ignoreInit ? sm2.ok() : !debugOpen
            }, tests = i && i.type ? setProperties[i.type] || [] : [], queue = [], len, args = [ args ], result = idCheck && !sm2.ok();
            i.error && (args[0].error = i.error);
            i = 0;
            for (len = tests.length; i < len; i++) !0 !== tests[i].fired && queue.push(tests[i]);
            if (queue.length) for (i = 0, len = queue.length; i < len; i++) queue[i].scope ? queue[i].method.apply(queue[i].scope, args) : queue[i].method.apply(this, args), 
            result || (queue[i].fired = !0);
            return !0;
        };
        wdCount = function() {
            win.setTimeout(function() {
                sm2.useFlashBlock && debugLevels();
                _wDS();
                "function" === typeof sm2.onload && sm2.onload.apply(win);
                sm2.waitForWindowLoad && parseURL.add(win, "load", wdCount);
            }, 1);
        };
        html5CanPlay = function() {
            if (html5OK !== _undefined) return html5OK;
            var result = !1, types = navigator, len = types.plugins, obj, type = win.ActiveXObject;
            if (len && len.length) (types = types.mimeTypes) && types["application/x-shockwave-flash"] && types["application/x-shockwave-flash"].enabledPlugin && types["application/x-shockwave-flash"].enabledPlugin.description && (result = !0); else if (type !== _undefined && !smc.match(/MSAppHost/i)) {
                try {
                    obj = new type("ShockwaveFlash.ShockwaveFlash");
                } catch (k) {
                    obj = null;
                }
                result = !!obj;
            }
            return html5OK = result;
        };
        waitingForEI = function() {
            var flashNeeded, item, formats = sm2.audioFormats;
            event && smc.match(/os (1|2|3_0|3_1)/i) ? (sm2.hasHTML5 = !1, sm2.html5Only = !0, 
            sm2.oMC && (sm2.oMC.style.display = "none")) : !sm2.useHTML5Audio || sm2.html5 && sm2.html5.canPlayType || (sm2.hasHTML5 = !1);
            if (sm2.useHTML5Audio && sm2.hasHTML5) for (item in complain = !0, formats) formats.hasOwnProperty(item) && formats[item].required && (sm2.html5.canPlayType(formats[item].type) ? sm2.preferFlash && (sm2.flash[item] || sm2.flash[formats[item].type]) && (flashNeeded = !0) : (complain = !1, 
            flashNeeded = !0));
            sm2.ignoreFlash && (flashNeeded = !1, complain = !0);
            sm2.html5Only = sm2.hasHTML5 && sm2.useHTML5Audio && !flashNeeded;
            return !sm2.html5Only;
        };
        loopFix = function(url) {
            var i, len, result = 0;
            if (url instanceof Array) {
                i = 0;
                for (len = url.length; i < len; i++) if (url[i] instanceof Object) {
                    if (sm2.canPlayMIME(url[i].type)) {
                        result = i;
                        break;
                    }
                } else if (sm2.canPlayURL(url[i])) {
                    result = i;
                    break;
                }
                url[result].url && (url[result] = url[result].url);
                url = url[result];
            }
            return url;
        };
        str = function(a) {
            a._hasTimer || (a._hasTimer = !0, !badSafariFix && sm2.html5PollingInterval && (null === toggleDebug && 0 === swfCSS && (toggleDebug = setInterval(getSWFCSS, sm2.html5PollingInterval)), 
            swfCSS++));
        };
        flashBlockHandler = function(oSound) {
            oSound._hasTimer && (oSound._hasTimer = !1, !badSafariFix && sm2.html5PollingInterval && swfCSS--);
        };
        getSWFCSS = function() {
            var i;
            if (null !== toggleDebug && !swfCSS) return clearInterval(toggleDebug), toggleDebug = null, 
            !1;
            for (i = sm2.soundIDs.length - 1; 0 <= i; i--) sm2.sounds[sm2.soundIDs[i]].isHTML5 && sm2.sounds[sm2.soundIDs[i]]._hasTimer && sm2.sounds[sm2.soundIDs[i]]._onTimer();
        };
        preInit = function(event) {
            event = event !== _undefined ? event : {};
            "function" === typeof sm2.onerror && sm2.onerror.apply(win, [ {
                type: event.type !== _undefined ? event.type : null
            } ]);
            event.fatal !== _undefined && event.fatal && sm2.disable();
        };
        html5Ext = function() {
            if (!html5_events || !html5CanPlay()) return !1;
            var aF = sm2.audioFormats, i, item;
            for (item in aF) if (aF.hasOwnProperty(item) && ("mp3" === item || "mp4" === item) && (sm2.html5[item] = !1, 
            aF[item] && aF[item].related)) for (i = aF[item].related.length - 1; 0 <= i; i--) sm2.html5[aF[item].related[i]] = !1;
        };
        this._setSandboxType = function(sandboxType) {};
        this._externalInterfaceOK = function(swfVersion) {
            if (sm2.swfLoaded) return !1;
            sm2.swfLoaded = !0;
            flushMessages = !1;
            html5_events && html5Ext();
            setTimeout(doc, useGlobalHTML5Audio ? 100 : 1);
        };
        initMovie = function(smID, smURL) {
            function param(name, value) {
                return '<param name="' + name + '" value="' + value + '" />';
            }
            if (init && fV) return !1;
            if (sm2.html5Only) return extraOptions(), sm2.oMC = sm(sm2.movieID), doc(), fV = init = !0, 
            !1;
            var x = smURL || sm2.url, y = sm2.altURL || x, oEmbed = strings(), b = defaultFlashVersion(), i = null, i = id.getElementsByTagName("html")[0], a, e, p, i = i && i.dir && i.dir.match(/rtl/i);
            smID = smID === _undefined ? sm2.id : smID;
            extraOptions();
            sm2.url = createMovie(isIE ? x : y);
            smURL = sm2.url;
            sm2.wmode = !sm2.wmode && sm2.useHighPerformance ? "transparent" : sm2.wmode;
            null !== sm2.wmode && (smc.match(/msie 8/i) || !useGlobalHTML5Audio && !sm2.useHighPerformance) && navigator.platform.match(/win32|win64/i) && (policyFix.push(processOnEvents.spcWmode), 
            sm2.wmode = null);
            oEmbed = {
                name: smID,
                id: smID,
                src: smURL,
                quality: "high",
                allowScriptAccess: sm2.allowScriptAccess,
                bgcolor: sm2.bgColor,
                pluginspage: isWebkit + "www.macromedia.com/go/getflashplayer",
                title: "JS/Flash audio component (SoundManager 2)",
                type: "application/x-shockwave-flash",
                wmode: sm2.wmode,
                hasPriority: "true"
            };
            sm2.debugFlash && (oEmbed.FlashVars = "debug=1");
            sm2.wmode || delete oEmbed.wmode;
            if (useGlobalHTML5Audio) x = id.createElement("div"), e = [ '<object id="' + smID + '" data="' + smURL + '" type="' + oEmbed.type + '" title="' + oEmbed.title + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="' + isWebkit + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0">', param("movie", smURL), param("AllowScriptAccess", sm2.allowScriptAccess), param("quality", oEmbed.quality), sm2.wmode ? param("wmode", sm2.wmode) : "", param("bgcolor", sm2.bgColor), param("hasPriority", "true"), sm2.debugFlash ? param("FlashVars", oEmbed.FlashVars) : "", "</object>" ].join(""); else for (a in x = id.createElement("embed"), 
            oEmbed) oEmbed.hasOwnProperty(a) && x.setAttribute(a, oEmbed[a]);
            winOnLoad();
            b = defaultFlashVersion();
            if (oEmbed = strings()) if (sm2.oMC = sm(sm2.movieID) || id.createElement("div"), 
            sm2.oMC.id) p = sm2.oMC.className, sm2.oMC.className = (p ? p + " " : "movieContainer") + (b ? " " + b : ""), 
            sm2.oMC.appendChild(x), useGlobalHTML5Audio && (a = sm2.oMC.appendChild(id.createElement("div")), 
            a.className = "sm2-object-box", a.innerHTML = e), fV = !0; else {
                sm2.oMC.id = sm2.movieID;
                sm2.oMC.className = "movieContainer " + b;
                a = b = null;
                sm2.useFlashBlock || (sm2.useHighPerformance ? b = {
                    position: "fixed",
                    width: "8px",
                    height: "8px",
                    bottom: "0px",
                    left: "0px",
                    overflow: "hidden"
                } : (b = {
                    position: "absolute",
                    width: "6px",
                    height: "6px",
                    top: "-9999px",
                    left: "-9999px"
                }, i && (b.left = Math.abs(parseInt(b.left, 10)) + "px")));
                lastGlobalHTML5URL && (sm2.oMC.style.zIndex = 1e4);
                if (!sm2.debugFlash) for (p in b) b.hasOwnProperty(p) && (sm2.oMC.style[p] = b[p]);
                try {
                    useGlobalHTML5Audio || sm2.oMC.appendChild(x), oEmbed.appendChild(sm2.oMC), useGlobalHTML5Audio && (a = sm2.oMC.appendChild(id.createElement("div")), 
                    a.className = "sm2-object-box", a.innerHTML = e), fV = !0;
                } catch (spy) {
                    throw Error(initDebug("domError") + " \n" + spy.toString());
                }
            }
            return init = !0;
        };
        initUserOnload = function() {
            if (sm2.html5Only) return initMovie(), !1;
            if (flash || !sm2.url) return !1;
            (flash = sm2.getMovie(sm2.id)) || (catchError ? (useGlobalHTML5Audio ? sm2.oMC.innerHTML = setPolling : sm2.oMC.appendChild(catchError), 
            catchError = null, init = !0) : initMovie(sm2.id, sm2.url), flash = sm2.getMovie(sm2.id));
            "function" === typeof sm2.oninitmovie && setTimeout(sm2.oninitmovie, 1);
            return !0;
        };
        initComplete = function() {
            setTimeout(mixin, 1e3);
        };
        assign = function() {
            win.setTimeout(function() {
                sm2.setup({
                    preferFlash: !1
                }).reboot();
                sm2.didFlashBlock = !0;
                sm2.beginDelayedInit();
            }, 1);
        };
        mixin = function() {
            var n, r = !1;
            if (!sm2.url || oRemoved) return !1;
            oRemoved = !0;
            parseURL.remove(win, "load", initComplete);
            if (html5OK && flushMessages && !showSupport) return !1;
            on_queue || (n = sm2.getMoviePercent(), 0 < n && 100 > n && (r = !0));
            setTimeout(function() {
                n = sm2.getMoviePercent();
                if (r) return oRemoved = !1, win.setTimeout(initComplete, 1), !1;
                !on_queue && is_iDevice && (null === n ? sm2.useFlashBlock || 0 === sm2.flashLoadTimeout ? sm2.useFlashBlock && debugLevels() : !sm2.useFlashBlock && complain ? assign() : _wDS({
                    type: "ontimeout",
                    ignoreInit: !0,
                    error: {
                        type: "INIT_FLASHBLOCK"
                    }
                }) : 0 !== sm2.flashLoadTimeout && (!sm2.useFlashBlock && complain ? assign() : getDocument(!0)));
            }, sm2.flashLoadTimeout);
        };
        addOnEvent = function() {
            if (showSupport || !flushMessages) return parseURL.remove(win, "focus", addOnEvent), 
            !0;
            showSupport = is_iDevice = !0;
            oRemoved = !1;
            initComplete();
            parseURL.remove(win, "focus", addOnEvent);
            return !0;
        };
        didAppend = function(format_time) {
            if (on_queue) return !1;
            if (sm2.html5Only) return on_queue = !0, wdCount(), !0;
            var result = !0, error;
            sm2.useFlashBlock && sm2.flashLoadTimeout && !sm2.getMoviePercent() || (on_queue = !0);
            error = {
                type: !html5OK && idCheck ? "NO_FLASH" : "INIT_TIMEOUT"
            };
            if (debugOpen || format_time) sm2.useFlashBlock && sm2.oMC && (sm2.oMC.className = defaultFlashVersion() + " " + (null === sm2.getMoviePercent() ? "swf_timedout" : "swf_error")), 
            _wDS({
                type: "ontimeout",
                error: error,
                ignoreInit: !0
            }), preInit(error), result = !1;
            debugOpen || (sm2.waitForWindowLoad && !debugTS ? parseURL.add(win, "load", wdCount) : wdCount());
            return result;
        };
        wl = function() {
            var i, o = sm2.setupOptions;
            for (i in o) o.hasOwnProperty(i) && (sm2[i] === _undefined ? sm2[i] = o[i] : sm2[i] !== o[i] && (sm2.setupOptions[i] = sm2[i]));
        };
        doc = function() {
            if (on_queue) return !1;
            if (sm2.html5Only) return on_queue || (parseURL.remove(win, "load", sm2.beginDelayedInit), 
            sm2.enabled = !0, didAppend()), !0;
            initUserOnload();
            try {
                flash._externalInterfaceTest(!1), domContentLoaded(!0, sm2.flashPollingInterval || (sm2.useHighPerformance ? 10 : 50)), 
                sm2.debugMode || flash._disableDebug(), sm2.enabled = !0, sm2.html5Only || parseURL.add(win, "unload", ua);
            } catch (b) {
                return preInit({
                    type: "JS_TO_FLASH_EXCEPTION",
                    fatal: !0
                }), getDocument(!0), didAppend(), !1;
            }
            didAppend();
            parseURL.remove(win, "load", sm2.beginDelayedInit);
            return !0;
        };
        waitForEI = function() {
            if (handleFocus) return !1;
            handleFocus = !0;
            wl();
            winOnLoad();
            !html5OK && sm2.hasHTML5 && sm2.setup({
                useHTML5Audio: !0,
                preferFlash: !1
            });
            h5IntervalTimer();
            !html5OK && idCheck && (policyFix.push(processOnEvents.needFlash), sm2.setup({
                flashLoadTimeout: 1
            }));
            id.removeEventListener && id.removeEventListener("DOMContentLoaded", waitForEI, !1);
            initUserOnload();
            return !0;
        };
        h5TimerCount = function() {
            "complete" === id.readyState && (waitForEI(), id.detachEvent("onreadystatechange", h5TimerCount));
            return !0;
        };
        setVersionInfo = function() {
            debugTS = !0;
            parseURL.remove(win, "load", setVersionInfo);
        };
        delayWaitForEI = function() {
            badSafariFix && (sm2.setupOptions.useHTML5Audio = !0, sm2.setupOptions.preferFlash = !1, 
            event || slice && !smc.match(/android\s2\.3/i)) && (event && (sm2.ignoreFlash = !0), 
            needsFlash = !0);
        };
        delayWaitForEI();
        html5CanPlay();
        parseURL.add(win, "focus", addOnEvent);
        parseURL.add(win, "load", initComplete);
        parseURL.add(win, "load", setVersionInfo);
        id.addEventListener ? id.addEventListener("DOMContentLoaded", waitForEI, !1) : id.attachEvent ? id.attachEvent("onreadystatechange", h5TimerCount) : preInit({
            type: "NO_DOM2_EVENTS",
            fatal: !0
        });
    }
    var path = null;
    void 0 !== win.SM2_DEFER && SM2_DEFER || (path = new SoundManager());
    win.SoundManager = SoundManager;
    win.soundManager = path;
})(window);

var astar = {
    init: function(r, w, y) {
        for (var v = Math.max(0, w.x - y), height = Math.min(r.length, w.x + y); v < height; v++) for (var i = Math.max(0, w.y - y), l = Math.min(r[0].length, w.y + y); i < l; i++) {
            var node = r[v][i];
            node.f = 0;
            node.g = 0;
            node.h = 0;
            node.cost = node.type;
            node.visited = !1;
            node.closed = !1;
            node.parent = null;
        }
    },
    heap: function() {
        return new BinaryHeap(function(node) {
            return node.f;
        });
    },
    search: function(grid, start, end, diagonal, heuristic) {
        var length = 5 + map_increase / 2;
        astar.init(grid, start, length + 1);
        heuristic = heuristic || astar.manhattan;
        diagonal = !!diagonal;
        var openHeap = astar.heap();
        for (openHeap.push(start); 0 < openHeap.size(); ) {
            var currentNode = openHeap.pop();
            if (currentNode === end) {
                grid = currentNode;
                for (start = []; grid.parent; ) start.push(grid), grid = grid.parent;
                return start.reverse();
            }
            currentNode.closed = !0;
            for (var neighbors = astar.neighbors(grid, currentNode, diagonal, start, length), i = 0, m = neighbors.length; i < m; i++) {
                var neighbor = neighbors[i];
                if (!neighbor.closed && !neighbor.isWall()) {
                    var gScore = currentNode.g + neighbor.cost, beenVisited = neighbor.visited;
                    if (!beenVisited || gScore < neighbor.g) neighbor.visited = !0, neighbor.parent = currentNode, 
                    neighbor.h = neighbor.h || heuristic(neighbor.pos, end.pos), neighbor.g = gScore, 
                    neighbor.f = neighbor.g + neighbor.h, beenVisited ? openHeap.rescoreElement(neighbor) : openHeap.push(neighbor);
                }
            }
        }
        return [];
    },
    manhattan: function(a, b) {
        var d1 = Math.abs(b.x - a.x), d2 = Math.abs(b.y - a.y);
        return d1 + d2;
    },
    neighbors: function(grid, y, e, coord, i) {
        var ret = [], x = y.x;
        y = y.y;
        grid[x - 1] && grid[x - 1][y] && x - 1 > coord.x - i && ret.push(grid[x - 1][y]);
        grid[x + 1] && grid[x + 1][y] && x + 1 < coord.x + i && ret.push(grid[x + 1][y]);
        grid[x] && grid[x][y - 1] && y - 1 > coord.y - i && ret.push(grid[x][y - 1]);
        grid[x] && grid[x][y + 1] && y + 1 < coord.y + i && ret.push(grid[x][y + 1]);
        e && (grid[x - 1] && grid[x - 1][y - 1] && ret.push(grid[x - 1][y - 1]), grid[x + 1] && grid[x + 1][y - 1] && ret.push(grid[x + 1][y - 1]), 
        grid[x - 1] && grid[x - 1][y + 1] && ret.push(grid[x - 1][y + 1]), grid[x + 1] && grid[x + 1][y + 1] && ret.push(grid[x + 1][y + 1]));
        return ret;
    }
}, GraphNodeType = {
    OPEN: 1,
    WALL: 0
};

function Graph(grid) {
    for (var nodes = [], x = 0; x < grid.length; x++) {
        nodes[x] = [];
        for (var y = 0, row = grid[x]; y < row.length; y++) nodes[x][y] = new GraphNode(x, y, row[y]);
    }
    this.input = grid;
    this.nodes = nodes;
}

Graph.prototype.toString = function() {
    for (var html = "\n", name = this.nodes, path, value, idx, length, i = 0, l = name.length; i < l; i++) {
        path = "";
        value = name[i];
        idx = 0;
        for (length = value.length; idx < length; idx++) path += value[idx].type + " ";
        html = html + path + "\n";
    }
    return html;
};

function GraphNode(x, y, type) {
    this.data = {};
    this.x = x;
    this.y = y;
    this.pos = {
        x: x,
        y: y
    };
    this.type = type;
}

GraphNode.prototype.toString = function() {
    return "[" + this.x + " " + this.y + "]";
};

GraphNode.prototype.isWall = function() {
    return this.type == GraphNodeType.WALL;
};

function BinaryHeap(scoreFunction) {
    this.content = [];
    this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {
    push: function(element) {
        this.content.push(element);
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        var result = this.content[0], end = this.content.pop();
        0 < this.content.length && (this.content[0] = end, this.bubbleUp(0));
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node), end = this.content.pop();
        i !== this.content.length - 1 && (this.content[i] = end, this.scoreFunction(end) < this.scoreFunction(node) ? this.sinkDown(i) : this.bubbleUp(i));
    },
    size: function() {
        return this.content.length;
    },
    rescoreElement: function(node) {
        this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function(n) {
        for (var element = this.content[n]; 0 < n; ) {
            var parentN = (n + 1 >> 1) - 1, child2 = this.content[parentN];
            if (this.scoreFunction(element) < this.scoreFunction(child2)) this.content[parentN] = element, 
            this.content[n] = child2, n = parentN; else break;
        }
    },
    bubbleUp: function(n) {
        for (var length = this.content.length, element = this.content[n], elemScore = this.scoreFunction(element); ;) {
            var child2N = n + 1 << 1, child1N = child2N - 1, swap = null;
            if (child1N < length) {
                var child1Score = this.scoreFunction(this.content[child1N]);
                child1Score < elemScore && (swap = child1N);
            }
            child2N < length && this.scoreFunction(this.content[child2N]) < (null === swap ? elemScore : child1Score) && (swap = child2N);
            if (null !== swap) this.content[n] = this.content[swap], this.content[swap] = element, 
            n = swap; else break;
        }
    }
};

function SpriteAtlas(data) {
    this.srcArray = data;
    this.spriteSheetLocation = cdn_url + "sheet/" + data.meta.image + "?" + hex_sha256(data.meta.smartupdate).substr(32);
    this.imgs = {};
    this.SpriteSheet = new Image();
    this.SpriteSheet.crossOrigin = "anonymous";
    this.SpriteSheet.src = this.spriteSheetLocation;
    var result = this;
    this.SpriteSheet.onload = function() {
        for (var i in result.srcArray.frames) result.imgs[result.srcArray.frames[i].filename] = result.createSpriteCanvas(result.srcArray.frames[i].filename);
    };
    this.createSpriteCanvas = function(frame) {
        for (var i = 0; i < this.srcArray.frames.length; i++) if (this.srcArray.frames[i].filename == frame) return frame = this.srcArray.frames[i], 
        new this.SpriteCanvas(this.SpriteSheet, frame.frame.x, frame.frame.y, frame.frame.w, frame.frame.h);
        alert('Error: Sprite "' + frame + '" not found in ' + this.spriteSheetLocation);
    };
    this.SpriteCanvas = function(canvas, x, y, width, height) {
        var out = document.createElement("canvas");
        out.width = width;
        out.height = height;
        out.getContext("2d").drawImage(canvas, x, y, width, height, 0, 0, width, height);
        return out;
    };
}

(function() {
    var a = !1, b = /xyz/.test(function() {
        xyz;
    }) ? /\b_super\b/ : /.*/;
    this.Class = function() {};
    Class.extend = function(c) {
        function g() {
            !a && this.init && this.init.apply(this, arguments);
        }
        var d = this.prototype;
        a = !0;
        var e = new this();
        a = !1;
        for (var f in c) e[f] = "function" == typeof c[f] && "function" == typeof d[f] && b.test(c[f]) ? function(a, b) {
            return function() {
                var tmp = this._super;
                this._super = d[a];
                var ret = b.apply(this, arguments);
                this._super = tmp;
                return ret;
            };
        }(f, c[f]) : c[f];
        g.prototype = e;
        g.prototype.constructor = g;
        g.extend = arguments.callee;
        return g;
    };
})();

var FormHelper = {
    forms: {
        trivia_host: {
            width: 350,
            height: 265,
            title: "Trivia",
            links: [ {
                name: "Start",
                method: function() {
                    Minigames.trivia.host_start();
                },
                marginRight: 115
            }, {
                name: "Close",
                method: function() {
                    document.getElementById("trivia_host_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        trivia: {
            width: 350,
            height: 265,
            title: "Trivia",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("trivia_form").style.display = "none";
                    Minigames.trivia.deactivate_client();
                },
                marginRight: 0
            } ]
        },
        referrals: {
            width: 312,
            height: 225,
            title: "Referrals",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("referrals_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        consecutive_login: {
            width: 280,
            height: 180,
            title: "Daily log-in bonus",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("consecutive_login_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        arena_host: {
            width: 350,
            height: 265,
            title: "Arena",
            links: [ {
                name: "Skills",
                method: function() {
                    Minigames.arena.host_skills();
                },
                marginRight: 30
            }, {
                name: "Inventory",
                method: function() {
                    Minigames.arena.host_inventory();
                },
                marginRight: 30
            }, {
                name: "Start",
                method: function() {
                    Minigames.arena.host_start();
                },
                marginRight: 55
            }, {
                name: "Close",
                method: function() {
                    document.getElementById("arena_host_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        arena: {
            width: 350,
            height: 265,
            title: "Arena",
            links: [ {
                name: "Join",
                id: "arena_join_bet",
                method: function() {
                    Minigames.arena.open_client();
                },
                marginRight: 30
            }, {
                name: "Rules",
                method: function() {
                    Minigames.arena.client_rules();
                },
                marginRight: 30
            }, {
                name: "Stats",
                method: function() {
                    Minigames.arena.client_stats();
                },
                marginRight: 55
            }, {
                name: "Close",
                method: function() {
                    document.getElementById("arena_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        permissions: {
            width: 280,
            height: 180,
            title: "Permissions",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("permissions_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        chat_rules: {
            width: 320,
            height: 240,
            title: "Chat rules",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("chat_rules_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        mailbox: {
            width: 320,
            height: 265,
            title: "Mailbox",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("mailbox_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        streams: {
            width: 350,
            height: 300,
            title: "Available streams",
            links: [ {
                name: "Refresh list",
                method: function() {
                    Spectate.spectate_streams();
                },
                marginRight: 65
            }, {
                name: "Close",
                method: function() {
                    document.getElementById("streams_form").style.display = "none";
                    GAME_STATE == GAME_STATES.LOGIN && SpectateWindow.sendMessage({
                        action: "hide_iframe"
                    });
                },
                marginRight: 0
            } ]
        },
        teleport_book: {
            width: 270,
            height: 100,
            title: "Teleport book",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("teleport_book_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        secret_boss_scroll: {
            width: 270,
            height: 100,
            title: "Secret Boss Scroll",
            links: [ {
                name: "Close",
                method: function() {
                    document.getElementById("secret_boss_scroll_form").style.display = "none";
                },
                marginRight: 0
            } ]
        },
        cathedral_run: {
            width: 350,
            height: 265,
            title: "Cathedral run",
            links: [ {
                name: "Start",
                id: "start_cathedral_run",
                method: function() {
                    Cathedral.show_menu();
                },
                marginRight: 30
            }, {
                name: "Hall of Fame",
                method: function() {
                    Cathedral.show_hall_of_fame();
                },
                marginRight: 30
            }, {
                name: "Close",
                method: function() {
                    Cathedral.close_menu();
                },
                marginRight: 0
            } ]
        },
        steam_highscores: {
            width: 515,
            height: 440,
            title: "Highscores",
            fixed_top: !0,
            links: [ {
                name: "Close",
                method: function() {
                    Steam.highscore.close();
                },
                marginRight: 0
            } ]
        }
    },
    get_form: function(a, b) {
        var dom = document.getElementById(a + "_form");
        dom || (dom = FormHelper.create_form(a, b));
        dom.style.display = "block";
        return {
            dialog: dom,
            content: document.getElementById(a + "_form_content")
        };
    },
    is_form_visible: function(element) {
        return (element = document.getElementById(element + "_form")) ? "block" == element.style.display : !1;
    },
    hide_form: function(msg) {
        if (msg = document.getElementById(msg + "_form")) msg.style.display = "none";
    },
    create_form: function(id, text) {
        var item = FormHelper.forms[id], obj = document.createElement("div");
        obj.id = id + "_form";
        addClass(obj, "abstract_form");
        addClass(obj, "menu");
        addClass(obj, "scrolling_allowed");
        text && text.fullscreen ? (obj.style.width = "99%", obj.style.height = "99%", obj.style.marginLeft = "0px", 
        obj.style.marginTop = "0px", obj.style.left = "0px", obj.style.top = "0px", obj.style.zIndex = 9999) : (obj.style.width = item.width + "px", 
        obj.style.height = item.height + "px", obj.style.marginLeft = -item.width / 2 + "px", 
        obj.style.marginTop = -item.height / 2 + "px");
        var arrow = document.createElement("span");
        addClass(arrow, "common_border_bottom");
        var elem = document.createElement("span");
        addClass(elem, "abstract_form_title");
        elem.innerHTML = item.title;
        arrow.appendChild(elem);
        for (var i in item.links) elem = document.createElement("span"), addClass(elem, "common_link"), 
        elem.style.margin = "0px", elem.style.marginBottom = "2px", elem.style.marginRight = item.links[i].marginRight + "px", 
        elem.innerHTML = item.links[i].name, bindOnPress(elem, item.links[i].method), item.links[i].id && (elem.id = item.links[i].id), 
        text && text.fullscreen && (elem.style.fontSize = "18px"), arrow.appendChild(elem);
        obj.appendChild(arrow);
        item = document.createElement("div");
        item.style.paddingTop = "8px";
        addClass(item, "scrolling_allowed");
        item.id = id + "_form_content";
        obj.appendChild(item);
        wrapper.appendChild(obj);
        return obj;
    },
    focus_id: !1,
    remember_focus: function(a) {
        if ("string" == typeof a) return FormHelper.focus_id = a;
        if ("object" == typeof a) return FormHelper.focus_id = a.id;
        FormHelper.focus_id = document.activeElement ? document.activeElement.id : !1;
    },
    restore_focus: function() {
        if (FormHelper.focus_id) {
            var node = document.getElementById(FormHelper.focus_id);
            if (node.value) try {
                node.selectionStart = node.value.length, node.selectionEnd = node.value.length;
            } catch (b) {}
            node.focus();
        }
    },
    update_item_list_select: function(element, query, type) {
        var n = [ [], [ 1033, 1326, 1325, 1143, 358, 1240 ] ], c = document.getElementById(element + "_category").value;
        element = document.getElementById(element + "_items");
        type = type || element.value;
        element.innerHTML = "";
        for (var i = 0; i < item_categories[c].items.length; i++) if (-1 == n[query].indexOf(item_categories[c].items[i].id)) {
            var option = document.createElement("option");
            option.selected = item_categories[c].items[i].id == type ? !0 : !1;
            option.value = item_categories[c].items[i].id;
            option.innerHTML = item_categories[c].items[i].name;
            element.appendChild(option);
        }
    }
}, TableSorter;

TableSorter = function() {
    var a, c, d, e, f, i, o, n;
    a = o = null;
    d = "";
    i = function(r) {
        return r.cells.item(a).dataset.sortvalue || r.cells.item(a).textContent.toLowerCase();
    };
    f = function(key, b) {
        var o, v, a;
        v = i(key);
        a = i(b);
        if (o = parseInt(v, 10)) v = o, a = parseInt(a, 10);
        return v > a ? 1 : v < a ? -1 : 0;
    };
    n = function() {
        var b;
        b = "asc" !== d ? "asc" : "desc";
        o.className = (o.className.replace(d, "") + " " + b).trim();
        return d = b;
    };
    e = function() {
        o.className = o.className.replace("asc", "").replace("desc", "");
        return d = "";
    };
    c = function(name) {
        var list, i, _i, _len;
        o && a !== name.target.cellIndex && e();
        o = name.target;
        if ("th" === o.nodeName.toLowerCase() && (a = o.cellIndex, i = o.offsetParent.getElementsByTagName("tbody")[0], 
        list = i.rows)) for (list = Array.prototype.slice.call(list, 0), list = Array.prototype.sort.call(list, f), 
        "asc" === d && Array.prototype.reverse.call(list), n(), i.innerHtml = "", _i = 0, 
        _len = list.length; _i < _len; _i++) name = list[_i], _i % 2 ? removeClass(name, "even") : addClass(name, "even"), 
        i.appendChild(name);
    };
    return {
        init: function(obj) {
            var items, idx, len, ret;
            items = obj.getElementsByTagName("th");
            ret = [];
            idx = 0;
            for (len = items.length; idx < len; idx++) obj = items[idx], ret.push(obj.onclick = c);
            return ret;
        }
    };
}();

!function(win, doc, key, value) {
    function log(obj, str, message) {
        return setTimeout(call(obj, message), str);
    }
    function func(o, i, ret) {
        return Array.isArray(o) ? (forEach(o, ret[i], ret), !0) : !1;
    }
    function forEach(arr, fun, thisp) {
        var i;
        if (arr) if (arr.forEach) arr.forEach(fun, thisp); else if (arr.length !== value) for (i = 0; i < arr.length; ) fun.call(thisp, arr[i], i, arr), 
        i++; else for (i in arr) arr.hasOwnProperty(i) && fun.call(thisp, arr[i], i, arr);
    }
    function merge(a, b, result) {
        for (var keys = Object.keys(b), i = 0; i < keys.length; ) (!result || result && a[keys[i]] === value) && (a[keys[i]] = b[keys[i]]), 
        i++;
        return a;
    }
    function extend(a, b) {
        return merge(a, b, !0);
    }
    function push(To, object, callback) {
        var prototype = object.prototype;
        object = To.prototype = Object.create(prototype);
        object.constructor = To;
        object._super = prototype;
        callback && merge(object, callback);
    }
    function call(fn, scope) {
        return function() {
            return fn.apply(scope, arguments);
        };
    }
    function watch(callback, args) {
        return typeof callback == TanTable ? callback.apply(args ? args[0] || value : value, args) : callback;
    }
    function remove(a, els, d) {
        forEach(classes(els), function(o) {
            a.addEventListener(o, d, !1);
        });
    }
    function find(f, target, d) {
        forEach(classes(target), function(e) {
            f.removeEventListener(e, d, !1);
        });
    }
    function equal(a, b) {
        for (;a; ) {
            if (a == b) return !0;
            a = a.parentNode;
        }
        return !1;
    }
    function classes(classStr) {
        return classStr.trim().split(/\s+/g);
    }
    function has(array, item, property) {
        if (array.indexOf && !property) return array.indexOf(item);
        for (var i = 0; i < array.length; ) {
            if (property && array[i][property] == item || !property && array[i] === item) return i;
            i++;
        }
        return -1;
    }
    function filter(array) {
        return Array.prototype.slice.call(array, 0);
    }
    function min(array, key, target) {
        for (var value = [], args = [], i = 0; i < array.length; ) {
            var id = key ? array[i][key] : array[i];
            0 > has(args, id) && value.push(array[i]);
            args[i] = id;
            i++;
        }
        return target && (value = key ? value.sort(function(a, b) {
            return a[key] > b[key];
        }) : value.sort()), value;
    }
    function camelCase(config, str) {
        for (var param, name, ch = str[0].toUpperCase() + str.slice(1), i = 0; i < SinTable.length; ) {
            if (param = SinTable[i], name = param ? param + ch : str, name in config) return name;
            i++;
        }
        return value;
    }
    function getWindow(elem) {
        elem = elem.ownerDocument;
        return elem.defaultView || elem.parentWindow;
    }
    function callback(d, defaultCallback) {
        var that = this;
        this.manager = d;
        this.callback = defaultCallback;
        this.element = d.element;
        this.target = d.options.inputTarget;
        this.domHandler = function(e) {
            watch(d.options.enable, [ d ]) && that.handler(e);
        };
        this.init();
    }
    function $(state) {
        var inb = state.options.inputClass;
        return new (inb ? inb : q_fourth ? op : dir4_east ? Model : q_third ? create : F)(state, update);
    }
    function update(request, element, e) {
        var points = e.pointers.length, c = e.changedPointers.length, n = element & dir4_west && 0 === points - c, points = element & (dir4_nodir | dir8_east) && 0 === points - c;
        e.isFirst = !!n;
        e.isFinal = !!points;
        n && (request.session = {});
        e.eventType = element;
        element = request.session;
        n = e.pointers;
        points = n.length;
        element.firstInput || (element.firstInput = block(e));
        1 < points && !element.firstMultiple ? element.firstMultiple = block(e) : 1 === points && (element.firstMultiple = !1);
        var c = element.firstInput, s = (points = element.firstMultiple) ? points.center : c.center, p = e.center = indexOf(n);
        e.timeStamp = ColumnAngle();
        e.deltaTime = e.timeStamp - c.timeStamp;
        e.angle = angle(s, p);
        e.distance = distance(s, p);
        var c = e.center, s = element.offsetDelta || {}, p = element.prevDelta || {}, r = element.prevInput || {};
        (e.eventType === dir4_west || r.eventType === dir4_nodir) && (p = element.prevDelta = {
            x: r.deltaX || 0,
            y: r.deltaY || 0
        }, s = element.offsetDelta = {
            x: c.x,
            y: c.y
        });
        e.deltaX = p.x + (c.x - s.x);
        e.deltaY = p.y + (c.y - s.y);
        e.offsetDirection = slice(e.deltaX, e.deltaY);
        points ? (c = points.pointers, c = distance(n[0], n[1], dy4dir) / distance(c[0], c[1], dy4dir)) : c = 1;
        e.scale = c;
        points ? (points = points.pointers, n = angle(n[1], n[0], dy4dir) - angle(points[1], points[0], dy4dir)) : n = 0;
        e.rotation = n;
        s = element.lastInterval || e;
        n = e.timeStamp - s.timeStamp;
        e.eventType != dir8_east && (n > dir4_north || s.velocity === value) ? (c = s.deltaX - e.deltaX, 
        s = s.deltaY - e.deltaY, p = c / n || 0, r = s / n || 0, n = p, points = r, p = YnextTable(p) > YnextTable(r) ? p : r, 
        c = slice(c, s), element.lastInterval = e) : (p = s.velocity, n = s.velocityX, points = s.velocityY, 
        c = s.direction);
        e.velocity = p;
        e.velocityX = n;
        e.velocityY = points;
        e.direction = c;
        element = request.element;
        equal(e.srcEvent.target, element) && (element = e.srcEvent.target);
        e.target = element;
        request.emit("hammer.input", e);
        request.recognize(e);
        request.session.prevInput = e;
    }
    function block(template) {
        for (var obj = [], i = 0; i < template.pointers.length; ) obj[i] = {
            clientX: XnextTable(template.pointers[i].clientX),
            clientY: XnextTable(template.pointers[i].clientY)
        }, i++;
        return {
            timeStamp: ColumnAngle(),
            pointers: obj,
            center: indexOf(obj),
            deltaX: template.deltaX,
            deltaY: template.deltaY
        };
    }
    function indexOf(touches) {
        var length = touches.length;
        if (1 === length) return {
            x: XnextTable(touches[0].clientX),
            y: XnextTable(touches[0].clientY)
        };
        for (var e = 0, x = 0, i = 0; length > i; ) e += touches[i].clientX, x += touches[i].clientY, 
        i++;
        return {
            x: XnextTable(e / length),
            y: XnextTable(x / length)
        };
    }
    function slice(a, b) {
        return a === b ? dir8_northeast : YnextTable(a) >= YnextTable(b) ? 0 < a ? dir8_north : dir8_northwest : 0 < b ? dir8_west : dir8_southwest;
    }
    function distance(a, b, stats) {
        stats || (stats = dx4dir);
        var y = b[stats[0]] - a[stats[0]];
        a = b[stats[1]] - a[stats[1]];
        return Math.sqrt(y * y + a * a);
    }
    function angle(a, b, stats) {
        stats || (stats = dx4dir);
        return 180 * Math.atan2(b[stats[1]] - a[stats[1]], b[stats[0]] - a[stats[0]]) / Math.PI;
    }
    function F() {
        this.evEl = expected;
        this.evWin = actual;
        this.allow = !0;
        this.pressed = !1;
        callback.apply(this, arguments);
    }
    function op() {
        this.evEl = p;
        this.evWin = q;
        callback.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
    }
    function union() {
        this.evTarget = marker;
        this.evWin = len;
        this.started = !1;
        callback.apply(this, arguments);
    }
    function Model() {
        this.evTarget = start;
        this.targetIds = {};
        callback.apply(this, arguments);
    }
    function f(e, n) {
        var i = filter(e.touches), s = this.targetIds;
        if (n & (dir4_west | dir4_south) && 1 === i.length) return s[i[0].identifier] = !0, 
        [ i, i ];
        var d, a = filter(e.changedTouches), r = [], b = this.target;
        if (d = i.filter(function(r) {
            return equal(r.target, b);
        }), n === dir4_west) for (i = 0; i < d.length; ) s[d[i].identifier] = !0, i++;
        for (i = 0; i < a.length; ) s[a[i].identifier] && r.push(a[i]), n & (dir4_nodir | dir8_east) && delete s[a[i].identifier], 
        i++;
        return r.length ? [ min(d.concat(r), "identifier", !0), r ] : void 0;
    }
    function create() {
        callback.apply(this, arguments);
        var args = call(this.handler, this);
        this.touch = new Model(this.manager, args);
        this.mouse = new F(this.manager, args);
    }
    function Map(_contentManager, c) {
        this.manager = _contentManager;
        this.set(c);
    }
    function fn(b) {
        if (-1 < b.indexOf(element)) return element;
        var k = -1 < b.indexOf(name), d = -1 < b.indexOf(result);
        return k && d ? name + " " + result : k || d ? k ? name : result : -1 < b.indexOf(index) ? index : length;
    }
    function end(c) {
        this.id = q_first++;
        this.manager = null;
        this.options = extend(c || {}, this.defaults);
        c = this.options.enable;
        this.options.enable = c === value ? !0 : c;
        this.state = state;
        this.simultaneous = {};
        this.requireFail = [];
    }
    function move(dir) {
        return dir == dir8_southwest ? "down" : dir == dir8_west ? "up" : dir == dir8_north ? "left" : dir == dir8_northwest ? "right" : "";
    }
    function validate(component, field) {
        var value = field.manager;
        return value ? value.get(component) : component;
    }
    function method() {
        end.apply(this, arguments);
    }
    function animator() {
        method.apply(this, arguments);
        this.pY = this.pX = null;
    }
    function proxy() {
        method.apply(this, arguments);
    }
    function next() {
        end.apply(this, arguments);
        this._input = this._timer = null;
    }
    function kickoff() {
        method.apply(this, arguments);
    }
    function path() {
        method.apply(this, arguments);
    }
    function HTMLMapElement() {
        end.apply(this, arguments);
        this.pCenter = this.pTime = !1;
        this._input = this._timer = null;
        this.count = 0;
    }
    function config(opt, cfg) {
        cfg = cfg || {};
        var curr = cfg.recognizers;
        return cfg.recognizers = curr === value ? config.defaults.preset : curr, new Game(opt, cfg);
    }
    function Game(element, o) {
        o = o || {};
        this.options = extend(o, config.defaults);
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.element = element;
        this.input = $(this);
        this.touchAction = new Map(this, this.options.touchAction);
        load(this, !0);
        forEach(o.recognizers, function(points) {
            var context = this.add(new points[0](points[1]));
            points[2] && context.recognizeWith(points[2]);
            points[3] && context.requireFailure(points[3]);
        }, this);
    }
    function load(data, id) {
        var element = data.element;
        forEach(data.options.cssProps, function(value, prop) {
            element.style[camelCase(element.style, prop)] = id ? value : "";
        });
    }
    function fireEvent(n, event) {
        var e = doc.createEvent("Event");
        e.initEvent(n, !0, !0);
        e.gesture = event;
        event.target.dispatchEvent(e);
    }
    var SinTable = " webkit moz MS ms o".split(" "), CosTable = doc.createElement("div"), TanTable = "function", XnextTable = Math.round, YnextTable = Math.abs, ColumnAngle = Date.now, q_first = 1, dir8_nodir = /mobile|tablet|ip(ad|hone|od)|android/i, q_third = "ontouchstart" in win, q_fourth = camelCase(win, "PointerEvent") !== value, dir4_east = q_third && dir8_nodir.test(navigator.userAgent), dir4_north = 25, dir4_west = 1, dir4_south = 2, dir4_nodir = 4, dir8_east = 8, dir8_northeast = 1, dir8_north = 2, dir8_northwest = 4, dir8_west = 8, dir8_southwest = 16, dir8_south = dir8_north | dir8_northwest, dir8_southeast = dir8_west | dir8_southwest, dir8_nodir = dir8_south | dir8_southeast, dx4dir = [ "x", "y" ], dy4dir = [ "clientX", "clientY" ];
    callback.prototype = {
        handler: function() {},
        init: function() {
            this.evEl && remove(this.element, this.evEl, this.domHandler);
            this.evTarget && remove(this.target, this.evTarget, this.domHandler);
            this.evWin && remove(getWindow(this.element), this.evWin, this.domHandler);
        },
        destroy: function() {
            this.evEl && find(this.element, this.evEl, this.domHandler);
            this.evTarget && find(this.target, this.evTarget, this.domHandler);
            this.evWin && find(getWindow(this.element), this.evWin, this.domHandler);
        }
    };
    var listeners = {
        mousedown: dir4_west,
        mousemove: dir4_south,
        mouseup: dir4_nodir
    }, expected = "mousedown", actual = "mousemove mouseup";
    push(F, callback, {
        handler: function(event) {
            var listenerArray = listeners[event.type];
            listenerArray & dir4_west && 0 === event.button && (this.pressed = !0);
            listenerArray & dir4_south && 1 !== event.which && (listenerArray = dir4_nodir);
            this.pressed && this.allow && (listenerArray & dir4_nodir && (this.pressed = !1), 
            this.callback(this.manager, listenerArray, {
                pointers: [ event ],
                changedPointers: [ event ],
                pointerType: "mouse",
                srcEvent: event
            }));
        }
    });
    var a = {
        pointerdown: dir4_west,
        pointermove: dir4_south,
        pointerup: dir4_nodir,
        pointercancel: dir8_east,
        pointerout: dir8_east
    }, keyMap = {
        2: "touch",
        3: "pen",
        4: "mouse",
        5: "kinect"
    }, p = "pointerdown", q = "pointermove pointerup pointercancel";
    win.MSPointerEvent && (p = "MSPointerDown", q = "MSPointerMove MSPointerUp MSPointerCancel");
    push(op, callback, {
        handler: function(e) {
            var s = this.store, i = !1, x = e.type.toLowerCase().replace("ms", ""), x = a[x], key = keyMap[e.pointerType] || e.pointerType, v = "touch" == key, k = has(s, e.pointerId, "pointerId");
            x & dir4_west && (0 === e.button || v) ? 0 > k && (s.push(e), k = s.length - 1) : x & (dir4_nodir | dir8_east) && (i = !0);
            0 > k || (s[k] = e, this.callback(this.manager, x, {
                pointers: s,
                changedPointers: [ e ],
                pointerType: key,
                srcEvent: e
            }), i && s.splice(k, 1));
        }
    });
    var map = {
        touchstart: dir4_west,
        touchmove: dir4_south,
        touchend: dir4_nodir,
        touchcancel: dir8_east
    }, marker = "touchstart", len = "touchstart touchmove touchend touchcancel";
    push(union, callback, {
        handler: function(elem) {
            var record = map[elem.type];
            if (record === dir4_west && (this.started = !0), this.started) {
                var parts, result = filter(elem.touches);
                parts = filter(elem.changedTouches);
                parts = (record & (dir4_nodir | dir8_east) && (result = min(result.concat(parts), "identifier", !0)), 
                [ result, parts ]);
                record & (dir4_nodir | dir8_east) && 0 === parts[0].length - parts[1].length && (this.started = !1);
                this.callback(this.manager, record, {
                    pointers: parts[0],
                    changedPointers: parts[1],
                    pointerType: "touch",
                    srcEvent: elem
                });
            }
        }
    });
    var handlers = {
        touchstart: dir4_west,
        touchmove: dir4_south,
        touchend: dir4_nodir,
        touchcancel: dir8_east
    }, start = "touchstart touchmove touchend touchcancel";
    push(Model, callback, {
        handler: function(obj) {
            var func = handlers[obj.type], result = f.call(this, obj, func);
            result && this.callback(this.manager, func, {
                pointers: result[0],
                changedPointers: result[1],
                pointerType: "touch",
                srcEvent: obj
            });
        }
    });
    push(create, callback, {
        handler: function(expected, actual, message) {
            var distance = "mouse" == message.pointerType;
            if ("touch" == message.pointerType) this.mouse.allow = !1; else if (distance && !this.mouse.allow) return;
            actual & (dir4_nodir | dir8_east) && (this.mouse.allow = !0);
            this.callback(expected, actual, message);
        },
        destroy: function() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });
    var type = camelCase(CosTable.style, "touchAction"), l = type !== value, length = "auto", index = "manipulation", element = "none", name = "pan-x", result = "pan-y";
    Map.prototype = {
        set: function(val) {
            "compute" == val && (val = this.compute());
            l && (this.manager.element.style[type] = val);
            this.actions = val.toLowerCase().trim();
        },
        update: function() {
            this.set(this.manager.options.touchAction);
        },
        compute: function() {
            var parts = [];
            return forEach(this.manager.recognizers, function(anInput) {
                watch(anInput.options.enable, [ anInput ]) && (parts = parts.concat(anInput.getTouchAction()));
            }), fn(parts.join(" "));
        },
        preventDefaults: function(e) {
            if (!l) {
                var content = e.srcEvent;
                e = e.offsetDirection;
                if (this.manager.session.prevented) return void content.preventDefault();
                var d = this.actions, arity = -1 < d.indexOf(element), f = -1 < d.indexOf(result), d = -1 < d.indexOf(name);
                return arity || f && e & dir8_south || d && e & dir8_southeast ? this.preventSrc(content) : void 0;
            }
        },
        preventSrc: function(event) {
            this.manager.session.prevented = !0;
            event.preventDefault();
        }
    };
    var state = 1;
    end.prototype = {
        defaults: {},
        set: function(newOptions) {
            return merge(this.options, newOptions), this.manager && this.manager.touchAction.update(), 
            this;
        },
        recognizeWith: function(v) {
            if (func(v, "recognizeWith", this)) return this;
            var seen = this.simultaneous;
            return v = validate(v, this), seen[v.id] || (seen[v.id] = v, v.recognizeWith(this)), 
            this;
        },
        dropRecognizeWith: function(v) {
            return func(v, "dropRecognizeWith", this) ? this : (v = validate(v, this), delete this.simultaneous[v.id], 
            this);
        },
        requireFailure: function(b) {
            if (func(b, "requireFailure", this)) return this;
            var a = this.requireFail;
            return b = validate(b, this), -1 === has(a, b) && (a.push(b), b.requireFailure(this)), 
            this;
        },
        dropRequireFailure: function(v) {
            if (func(v, "dropRequireFailure", this)) return this;
            v = validate(v, this);
            v = has(this.requireFail, v);
            return -1 < v && this.requireFail.splice(v, 1), this;
        },
        hasRequireFailures: function() {
            return 0 < this.requireFail.length;
        },
        canRecognizeWith: function(other) {
            return !!this.simultaneous[other.id];
        },
        emit: function(err) {
            function render(mode) {
                instance.manager.emit(instance.options.event + (mode ? value & 16 ? "cancel" : value & 8 ? "end" : value & 4 ? "move" : value & 2 ? "start" : "" : ""), err);
            }
            var instance = this, value = this.state;
            8 > value && render(!0);
            render();
            8 <= value && render(!0);
        },
        tryEmit: function(eventKey) {
            return this.canEmit() ? this.emit(eventKey) : void (this.state = 32);
        },
        canEmit: function() {
            for (var m = 0; m < this.requireFail.length; ) {
                if (!(this.requireFail[m].state & (32 | state))) return !1;
                m++;
            }
            return !0;
        },
        recognize: function(val) {
            val = merge({}, val);
            return watch(this.options.enable, [ this, val ]) ? (this.state & 56 && (this.state = state), 
            this.state = this.process(val), void (this.state & 30 && this.tryEmit(val))) : (this.reset(), 
            void (this.state = 32));
        },
        process: function() {},
        getTouchAction: function() {},
        reset: function() {}
    };
    push(method, end, {
        defaults: {
            pointers: 1
        },
        attrTest: function(cache) {
            var offset = this.options.pointers;
            return 0 === offset || cache.pointers.length === offset;
        },
        process: function(val) {
            var a = this.state, b = val.eventType, obj = a & 6;
            val = this.attrTest(val);
            return obj && (b & dir8_east || !val) ? a | 16 : obj || val ? b & dir4_nodir ? a | 8 : a & 2 ? a | 4 : 2 : 32;
        }
    });
    push(animator, method, {
        defaults: {
            event: "pan",
            threshold: 10,
            pointers: 1,
            direction: dir8_nodir
        },
        getTouchAction: function() {
            var search = this.options.direction, results = [];
            return search & dir8_south && results.push(result), search & dir8_southeast && results.push(name), 
            results;
        },
        directionTest: function(p) {
            var o = this.options, sum = !0, a = p.distance, b = p.direction, dx = p.deltaX, dy = p.deltaY;
            return b & o.direction || (o.direction & dir8_south ? (b = 0 === dx ? dir8_northeast : 0 > dx ? dir8_north : dir8_northwest, 
            sum = dx != this.pX, a = Math.abs(p.deltaX)) : (b = 0 === dy ? dir8_northeast : 0 > dy ? dir8_west : dir8_southwest, 
            sum = dy != this.pY, a = Math.abs(p.deltaY))), p.direction = b, sum && a > o.threshold && b & o.direction;
        },
        attrTest: function(service) {
            return method.prototype.attrTest.call(this, service) && (this.state & 2 || !(this.state & 2) && this.directionTest(service));
        },
        emit: function(ev) {
            this.pX = ev.deltaX;
            this.pY = ev.deltaY;
            var eventName = move(ev.direction);
            eventName && this.manager.emit(this.options.event + eventName, ev);
            this._super.emit.call(this, ev);
        }
    });
    push(proxy, method, {
        defaults: {
            event: "pinch",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [ element ];
        },
        attrTest: function(model) {
            return this._super.attrTest.call(this, model) && (Math.abs(model.scale - 1) > this.options.threshold || this.state & 2);
        },
        emit: function(args) {
            (this._super.emit.call(this, args), 1 !== args.scale) && this.manager.emit(this.options.event + (1 > args.scale ? "in" : "out"), args);
        }
    });
    push(next, end, {
        defaults: {
            event: "press",
            pointers: 1,
            time: 500,
            threshold: 5
        },
        getTouchAction: function() {
            return [ length ];
        },
        process: function(event) {
            var o = this.options, e = event.pointers.length === o.pointers, count = event.distance < o.threshold, i = event.deltaTime > o.time;
            if (this._input = event, !count || !e || event.eventType & (dir4_nodir | dir8_east) && !i) this.reset(); else if (event.eventType & dir4_west) this.reset(), 
            this._timer = log(function() {
                this.state = 8;
                this.tryEmit();
            }, o.time, this); else if (event.eventType & dir4_nodir) return 8;
            return 32;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function(err) {
            8 === this.state && (err && err.eventType & dir4_nodir ? this.manager.emit(this.options.event + "up", err) : (this._input.timeStamp = ColumnAngle(), 
            this.manager.emit(this.options.event, this._input)));
        }
    });
    push(kickoff, method, {
        defaults: {
            event: "rotate",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [ element ];
        },
        attrTest: function(e) {
            return this._super.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || this.state & 2);
        }
    });
    push(path, method, {
        defaults: {
            event: "swipe",
            threshold: 10,
            velocity: .65,
            direction: dir8_south | dir8_southeast,
            pointers: 1
        },
        getTouchAction: function() {
            return animator.prototype.getTouchAction.call(this);
        },
        attrTest: function(settings) {
            var id, direction = this.options.direction;
            return direction & (dir8_south | dir8_southeast) ? id = settings.velocity : direction & dir8_south ? id = settings.velocityX : direction & dir8_southeast && (id = settings.velocityY), 
            this._super.attrTest.call(this, settings) && direction & settings.direction && settings.distance > this.options.threshold && YnextTable(id) > this.options.velocity && settings.eventType & dir4_nodir;
        },
        emit: function(data) {
            var i = move(data.direction);
            i && this.manager.emit(this.options.event + i, data);
            this.manager.emit(this.options.event, data);
        }
    });
    push(HTMLMapElement, end, {
        defaults: {
            event: "tap",
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 2,
            posThreshold: 10
        },
        getTouchAction: function() {
            return [ index ];
        },
        process: function(that) {
            var o = this.options, v = that.pointers.length === o.pointers, f = that.distance < o.threshold, l = that.deltaTime < o.time;
            if (this.reset(), that.eventType & dir4_west && 0 === this.count) return this.failTimeout();
            if (f && l && v) {
                if (that.eventType != dir4_nodir) return this.failTimeout();
                v = this.pTime ? that.timeStamp - this.pTime < o.interval : !0;
                f = !this.pCenter || distance(this.pCenter, that.center) < o.posThreshold;
                this.pTime = that.timeStamp;
                this.pCenter = that.center;
                f && v ? this.count += 1 : this.count = 1;
                this._input = that;
                if (0 === this.count % o.taps) return this.hasRequireFailures() ? (this._timer = log(function() {
                    this.state = 8;
                    this.tryEmit();
                }, o.interval, this), 2) : 8;
            }
            return 32;
        },
        failTimeout: function() {
            return this._timer = log(function() {
                this.state = 32;
            }, this.options.interval, this), 32;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function() {
            8 == this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }
    });
    config.VERSION = "2.0.4";
    config.defaults = {
        domEvents: !1,
        touchAction: "compute",
        enable: !0,
        inputTarget: null,
        inputClass: null,
        preset: [ [ kickoff, {
            enable: !1
        } ], [ proxy, {
            enable: !1
        }, [ "rotate" ] ], [ path, {
            direction: dir8_south
        } ], [ animator, {
            direction: dir8_south
        }, [ "swipe" ] ], [ HTMLMapElement ], [ HTMLMapElement, {
            event: "doubletap",
            taps: 2
        }, [ "tap" ] ], [ next ] ],
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    Game.prototype = {
        set: function(value) {
            return merge(this.options, value), value.touchAction && this.touchAction.update(), 
            value.inputTarget && (this.input.destroy(), this.input.target = value.inputTarget, 
            this.input.init()), this;
        },
        stop: function(immediate) {
            this.session.stopped = immediate ? 2 : 1;
        },
        recognize: function(e) {
            var data = this.session;
            if (!data.stopped) {
                this.touchAction.preventDefaults(e);
                var s, path = this.recognizers, args = data.curRecognizer;
                (!args || args && args.state & 8) && (args = data.curRecognizer = null);
                for (var i = 0; i < path.length; ) s = path[i], 2 === data.stopped || args && s != args && !s.canRecognizeWith(args) ? s.reset() : s.recognize(e), 
                !args && s.state & 14 && (args = data.curRecognizer = s), i++;
            }
        },
        get: function(key) {
            if (key instanceof end) return key;
            for (var series = this.recognizers, i = 0; i < series.length; i++) if (series[i].options.event == key) return series[i];
            return null;
        },
        add: function(child) {
            if (func(child, "add", this)) return this;
            var index = this.get(child.options.event);
            return index && this.remove(index), this.recognizers.push(child), child.manager = this, 
            this.touchAction.update(), child;
        },
        remove: function(id) {
            if (func(id, "remove", this)) return this;
            var conn = this.recognizers;
            return id = this.get(id), conn.splice(has(conn, id), 1), this.touchAction.update(), 
            this;
        },
        on: function(className, callback) {
            var events = this.handlers;
            return forEach(classes(className), function(spec) {
                events[spec] = events[spec] || [];
                events[spec].push(callback);
            }), this;
        },
        off: function(events, callback) {
            var listeners = this.handlers;
            return forEach(classes(events), function(i) {
                callback ? listeners[i].splice(has(listeners[i], callback), 1) : delete listeners[i];
            }), this;
        },
        emit: function(type, data) {
            this.options.domEvents && fireEvent(type, data);
            var listeners = this.handlers[type] && this.handlers[type].slice();
            if (listeners && listeners.length) {
                data.type = type;
                data.preventDefault = function() {
                    data.srcEvent.preventDefault();
                };
                for (var i = 0; i < listeners.length; ) listeners[i](data), i++;
            }
        },
        destroy: function() {
            this.element && load(this, !1);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };
    merge(config, {
        INPUT_START: dir4_west,
        INPUT_MOVE: dir4_south,
        INPUT_END: dir4_nodir,
        INPUT_CANCEL: dir8_east,
        STATE_POSSIBLE: state,
        STATE_BEGAN: 2,
        STATE_CHANGED: 4,
        STATE_ENDED: 8,
        STATE_RECOGNIZED: 8,
        STATE_CANCELLED: 16,
        STATE_FAILED: 32,
        DIRECTION_NONE: dir8_northeast,
        DIRECTION_LEFT: dir8_north,
        DIRECTION_RIGHT: dir8_northwest,
        DIRECTION_UP: dir8_west,
        DIRECTION_DOWN: dir8_southwest,
        DIRECTION_HORIZONTAL: dir8_south,
        DIRECTION_VERTICAL: dir8_southeast,
        DIRECTION_ALL: dir8_nodir,
        Manager: Game,
        Input: callback,
        TouchAction: Map,
        TouchInput: Model,
        MouseInput: F,
        PointerEventInput: op,
        TouchMouseInput: create,
        SingleTouchInput: union,
        Recognizer: end,
        AttrRecognizer: method,
        Tap: HTMLMapElement,
        Pan: animator,
        Swipe: path,
        Pinch: proxy,
        Rotate: kickoff,
        Press: next,
        on: remove,
        off: find,
        each: forEach,
        merge: extend,
        extend: merge,
        inherit: push,
        bindFn: call,
        prefixed: camelCase
    });
    typeof define == TanTable && define.amd ? define(function() {
        return config;
    }) : "undefined" != typeof module && module.exports ? module.exports = config : win[key] = config;
}(window, document, "Hammer");

var Steam = {
    highscore: {
        active: !1,
        initialized: !1,
        type: "around",
        available_types: [ {
            name: "Friends",
            value: "friends"
        }, {
            name: "My scores",
            value: "around"
        }, {
            name: "Overall",
            value: "global"
        } ],
        skill: "accuracy",
        available_skills: [ {
            name: "Accuracy",
            value: "accuracy"
        }, {
            name: "Alchemy",
            value: "alchemy"
        }, {
            name: "Breeding",
            value: "breeding"
        }, {
            name: "Carpentry",
            value: "carpentry"
        }, {
            name: "Cathedral level",
            value: "cathedral_level"
        }, {
            name: "Cooking",
            value: "cooking"
        }, {
            name: "Defense",
            value: "defense"
        }, {
            name: "Farming",
            value: "farming"
        }, {
            name: "Fishing",
            value: "fishing"
        }, {
            name: "Forging",
            value: "forging"
        }, {
            name: "Health",
            value: "health"
        }, {
            name: "Jewelry",
            value: "jewelry"
        }, {
            name: "Magic",
            value: "magic"
        }, {
            name: "Mining",
            value: "mining"
        }, {
            name: "Party plays",
            value: "party_plays"
        }, {
            name: "Party points",
            value: "party_points"
        }, {
            name: "Party wins",
            value: "party_wins"
        }, {
            name: "Strength",
            value: "strength"
        }, {
            name: "Woodcutting",
            value: "woodcutting"
        } ],
        toggle: function() {
            Steam.highscore.active ? Steam.highscore.close() : Steam.highscore.open();
        },
        open: function() {
            Steam.highscore.active = !0;
            var template = FormHelper.get_form("steam_highscores");
            Steam.highscore.initialized || (Steam.highscore.initialized = !0, template.content.innerHTML = HandlebarTemplate.steam_highscores_options()({
                types: Steam.highscore.available_types,
                skills: Steam.highscore.available_skills
            }), document.getElementById("steam_highscores_data").innerHTML = "Use the menu to choose a highscore");
        },
        fetch: function() {
            Steam.highscore.skill = document.getElementById("steam_highscores_skill").value;
            document.getElementById("steam_highscores_data").innerHTML = "Loading...";
            Socket.send("steam", {
                sub: "leaderboards",
                type: Steam.highscore.type,
                skill: Steam.highscore.skill,
                steamid: greenworks.getSteamId().staticAccountId
            });
        },
        show: function(props) {
            if (Steam.highscore.active) {
                for (var i = 0; i < props.length; i++) if (props[0].player == players[0].name) {
                    props[0].me = !0;
                    break;
                }
                document.getElementById("steam_highscores_data").innerHTML = HandlebarTemplate.steam_highscores()(props);
            }
        },
        close: function() {
            Steam.highscore.active = !1;
            document.getElementById("steam_highscores_form").style.display = "none";
        },
        update_type: function(type) {
            Steam.highscore.type = type;
            Steam.highscore.fetch();
        }
    },
    enabled: function() {
        return "undefined" != typeof greenworks && greenworks && greenworks.initAPI() ? !0 : !1;
    },
    report_achievement: function(a) {
        Steam.enabled() && greenworks.activateAchievement(a, null_function, null_function);
    },
    load_previous_settings: function() {
        try {
            localStorage.zoomlevel && (setZoomLevel(localStorage.zoomlevel), document.getElementById("steamzoomlevel").value = localStorage.zoomlevel);
        } catch (a) {}
    },
    initialize_mods: function() {
        quiet_mod_load = !0;
        localStorage.AKbind || (localStorage.AKbind = '[{"value":0,"enabled":false},{"value":0,"enabled":false},{"value":0,"enabled":false},{"value":0,"enabled":false},{"value":0,"enabled":false},{"value":0,"enabled":false},{"value":"69","enabled":true},{"value":"66","enabled":true},{"value":0,"enabled":false}]', 
        localStorage.autocastenabled = "0", localStorage.enableallchatts = "0", localStorage.fullscreenenabled = "0", 
        localStorage.chat_filters = '{"join_leave":true}', chat_filters.join_leave = !0, 
        localStorage.modOptionsLoad = '{"expmonitor":true,"fullscreen":true,"autocast":true,"newmap":true,"newmarket":true,"tabs":true,"kbind":true,"gearmd":true,"expbar":true,"petinv":true,"mosmob":true,"health":true,"forgem":true,"chestm":true,"rclick":true,"magicm":true,"wikimd":true,"miscmd":true,"chatmd":true,"farming":true}', 
        localStorage.modOptionsNewmod = '{"expmonitor":false,"fullscreen":false,"autocast":false,"newmap":false,"newmarket":false,"tabs":false,"kbind":false,"gearmd":false,"expbar":false,"petinv":false,"mosmob":false,"health":false,"forgem":false,"chestm":false,"rclick":false,"magicm":false,"wikimd":false,"miscmd":false,"chatmd":false,"farming":false}');
        document.getElementById("mods_link").style.display = "none";
        document.body.appendChild(document.createElement("script")).src = cdn_url + "mod.js?v=" + mod_version;
    },
    payment_issues: !1,
    payment_problems: function() {
        Popup.prompt("Make sure you are logged into Steam. Alternatively login and pay from <span onclick='javascript:createExternalLink(\"http://rpg.mo.ee\")()' class='common_link'/>http://rpg.mo.ee</span><br>Try enabling web payments?", function() {
            Steam.payment_issues = !0;
        });
    }
}, map_size_x = 100, map_size_y = 100, map_settings = {}, null_function = function() {};

function create2DArray(x, index) {
    var orders = [], i = 0;
    for (1 == index && (i = -x); i <= x; i++) orders[i] = [];
    return orders;
}

function thousandSeperate(number) {
    number = number.toString().replace(/,/g, "");
    for (var r = /(-?[0-9]+)([0-9]{3})/; r.test(number); ) number = number.replace(r, "$1,$2");
    return number;
}

function deepObjCopy(data) {
    var d = {};
    if ("object" == typeof data && null != data) {
        "undefined" != typeof data.length && (d = []);
        for (var k in data) "object" == typeof data[k] ? d[k] = deepObjCopy(data[k]) : "string" == typeof data[k] ? d[k] = data[k] : "number" == typeof data[k] ? d[k] = data[k] : "boolean" == typeof data[k] && (1 == data[k] ? d[k] = !0 : d[k] = !1);
    }
    return d;
}

function sortArrayOfObjectsByFieldValueAsc(spies, property) {
    return spies.sort(function(a, b) {
        return a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
    });
}

function sortChannels(spies) {
    return spies.sort(function(a, b) {
        return "{M}" == a ? 1 : "{M}" == b || a < b ? -1 : a > b ? 1 : 0;
    });
}

function sortArrayOfObjectsByFieldValueDesc(spies, property) {
    return spies.sort(function(a, b) {
        return a[property] > b[property] ? -1 : a[property] < b[property] ? 1 : 0;
    });
}

var ArrayHelper = {
    clone: function(a) {
        for (var c = [], d = 0, h = a.length; d < h; d++) c[d] = a[d];
        return c;
    },
    unique: function(a) {
        a = a.sort(function(x, y) {
            return 1 * x - 1 * y;
        });
        for (var ret = [ a[0] ], i = 1; i < a.length; i++) a[i - 1] !== a[i] && ret.push(a[i]);
        return ret;
    },
    sample: function(obj) {
        return obj[obj.length * Math.random() << 0];
    }
};

JSON.merge = function(a, o) {
    var r = deepObjCopy(a), k;
    for (k in o) o.hasOwnProperty(k) && (r[k] = o[k]);
    return r;
};

JSON.count = function(obj) {
    var size = 0, key;
    for (key in obj) obj.hasOwnProperty(key) && ++size;
    return size;
};

JSON.clone = function(a) {
    return deepObjCopy(a);
};

String.prototype.sanitizeChat = function() {
    return escapeHtml(this);
};

String.prototype.filterChat = function(play) {
    var href = /()/gi;
    switch (play) {
      case "EN":
        href = /(asshole|ass hole|bitch|blowjob|cunt|dickface|dildo|dumbshit|dumb ass|dumbass|faggot|fuck|fucking|handjob|hand job|jerkoff|jerk off|nigga|nigger|penis|prick|pussy|queer|shit|sh1t|slut|twat|vagina|wank|whore)/gi;
    }
    return this.replace(href, function(s) {
        return s.replace(/./g, "*");
    });
};

var entityMap = {
    "&": "",
    "<": "",
    ">": "",
    "'": "`"
};

function escapeHtml(string) {
    return String(string).replace(/[&<>']/g, function(s) {
        return entityMap[s];
    });
}

String.prototype.sanitizeLang = function() {
    return this.substring(0, 2).trim().toUpperCase();
};

String.prototype.sanitize = function() {
    return this.replace(/[^A-Za-z-_0-9\u00fc\u00f5\u00f6\u00e4\u00d6\u00c4\u00d5\u00dc\u0161\u0160\u017e\u017d\@#$%^"'; \?!\.,'()\=\+\-\*\/:]/g, "");
};

String.prototype.username = function() {
    return this.sanitize().trim().replace(/ +(?= )/g, "").replace(/\/|\\/g, "").trim();
};

String.prototype.usernamify = function() {
    return this.toLowerCase().username().substr(0, 16);
};

String.prototype.uppercasePercentage = function() {
    var key = this.length, arr = this.match(/[A-Z]/g);
    return null !== arr ? arr.length / key : 0;
};

String.prototype.symbolPercentage = function() {
    for (var pos = 0, i = 0; i < this.length; i++) {
        var cc = this.substring(i, i + 1).charCodeAt(0);
        32 == cc || 48 <= cc && 122 >= cc && !(58 <= cc && 64 >= cc) || pos++;
    }
    return Math.ceil(pos / this.length * 100) / 100;
};

String.prototype.longestStreak = function() {
    var k, v, b, n = this.length, block = 0;
    for (k = 0; k < n; k++) "" != v && v == this[k] ? b++ : b = 1, v = this[k], b > block && (block = b);
    return block;
};

String.prototype.levenshtein = function(accept, force) {
    var type = this;
    "undefined" !== typeof force && force || (type = type.toLowerCase(), accept = accept.toLowerCase());
    if (type == accept) return 0;
    var v = type.length, x = accept.length;
    if (0 === v) return 1 * x;
    if (0 === x) return 1 * v;
    var a = !1;
    try {
        a = !"0"[0];
    } catch (k) {
        a = !0;
    }
    a && (type = type.split(""), accept = accept.split(""));
    var a = Array(x + 1), result = Array(x + 1), j, i, temp, left;
    for (i = 0; i <= x; i++) a[i] = 1 * i;
    for (j = 0; j < v; j++) {
        result[0] = a[0] + 1;
        for (i = 0; i < x; i++) temp = a[i] + (type[j] == accept[i] ? 0 : 1), left = a[i + 1] + 1, 
        left < temp && (temp = left), left = result[i] + 1, left < temp && (temp = left), 
        result[i + 1] = temp;
        i = a;
        a = result;
        result = i;
    }
    return temp = a[x];
};

Filters = {
    applyFilter: function(img, params, method) {
        var canvas = Filters.getCanvas(img.width, img.height), context = canvas.getContext("2d");
        context.drawImage(img, 0, 0);
        var data;
        img = context.getImageData(0, 0, canvas.width, canvas.height);
        var parameters = [];
        "number" == typeof params.length && (parameters = params, params = parameters.pop());
        switch (params.filter) {
          case "darkness":
            data = Filters.brightness(img, -params.darkness);
            break;

          case "brightness":
            data = Filters.brightness(img, params.brightness);
            break;

          case "grayscale":
            data = Filters.grayscale(img);
            break;

          case "tint":
            data = Filters.tint(img, params.amount, params.color);
            break;

          case "blur":
            data = Filters.convolute(img, [ 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9 ]);
        }
        context.putImageData(data, 0, 0);
        var image = new Image();
        image.src = canvas.toDataURL("image/png");
        if ("number" == typeof parameters.length && 0 < parameters.length) image.onload = function() {
            return Filters.applyFilter(image, parameters, method);
        }; else if ("function" == typeof method) method(image); else return image;
    },
    brightness: function(state, offset) {
        for (var array = state.data, i = 0; i < array.length; i += 4) array[i] += offset, 
        array[i + 1] += offset, array[i + 2] += offset;
        return state;
    },
    tint: function(a, x, c) {
        for (var mat = a.data, i = 0; i < mat.length; i += 4) mat[i] = x * c.r + (1 - x) * mat[i], 
        mat[i + 1] = x * c.g + (1 - x) * mat[i + 1], mat[i + 2] = x * c.b + (1 - x) * mat[i + 2];
        return a;
    },
    grayscale: function(pixels) {
        for (var d = pixels.data, i = 0; i < d.length; i += 4) d[i] = d[i + 1] = d[i + 2] = .2126 * d[i] + .7152 * d[i + 1] + .0722 * d[i + 2];
        return pixels;
    },
    getPixels: function(img) {
        var c = this.getCanvas(img.width, img.height), ctx = c.getContext("2d");
        ctx.drawImage(img, 0, 0);
        return ctx.getImageData(0, 0, c.width, c.height);
    },
    getCanvas: function(width, height) {
        var canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        return canvas;
    },
    filterImage: function(action, filter, callback) {
        for (var args = [ this.getPixels(filter) ], i = 2; i < arguments.length; i++) args.push(arguments[i]);
        action.apply(null, args);
    },
    createImageData: function(w, h) {
        return this.tmpCtx.createImageData(w, h);
    },
    convolute: function(first, values, level) {
        var rows = Math.round(Math.sqrt(values.length)), fields = Math.floor(rows / 2), data = first.data, i = first.width;
        first = first.height;
        var result = Filters.createImageData(i, first), dst = result.data;
        level = level ? 1 : 0;
        for (var length = 0; length < first; length++) for (var l = 0; l < i; l++) {
            for (var path = length, len = l, j = 4 * (length * i + l), n = 0, val = 0, k = 0, tmp = 0, y = 0; y < rows; y++) for (var r = 0; r < rows; r++) {
                var offset = path + y - fields, time = len + r - fields;
                0 <= offset && offset < first && 0 <= time && time < i && (offset = 4 * (offset * i + time), 
                time = values[y * rows + r], n += data[offset] * time, val += data[offset + 1] * time, 
                k += data[offset + 2] * time, tmp += data[offset + 3] * time);
            }
            dst[j] = n;
            dst[j + 1] = val;
            dst[j + 2] = k;
            dst[j + 3] = tmp + level * (255 - tmp);
        }
        return result;
    }
};

function rHex() {
    return "#000000".replace(/0/g, function() {
        return (~~(16 * Math.random())).toString(16);
    });
}

function hex2str(hex) {
    hex = hex.toString();
    for (var bb = "", c = 0; c < hex.length; c += 2) bb += String.fromCharCode(parseInt(hex.substr(c, 2), 16));
    return bb;
}

function timestamp() {
    return new Date().getTime();
}

function secondstamp() {
    return parseInt(String(Math.round(new Date().getTime() / 1e3)));
}

Math.range = function(i, min, max) {
    return Math.max(Math.min(i, max), min);
};

Math.fround = function(x) {
    return 5 < x % 10 ? Math.min(map_size_x, Math.ceil(x)) : Math.max(0, Math.floor(x));
};

function lzw_encode(d) {
    var b = {};
    d = (d + "").split("");
    for (var data = [], n, c = d[0], v = 256, i = 1; i < d.length; i++) n = d[i], null != b[c + n] ? c += n : (data.push(1 < c.length ? b[c] : c.charCodeAt(0)), 
    b[c + n] = v, v++, c = n);
    data.push(1 < c.length ? b[c] : c.charCodeAt(0));
    for (i = 0; i < data.length; i++) data[i] = String.fromCharCode(data[i]);
    return data.join("");
}

function lzw_decode(data) {
    var childNodes = {};
    data = (data + "").split("");
    for (var r = data[0], row = r, x = [ r ], y = 256, c, i = 1; i < data.length; i++) c = data[i].charCodeAt(0), 
    c = 256 > c ? data[i] : childNodes[c] ? childNodes[c] : row + r, x.push(c), r = c.charAt(0), 
    childNodes[y] = row + r, y++, row = c;
    return x.join("");
}

Array_unique = function() {
    for (var a = {}, b = [], i = 0, j = this.length; i < j; ++i) a.hasOwnProperty(this[i]) || (b.push(this[i]), 
    a[this[i]] = 1);
    return b;
};

function inDistance(a, c, p, e) {
    return 1 >= distance(a, c, p, e);
}

function nearEachOther(s, e) {
    return s && e && s.map == e.map && inDistance(s.i, s.j, e.i, e.j) ? !0 : !1;
}

function distance(x2, y2, x1, y1) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

function sortClosestTo(data, arr) {
    for (var folders = [], j = 0; j < arr.length; j++) folders.push({
        i: arr[j].i,
        j: arr[j].j,
        d: distance(data.i, data.j, arr[j].i, arr[j].j)
    });
    return folders.sort(function(a, b) {
        return a.d - b.d;
    });
}

function my_map_array() {
    return [ [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [] ];
}

function capitaliseFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function aOrAn(designator) {
    return /[aeiou]/.test(designator.charAt(0).toLowerCase()) ? "an" : "a";
}

function sOrNoS(n) {
    return 1 == n ? "" : "s";
}

var countries = [ {
    name: "Afghanistan",
    "short": "AF"
}, {
    name: "Åland Islands",
    "short": "AX"
}, {
    name: "Albania",
    "short": "AL"
}, {
    name: "Algeria",
    "short": "DZ"
}, {
    name: "American Samoa",
    "short": "AS"
}, {
    name: "Andorra",
    "short": "AD"
}, {
    name: "Angola",
    "short": "AO"
}, {
    name: "Anguilla",
    "short": "AI"
}, {
    name: "Antarctica",
    "short": "AQ"
}, {
    name: "Antigua and Barbuda",
    "short": "AG"
}, {
    name: "Argentina",
    "short": "AR"
}, {
    name: "Armenia",
    "short": "AM"
}, {
    name: "Aruba",
    "short": "AW"
}, {
    name: "Australia",
    "short": "AU"
}, {
    name: "Austria",
    "short": "AT",
    tax: !0
}, {
    name: "Azerbaijan",
    "short": "AZ"
}, {
    name: "Bahamas",
    "short": "BS"
}, {
    name: "Bahrain",
    "short": "BH"
}, {
    name: "Bangladesh",
    "short": "BD"
}, {
    name: "Barbados",
    "short": "BB"
}, {
    name: "Belarus",
    "short": "BY"
}, {
    name: "Belgium",
    "short": "BE",
    tax: !0
}, {
    name: "Belize",
    "short": "BZ"
}, {
    name: "Benin",
    "short": "BJ"
}, {
    name: "Bermuda",
    "short": "BM"
}, {
    name: "Bhutan",
    "short": "BT"
}, {
    name: "Bolivia",
    "short": "BO"
}, {
    name: "Bonaire",
    "short": "BQ"
}, {
    name: "Bosnia and Herzegovina",
    "short": "BA"
}, {
    name: "Botswana",
    "short": "BW"
}, {
    name: "Bouvet Island",
    "short": "BV"
}, {
    name: "Brazil",
    "short": "BR"
}, {
    name: "Chagos Islands",
    "short": "IO"
}, {
    name: "Brunei Darussalam",
    "short": "BN"
}, {
    name: "Bulgaria",
    "short": "BG",
    tax: !0
}, {
    name: "Burkina Faso",
    "short": "BF"
}, {
    name: "Burundi",
    "short": "BI"
}, {
    name: "Cambodia",
    "short": "KH"
}, {
    name: "Cameroon",
    "short": "CM"
}, {
    name: "Canada",
    "short": "CA"
}, {
    name: "Cape Verde",
    "short": "CV"
}, {
    name: "Cayman Islands",
    "short": "KY"
}, {
    name: "Central African Republic",
    "short": "CF"
}, {
    name: "Chad",
    "short": "TD"
}, {
    name: "Chile",
    "short": "CL"
}, {
    name: "China",
    "short": "CN"
}, {
    name: "Christmas Island",
    "short": "CX"
}, {
    name: "Cocos (Keeling) Islands",
    "short": "CC"
}, {
    name: "Colombia",
    "short": "CO"
}, {
    name: "Comoros",
    "short": "KM"
}, {
    name: "Congo-Brazzaville",
    "short": "CG"
}, {
    name: "Congo-Kinshasa",
    "short": "CD"
}, {
    name: "Cook Islands",
    "short": "CK"
}, {
    name: "Costa Rica",
    "short": "CR"
}, {
    name: "Côte d'Ivoire",
    "short": "CI"
}, {
    name: "Croatia",
    "short": "HR",
    tax: !0
}, {
    name: "Cuba",
    "short": "CU"
}, {
    name: "Curaçao",
    "short": "CW"
}, {
    name: "Cyprus",
    "short": "CY",
    tax: !0
}, {
    name: "Czech Republic",
    "short": "CZ",
    tax: !0
}, {
    name: "Denmark",
    "short": "DK",
    tax: !0
}, {
    name: "Djibouti",
    "short": "DJ"
}, {
    name: "Dominica",
    "short": "DM"
}, {
    name: "Dominican Republic",
    "short": "DO"
}, {
    name: "Ecuador",
    "short": "EC"
}, {
    name: "Egypt",
    "short": "EG"
}, {
    name: "El Salvador",
    "short": "SV"
}, {
    name: "Equatorial Guinea",
    "short": "GQ"
}, {
    name: "Eritrea",
    "short": "ER"
}, {
    name: "Estonia",
    "short": "EE",
    tax: !0
}, {
    name: "Ethiopia",
    "short": "ET"
}, {
    name: "Falkland Islands (Malvinas)",
    "short": "FK"
}, {
    name: "Faroe Islands",
    "short": "FO"
}, {
    name: "Fiji",
    "short": "FJ"
}, {
    name: "Finland",
    "short": "FI",
    tax: !0
}, {
    name: "France",
    "short": "FR",
    tax: !0
}, {
    name: "French Guiana",
    "short": "GF"
}, {
    name: "French Polynesia",
    "short": "PF"
}, {
    name: "French Southern Territories",
    "short": "TF"
}, {
    name: "Gabon",
    "short": "GA"
}, {
    name: "Gambia",
    "short": "GM"
}, {
    name: "Georgia",
    "short": "GE"
}, {
    name: "Germany",
    "short": "DE",
    tax: !0
}, {
    name: "Ghana",
    "short": "GH"
}, {
    name: "Gibraltar",
    "short": "GI"
}, {
    name: "Greece",
    "short": "GR",
    tax: !0
}, {
    name: "Greenland",
    "short": "GL"
}, {
    name: "Grenada",
    "short": "GD"
}, {
    name: "Guadeloupe",
    "short": "GP"
}, {
    name: "Guam",
    "short": "GU"
}, {
    name: "Guatemala",
    "short": "GT"
}, {
    name: "Guernsey",
    "short": "GG"
}, {
    name: "Guinea",
    "short": "GN"
}, {
    name: "Guinea-Bissau",
    "short": "GW"
}, {
    name: "Guyana",
    "short": "GY"
}, {
    name: "Haiti",
    "short": "HT"
}, {
    name: "Heard Island",
    "short": "HM"
}, {
    name: "Honduras",
    "short": "HN"
}, {
    name: "Hong Kong",
    "short": "HK"
}, {
    name: "Hungary",
    "short": "HU",
    tax: !0
}, {
    name: "Iceland",
    "short": "IS"
}, {
    name: "India",
    "short": "IN"
}, {
    name: "Indonesia",
    "short": "ID"
}, {
    name: "Iran",
    "short": "IR"
}, {
    name: "Iraq",
    "short": "IQ"
}, {
    name: "Ireland",
    "short": "IE",
    tax: !0
}, {
    name: "Isle of Man",
    "short": "IM"
}, {
    name: "Israel",
    "short": "IL"
}, {
    name: "Italy",
    "short": "IT",
    tax: !0
}, {
    name: "Jamaica",
    "short": "JM"
}, {
    name: "Japan",
    "short": "JP"
}, {
    name: "Jersey",
    "short": "JE"
}, {
    name: "Jordan",
    "short": "JO"
}, {
    name: "Kazakhstan",
    "short": "KZ"
}, {
    name: "Kenya",
    "short": "KE"
}, {
    name: "Kiribati",
    "short": "KI"
}, {
    name: "Kuwait",
    "short": "KW"
}, {
    name: "Kyrgyzstan",
    "short": "KG"
}, {
    name: "Laos",
    "short": "LA"
}, {
    name: "Latvia",
    "short": "LV",
    tax: !0
}, {
    name: "Lebanon",
    "short": "LB"
}, {
    name: "Lesotho",
    "short": "LS"
}, {
    name: "Liberia",
    "short": "LR"
}, {
    name: "Libya",
    "short": "LY"
}, {
    name: "Liechtenstein",
    "short": "LI"
}, {
    name: "Lithuania",
    "short": "LT",
    tax: !0
}, {
    name: "Luxembourg",
    "short": "LU",
    tax: !0
}, {
    name: "Macao",
    "short": "MO"
}, {
    name: "Macedonia",
    "short": "MK"
}, {
    name: "Madagascar",
    "short": "MG"
}, {
    name: "Malawi",
    "short": "MW"
}, {
    name: "Malaysia",
    "short": "MY"
}, {
    name: "Maldives",
    "short": "MV"
}, {
    name: "Mali",
    "short": "ML"
}, {
    name: "Malta",
    "short": "MT",
    tax: !0
}, {
    name: "Marshall Islands",
    "short": "MH"
}, {
    name: "Martinique",
    "short": "MQ"
}, {
    name: "Mauritania",
    "short": "MR"
}, {
    name: "Mauritius",
    "short": "MU"
}, {
    name: "Mayotte",
    "short": "YT"
}, {
    name: "Mexico",
    "short": "MX"
}, {
    name: "Micronesia",
    "short": "FM"
}, {
    name: "Moldova",
    "short": "MD"
}, {
    name: "Monaco",
    "short": "MC"
}, {
    name: "Mongolia",
    "short": "MN"
}, {
    name: "Montenegro",
    "short": "ME"
}, {
    name: "Montserrat",
    "short": "MS"
}, {
    name: "Morocco",
    "short": "MA"
}, {
    name: "Mozambique",
    "short": "MZ"
}, {
    name: "Myanmar",
    "short": "MM"
}, {
    name: "Namibia",
    "short": "NA"
}, {
    name: "Nauru",
    "short": "NR"
}, {
    name: "Nepal",
    "short": "NP"
}, {
    name: "Netherlands",
    "short": "NL",
    tax: !0
}, {
    name: "New Caledonia",
    "short": "NC"
}, {
    name: "New Zealand",
    "short": "NZ"
}, {
    name: "Nicaragua",
    "short": "NI"
}, {
    name: "Niger",
    "short": "NE"
}, {
    name: "Nigeria",
    "short": "NG"
}, {
    name: "Niue",
    "short": "NU"
}, {
    name: "Norfolk Island",
    "short": "NF"
}, {
    name: "North Korea",
    "short": "KP"
}, {
    name: "Northern Mariana Islands",
    "short": "MP"
}, {
    name: "Norway",
    "short": "NO"
}, {
    name: "Oman",
    "short": "OM"
}, {
    name: "Pakistan",
    "short": "PK"
}, {
    name: "Palau",
    "short": "PW"
}, {
    name: "Palestinian Territories",
    "short": "PS"
}, {
    name: "Panama",
    "short": "PA"
}, {
    name: "Papua New Guinea",
    "short": "PG"
}, {
    name: "Paraguay",
    "short": "PY"
}, {
    name: "Peru",
    "short": "PE"
}, {
    name: "Philippines",
    "short": "PH"
}, {
    name: "Pitcairn",
    "short": "PN"
}, {
    name: "Poland",
    "short": "PL",
    tax: !0
}, {
    name: "Portugal",
    "short": "PT",
    tax: !0
}, {
    name: "Puerto Rico",
    "short": "PR"
}, {
    name: "Qatar",
    "short": "QA"
}, {
    name: "Réunion",
    "short": "RE"
}, {
    name: "Romania",
    "short": "RO",
    tax: !0
}, {
    name: "Russian Federation",
    "short": "RU"
}, {
    name: "Rwanda",
    "short": "RW"
}, {
    name: "Saint Barthélemy",
    "short": "BL"
}, {
    name: "Saint Helena",
    "short": "SH"
}, {
    name: "Saint Kitts and Nevis",
    "short": "KN"
}, {
    name: "Saint Lucia",
    "short": "LC"
}, {
    name: "Saint Martin",
    "short": "MF"
}, {
    name: "Saint Pierre and Miquelon",
    "short": "PM"
}, {
    name: "Saint Vincent",
    "short": "VC"
}, {
    name: "Samoa",
    "short": "WS"
}, {
    name: "San Marino",
    "short": "SM"
}, {
    name: "Sao Tome and Principe",
    "short": "ST"
}, {
    name: "Saudi Arabia",
    "short": "SA"
}, {
    name: "Senegal",
    "short": "SN"
}, {
    name: "Serbia",
    "short": "RS"
}, {
    name: "Seychelles",
    "short": "SC"
}, {
    name: "Sierra Leone",
    "short": "SL"
}, {
    name: "Singapore",
    "short": "SG"
}, {
    name: "Sint Maarten (Dutch part)",
    "short": "SX"
}, {
    name: "Slovakia",
    "short": "SK",
    tax: !0
}, {
    name: "Slovenia",
    "short": "SI",
    tax: !0
}, {
    name: "Solomon Islands",
    "short": "SB"
}, {
    name: "Somalia",
    "short": "SO"
}, {
    name: "South Africa",
    "short": "ZA"
}, {
    name: "South Georgia",
    "short": "GS"
}, {
    name: "South Korea",
    "short": "KR"
}, {
    name: "South Sudan",
    "short": "SS"
}, {
    name: "Spain",
    "short": "ES",
    tax: !0
}, {
    name: "Sri Lanka",
    "short": "LK"
}, {
    name: "Sudan",
    "short": "SD"
}, {
    name: "Suriname",
    "short": "SR"
}, {
    name: "Svalbard and Jan Mayen",
    "short": "SJ"
}, {
    name: "Swaziland",
    "short": "SZ"
}, {
    name: "Sweden",
    "short": "SE",
    tax: !0
}, {
    name: "Switzerland",
    "short": "CH"
}, {
    name: "Syrian Arab Republic",
    "short": "SY"
}, {
    name: "Taiwan",
    "short": "TW"
}, {
    name: "Tajikistan",
    "short": "TJ"
}, {
    name: "Tanzania",
    "short": "TZ"
}, {
    name: "Thailand",
    "short": "TH"
}, {
    name: "Timor-Leste",
    "short": "TL"
}, {
    name: "Togo",
    "short": "TG"
}, {
    name: "Tokelau",
    "short": "TK"
}, {
    name: "Tonga",
    "short": "TO"
}, {
    name: "Trinidad and Tobago",
    "short": "TT"
}, {
    name: "Tunisia",
    "short": "TN"
}, {
    name: "Turkey",
    "short": "TR"
}, {
    name: "Turkmenistan",
    "short": "TM"
}, {
    name: "Turks and Caicos Islands",
    "short": "TC"
}, {
    name: "Tuvalu",
    "short": "TV"
}, {
    name: "Uganda",
    "short": "UG"
}, {
    name: "Ukraine",
    "short": "UA"
}, {
    name: "United Arab Emirates",
    "short": "AE"
}, {
    name: "United Kingdom",
    "short": "GB",
    tax: !0
}, {
    name: "United States",
    "short": "US"
}, {
    name: "Uruguay",
    "short": "UY"
}, {
    name: "Uzbekistan",
    "short": "UZ"
}, {
    name: "Vanuatu",
    "short": "VU"
}, {
    name: "Vatican City State",
    "short": "VA"
}, {
    name: "Venezuela",
    "short": "VE"
}, {
    name: "Viet Nam",
    "short": "VN"
}, {
    name: "Virgin Islands, British",
    "short": "VG"
}, {
    name: "Virgin Islands, U.S.",
    "short": "VI"
}, {
    name: "Wallis and Futuna",
    "short": "WF"
}, {
    name: "Western Sahara",
    "short": "EH"
}, {
    name: "Yemen",
    "short": "YE"
}, {
    name: "Zambia",
    "short": "ZM"
}, {
    name: "Zimbabwe",
    "short": "ZW"
} ], countries_by_name_alpha2 = {
    AF: {
        name: "Afghanistan"
    },
    AX: {
        name: "Åland Islands"
    },
    AL: {
        name: "Albania"
    },
    DZ: {
        name: "Algeria"
    },
    AS: {
        name: "American Samoa"
    },
    AD: {
        name: "Andorra"
    },
    AO: {
        name: "Angola"
    },
    AI: {
        name: "Anguilla"
    },
    AQ: {
        name: "Antarctica"
    },
    AG: {
        name: "Antigua and Barbuda"
    },
    AR: {
        name: "Argentina"
    },
    AM: {
        name: "Armenia"
    },
    AW: {
        name: "Aruba"
    },
    AU: {
        name: "Australia"
    },
    AT: {
        name: "Austria",
        tax: !0
    },
    AZ: {
        name: "Azerbaijan"
    },
    BS: {
        name: "Bahamas"
    },
    BH: {
        name: "Bahrain"
    },
    BD: {
        name: "Bangladesh"
    },
    BB: {
        name: "Barbados"
    },
    BY: {
        name: "Belarus"
    },
    BE: {
        name: "Belgium",
        tax: !0
    },
    BZ: {
        name: "Belize"
    },
    BJ: {
        name: "Benin"
    },
    BM: {
        name: "Bermuda"
    },
    BT: {
        name: "Bhutan"
    },
    BO: {
        name: "Bolivia"
    },
    BQ: {
        name: "Bonaire"
    },
    BA: {
        name: "Bosnia and Herzegovina"
    },
    BW: {
        name: "Botswana"
    },
    BV: {
        name: "Bouvet Island"
    },
    BR: {
        name: "Brazil"
    },
    IO: {
        name: "Chagos Islands"
    },
    BN: {
        name: "Brunei Darussalam"
    },
    BG: {
        name: "Bulgaria",
        tax: !0
    },
    BF: {
        name: "Burkina Faso"
    },
    BI: {
        name: "Burundi"
    },
    KH: {
        name: "Cambodia"
    },
    CM: {
        name: "Cameroon"
    },
    CA: {
        name: "Canada"
    },
    CV: {
        name: "Cape Verde"
    },
    KY: {
        name: "Cayman Islands"
    },
    CF: {
        name: "Central African Republic"
    },
    TD: {
        name: "Chad"
    },
    CL: {
        name: "Chile"
    },
    CN: {
        name: "China"
    },
    CX: {
        name: "Christmas Island"
    },
    CC: {
        name: "Cocos (Keeling) Islands"
    },
    CO: {
        name: "Colombia"
    },
    KM: {
        name: "Comoros"
    },
    CG: {
        name: "Congo-Brazzaville"
    },
    CD: {
        name: "Congo-Kinshasa"
    },
    CK: {
        name: "Cook Islands"
    },
    CR: {
        name: "Costa Rica"
    },
    CI: {
        name: "Côte d'Ivoire"
    },
    HR: {
        name: "Croatia",
        tax: !0
    },
    CU: {
        name: "Cuba"
    },
    CW: {
        name: "Curaçao"
    },
    CY: {
        name: "Cyprus",
        tax: !0
    },
    CZ: {
        name: "Czech Republic",
        tax: !0
    },
    DK: {
        name: "Denmark",
        tax: !0
    },
    DJ: {
        name: "Djibouti"
    },
    DM: {
        name: "Dominica"
    },
    DO: {
        name: "Dominican Republic"
    },
    EC: {
        name: "Ecuador"
    },
    EG: {
        name: "Egypt"
    },
    SV: {
        name: "El Salvador"
    },
    GQ: {
        name: "Equatorial Guinea"
    },
    ER: {
        name: "Eritrea"
    },
    EE: {
        name: "Estonia",
        tax: !0
    },
    ET: {
        name: "Ethiopia"
    },
    FK: {
        name: "Falkland Islands (Malvinas)"
    },
    FO: {
        name: "Faroe Islands"
    },
    FJ: {
        name: "Fiji"
    },
    FI: {
        name: "Finland",
        tax: !0
    },
    FR: {
        name: "France",
        tax: !0
    },
    GF: {
        name: "French Guiana"
    },
    PF: {
        name: "French Polynesia"
    },
    TF: {
        name: "French Southern Territories"
    },
    GA: {
        name: "Gabon"
    },
    GM: {
        name: "Gambia"
    },
    GE: {
        name: "Georgia"
    },
    DE: {
        name: "Germany",
        tax: !0
    },
    GH: {
        name: "Ghana"
    },
    GI: {
        name: "Gibraltar"
    },
    GR: {
        name: "Greece",
        tax: !0
    },
    GL: {
        name: "Greenland"
    },
    GD: {
        name: "Grenada"
    },
    GP: {
        name: "Guadeloupe"
    },
    GU: {
        name: "Guam"
    },
    GT: {
        name: "Guatemala"
    },
    GG: {
        name: "Guernsey"
    },
    GN: {
        name: "Guinea"
    },
    GW: {
        name: "Guinea-Bissau"
    },
    GY: {
        name: "Guyana"
    },
    HT: {
        name: "Haiti"
    },
    HM: {
        name: "Heard Island"
    },
    HN: {
        name: "Honduras"
    },
    HK: {
        name: "Hong Kong"
    },
    HU: {
        name: "Hungary",
        tax: !0
    },
    IS: {
        name: "Iceland"
    },
    IN: {
        name: "India"
    },
    ID: {
        name: "Indonesia"
    },
    IR: {
        name: "Iran"
    },
    IQ: {
        name: "Iraq"
    },
    IE: {
        name: "Ireland",
        tax: !0
    },
    IM: {
        name: "Isle of Man"
    },
    IL: {
        name: "Israel"
    },
    IT: {
        name: "Italy",
        tax: !0
    },
    JM: {
        name: "Jamaica"
    },
    JP: {
        name: "Japan"
    },
    JE: {
        name: "Jersey"
    },
    JO: {
        name: "Jordan"
    },
    KZ: {
        name: "Kazakhstan"
    },
    KE: {
        name: "Kenya"
    },
    KI: {
        name: "Kiribati"
    },
    KW: {
        name: "Kuwait"
    },
    KG: {
        name: "Kyrgyzstan"
    },
    LA: {
        name: "Laos"
    },
    LV: {
        name: "Latvia",
        tax: !0
    },
    LB: {
        name: "Lebanon"
    },
    LS: {
        name: "Lesotho"
    },
    LR: {
        name: "Liberia"
    },
    LY: {
        name: "Libya"
    },
    LI: {
        name: "Liechtenstein"
    },
    LT: {
        name: "Lithuania",
        tax: !0
    },
    LU: {
        name: "Luxembourg",
        tax: !0
    },
    MO: {
        name: "Macao"
    },
    MK: {
        name: "Macedonia"
    },
    MG: {
        name: "Madagascar"
    },
    MW: {
        name: "Malawi"
    },
    MY: {
        name: "Malaysia"
    },
    MV: {
        name: "Maldives"
    },
    ML: {
        name: "Mali"
    },
    MT: {
        name: "Malta",
        tax: !0
    },
    MH: {
        name: "Marshall Islands"
    },
    MQ: {
        name: "Martinique"
    },
    MR: {
        name: "Mauritania"
    },
    MU: {
        name: "Mauritius"
    },
    YT: {
        name: "Mayotte"
    },
    MX: {
        name: "Mexico"
    },
    FM: {
        name: "Micronesia"
    },
    MD: {
        name: "Moldova"
    },
    MC: {
        name: "Monaco"
    },
    MN: {
        name: "Mongolia"
    },
    ME: {
        name: "Montenegro"
    },
    MS: {
        name: "Montserrat"
    },
    MA: {
        name: "Morocco"
    },
    MZ: {
        name: "Mozambique"
    },
    MM: {
        name: "Myanmar"
    },
    NA: {
        name: "Namibia"
    },
    NR: {
        name: "Nauru"
    },
    NP: {
        name: "Nepal"
    },
    NL: {
        name: "Netherlands",
        tax: !0
    },
    NC: {
        name: "New Caledonia"
    },
    NZ: {
        name: "New Zealand"
    },
    NI: {
        name: "Nicaragua"
    },
    NE: {
        name: "Niger"
    },
    NG: {
        name: "Nigeria"
    },
    NU: {
        name: "Niue"
    },
    NF: {
        name: "Norfolk Island"
    },
    KP: {
        name: "North Korea"
    },
    MP: {
        name: "Northern Mariana Islands"
    },
    NO: {
        name: "Norway"
    },
    OM: {
        name: "Oman"
    },
    PK: {
        name: "Pakistan"
    },
    PW: {
        name: "Palau"
    },
    PS: {
        name: "Palestinian Territories"
    },
    PA: {
        name: "Panama"
    },
    PG: {
        name: "Papua New Guinea"
    },
    PY: {
        name: "Paraguay"
    },
    PE: {
        name: "Peru"
    },
    PH: {
        name: "Philippines"
    },
    PN: {
        name: "Pitcairn"
    },
    PL: {
        name: "Poland",
        tax: !0
    },
    PT: {
        name: "Portugal",
        tax: !0
    },
    PR: {
        name: "Puerto Rico"
    },
    QA: {
        name: "Qatar"
    },
    RE: {
        name: "Réunion"
    },
    RO: {
        name: "Romania",
        tax: !0
    },
    RU: {
        name: "Russian Federation"
    },
    RW: {
        name: "Rwanda"
    },
    BL: {
        name: "Saint Barthélemy"
    },
    SH: {
        name: "Saint Helena"
    },
    KN: {
        name: "Saint Kitts and Nevis"
    },
    LC: {
        name: "Saint Lucia"
    },
    MF: {
        name: "Saint Martin"
    },
    PM: {
        name: "Saint Pierre and Miquelon"
    },
    VC: {
        name: "Saint Vincent"
    },
    WS: {
        name: "Samoa"
    },
    SM: {
        name: "San Marino"
    },
    ST: {
        name: "Sao Tome and Principe"
    },
    SA: {
        name: "Saudi Arabia"
    },
    SN: {
        name: "Senegal"
    },
    RS: {
        name: "Serbia"
    },
    SC: {
        name: "Seychelles"
    },
    SL: {
        name: "Sierra Leone"
    },
    SG: {
        name: "Singapore"
    },
    SX: {
        name: "Sint Maarten (Dutch part)"
    },
    SK: {
        name: "Slovakia",
        tax: !0
    },
    SI: {
        name: "Slovenia",
        tax: !0
    },
    SB: {
        name: "Solomon Islands"
    },
    SO: {
        name: "Somalia"
    },
    ZA: {
        name: "South Africa"
    },
    GS: {
        name: "South Georgia"
    },
    KR: {
        name: "South Korea"
    },
    SS: {
        name: "South Sudan"
    },
    ES: {
        name: "Spain",
        tax: !0
    },
    LK: {
        name: "Sri Lanka"
    },
    SD: {
        name: "Sudan"
    },
    SR: {
        name: "Suriname"
    },
    SJ: {
        name: "Svalbard and Jan Mayen"
    },
    SZ: {
        name: "Swaziland"
    },
    SE: {
        name: "Sweden",
        tax: !0
    },
    CH: {
        name: "Switzerland"
    },
    SY: {
        name: "Syrian Arab Republic"
    },
    TW: {
        name: "Taiwan"
    },
    TJ: {
        name: "Tajikistan"
    },
    TZ: {
        name: "Tanzania"
    },
    TH: {
        name: "Thailand"
    },
    TL: {
        name: "Timor-Leste"
    },
    TG: {
        name: "Togo"
    },
    TK: {
        name: "Tokelau"
    },
    TO: {
        name: "Tonga"
    },
    TT: {
        name: "Trinidad and Tobago"
    },
    TN: {
        name: "Tunisia"
    },
    TR: {
        name: "Turkey"
    },
    TM: {
        name: "Turkmenistan"
    },
    TC: {
        name: "Turks and Caicos Islands"
    },
    TV: {
        name: "Tuvalu"
    },
    UG: {
        name: "Uganda"
    },
    UA: {
        name: "Ukraine"
    },
    AE: {
        name: "United Arab Emirates"
    },
    GB: {
        name: "United Kingdom",
        tax: !0
    },
    US: {
        name: "United States"
    },
    UY: {
        name: "Uruguay"
    },
    UZ: {
        name: "Uzbekistan"
    },
    VU: {
        name: "Vanuatu"
    },
    VA: {
        name: "Vatican City State"
    },
    VE: {
        name: "Venezuela"
    },
    VN: {
        name: "Viet Nam"
    },
    VG: {
        name: "Virgin Islands, British"
    },
    VI: {
        name: "Virgin Islands, U.S."
    },
    WF: {
        name: "Wallis and Futuna"
    },
    EH: {
        name: "Western Sahara"
    },
    YE: {
        name: "Yemen"
    },
    ZM: {
        name: "Zambia"
    },
    ZW: {
        name: "Zimbabwe"
    }
}, vat_by_country = {
    AT: {
        rate: 20,
        abbr: "mwSt."
    },
    BE: {
        rate: 21,
        abbr: "BTW"
    },
    BG: {
        rate: 20,
        abbr: "ДДС"
    },
    CY: {
        rate: 19,
        abbr: "ΦΠΑ"
    },
    CZ: {
        rate: 21,
        abbr: "DPH"
    },
    HR: {
        rate: 25,
        abbr: "PDV"
    },
    DK: {
        rate: 25,
        abbr: "moms"
    },
    EE: {
        rate: 20,
        abbr: "km"
    },
    FI: {
        rate: 24,
        abbr: "ALV"
    },
    FR: {
        rate: 20,
        abbr: "TVA"
    },
    DE: {
        rate: 19,
        abbr: "MwSt."
    },
    GR: {
        rate: 23,
        abbr: "ΦΠΑ"
    },
    HU: {
        rate: 27,
        abbr: "ÁFA"
    },
    IE: {
        rate: 23,
        abbr: "VAT"
    },
    IT: {
        rate: 22,
        abbr: "IVA"
    },
    LV: {
        rate: 21,
        abbr: "PVN"
    },
    LT: {
        rate: 21,
        abbr: "PVM"
    },
    LU: {
        rate: 17,
        abbr: "TVA"
    },
    MT: {
        rate: 18,
        abbr: "VAT"
    },
    NL: {
        rate: 21,
        abbr: "BTW"
    },
    PL: {
        rate: 23,
        abbr: "PTU"
    },
    PT: {
        rate: 23,
        abbr: "IVA"
    },
    RO: {
        rate: 24,
        abbr: "TVA"
    },
    SK: {
        rate: 20,
        abbr: "DPH"
    },
    SI: {
        rate: 22,
        abbr: "DDV"
    },
    ES: {
        rate: 21,
        abbr: "IVA"
    },
    SE: {
        rate: 25,
        abbr: "Moms"
    },
    GB: {
        rate: 20,
        abbr: "VAT"
    }
}, Country = {
    vat_required: function(a) {
        return !(!countries_by_name_alpha2[a] || !countries_by_name_alpha2[a].tax);
    },
    vat: function(i) {
        return vat_by_country[i].rate / 100;
    },
    vat_label: function(i) {
        return "+ " + vat_by_country[i].abbr + "(" + vat_by_country[i].rate + "%)";
    },
    abbr: function(type) {
        return vat_by_country[type].abbr;
    }
};

function highscore_search(key, results, d, i) {
    for (;-1 < i; ) return results[i].key > key ? i : 0;
}

function validIP(x) {
    if (!x) return !1;
    x = x.split(".");
    if (4 != x.length) return !1;
    for (var i in x) if (parseInt(x[i]) != x[i] || 1 > parseInt(x[i]) || 255 < parseInt(x[i])) return !1;
    return !0;
}

function isEmail(str) {
    return !!str.match(/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/);
}

var randomSalt = function(length) {
    var value, _i;
    value = "";
    for (_i = 1; 1 <= length ? _i <= length : _i >= length; 1 <= length ? ++_i : --_i) value += "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!#$%&/()=?,.-_*-+"[79 * Math.random() << 0];
    return value;
};

function sizeOfEnclosure(a, b, r, set) {
    var length = set.length, index = function(state) {
        return 0 > state.i || state.i >= length || 0 > state.j || state.j >= length ? !0 : !1;
    };
    if (index({
        i: a,
        j: b
    })) return {
        status: !1,
        error: "out_of_border"
    };
    for (var result = [], n = [ {
        i: 1,
        j: 0
    }, {
        i: 0,
        j: 1
    }, {
        i: -1,
        j: 0
    }, {
        i: 0,
        j: -1
    } ], table = [], c = 0; c < length; c++) table[c] = [];
    result.push({
        i: a,
        j: b
    });
    table[a][b] = !0;
    b = a = 0;
    for (var p = !0, c = []; 0 < result.length; ) {
        var pos = result.pop();
        if (table[pos.i][pos.j]) {
            if (!p) continue;
        } else table[pos.i][pos.j] = !0, a++;
        for (var e in n) {
            p = {
                i: pos.i + n[e].i,
                j: pos.j + n[e].j
            };
            if (index(p)) return {
                status: !1,
                error: "out_of_border",
                same_position: c
            };
            if (2 != set[p.i][p.j] || table[p.i][p.j]) {
                var v;
                v = set[p.i][p.j] ? !1 : !0;
                v && result.push(p);
            } else if (c.push({
                i: p.i,
                j: p.j
            }), table[p.i][p.j] = !0, b++, b >= r) return {
                status: !1,
                error: "same_type_limit",
                same_position: c
            };
        }
        p = !1;
    }
    return {
        status: !0,
        area: a,
        same_type: b,
        same_position: c
    };
}

var Validate = {
    position: function(dir) {
        return "object" == typeof dir && dir && "number" == typeof dir.i && "number" == typeof dir.j ? !0 : !1;
    }
}, SpectateWindow = {
    slave: !1,
    iframe: !1,
    active: !1,
    salt: randomSalt(16),
    fullscreen: !1,
    player: !1,
    key: !1,
    onload: function() {
        getHashParameterByName("slave") && (document.getElementById("back_to_game_link").style.display = "block", 
        SpectateWindow.player = getHashParameterByName("player"), SpectateWindow.key = "false" === getHashParameterByName("key") ? !1 : getHashParameterByName("key"), 
        SpectateWindow.init(!!getHashParameterByName("slave"), getHashParameterByName("salt")), 
        real_login_function = function() {
            document.getElementById("donation_button").style.display = "none";
            document.getElementById("spectate_button").style.display = "block";
        }, window.focus());
    },
    connected: function() {
        SpectateWindow.slave && 2e3 < timestamp() - Spectate.last_watch_requested && (SpectateWindow.sendMessage({
            action: "slave_initialized"
        }), Spectate.toggle_spectators_link());
    },
    captcha: function() {
        !SpectateWindow.slave && SpectateWindow.active && SpectateWindow.hide_iframe();
    },
    request_fullscreen: function() {
        SpectateWindow.slave ? SpectateWindow.sendMessage({
            action: "fullscreen"
        }) : Fullscreen.request();
    },
    no_streams_available: function() {
        SpectateWindow.slave && SpectateWindow.sendMessage({
            action: "no_streams"
        });
    },
    hide_iframe: function() {
        SpectateWindow.iframe.style.display = "none";
        SpectateWindow.active = !1;
        pageVisible();
        Timers.set("destroy_iframe", function() {
            SpectateWindow.destroy_iframe();
        }, 2e5);
        SpectateWindow.sendMessage({
            action: "hidden"
        });
        window.focus();
    },
    destroy_iframe: function() {
        document.body.removeChild(SpectateWindow.iframe);
        SpectateWindow.iframe = !1;
        Timers.clear("destroy_iframe");
    },
    init: function(slave, buf) {
        if (SpectateWindow.slave = slave) SpectateWindow.salt = buf, window.addEventListener("message", SpectateWindow.receiveMessage, !1); else if (SpectateWindow.iframe) SpectateWindow.sendMessage({
            action: "activate",
            player: players[0].name
        }); else {
            var iframe = document.createElement("iframe");
            iframe.style.width = "1px";
            iframe.style.height = "1px";
            iframe.style.position = "absolute";
            iframe.style.left = "0px";
            iframe.style.top = "0px";
            iframe.style.zIndex = "9999999999";
            iframe.style.display = "block";
            iframe.src = SpectateWindow.getSlaveUrl();
            document.body.appendChild(iframe);
            window.addEventListener("message", SpectateWindow.receiveMessage, !1);
            SpectateWindow.iframe = iframe;
            addChatText("Loading spectator mode...", null, COLOR.WHITE);
            iframe.contentWindow.location.href = SpectateWindow.getSlaveUrl();
        }
    },
    getOrigin: function() {
        var port = "";
        if (1337 == window.location.port || 1338 == window.location.port) port = ":" + window.location.port;
        return window.location.protocol + "//" + window.location.hostname + port;
    },
    getSlaveUrl: function() {
        var query = "";
        "android" == getParameterByName("inapp") ? query = "?inapp=android" : "steam" == getParameterByName("inapp") && (query = "?inapp=steam");
        return SpectateWindow.getOrigin() + window.location.pathname + query + "#slave=true&salt=" + encodeURIComponent(SpectateWindow.salt) + "&player=" + encodeURIComponent(players[0].name) + "&key=" + encodeURIComponent(SpectateWindow.key);
    },
    receiveMessage: function(e) {
        var msg = e.message ? e.message : e.data;
        if (e.origin !== SpectateWindow.getOrigin()) console.log("Untrusted origin:", e.origin, "should be", SpectateWindow.getOrigin()); else if (msg && msg.action && msg.slave != SpectateWindow.slave && msg.salt == SpectateWindow.salt) switch (msg.action) {
          case "activate":
            SpectateWindow.active = !1;
            SpectateWindow.player = msg.player;
            pageVisible();
            (FormHelper.is_form_visible("streams") || GAME_STATE == GAME_STATES.LOGIN) && Spectate.spectate_streams();
            window.focus();
            SpectateWindow.sendMessage({
                action: "slave_initialized"
            });
            break;

          case "hidden":
            SpectateWindow.active = !0;
            pageHidden();
            break;

          case "fullscreen_slave":
            SpectateWindow.fullscreen = msg.fullscreen;
            setCanvasSize(!0);
            break;

          case "chat_message":
            if (SpectateWindow.active) break;
            chat_history.push({
                text: msg.text,
                user: msg.user,
                color: msg.color,
                lang: msg.lang,
                to: msg.to,
                id: msg.id
            });
            chat_history.length > Chat.max_chat_history && (chat_history.splice(0, 1), 0 < document.getElementById("chat").childElementCount && document.getElementById("chat").removeChild(document.getElementById("chat").firstChild));
            t = chat_history.length - 1;
            Chat.add_line(t);
            break;

          case "remove_line_slave":
            Chat.remove_line(msg.line, msg.moderator);
            break;

          case "channels":
            Contacts.channels = msg.channels;
            delete Contacts.channels["{M}"];
            Contacts.update_channel_list();
            break;

          case "hide_iframe":
            SpectateWindow.hide_iframe();
            break;

          case "fullscreen":
            Fullscreen.request();
            break;

          case "no_streams":
            SpectateWindow.hide_iframe();
            Popup.dialog("No streams available!", null_function);
            break;

          case "slave_initialized":
            SpectateWindow.sendMessage({
                action: "channels",
                channels: Contacts.channels
            });
            SpectateWindow.iframe.style.display = "block";
            SpectateWindow.iframe.style.width = "100%";
            SpectateWindow.iframe.style.height = "100%";
            SpectateWindow.active = !0;
            Timers.clear("destroy_iframe");
            pageHidden();
            break;

          case "chat":
            Socket.send("message", {
                data: msg.data,
                lang: msg.lang
            });
            break;

          case "remove_line":
            Socket.send("remove_line", {
                line: msg.line
            });
        }
    },
    sendMessage: function(msg) {
        msg.slave = SpectateWindow.slave;
        msg.salt = SpectateWindow.salt;
        SpectateWindow.slave ? parent.postMessage(msg, SpectateWindow.getOrigin()) : SpectateWindow.iframe && SpectateWindow.iframe.contentWindow.postMessage(msg, SpectateWindow.getOrigin());
    }
}, GAME_STATES = {
    LOGIN: "0",
    GAME: "1",
    EDITOR: "2",
    CHAT: "3",
    SPECTATE: "4"
}, GAME_STATE = GAME_STATES.LOGIN;

function setGameState(toPage) {
    if (GAME_STATE != toPage) {
        var url = GAME_STATE;
        GAME_STATE == GAME_STATES.LOGIN ? toPage == GAME_STATES.GAME ? GAME_STATE = toPage : toPage == GAME_STATES.SPECTATE && (GAME_STATE = toPage) : GAME_STATE == GAME_STATES.GAME ? toPage == GAME_STATES.LOGIN ? GAME_STATE = toPage : toPage == GAME_STATES.EDITOR ? GAME_STATE = toPage : toPage == GAME_STATES.CHAT ? GAME_STATE = toPage : toPage == GAME_STATES.SPECTATE && (GAME_STATE = toPage) : GAME_STATE == GAME_STATES.EDITOR ? toPage == GAME_STATES.LOGIN ? GAME_STATE = toPage : toPage == GAME_STATES.GAME && (GAME_STATE = toPage) : GAME_STATE == GAME_STATES.CHAT ? toPage == GAME_STATES.LOGIN ? GAME_STATE = toPage : toPage == GAME_STATES.GAME ? GAME_STATE = toPage : toPage == GAME_STATES.SPECTATE && (GAME_STATE = toPage) : GAME_STATE == GAME_STATES.SPECTATE && (toPage == GAME_STATES.LOGIN ? GAME_STATE = toPage : toPage == GAME_STATES.GAME ? GAME_STATE = toPage : toPage == GAME_STATES.CHAT && (GAME_STATE = toPage));
        if (url == GAME_STATE) throw "Unexpected transition from " + url + " to " + toPage;
    }
}

var img_hashes = "f61f376221c3fe1dea3f4bb8c39207f2 22b176a3c34bfbdd303ab24b0675b49c 30b533254c058f47580c3124c2412d85 d2cabb3b664c5c76559f5b7b99e1dcba b5e9e0f058021a7bc8208462effe8004 7f36decee9fbf97a7970f8b41e4415dd 81e225ef3de2f587fa7ab3896d21c506 d38b083f39052576f26c9bff5de9c808 854d8e1eb2ec3ea7258b6a2a5c8590e3 454bfc1578375f39f632281609b0cee4 7cc807d2c52911c282d6f78a8dad2827 27cc9b53a53a37e2dc8e3c847e1d4076 5aa0bf60bd60328e58d7cbfa3b1a25bd f365467f015067b86f8b842e5fce5d9a 5e2a64a066d8d049cfa797ffd403e65f 3126ec8f0a0a4d819c8fd5868c5568b6 dae4547bdb8044ffcf08a91491e25017 d99eb5506b0405485c87846cc48922ae 1d83cd94fa15a0b7124db3c88dfc01f5 e0bb22f6719da9a189e487a48a20ef56 ede6af17cab027c12cbe515147d7485d 26e7ecdd21a060311edc422cc0d05617 186013859984e4effce0e2f98e37c95f fee48d8a692498521f20c2b8051cfe91 7f655fead6c6683c6b6c07b8f8ad1e35 ac14d23e5d2e4ab8ff7ba4f0ae45580a 1b389be5a4f135a351c31be20ce01b98 d7818e1b96618d9c866b72564aa1deeb bb171c7bdf4edde5effa02ac0ba84b59 b6b99b93dd53b00593667103925418f4 a7b520e24659a9fc8e54d74470939e96 f20666593aa09157904f61c96dfcd22f b9b40b28c6935be1845b1cbf29483340 b9c01f69677b64aaf86bf8815fdae2dc 8cc410c38f5380d16b918f4795fcc517 da83e063b1e0064b15457c7004138825 3c5686cd779f2ac3d903f9d4b726a0e1 6ec440cac5d1a9b3f338eb210ebc1175 a296010c1cc60f92dd5cc97c1c1aed6a f568811d9caac7ba9049559e2c8a0ad7 c6fe6b90dea1ae0d769db4a17a98d6ff 0d1827c3f861deb381b2ce18b5094204 a55dadc6afeb2aa6f7f675c9ce65bd94 94b1edaca4001bb0e422eb91566c406b ce81f547b81fccfc0f93525b0cb36bd5 145728b0ad032ad8e568e73d53364e37 5a98089c5906eb4d729986654a44bdd5 9fa66ff575efc5bcff397c52fb60e241 86583c8cd7352bf2a8abce17940ea10c 200ae96091b352fc5ee544d89e7f9f59 66fc732b4593b41382b5855e85f73237 f0cb8b948f34abd9e2b99baac244c6d3 30309e39bf7a6527b4442625e4bf8393 262ea93f911e987b4752325368d46b0c 6b5eb2a2d7145e12db75f15c1d0e5a21 5fb8bc3d6d84060adf00782d317167ca 0fc5e8d38832e198acfbe3708d6388eb 367ad629bd58725acaf98734fc8d233d c1d2e15410c60a7d49e4ceecb552ed4f 752a74d31aef5ed26c5245ea7222928d 0175772c4218e5936e1d28229e3e53f2 d30f1b761d24627899fe15ae1b1fbed7 73099cb797a0951110c374f77a7b1317 a5f152014df31a18308427843b67e960".split(" "), map_hashes = "d5101f052c410e78761694549a7a144b e08aa70fc839452db99ca82861959949 b8028b98b8f0605395aa0523e0a47e99 d939c85c740234edc8dab253fc5f9763 d52263e66e32b480f44bbadf80b2160f 182bd410c3b2ef7b5b9345f5ff87b2de d51d9667bdc9222bc5579b87b3e7621e 916f470e2dcac6a2c1e1beec9ab0921d a8faaed460861cb52792c472cb80a75c 0e97f5fc00ff4a8dc14d76330a273588 851d14bcfc3aff4bafe595973f10589b bec103e9dac04d5465f27a1c70d167a3 8f7861a10e3c526220458c897a695333 504d37bb81fd139ff96b848e4d0b21e8 ebd6ad6596ed947bb1687dd5f3df5dff a98e25d0d87ded6e31ef00639cda96fb 8ffcc2dcb937c7357a654017a85a61a9 4af5347dbfd27b5e86afdf207f8580b0 7f9510e806508886f71e3d6f0abdafc9 a589427ef2851fc8be7b7d788c601697 98678cdbfe64ccdc6afbc7b208c8db76 27867255bb769b96aadc096489cf533a 8f2350fad04dabf66b9b06666fac275b e02b71346b14b0039618a29020344080 070fff9e353ec28a06e9fd580c2e2a2e".split(" "), mod_version = "59e7a1ae6e804eca1225563100a1dfa7", cdn_url = "https://1239889624.rsc.cdn77.org/";

try {
    "rpgssl.r.worldssl.net" == window.location.hostname && (cdn_url = "https://rpgssl.r.worldssl.net/");
} catch (e$$138) {}

for (var socket_url = void 0, identify_url = "https://rpg-de.mo.ee/identify?t=", GAME_VERSION = "41", north_in_progress = !1, south_in_progress = !1, west_in_progress = !1, east_in_progress = !1, mouse_over_magic = !1, vat = 1.2, minimap = !1, active_menu = -1, selected_skill = "health", selected_inv = 0, monster_target_id = -1, selected_shop = 0, shop_npc = 0, shop_content = [], chat_blink = !1, chat_text = "", selected_chest = 0, chest_npc = 0, chest_content = [], chests = {}, chest_page = 1, maps = 25, no_render = !1, first_login = !0, quiet_mod_load = !1, player_quests = [ {
    progress: 0,
    quest_id: 0,
    reward_result: 0
} ], map_names = "Dorpat;Dungeon;Narwa;Whiland;Reval;Rakblood;Blood River;Hell;Clouds;Heaven;Cesis;Walco;Tutorial Island;Pernau;Fellin;Dragon's Lair;No Man's Land;Ancient Dungeon;Lost Woods;Minigames;Broceliande Forest;Devil's Triangle;Cathedral;Illusion Guild;Every Man's Land".split(";"), map_music = {}, map_music_files = {
    0: "level0",
    1: "level1",
    2: "level2",
    3: "level3",
    4: "level4",
    5: "level5",
    6: "level6",
    7: "level7",
    8: "level8",
    9: "level9",
    10: "level10",
    11: "level11",
    12: "level12",
    13: "level13",
    14: "level14",
    15: "level15",
    16: "level16",
    17: "level17",
    18: "level3",
    19: "level120",
    20: "level3",
    21: "level11",
    22: "level120",
    23: "level10",
    24: "level16",
    100: "level100",
    101: "level100",
    102: "level100",
    103: "level100",
    104: "level100",
    105: "level100",
    106: "level100",
    107: "level100",
    108: "level100",
    109: "level100",
    110: "level100",
    111: "level100",
    112: "level100",
    113: "level100",
    114: "level100",
    115: "level100",
    116: "level100",
    117: "level100",
    118: "level100",
    119: "level100",
    120: "level120",
    121: "level120",
    122: "level120",
    123: "level120",
    124: "level120",
    125: "level120",
    126: "level120",
    127: "level120",
    128: "level120",
    129: "level120",
    130: "level120",
    300: "level12",
    estonia: "estonia"
}, sound_effects = {}, sound_effect_files = {
    eat: "eat",
    drink: "drinking_potion",
    make_potion: "make_potion",
    cut_gem: "cut_gem",
    cook: "cook",
    woodcut: "woodcut",
    mine: "mine",
    hit: "hit",
    miss: "miss",
    hurt: "hurt",
    teleport: "teleport",
    fish: "fishing",
    carpentry: "carpentry",
    death: "suspense",
    forge: "forge",
    smelt: "smelt",
    notification: "notification",
    rake: "rake",
    dig: "dig"
}, admin_initialized = !1, mod_initialized = !1, current_map = 0, map_json = [], on_map_json = [], map_graphs = {}, node_graphs = {}, i = 0; i < maps; i++) map_graphs[i] = [];

var map_change_in_progress = !1, forge_selected = !1, captcha = !1, captcha_interval = 0, captcha_timeout = 180, market_results = [], touch_hold = !1, touch_hold_atk = !1, touch_hold_i = 0, touch_hold_j = 0, last_mos_balance = 0, minimum_duelling_level = 30, duelling_accept = "", duelling_confirm = "", building_mode_enabled = !1, server_time_delta = 0, last_my_text = "";

player_map = [];

var auto_connect = !0, spectator_mode = !1, last_screenshot = 0, active_channel = !1, active_channel_first = !0, channel_names = "18 AR BR CZ DE EN E2 E3 E4 E5 E6 E7 E8 E9 ES ET FI FR HU IT JP KO NL NO PL RO RU SV ST TH TR TW".split(" "), channel_descriptions = {
    18: "Mature English",
    AR: "Arabic",
    BR: "Portuguese",
    CZ: "Czech",
    DE: "German",
    EN: "English",
    E2: "English 2",
    E3: "English 3",
    E4: "English 4",
    E5: "English 5",
    E6: "English 6",
    E7: "English 7",
    E8: "English 8",
    E9: "English 9",
    ES: "Spanish",
    ET: "Estonian",
    FI: "Finnish",
    FR: "French",
    HU: "Hungarian",
    IT: "Italian",
    JP: "Japanese",
    KO: "Korean",
    NL: "Dutch",
    NO: "Norwegian",
    PL: "Polish",
    RO: "Romanian",
    RU: "Russian",
    SV: "Swedish",
    ST: "Steam",
    TH: "Thai",
    TR: "Turkish",
    TW: "Taiwanese",
    "{M}": "Moderators",
    $$: "Market chat"
}, teleport_locations = {
    Dorpat: {
        to_map: 0,
        to_i: 23,
        to_j: 18,
        radius: 12
    },
    Narwa: {
        to_map: 2,
        to_i: 68,
        to_j: 37,
        radius: 6
    },
    Whiland: {
        to_map: 3,
        to_i: 29,
        to_j: 93,
        radius: 5
    },
    Reval: {
        to_map: 4,
        to_i: 17,
        to_j: 29,
        radius: 5
    },
    Rakblood: {
        to_map: 5,
        to_i: 34,
        to_j: 68,
        radius: 6
    },
    "Blood River": {
        to_map: 6,
        to_i: 38,
        to_j: 86,
        radius: 7
    },
    Hell: {
        to_map: 7,
        to_i: 31,
        to_j: 20,
        radius: 7
    },
    Clouds: {
        to_map: 8,
        to_i: 61,
        to_j: 74,
        radius: 6
    },
    Heaven: {
        to_map: 9,
        to_i: 59,
        to_j: 17,
        radius: 8
    },
    Cesis: {
        to_map: 10,
        to_i: 58,
        to_j: 64,
        radius: 10
    },
    Walco: {
        to_map: 11,
        to_i: 22,
        to_j: 30,
        radius: 6
    },
    Fellin: {
        to_map: 14,
        to_i: 82,
        to_j: 32,
        radius: 6,
        no_book: !0
    },
    "Dragon's Lair": {
        to_map: 15,
        to_i: 49,
        to_j: 45,
        radius: 8
    },
    "Ancient Dungeon": {
        to_map: 17,
        to_i: 46,
        to_j: 89,
        radius: 5
    },
    "Broceliande Forest": {
        to_map: 20,
        to_i: 55,
        to_j: 72,
        radius: 8
    }
}, secret_boss_scroll_locations = {
    "Cannibal Plant": {
        to_map: 24,
        to_i: 71,
        to_j: 74
    },
    "Nephilim Warrior": {
        to_map: 24,
        to_i: 78,
        to_j: 74
    },
    "Ancient Hydra": {
        to_map: 24,
        to_i: 85,
        to_j: 74
    }
}, premium_text = "<ul><li>Access to US based server - faster connection</li><li>Less players in premium world - less competition to kill bosses or other mobs</li><li>Daily login reward won't be resetted when you miss a day.</li><li>Write in light blue text instead of white</li><li>Supporting the game! :)</li>";

"undefined" == typeof JSON.clone && (module.exports = {
    maps: maps,
    version: GAME_VERSION
});

var webkit_version = parseInt(getParameterByName("node-webkit-api"));

if (1 <= webkit_version) {
    var useExternalBrowserLinks = function(links) {
        links = links.getElementsByTagName("a");
        for (var i in links) "_blank" == links[i].target && links[i].href && (links[i].onclick = createExternalLink(links[i].href));
    }, setBrowserWindowSize = function(x, y) {
        gui.Window.get().resizeTo(parseInt(x), parseInt(y));
    }, setZoomLevel = function(length) {
        gui.Window.get().zoomLevel = length;
        localStorage.zoomlevel = length;
    }, createExternalLink = function(url) {
        return "linux" == process.platform ? function(e) {
            require("child_process").spawn("xdg-open", [ url ]);
            e && e.preventDefault();
        } : function(e) {
            gui.Shell.openExternal(url);
            e && e.preventDefault();
        };
    }, takeScreenshot = function() {
        function parse(args) {
            var target = require("nw.gui").Window.get();
            width = parseInt(target.window.wrapper.style.width);
            height = parseInt(target.window.wrapper.style.height);
            setTimeout(function() {
                target.capturePage(function(base64Data) {
                    base64Data = base64Data.replace(/^data:image\/(png|jpg|jpeg);base64,/, "");
                    require("fs").writeFile(args + "/screenshots/" + secondstamp() + ".png", base64Data, "base64", function(err) {
                        err && Popup.dialog("Cannot save a screenshot!");
                    });
                }, "png");
            }, 500);
        }
        var path = require("path"), fs = require("fs"), path = path.dirname(process.execPath);
        fs.existsSync(path + "/screenshots") ? parse(path) : (fs.mkdirSync(path + "/screenshots", 502, function(err) {
            err && Popup.dialog("Cannot create screenshots directroy!");
        }), setTimeout(function() {
            "Cannot create screenshots directroy!" != Popup.active_popup_text && takeScreenshot();
        }, 500));
    };
    try {
        observeElement(document, "checksum", function(me) {
            me = me.detail;
            var startTime = localStorage.last_cache_clean || 0;
            me && me.version > release_version && me.checksum != release_checksum && 3e5 < timestamp() - startTime && (me = require("nw.gui"), 
            localStorage.last_cache_clean = timestamp(), me.App.clearCache(), window.location.reload());
        });
    } catch (e$$142) {}
    var gui = require("nw.gui");
}

var alternative_login_function = function() {
    real_login_function();
}, real_login_function = function() {
    removeClass(document.getElementById("login_box"), "hidden");
    document.getElementById("donation_button").style.display = "none";
    document.getElementById("spectate_button").style.display = "block";
};

function showResetPassword() {
    addClass(document.getElementById("login_box"), "hidden");
    removeClass(document.getElementById("reset_password_box"), "hidden");
}

function showResetPasswordForm(a, b) {
    addClass(document.getElementById("login_box"), "hidden");
    document.getElementById("reset_password_form_email");
    removeClass(document.getElementById("reset_password_form_box"), "hidden");
}

var using_alternate_login = !1, external_library_loaded = !0, show_donations = !1;

if ("kongregate" == getParameterByName("inapp")) {
    external_library_loaded = !1;
    kongregate = {
        payments: !1,
        sessionid: ""
    };
    var kongregate_url = "https://www.kongregate.com/javascripts/kongregate_api.js";
    LazyLoad.js(kongregate_url, function() {
        "undefined" != typeof kongregateAPI ? kongregateAPI.loadAPI(function() {
            kongregate.api = kongregateAPI.getAPI();
            var init = function() {
                using_alternate_login = external_library_loaded = !0;
                kongregate.user_id = kongregate.api.services.getUserId();
                kongregate.user_name = kongregate.api.services.getUsername();
                kongregate.token = kongregate.api.services.getGameAuthToken();
                kongregate.payments = !0;
                kongregate.friends = [];
                kongregate.ignores = [];
                alternative_login_function = function() {
                    var wait = setInterval(function() {
                        1 == socket_status && finishedLoading && (do_login(kongregate.user_name, kongregate.user_id, "kongregate", kongregate.token), 
                        clearInterval(wait));
                    }, 100);
                };
            };
            if (kongregate.api.services.isGuest()) {
                kongregate.api.services.showRegistrationBox();
                var intervalId = setInterval(function() {
                    kongregate.api.services.isGuest() ? (addClass(document.getElementById("loading_box"), "hidden"), 
                    Popup.dialog("You need to be logged into Kongregate to start playing!", function() {
                        kongregate.api.services.showRegistrationBox();
                    })) : (Popup.dialog_close(), init(), clearInterval(intervalId));
                }, 1e3);
            } else init();
        }) : external_library_loaded = !0;
    });
} else if ("steam" == getParameterByName("inapp")) window.addEventListener("load", function() {
    function render() {
        var c = document.getElementById("forceRefreshCanvas");
        c.getContext("2d").clearRect(0, 0, c.width, c.height);
        window.requestAnimationFrame(render);
    }
    var elem = document.createElement("canvas");
    elem.id = "forceRefreshCanvas";
    elem.width = 1;
    elem.height = 1;
    elem.style.width = "1px";
    elem.style.height = "1px";
    document.body.appendChild(elem);
    render();
}); else if ("facebook" == getParameterByName("inapp")) window.fbAsyncInit = function() {
    document.getElementById("fb-login-button").style.display = "block";
    window.fbStatusChangeCallback = function(test) {
        "connected" === test.status && FB.api("/me", function(data) {
            do_login(data.first_name.toLowerCase().trim() + data.id.substr(data.id.length - 5), data.id, "facebook", test.authResponse.accessToken);
        });
    };
    FB.init({
        appId: config.facebook_app_id,
        xfbml: !0,
        version: "v2.1"
    });
}, function(d, s, id) {
    var ref = d.getElementsByTagName(s)[0];
    d.getElementById(id) || (d = d.createElement(s), d.id = id, d.src = "//connect.facebook.net/en_US/sdk.js", 
    ref.parentNode.insertBefore(d, ref));
}(document, "script", "facebook-jssdk"); else if (0 < getParameterByName("kongregate_username").length) localStorage.kongregate = JSON.stringify({
    user: getParameterByName("kongregate_username")
}); else if (0 < getParameterByName("NewgroundsAPI_UserName").length) {
    var using_alternate_login = !0, user_name = getParameterByName("NewgroundsAPI_UserName"), session_id = getParameterByName("NewgroundsAPI_SessionID"), provider = "newgrounds", alternative_login_function = function() {
        Popup.prompt("Use your Newgrounds account '" + user_name + "' to login?", function() {
            var wait = setInterval(function() {
                1 == socket_status && finishedLoading && (do_login(user_name, session_id, provider), 
                clearInterval(wait));
            }, 100);
        }, real_login_function);
    };
    localStorage.newgrounds = JSON.stringify({
        user: getParameterByName("NewgroundsAPI_UserName")
    });
} else if ("gamescom" == getParameterByName("inapp")) {
    external_library_loaded = !1;
    gamescom = {
        payments: !1,
        sessionid: "",
        access_token: getHashParameterByName("accessToken")
    };
    var gamescom_url = "https://s.aolcdn.com/gamesdevcenter/sdk/v2/GamesSDK.min.js";
    LazyLoad.js(gamescom_url, function() {
        "undefined" != typeof GAMESAPI ? (GAMESAPI.setGameSecret(config.gamescom_game_secret), 
        GAMESAPI.beginGameSession(function(res) {
            if (200 == res.statusCode && "Ok" == res.statusText && res.data && res.data.playerInfo && !res.data.playerInfo.isGuest) {
                var h = res.data.playerInfo.gamerHandle, tag = res.data.playerInfo.playerId;
                gamescom.payments = !0;
                gamescom.sessionid = tag;
                gamescom.user_name = res.data.playerInfo.gamerHandle;
                using_alternate_login = !0;
                alternative_login_function = function() {
                    Popup.prompt("Use your Games.com account '" + h + "' to login?", function() {
                        var wait = setInterval(function() {
                            1 == socket_status && finishedLoading && (do_login(h, tag, "games.com", gamescom.access_token), 
                            clearInterval(wait));
                        }, 100);
                    }, real_login_function);
                };
            }
            external_library_loaded = !0;
        }), setTimeout(function() {
            external_library_loaded = !0;
        }, 5e3)) : external_library_loaded = !0;
    });
} else "1321" == getParameterByName("gid") && (mocospace = {
    provider: "mocospace"
}, mocospace.sessionid = getParameterByName("accessToken"), mocospace.user_name = getParameterByName("displayName"), 
alternative_login_function = function() {
    Popup.prompt("Use your MocoSpace account '" + mocospace.user_name + "' to login?", function() {
        var wait = setInterval(function() {
            1 == socket_status && finishedLoading && (do_login(mocospace.user_name, mocospace.sessionid, mocospace.provider), 
            clearInterval(wait));
        }, 100);
    }, real_login_function);
}, external_library_loaded = using_alternate_login = !0, LazyLoad.js("https://imgmocospace-a.akamaihd.net/wk/js/opensocial/opensocial.js", function() {
    "undefined" != typeof MocoSpace && (document.getElementById("donation_button_link").onclick = function() {
        WebPayment.open_mocospace();
    }, document.getElementById("mos_market_link").onclick = function() {
        WebPayment.open_mocospace();
    });
}));

var map = [], on_map = [], maps_loaded = {}, online_players = {};

"1338" == window.location.port ? (cdn_url = "", LazyLoad.js("maps/map0.js?" + timestamp(), function() {
    maps_loaded[0] = !0;
})) : LazyLoad.js(cdn_url + "maps/map0.js?" + map_hashes[0], function() {
    maps_loaded[0] = !0;
});

var socket_io_loaded = !1;

/me|org|ee|net|com/.test(window.location.hostname) || (socket_url = void 0);

"WebSocket" in window || "undefined" == typeof socket_url || (socket_url += ":" + config.http_port);

"https:" == window.location.protocol && (socket_url = "https://rpg-de.mo.ee");

LazyLoad.js((socket_url ? socket_url : "") + "/socket.io/socket.io.js", function() {
    socket_io_loaded = !0;
    ServerList.socket_ready();
});

var ip_data = {};

loadJSON(identify_url + timestamp(), function(obj) {
    ip_data = obj;
});

function mobileDevice() {
    return /Android|iPhone|iPad|Mobile|Tablet|Blackberry|WebOS/.test(navigator.userAgent);
}

function modsSupported() {
    return !0;
}

var iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/i) ? !0 : !1, Android = navigator.userAgent.match(/(Android)/i) ? !0 : !1;

"android" == getParameterByName("inapp") && (Android = !1);

var lastTap = 0;

mobileDevice() && (document.title = "RPG MO");

document.createElement("canvas").getContext || alert("To play this game you need a browser with canvas support!");

var supports = {};

supports.datalist = !(!document.createElement("datalist") || !window.HTMLDataListElement);

var touch_initialized = !1, initialize_touch = function() {
    touch_initialized || (touch_initialized = localStorage.has_touch_screen = !0, setCanvasSize());
    touch_initialized && (GAME_STATE == GAME_STATES.LOGIN || GAME_STATE == GAME_STATES.SPECTATE ? (document.getElementById("gamepad").style.display = "none", 
    document.getElementById("atk_button").style.display = "none") : (document.getElementById("gamepad").style.display = "block", 
    loadSpecificImage("gamepad"), 16 == players[0].map || 24 == players[0].map || players[0].params.pvp ? (document.getElementById("atk_button").style.display = "block", 
    loadSpecificImage("atk_button")) : document.getElementById("atk_button").style.display = "none"));
}, left_click_cancel = !1, max_scale = parseFloat(localStorage.max_scale) || (getParameterByName("node-webkit-api") ? 2.25 : 1.5), map_increase = parseInt(localStorage.map_increase) || (mobileDevice() ? 2 : 4), touch_x, touch_y, touch_last_x, touch_last_y, chat_filters = {
    join_leave: !0
};

try {
    chat_filters = JSON.parse(localStorage.chat_filters);
} catch (e$$143) {}

window.requestAnimFrame = function(a) {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        window.setTimeout(callback, 1e3 / 60);
    };
}();

function initializeNews(proto) {
    if (!(768 > (0 < window.innerWidth ? window.innerWidth : screen.width))) {
        base = proto ? "https://1641572598.rsc.cdn77.org/news.json?t=" : "https://rpg-de.mo.ee/news?t=";
        var href = base + timestamp();
        loadJSON(href, function(data) {
            var h = document.getElementById("news"), i;
            for (i in data) if (data[i] && data[i].title) {
                var d = document.createElement("div");
                addClass(d, "news_item");
                var element = document.createElement("span");
                element.innerHTML = data[i].title;
                addClass(element, "title");
                addClass(element, "scrolling_allowed");
                element.rel = data[i].link;
                element.onclick = function() {
                    window.open(this.rel, "_blank");
                };
                d.appendChild(element);
                element = document.createElement("span");
                element.innerHTML = data[i].date;
                addClass(element, "date");
                addClass(element, "scrolling_allowed");
                d.appendChild(element);
                element = document.createElement("span");
                addClass(element, "content");
                addClass(element, "scrolling_allowed");
                element.innerHTML = data[i].content;
                d.appendChild(element);
                h.appendChild(d);
            }
        }, function() {
            proto || initializeNews(!0);
        });
    }
}

var isActive = !0, resyncRequired = 0;

function pageVisible() {
    SpectateWindow.active || (updateBase(), 0 < resyncRequired && setTimeout(function() {
        Chat.resync();
    }, 500), isActive = !0);
}

function pageHidden() {
    touch_hold_j = touch_hold_i = 0;
    isActive = touch_hold = !1;
}

window.onorientationchange = function() {
    noRender();
};

var width = 854, height = 480, framelimit_delta = 0, simple_z_index_layer = !1, settings = {
    framelimit: !1,
    simple_z_index: !1
}, tile_width = 54, half_tile_width = Math.floor(tile_width / 2), half_tile_width_round = Math.round(tile_width / 2), tile_height = 27, half_tile_height = Math.floor(tile_height / 2), half_tile_height_round = Math.round(tile_height / 2), dest_x = 0 + Math.round(tile_height / 2), dest_y = 144 + tile_width, dx = 13, dy = 13, output = "Hello!", canvas, c = [], ctx = [], animation_timestamps = {}, wrapper, side, side_bottom, menu, game_paused = !1, selected = {
    i: null,
    j: null
}, last_updated = [], chat_history = [], selected_object = {}, tile_count = 0, object_count = 0;

map_export = function() {
    for (var a in map_) return a;
};

var game_timestamp = {};

game_timestamp.init = timestamp();

window.onload = function() {
    try {
        premium = "true" == localStorage.premium || !1;
    } catch (a) {}
    ServerList.fetch();
    imagesTotal = JSON.count(IMAGE_SHEET) / 2;
    game_timestamp.onload = timestamp();
    SpectateWindow.onload();
    start_loading();
    initializeNews();
    1338 == config.http_port && "function" == typeof initDev && initDev();
    Chat.max_chat_history = isMobile() ? 100 : 200;
};

function start_loading() {
    if (maps_loaded[0]) {
        if (document.getElementById("forging_menu").onmousedown = function(event) {
            Forge.select(event, !0);
        }, document.getElementById("forging_menu").onmouseup = function(e) {
            Forge.drop(e, !0);
        }, document.getElementById("forging_menu").onmousemove = function(event) {
            Forge.drag(event);
        }, document.getElementById("forging_menu").addEventListener(touchstart, function(b) {
            Forge.select(b, !1);
        }), document.getElementById("forging_menu").addEventListener(touchend, function(e) {
            Forge.drop(e, !1);
        }), document.addEventListener("keydown", function(e) {
            var currentEvent = !1;
            lastController = "keyboard";
            var d = e.srcElement || e.target;
            if (8 === e.keyCode || 27 === e.keyCode) currentEvent = "INPUT" === d.tagName.toUpperCase() && ("TEXT" === d.type.toUpperCase() || "PASSWORD" === d.type.toUpperCase() || "NUMBER" === d.type.toUpperCase()) || "TEXTAREA" === d.tagName.toUpperCase() ? d.readOnly || d.disabled : !0;
            if (currentEvent) return e.preventDefault(), !1;
            if (("INPUT" !== d.tagName.toUpperCase() || "TEXT" !== d.type.toUpperCase() && "PASSWORD" !== d.type.toUpperCase() && "NUMBER" !== d.type.toUpperCase()) && "TEXTAREA" !== d.tagName.toUpperCase() && "SELECT" !== d.tagName.toUpperCase()) switch (keyMap.action(e)) {
              case KEY_ACTION.UP:
                touch_hold_i = 0;
                touch_hold_j = 1;
                touch_hold = !0;
                break;

              case KEY_ACTION.RIGHT:
                touch_hold_i = 1;
                touch_hold_j = 0;
                touch_hold = !0;
                break;

              case KEY_ACTION.DOWN:
                touch_hold_i = 0;
                touch_hold_j = -1;
                touch_hold = !0;
                break;

              case KEY_ACTION.LEFT:
                touch_hold_i = -1;
                touch_hold_j = 0;
                touch_hold = !0;
                break;

              case KEY_ACTION.ACTIVATE_ATTACK:
                touch_hold_atk = !0;
            }
        }), declareVariablesFromDOM(), window.onresize = function() {
            setCanvasSize(!0);
        }, Fullscreen.add_listeners(), window.addEventListener("storage", function(e) {
            2 == socket_status && "active_user" == e.key && players[0].name != e.newValue && user != e.newValue && (socket.disconnect(), 
            auto_connect = !1, setTimeout(function() {
                socket.socket.reconnect();
            }, 1e3), addChatText("Multilogin prevented! Trading between accounts is forbidden.", !1, COLOR.TEAL));
        }, !1), window.onbeforeunload = function(e) {
            if (!(2 != socket_status || -1 < [ "1", "gamescom", "kongregate", "steam" ].indexOf(getParameterByName("inapp")))) {
                var msg = "Do you want to leave RPG MO?;Leaving so soon? Don't forget to like us on Facebook!;Leaving so soon? Don't forget to add us in Chrome Store!;Leaving so soon? Don't forget to tell your friends about RPG MO!;Leaving so soon? Help us by buying items or coins, donations keep us going.;Leaving so soon? Sign up for the newsletter to receive information about updates.".split(";")[6 * Math.random() << 0];
                if ("" != getParameterByName("hackernews")) if (3e5 < timestamp() - game_timestamp.finished) msg = "Thank you for showing interest in our game! Upvoting on HN would really help us :)"; else return;
                "undefined" == typeof e && (e = window.event);
                e && (e.returnValue = msg);
                return msg;
            }
        }, document.addEventListener("keyup", function(evt) {
            lastController = "keyboard";
            var c = !1;
            switch (keyMap.action(evt)) {
              case KEY_ACTION.TAKE_SCREENSHOT:
                "undefined" == typeof greenworks && "function" == typeof takeScreenshot && 1500 < timestamp() - last_screenshot && (last_screenshot = timestamp(), 
                takeScreenshot());
                break;

              case KEY_ACTION.TOGGLE_EDITOR:
                players[0].permissions == PERMISSIONS.ADMIN && "undefined" != typeof Editor && Editor.toggle();
                break;

              case KEY_ACTION.START_CHAT_SPECTATE:
                SpectateWindow.player && ChatSystem.toggle();
                break;

              case KEY_ACTION.START_CHAT:
                ChatSystem.toggle();
                touch_hold_j = touch_hold_i = 0;
                touch_hold = !1;
                break;

              case KEY_ACTION.HIDE_IFRAME:
                SpectateWindow.slave && SpectateWindow.sendMessage({
                    action: "hide_iframe"
                });
                break;

              case KEY_ACTION.START_CHAT_SLASH:
                ChatSystem.toggle();
                touch_hold_j = touch_hold_i = 0;
                touch_hold = !1;
                document.getElementById("my_text").value = "/";
                document.getElementById("my_text").selectionStart = 1;
                document.getElementById("my_text").selectionEnd = 1;
                document.getElementById("my_text").focus();
                break;

              case KEY_ACTION.BROWSER_BACK:
                if (document.activeElement && ("number" == document.activeElement.type || "text" == document.activeElement.type)) return !0;
                c = !0;
                break;

              case KEY_ACTION.SWITCH_LANGUAGE_UP:
                c = !0;
                document.getElementById("current_channel").selectedIndex = Math.max(0, document.getElementById("current_channel").selectedIndex - 1);
                break;

              case KEY_ACTION.SWITCH_LANGUAGE_DOWN:
                c = !0;
                document.getElementById("current_channel").selectedIndex = Math.min(document.getElementById("current_channel").length - 1, document.getElementById("current_channel").selectedIndex + 1);
                break;

              case KEY_ACTION.SEND_CHAT:
                var path = document.getElementById("my_text").value, title = document.getElementById("current_channel").value;
                if (Chat.has_client_command(path)) {
                    ChatSystem.toggle();
                    setTimeout(function() {
                        setCanvasSize(!1);
                    }, 1e3);
                    Chat.execute_client_command(path);
                    return;
                }
                if ("/" == path[0] || "/" != path.trim()[0]) path = path.trim();
                var types = "EN ST E2 E3 E4 E5 E6 E7 E8 E9".split(" ");
                "EN" == title && path.filterChat("EN") != path ? Popup.dialog("Your text contained a bad word and was blocked, use channel 18 instead", null_function) : 3 < path.length && "/" != path[0] && 0 <= types.indexOf(title) && .5 <= path.uppercasePercentage() ? Popup.dialog("Your text contained too much CAPS, we do not tolerate spam.", null_function) : 3 < path.length && "/" != path[0] && 0 <= types.indexOf(title) && .5 <= path.symbolPercentage() ? Popup.dialog("Your text contained too many symbols, we do not tolerate spam.", null_function) : 3 < path.length && "/" != path[0] && 6 <= path.longestStreak() ? Popup.dialog("Your text contained too many same characters in a row, we do not tolerate spam.", null_function) : 0 < path.length && "/" != path[0] && 0 <= types.indexOf(title) && path == last_my_text ? Popup.dialog("You already sent the same text, we do not tolerate spam.", null_function) : SpectateWindow.slave ? SpectateWindow.sendMessage({
                    action: "chat",
                    data: path,
                    lang: title
                }) : Socket.send("message", {
                    data: path,
                    lang: title
                });
                12 == current_map && (chat_filters.chat = !1);
                "EN" == title && (last_my_text = path);
                ChatSystem.toggle();
                setTimeout(function() {
                    setCanvasSize(!1);
                }, 1e3);
                break;

              case KEY_ACTION.CANCEL_CHAT:
                ChatSystem.toggle();
                setTimeout(function() {
                    setCanvasSize(!1);
                }, 1e3);
                break;

              case KEY_ACTION.LOGIN:
                if (SpectateWindow.slave) return;
                do_login(document.getElementById("login_user").value, document.getElementById("login_pass").value);
                setTimeout(function() {
                    setCanvasSize(!1);
                }, 1e3);
                break;

              case KEY_ACTION.MAGIC_0:
                Player.client_use_magic(0);
                break;

              case KEY_ACTION.MAGIC_1:
                Player.client_use_magic(1);
                break;

              case KEY_ACTION.MAGIC_2:
                Player.client_use_magic(2);
                break;

              case KEY_ACTION.MAGIC_3:
                Player.client_use_magic(3);
                break;

              case KEY_ACTION.MAGIC_4:
                Player.client_use_magic(4);
                break;

              case KEY_ACTION.UP:
              case KEY_ACTION.DOWN:
              case KEY_ACTION.LEFT:
              case KEY_ACTION.RIGHT:
                touch_hold = !1;
                break;

              case KEY_ACTION.ACTIVATE_ATTACK:
                touch_hold_atk = !1;
                break;

              case KEY_ACTION.TOGGLE_MINIMAP:
                editor_enabled && Editor.toggle_minimap();
                break;

              case KEY_ACTION.EDITOR_GROUND_TILES:
                editor_enabled && Editor.ground_tiles();
                break;

              case KEY_ACTION.EDITOR_OBJECT_TILES:
                editor_enabled && Editor.object_tiles();
                break;

              case KEY_ACTION.EDITOR_NPC_TILES:
                editor_enabled && Editor.npc_tiles();
                break;

              case KEY_ACTION.EDITOR_TILESHEET_PREV:
                editor_enabled && Editor.previous_page();
                break;

              case KEY_ACTION.EDITOR_TILESHEET_NEXT:
                editor_enabled && Editor.next_page();
                break;

              case KEY_ACTION.EDITOR_UP:
                editor_enabled && Editor.editor_up();
                break;

              case KEY_ACTION.EDITOR_DOWN:
                editor_enabled && Editor.editor_down();
                break;

              case KEY_ACTION.EDITOR_LEFT:
                editor_enabled && Editor.editor_left();
                break;

              case KEY_ACTION.EDITOR_RIGHT:
                editor_enabled && Editor.editor_right();
                break;

              case KEY_ACTION.EDITOR_COPY:
                editor_enabled && Editor.editor_copy();
                break;

              case KEY_ACTION.EDITOR_SET_AS_TARGET:
                editor_enabled && Editor.editor_set_teleport_position();
                break;

              case KEY_ACTION.EDITOR_MAKE_TELEPORT:
                editor_enabled && Editor.editor_make_teleport();
                break;

              case KEY_ACTION.SHOW_OPTIONS:
                OptionsMenu.toggle();
            }
            GAME_STATE != GAME_STATES.CHAT || captcha || (document.getElementById("my_text").focus(), 
            Chat.update_string());
            if (c) return evt.preventDefault(), !1;
        }), !(localStorage.b && parseInt(localStorage.b) > timestamp() || getKypsis("b"))) {
            window.onscroll = function(e) {
                GAME_STATE == GAME_STATES.GAME && setCanvasSize();
                var target = e.srcElement || e.target;
                if (!(hasClass(target, "scrolling_allowed") || hasClass(target.parentNode, "scrolling_allowed") || target.parentNode && hasClass(target.parentNode.parentNode, "scrolling_allowed"))) return e.preventDefault(), 
                !1;
            };
            var timeout;
            try {
                wrapper.addEventListener("touchmove", function(e) {
                    if (10 < Math.abs(e.touches[0].clientX - touch_x) || 10 < Math.abs(e.touches[0].clientY - touch_y)) prevent_touchend_default = !0;
                    hasClass(e.srcElement || e.target, "scrolling_allowed") || e.preventDefault();
                }), wrapper.addEventListener(touchstart, function(e) {
                    Android && e.stopPropagation();
                    has_touch_screen = !0;
                    left_click_cancel = prevent_touchend_default = !1;
                    touch_x = e.clientX || e.touches[0].clientX;
                    touch_y = e.clientY || e.touches[0].clientY;
                    touch_last_x = e.pageX || e.touches[0].pageX;
                    touch_last_y = e.pageX || e.touches[0].pageY;
                    initialize_touch();
                    GAME_STATE == GAME_STATES.GAME && (timeout = setTimeout(function() {
                        left_click_cancel = !0;
                        regular_oncontextmenu(e);
                    }, 1e3));
                    2 == socket_status && "hud" == e.target.id && e.preventDefault();
                }), wrapper.addEventListener(touchend, function(e) {
                    e.stopPropagation();
                    clearTimeout(timeout);
                    prevent_touchend_default || left_click_cancel ? e.preventDefault() : regular_onclick(e);
                }), document.getElementById("gamepad").addEventListener(touchstart, function(e) {
                    e.preventDefault();
                }), document.getElementById("gamepad").addEventListener(touchend, function(e) {
                    e.preventDefault();
                }), document.getElementById("sw_but").addEventListener(touchstart, function(e) {
                    selected_object = {};
                    touch_hold_i = 0;
                    touch_hold_j = -1;
                    touch_hold = !0;
                    Music.play(players[0].map);
                    e.preventDefault();
                }), document.getElementById("sw_but").addEventListener(touchend, function(e) {
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("se_but").addEventListener(touchstart, function(e) {
                    selected_object = {};
                    touch_hold_i = 1;
                    touch_hold_j = 0;
                    touch_hold = !0;
                    Music.play(players[0].map);
                    e.preventDefault();
                }), document.getElementById("se_but").addEventListener(touchend, function(e) {
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("ne_but").addEventListener(touchstart, function(e) {
                    selected_object = {};
                    touch_hold_i = 0;
                    touch_hold_j = 1;
                    touch_hold = !0;
                    Music.play(players[0].map);
                    e.preventDefault();
                }), document.getElementById("ne_but").addEventListener(touchend, function(e) {
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("nw_but").addEventListener(touchstart, function(e) {
                    selected_object = {};
                    touch_hold_i = -1;
                    touch_hold_j = 0;
                    touch_hold = !0;
                    Music.play(players[0].map);
                    e.preventDefault();
                }), document.getElementById("nw_but").addEventListener(touchend, function(e) {
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("mi_but").addEventListener(touchstart, function(e) {
                    for (var s = [ {
                        i: players[0].i + touch_hold_i,
                        j: players[0].j + touch_hold_j
                    }, {
                        i: players[0].i,
                        j: players[0].j + 1
                    }, {
                        i: players[0].i + 1,
                        j: players[0].j
                    }, {
                        i: players[0].i - 1,
                        j: players[0].j
                    }, {
                        i: players[0].i,
                        j: players[0].j - 1
                    }, {
                        i: players[0].i + touch_hold_i,
                        j: players[0].j + touch_hold_j
                    } ], entry = s.pop(); !on_map[current_map][entry.i][entry.j] && 0 < s.length; ) entry = s.pop();
                    s = document.getElementById("gamepad").getBoundingClientRect();
                    ActionMenu.create({
                        clientX: s.right - 130,
                        clientY: s.top - 100
                    }, entry);
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("mi_but").addEventListener(touchend, function(e) {
                    touch_hold = !1;
                    e.preventDefault();
                }), document.getElementById("atk_button").addEventListener(touchstart, function(e) {
                    touch_hold_atk = !0;
                    document.getElementById("atk_button").style.backgroundPositionX = "-73px";
                    e.preventDefault();
                }), document.getElementById("atk_button").addEventListener(touchend, function(e) {
                    document.getElementById("atk_button").style.backgroundPositionX = "0px";
                    touch_hold_atk = !1;
                    e.preventDefault();
                }), setInterval(function() {
                    if (touch_hold && !movementInProgress(players[0])) {
                        players[0].temp.busy && inAFight && 500 < timestamp() - lastRunAwayAttempt && (Socket.send("run_from_fight", {}), 
                        lastRunAwayAttempt = timestamp());
                        var object = {
                            i: players[0].i + touch_hold_i,
                            j: players[0].j + touch_hold_j
                        };
                        findPathFromTo(players[0], object, players[0]);
                        if (map_walkable(players[0].map, object.i, object.j)) {
                            players[0].path = [ object ];
                            var x = players[0].i + 2 * touch_hold_i, y = players[0].j + 2 * touch_hold_j;
                            on_map[current_map][x] && on_map[current_map][x][y] && on_map[current_map][x][y].b_t == BASE_TYPE.NPC ? (object = objects_data[on_map[current_map][x][y].id], 
                            (object.params.aggressive && players[0].temp.target_id != object.id && players[0].params.combat_level < FIGHT.calculate_monster_level(object) + 20 || 100 <= current_map || 16 == current_map) && !Timers.running("set_target") && (Socket.send("set_target", {
                                target: object.id
                            }), Timers.set("set_target", null_function, 100))) : touch_hold_atk && player_map[object.i] && player_map[object.i][object.j] && (object = player_map[object.i][object.j][0], 
                            Timers.running("set_target") || (Socket.send("attack_player", {
                                player: object.name
                            }), Timers.set("set_target", null_function, 50)));
                        } else selected_object = obj_g(on_map[current_map][object.i][object.j]), "object" == typeof selected_object && selected_object.activities[0] && 0 < selected_object.activities[0].length && ActionMenu.act(0);
                    }
                }, 16);
            } catch (b) {}
            setCanvasSize();
            tile_count = BASE_TYPE[BASE_TYPE.GROUND].length;
            object_count = BASE_TYPE[BASE_TYPE.OBJECT].length;
            load_user_data();
            if (!LOAD(0)) for (var i = 0; i < map_size_x; i++) for (var j = 0; j < map_size_y; j++) {
                var n = Math.round(50 * Math.random());
                n >= BASE_TYPE[BASE_TYPE.GROUND].length && (n = 0);
                n = 0;
                map[i][j] = createObject(JSON.merge(BASE_TYPE[BASE_TYPE.GROUND][n], {
                    i: i,
                    j: j
                }));
                map[i][j].blocking ? on_map[i][j] = !1 : (n = Math.round(10 * Math.random()), on_map[i][j] = 1 > n ? createObject(JSON.merge(BASE_TYPE[BASE_TYPE.OBJECT][n], {
                    i: i,
                    j: j
                })) : !1);
            }
            imageGround = [];
            imageObject = [];
            imageGraphics = [];
            for (i = 0; i < Math.max(tile_count, object_count); i++) imageGround[i] = new Image(), 
            imageObject[i] = new Image(), imageGraphics[i] = new Image();
            imageGround[0].src = cdn_url + "selected.png";
            wrapper.onclick = function(e) {
                touch_initialized || regular_onclick(e);
            };
            holdEvent(wrapper, regular_oncontextmenu, 1e3);
            wrapper.oncontextmenu = regular_oncontextmenu;
            wrapper.onmousemove = regular_onmousemove;
            for (var key in IMAGE_SHEET) "object" == typeof IMAGE_SHEET[key] && (IMAGE_SHEET[key].url = cdn_url + IMAGE_SHEET[key].url + "?" + img_hashes[parseInt(key) - 1] + window.location.hostname, 
            IMAGE_SHEET[key].img = [], IMAGE_SHEET[key].img[0] = getImage(IMAGE_SHEET[key].url, function() {
                updateLoading();
            }));
            for (i in sprite) "undefined" == typeof IMAGE_SHEET[sprite[i].meta.image] && (IMAGE_SHEET[sprite[i].meta.image] = {}, 
            IMAGE_SHEET[sprite[i].meta.image].sprite = new SpriteAtlas(sprite[i]), IMAGE_SHEET[sprite[i].meta.image].tile_width = 0, 
            IMAGE_SHEET[sprite[i].meta.image].tile_height = 0);
            var wait = setInterval(function() {
                var files = !1, key;
                for (key in IMAGE_SHEET) if ("object" == typeof IMAGE_SHEET[key] && !IMAGE_SHEET[key].sprite) {
                    if (!IMAGE_SHEET[key].img[0].complete) return !1;
                    !IMAGE_SHEET[key].filters || IMAGE_SHEET[key].img[1] || /Android|iPhone|iPad|Mobile|Tablet|Blackberry|WebOS/.test(navigator.userAgent) || (IMAGE_SHEET[key].img[1] = Filters.applyFilter(IMAGE_SHEET[key].img[0], {
                        filter: "brightness",
                        brightness: 50
                    }), files = !0);
                }
                ServerList.socket_url || (files = !0);
                socket_io_loaded || (files = !0);
                external_library_loaded || (files = !0);
                for (var i in sprite) IMAGE_SHEET[sprite[i].meta.image].sprite.SpriteSheet.complete || (files = !0);
                if (files) return !1;
                prepareTopImages();
                game_timestamp.loaded = timestamp();
                addClass(document.getElementById("loading_box"), "hidden");
                getParameterByName("reset_email") ? showResetPasswordForm(getParameterByName("reset_email"), getParameterByName("reset_code")) : getParameterByName("unsubscribe_id") ? (addClass(document.getElementById("login_box"), "hidden"), 
                Popup.prompt("Unsubscribe from e-mail alerts?", function() {
                    socket.emit("unsubscribe_email", {
                        id: getParameterByName("unsubscribe_id"),
                        code: getParameterByName("unsubscribe_code"),
                        sk: c_sk
                    });
                    alternative_login_function();
                }, function() {
                    alternative_login_function();
                })) : alternative_login_function();
                clearInterval(wait);
                calculateMonsterCombats();
                preloadPlayer();
                resetMapShift();
                try {
                    Editor.toggle_minimap(), Editor.toggle_minimap(), drawMap();
                } catch (e) {}
                refreshHUD();
                loadRecaptcha();
                makePlaceholder(document.getElementById("login_user"), "User");
                setTimeout(function() {
                    iOS || setCanvasSize();
                }, 2500);
                iOS && (document.getElementById("my_text").style.left = "63px");
                animateUntil("all", 0);
                render();
                finishedLoading = !0;
                setInterval(function() {
                    garbageCollector();
                }, 6e4);
                initDOMEvents();
                initHandlebars();
                BigMenu.init_inventory();
                Forge.init();
                Market.init_item_category();
                WebPayment.init();
                setCanvasSize();
                Music.init();
                document.getElementById("chat_button").style.display = "block";
                document.getElementById("filters_button").style.display = "block";
                document.getElementById("contacts_button").style.display = "block";
                document.getElementById("quests_button").style.display = "block";
                document.getElementById("spectate_button").style.display = "block";
                if ("gamescom" == getParameterByName("inapp")) document.getElementById("top_left").style.display = "none", 
                show_donations = !0, gamescom.payments ? (document.getElementById("donation_button_link").onclick = function() {
                    WebPayment.open_gamescom();
                }, document.getElementById("mos_market_link").onclick = function() {
                    WebPayment.open_gamescom();
                }, GAMESAPI.TRANSACTION.getTransactionHistory(function(node) {
                    if (node && node.data && 0 < node.data.length) {
                        var html = 1e4, i;
                        for (i in node.data) node.data[i].amount && node.data[i].assetId && node.data[i].orderId && (WebPayment.report_aol_payment(node.data[i].amount, node.data[i].assetId, node.data[i].orderId, html), 
                        html += 1500);
                    }
                }, function() {})) : (document.getElementById("donation_button_link").onclick = function() {
                    Popup.dialog("Log in to Games.com to enable payments", null_function);
                }, document.getElementById("mos_market_link").onclick = function() {
                    Popup.dialog("Log in to Games.com to enable payments", null_function);
                }), modsSupported() && (document.getElementById("mods_link").style.display = "block", 
                document.getElementById("spectate_mode_link").style.display = "block"); else if ("yandex" == getParameterByName("inapp") || "amazon" == getParameterByName("inapp")) document.getElementById("top_left").style.display = "none", 
                document.getElementById("donation_button").style.display = "none", document.getElementById("mos_market_link").style.display = "none", 
                document.getElementById("mods_link").style.display = "block"; else if ("kongregate" == getParameterByName("inapp")) "undefined" != typeof kongregate.api && kongregate.payments && (show_donations = !0, 
                document.getElementById("donation_button_link").onclick = function() {
                    WebPayment.open_kongregate();
                }, document.getElementById("mos_market_link").onclick = function() {
                    WebPayment.open_kongregate();
                }, kongregate.api.mtx.requestUserItemList(null, function(obj) {
                    obj.success && 0 < obj.data.length && WebPayment.check_kongregate_payment();
                })), modsSupported() && (document.getElementById("mods_link").style.display = "block", 
                document.getElementById("spectate_mode_link").style.display = "block"), document.getElementById("top_left").innerHTML = "RPG MO", 
                document.getElementById("logout_link").style.display = "none", document.getElementById("login_user").style.display = "none", 
                document.getElementById("login_pass").style.display = "none", document.getElementById("login_register_button").style.display = "none", 
                document.getElementById("invite_link").style.display = "inline-block", document.getElementById("invite_link").onclick = function() {
                    Player.show_referrals();
                }; else if ("steam" == getParameterByName("inapp")) {
                    show_donations = !0;
                    document.getElementById("donation_button_link").onclick = function() {
                        WebPayment.open_steam();
                    };
                    document.getElementById("mos_market_link").onclick = function() {
                        WebPayment.open_steam();
                    };
                    modsSupported() && (document.getElementById("mods_link").style.display = "block", 
                    document.getElementById("spectate_mode_link").style.display = "block");
                    document.getElementById("top_left").innerHTML = "Early Access";
                    document.getElementById("invite_link").style.display = "inline-block";
                    document.getElementById("invite_link").onclick = function() {
                        Player.show_referrals();
                    };
                    try {
                        useExternalBrowserLinks(document);
                        var files = [ {
                            name: "homepage_link",
                            link: "http://mo.ee"
                        }, {
                            name: "forums_link",
                            link: "http://forums.mo.ee"
                        } ], elem;
                        for (elem in files) {
                            var d = document.getElementsByClassName(files[elem].name), j;
                            for (j in d) d[j].onclick = createExternalLink(files[elem].link);
                        }
                        d = document.getElementsByClassName("highscores_link");
                        for (j in d) d[j].onclick = function() {
                            Steam.highscore.toggle();
                        };
                    } catch (x) {}
                    if (Fullscreen.supported() && !SpectateWindow.slave || Fullscreen.slave_supported()) document.getElementById("settings_webkitfullscreen").style.display = "block", 
                    document.getElementById("settings_webkitfullscreen_spectate").style.display = "block", 
                    document.getElementById("settings_steamzoomlevel").style.display = "block";
                    Steam.load_previous_settings();
                    Steam.initialize_mods();
                    document.title = "RPG MO - Early Access";
                } else {
                    if ("pokki" == getParameterByName("inapp")) _open = window.open, window.open = function(open) {
                        return function(expected, actual, message) {
                            parent.pokki.openURLInDefaultBrowser(expected);
                            return _open(expected, actual, message);
                        };
                    }(window.open), elem = document.getElementById("paypal_form"), elem.method = "get", 
                    elem.addEventListener("submit", function(e) {
                        var c = e.srcElement.action + "?", d = [], i;
                        for (i in e.srcElement) e.srcElement[i] && null != e.srcElement[i] && "INPUT" == e.srcElement[i].tagName && d.push(e.srcElement[i].name + "=" + encodeURIComponent(e.srcElement[i].value));
                        c += d.join("&");
                        parent.pokki.openURLInDefaultBrowser(c);
                    }, !1), document.getElementById("regular_payment_btc").style.display = "none"; else if ("1" == getParameterByName("inapp")) for (elem in document.getElementById("regular_payment_btc").style.display = "none", 
                    document.getElementById("regular_payment_other").style.paddingRight = "40px", document.getElementById("top_left").style.display = "none", 
                    document.getElementById("help_forums_link").onclick = function(event) {
                        redirectUrl("http://forums.mo.ee");
                        event.preventDefault();
                    }, files = [ {
                        name: "homepage_link",
                        link: "http://mo.ee"
                    }, {
                        name: "highscores_link",
                        link: "http://mo.ee/highscore.html"
                    }, {
                        name: "forums_link",
                        link: "http://forums.mo.ee"
                    } ], files) for (j in d = document.getElementsByClassName(files[elem].name), d) d[j].onclick = new Function("redirectUrl('" + files[elem].link + "');"); else "android" == getParameterByName("inapp") && (Chat.chat_position_up = !0, 
                    setTimeout(function() {
                        setCanvasSize(!0);
                    }, 2e3));
                    modsSupported() && (document.getElementById("mods_link").style.display = "block", 
                    document.getElementById("spectate_mode_link").style.display = "block");
                    show_donations = !0;
                    document.getElementById("top_left").innerHTML = "RPG MO - BETA";
                    mobileDevice() || document.getElementById("login_user").focus();
                    if (Fullscreen.supported() && !SpectateWindow.slave || Fullscreen.slave_supported()) document.getElementById("settings_webkitfullscreen").style.display = "block", 
                    document.getElementById("settings_webkitfullscreen_spectate").style.display = "block";
                    document.getElementById("invite_link").style.display = "inline-block";
                    document.getElementById("invite_link").onclick = function() {
                        Player.show_referrals();
                    };
                }
                game_timestamp.finished = timestamp();
                reportLoading();
            }, 100);
        }
    } else setTimeout(function() {
        start_loading();
    }, 10);
}

var imagesLoaded = 0, imagesTotal = 50, finishedLoading = !1, updateLoading = function() {
    imagesLoaded++;
    if (!finishedLoading) {
        var percent = imagesLoaded / imagesTotal * 100;
        document.getElementById("top_left").innerHTML = "RPG MO - Loading... " + percent + "%";
    }
}, enableMods = function() {
    Popup.prompt("Enable mods? These are provided by 3rd party and may not work on all devices. Also we are not responsible for any damages that may occur. To unload mods, just refresh your browser or restart your app.", function() {
        document.getElementById("mods_link").style.display = "none";
        document.body.appendChild(document.createElement("script")).src = cdn_url + "mod.js?v=" + mod_version;
    });
}, redirectUrl = function(fallback) {
    var url = window.location.protocol + "//" + window.location.hostname + window.location.pathname + ("string" === typeof window.location.search ? window.location.search : "");
    window.location = window.location.protocol + "//" + window.location.hostname + "/redirect.html?url=" + encodeURIComponent(fallback) + "&back_url=" + encodeURIComponent(url);
}, reportLoading = function() {
    var Z = Math.round((game_timestamp.finished - game_timestamp.init) / 1e3);
    5 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_5" ]) : 10 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_10" ]) : 20 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_20" ]) : 40 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_40" ]) : 80 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_80" ]) : 160 >= Z ? _gaq.push([ "_trackPageview", "/loadtime_160" ]) : _gaq.push([ "_trackPageview", "/loadtime_high" ]);
}, reportTimes = function(data) {
    return {
        onload: Math.round((data.onload - data.init) / 1e3),
        loaded: Math.round((data.loaded - data.onload) / 1e3),
        finished: Math.round((data.finished - data.loaded) / 1e3),
        connected: Math.round((data.connected - data.finished) / 1e3),
        total: Math.round((data.connected - data.init) / 1e3)
    };
}, default_lang;

default_lang = navigator.userLanguage ? navigator.userLanguage : navigator.language ? navigator.language : "en";

default_lang = default_lang.split("-")[0];

Draw = {};

var effects = {}, minimap_scale = .125;

Draw.drawToMap = function(ctx, target, position, img, x) {
    if (minimap) return Draw.minimap(ctx, target, position, img, x);
    if ("undefined" != typeof target) if ("undefined" != typeof target.sheet_file) img = IMAGE_SHEET[target.sheet_file].sprite.imgs[target.file], 
    "undefined" != typeof img && (x = position.x, position = position.y, x -= img.width, 
    position -= img.height, x += 54 + (target.h - 1) * half_tile_width, ctx.drawImage(img, x << 0, position + 27 << 0)); else if ("undefined" != typeof target.hash) ctx.drawImage(getBodyImg(target.hash), 0, 0, 64, 54, position.x, position.y - 23, 64, 54); else {
        img = IMAGE_SHEET[target.sheet];
        x = IMAGE_SHEET[target.sheet].tile_width * target.x;
        var y = IMAGE_SHEET[target.sheet].tile_height * target.y;
        if (!(0 > x || 0 > y)) {
            var win = "undefined" == typeof position.relative ? !0 : position.relative, left = 0, top = 0;
            "undefined" != typeof target.pos && (left = target.pos._x, top = target.pos._y);
            win ? ctx.drawImage(img.img[0], x, y, img.tile_width, img.tile_height, left + position.x - (IMAGE_SHEET[target.sheet].tile_width / 2 << 0) + half_tile_width, top + position.y - 12 - (IMAGE_SHEET[target.sheet].tile_height / 2 << 0) + half_tile_height, img.tile_width, img.tile_height) : ctx.drawImage(img.img[0], x, y, img.tile_width, img.tile_height, position.x, position.y, img.tile_width, img.tile_height);
        }
    }
};

Draw.minimap = function(context, params, y, x, condition) {
    if ("undefined" != typeof params) {
        if (params.sheet) {
            var data = IMAGE_SHEET[params.sheet], c = IMAGE_SHEET[params.sheet].tile_width * params.x, r = IMAGE_SHEET[params.sheet].tile_height * params.y, g = Math.floor(IMAGE_SHEET[params.sheet].tile_width / 2) - 36, h = Math.floor(IMAGE_SHEET[params.sheet].tile_height / 2) - 18;
            if (0 > c || 0 > r) return;
        }
        (condition = "undefined" == typeof y.relative ? !0 : y.relative) ? (x = y.x + half_tile_width, 
        y = y.y + half_tile_height - 12) : (x = y.x, y = y.y);
        y = minimap && .125 == minimap_scale ? y + 40 : y + 1200;
        context.translate(x, y);
        context.save();
        context.scale(minimap_scale, minimap_scale);
        "undefined" != typeof params.sheet_file ? (data = IMAGE_SHEET[params.sheet_file].sprite.imgs[params.file], 
        "undefined" != typeof data && (c = 36 - data.width, r = 30 - data.height, c += params.h * half_tile_width, 
        r += Math.round(13.5), .125 == minimap_scale && (c += 5 * tile_width), context.drawImage(data, c, r))) : "undefined" != typeof params.hash ? context.drawImage(getBodyImg(params.hash), 0, 0, 64, 54, 8, -6, 64, 54) : condition ? context.drawImage(data.img[0], c, r, data.tile_width, data.tile_height, -g, -h, data.tile_width, data.tile_height) : context.drawImage(data.img[0], c, r, data.tile_width, data.tile_height, 0, 0, data.tile_width, data.tile_height);
        context.restore();
        context.translate(-x, -y);
    }
};

Draw.drawPlayer = function(ctx, x, rect) {
    ctx.drawImage(getBodyImg(x.params.hash), 0, 0, 64, 54, rect.x, rect.y - 23, 64, 54);
};

Draw.clear = function(canvas) {
    canvas.clearRect(0, 0, width, height);
};

function updateBase() {
    if (!(!isActive || no_render || Android && GAME_STATE != GAME_STATES.GAME || "undefined" == typeof players[0])) {
        Draw.clear(ctx.base_show);
        players[0].mx = players[0].mx + .5 | 0;
        players[0].my = players[0].my + .5 | 0;
        var x = players[0].mx, y = players[0].my;
        ctx.base_show.drawImage(c.base, x, y, width, height);
        if (null != selected.i) {
            var p0 = translateTileToCoordinates(selected.i, selected.j, !0);
            p0.visible && ctx.base_show.drawImage(imageGround[0], p0.x + x, p0.y + y);
        }
        settings.simple_z_index || drawMap(!1, !0, !1);
        Draw.clear(ctx.objects_show);
        ctx.objects_show.drawImage(c.objects, x, y, width, height);
        settings.simple_z_index && (Draw.clear(ctx.players_show), ctx.players_show.drawImage(c.players, x, y, width, height), 
        x = players[0], y = translateTileToCoordinates(x.i, x.j), Draw.drawToMap(ctx.players_show, x.img, y));
    }
}

function refreshHUD() {
    Draw.clear(ctx.hud);
    HUD.drawBuildMenu();
    HUD.drawMinimap();
    HUD.drawMenu();
}

var lastRender = new Date(), renderCount = 0, bigIcons = !1;

function render() {
    requestAnimFrame(function() {
        render();
    });
    if (!(!isActive || no_render || Android && GAME_STATE != GAME_STATES.GAME)) {
        if (settings.framelimit) if (40 < new Date() - framelimit_delta) framelimit_delta = new Date(); else return;
        1e3 < new Date() - lastRender && (1338 == window.location.port && (document.getElementById("top_left").innerHTML = "FPS: " + (renderCount + .5 | 0)), 
        movementInProgress(players[0]) && (55 > renderCount ? (settings.framelimit = !1, 
        18 > renderCount && (settings.framelimit = !0)) : (settings.simple_z_index = !1, 
        settings.framelimit = !1)), lastRender = new Date(), renderCount = 0);
        renderCount++;
        var c = !1;
        if (!game_paused) {
            var id = new Date().getTime(), i;
            for (i in players) {
                if (0 < players[i].path.length && !movementInProgress(players[i]) && !players[i].temp.busy) moveInPath(players[i]); else if ("0" != i && !movementInProgress(players[i]) && (players[i].temp.dest.i != players[i].i || players[i].temp.dest.j != players[i].j) && map_walkable(players[i].map, players[i].temp.dest.i, players[i].temp.dest.j)) {
                    var r = findPathFromTo(players[i], players[i].temp.dest, players[i]), done = !1;
                    if (0 < r.length) for (var key in r) if (map_visible(r[key].i, r[key].j)) {
                        done = !0;
                        break;
                    }
                    done ? players[i].path = r : (players[i].i = players[i].temp.to.i = players[i].temp.dest.i, 
                    players[i].j = players[i].temp.to.j = players[i].temp.dest.j);
                }
                "undefined" != typeof players[i] && 0 < players[i].temp.animate_until && (players[i].mx = 0, 
                players[i].my = 0, c = Math.round(tile_width - tile_width * ((players[i].temp.animate_until - id) / ctime(players[i]))) / 2 << 0, 
                r = Math.round(tile_height - tile_height * ((players[i].temp.animate_until - id) / ctime(players[i]))) / 2 << 0, 
                players[i].temp.to.j > players[i].j ? (players[i].mx = -c, players[i].my = r) : players[i].temp.to.j < players[i].j ? (players[i].mx = c, 
                players[i].my = -r) : players[i].temp.to.i > players[i].i ? (players[i].mx = -c, 
                players[i].my = -r) : players[i].temp.to.i < players[i].i && (players[i].mx = c, 
                players[i].my = r), players[i].mx = Math.round(Math.range(players[i].mx, -tile_width / 2, tile_width / 2)), 
                players[i].my = Math.round(Math.range(players[i].my, -tile_height / 2, tile_height / 2)), 
                players[i].temp.animate_until < id ? (players[i].temp.animate_until = 0, c = !0, 
                players[i].me ? resetMapShift() : HUD.drawMinimap()) : c = !0);
            }
            c && updateBase();
            runAnimations();
        }
    }
}

function runAnimations() {
    if (!isEmpty(effects)) {
        Draw.clear(ctx.effects);
        for (var i in effects) {
            var s = effects[i], h = s.duration, pos;
            "undefined" != typeof s.x ? pos = {
                x: s.x,
                y: s.y
            } : (pos = translateTileToCoordinates(s.i, s.j), pos.x += players[0].mx, pos.y += players[0].my);
            h = Math.round((timestamp() - s.start) / h * s.animation.length);
            s.until > timestamp() && s.map == current_map && map_visible(s.i, s.j) ? Draw.drawToMap(ctx.effects, {
                sheet: s.animation.sheet,
                x: h,
                y: s.animation.row,
                relative: !1
            }, pos) : delete effects[i];
        }
    }
}

function addAnimation(anim, distance, animation, name, to) {
    var value = Math.round(anim.length / anim.speed * 1e3), j = timestamp() + "" + (1e3 * Math.random() << 0);
    effects[j] = {
        animation: anim,
        until: value + timestamp(),
        start: timestamp(),
        duration: value,
        i: distance,
        j: animation,
        map: name
    };
    "undefined" != typeof to && (effects[j].i = players[0].i, effects[j].j = players[0].j, 
    effects[j].map = players[0].map, effects[j].x = to.x, effects[j].y = to.y);
}

function isEmpty(value) {
    for (var key in value) return !1;
    return !0;
}

function animateUntil(data, plus) {
    var length = timestamp();
    "object" == typeof data && data.temp.animate_until < length + plus && (data.temp.animate_until = length + plus);
}

function drawObject(c, b) {
    if (b.b_t == BASE_TYPE.PLAYER || b.b_t == BASE_TYPE.PET) c.x -= b.mx, c.y -= b.my, 
    b.b_t == BASE_TYPE.PET && (c.y += 2);
    var a = ctx.objects;
    minimap && (a = ctx.minimap);
    "object" == typeof b && (!minimap || minimap && b.b_t == BASE_TYPE.OBJECT || 1 == minimap_scale && b.b_t != BASE_TYPE.PLAYER && b.b_t != BASE_TYPE.PET) && (b.b_t == BASE_TYPE.PLAYER ? Draw.drawPlayer(a, b, c) : Draw.drawToMap(a, b.img, c));
    if (b.b_t == BASE_TYPE.PLAYER || b.b_t == BASE_TYPE.PET) c.x += b.mx, c.y += b.my, 
    b.b_t == BASE_TYPE.PET && (c.y -= 2);
}

function drawMap(size, idx, dependencies) {
    if (no_render || Android && GAME_STATE != GAME_STATES.GAME) return !1;
    "undefined" == typeof size && (size = !0);
    "undefined" == typeof idx && (idx = !0);
    "undefined" == typeof dependencies && (dependencies = !0);
    if (size) {
        Draw.clear(ctx.base);
        var x = iMapBegin();
        for (size = iMapTo(); x < size; x++) for (var y = jMapTo(), h = jMapBegin(); y >= h; y--) {
            var a = translateTileToCoordinates(x + dx, y + dy), b = !1;
            if ("undefined" == typeof map[current_map] || "undefined" == typeof map[current_map][x + dx] || "undefined" == typeof map[current_map][x + dx][y + dy]) if (300 == current_map) b = ground_base[1]; else continue;
            var b = b || obj_g(map[current_map][x + dx][y + dy]), length = ctx.base;
            minimap ? (length = ctx.minimap, a.y += 16 * minimap_scale) : a.y += 16;
            "undefined" != typeof b && ("object" == typeof b.top ? Draw.drawToMap(length, ground_images[b.b_i], a) : Draw.drawToMap(length, b.img, a));
        }
    }
    if (idx) {
        Draw.clear(ctx.objects);
        player_map = my_map_array();
        if (!settings.simple_z_index) for (x in simple_z_index_layer && (Draw.clear(ctx.players_show), 
        simple_z_index_layer = !1), players) "object" == typeof players[x] && ("0" == x || players[x].b_t == BASE_TYPE.PET || 95e3 < players[x].ttl - timestamp()) && ("undefined" == typeof player_map[players[x].i][players[x].j] && (player_map[players[x].i][players[x].j] = []), 
        player_map[players[x].i][players[x].j].push(players[x]));
        x = iMapBegin();
        for (size = iMapTo(); x < size; x++) for (y = jMapTo(), h = jMapBegin(); y >= h; y--) if ("undefined" != typeof on_map[current_map] && "undefined" != typeof on_map[current_map][x + dx] && "undefined" != typeof on_map[current_map][x + dx][y + dy] && ("object" == typeof on_map[current_map][x + dx][y + dy] || "object" == typeof player_map[x + dx][y + dy])) if (a = translateTileToCoordinates(x + dx, y + dy), 
        b = obj_g(on_map[current_map][x + dx][y + dy]) || player_map[x + dx][y + dy], b instanceof Array && 0 < b.length) for (idx = 0, 
        length = b.length; idx < length; idx++) drawObject(a, b[idx]); else drawObject(a, b);
        settings.simple_z_index && (simple_z_index_layer = !0, drawPlayers());
    }
    dependencies && (players[0].mx = 0, players[0].my = 0, HUD.drawMinimap(), updateBase());
}

function drawPlayers() {
    Draw.clear(ctx.players);
    for (var x in players) if ("object" == typeof players[x]) {
        var player = players[x], a = translateTileToCoordinates(player.i, player.j, !0), p = ctx.players;
        a.visible && (a.x -= player.mx, a.y -= player.my, Draw.drawPlayer(p, player, a));
    }
}

function toggleMaxScale() {
    switch (parseFloat(max_scale)) {
      case 2.25:
        max_scale = .75;
        break;

      case 2:
        max_scale = 2.25;
        break;

      case 1.75:
        max_scale = 2;
        break;

      case 1.5:
        max_scale = 1.75;
        break;

      case 1.25:
        max_scale = 1.5;
        break;

      case 1:
        max_scale = 1.25;
        break;

      case .75:
        max_scale = 1;
    }
    1 <= parseInt(getParameterByName("node-webkit-api")) && setBrowserWindowSize(width * max_scale, height * max_scale);
    localStorage.max_scale = max_scale;
    setCanvasSize(!0);
}

function toggleGridSize() {
    switch (parseFloat(map_increase)) {
      case 4:
        map_increase = -2;
        break;

      case 2:
        map_increase = 4;
        break;

      case 0:
        map_increase = 2;
        break;

      case -2:
        map_increase = 0;
    }
    localStorage.map_increase = map_increase;
    resetMapShift();
    drawMap();
    setCanvasSize(!0);
}

last_updated.set_canvas_size_new_width = 0;

last_updated.set_canvas_size_new_height = 0;

function setCanvasSize(y) {
    noRender();
    if (GAME_STATE == GAME_STATES.CHAT) return !1;
    if (!(!y && last_updated.set_canvas_size && last_updated.set_canvas_size > timestamp())) {
        last_updated.set_canvas_size = timestamp() + 250;
        var a = !1, r = !1, x = width / height;
        x > window.innerWidth / window.innerHeight ? (a = Math.round(Math.min(window.innerWidth, width * max_scale)), 
        r = Math.round(Math.min(window.innerWidth / x, height * max_scale))) : (a = Math.round(Math.min(window.innerHeight * x, width * max_scale)), 
        r = Math.round(Math.min(window.innerHeight, height * max_scale)));
        x = 48;
        640 >= window.innerWidth ? (bigIcons = !0, x = 80) : bigIcons = !1;
        navigator.userAgent.match(/Android|mobile/i) ? window.scrollTo(0, 1) : window.scrollTo(0, 0);
        if (y || a != last_updated.set_canvas_size_new_width || r != last_updated.set_canvas_size_new_height) {
            last_updated.set_canvas_size_new_width = a;
            last_updated.set_canvas_size_new_height = r;
            var v = [ {
                name: "settings_game_size",
                text: "Game max size(" + max_scale + "x)"
            }, {
                name: "settings_game_grid",
                text: "Game grid(" + (map_increase + 9) + "x" + (map_increase + 9) + ")"
            } ], i;
            for (i in v) {
                var input = document.getElementsByClassName(v[i].name), index;
                for (index in input) input[index].innerHTML = v[i].text;
            }
            if (a && a != wrapper.style.width || r && r != wrapper.style.height || y) {
                wrapper.style.width = a + "px";
                wrapper.style.height = r + "px";
                current_ratio_x = a / width;
                current_ratio_y = r / height;
                for (var value in c) "undefined" != typeof c[value] && -1 == [ "base", "objects", "players", "minimap" ].indexOf(value) && (c[value].style.width = Math.round(width * current_ratio_x) + "px", 
                c[value].style.height = Math.round(height * current_ratio_y) + "px");
                side.style.left = null;
                1.5 * a < window.innerWidth ? side.style.left = wrapper.offsetWidth - 80 - 5 + "px" : side.style.right = "5px";
                side_bottom.style.top = null;
                1.2 * r < window.innerHeight ? side_bottom.style.top = wrapper.offsetHeight - 40 - 10 + "px" : side_bottom.style.bottom = "10px;";
                y = Math.min(16, Math.round(16 * current_ratio_y));
                a = Math.round(16 * current_ratio_y);
                value = Math.min(14, Math.round(14 * current_ratio_y));
                i = Math.min(12, Math.round(12 * current_ratio_y));
                index = Math.min(22, Math.round(20 * current_ratio_y));
                document.getElementById("skills_menu").style.top = x * current_ratio_y + "px";
                document.getElementById("skills_menu").style.width = Math.min(200, 200 * current_ratio_x) + "px";
                document.getElementById("skills_menu").style.fontSize = value + "px";
                r = document.getElementsByClassName("skill");
                v = 0;
                for (input = r.length; v < input; v++) r[v].style.fontSize = value + "px";
                r = document.getElementsByClassName("level");
                v = 0;
                for (input = r.length; v < input; v++) r[v].style.fontSize = i + "px";
                GAME_STATE == GAME_STATES.CHAT ? document.getElementById("chat").style.bottom = 41 * current_ratio_y + "px" : document.getElementById("chat").style.bottom = 25 * current_ratio_y + "px";
                Chat.chat_position_up ? (GAME_STATE == GAME_STATES.CHAT ? (document.getElementById("chat").style.top = 22 + 80 * current_ratio_y + "px", 
                document.getElementById("chat").style.bottom = "auto") : (document.getElementById("chat").style.top = "auto", 
                document.getElementById("chat").style.bottom = 25 * current_ratio_y + "px"), document.getElementById("my_text").style.top = 80 * current_ratio_y + "px", 
                document.getElementById("my_text").style.left = 70 + 85 * current_ratio_y + "px", 
                document.getElementById("my_text").style.bottom = "auto", document.getElementById("my_text").style.height = "22px", 
                document.getElementById("my_text").style.zIndex = 240, document.getElementById("current_channel").style.top = 80 * current_ratio_y + "px", 
                document.getElementById("current_channel").style.left = 85 * current_ratio_y + "px", 
                document.getElementById("current_channel").style.bottom = "auto", document.getElementById("current_channel").style.width = "70px", 
                document.getElementById("current_channel").style.height = "22px", document.getElementById("current_channel").style.zIndex = 250) : (document.getElementById("my_text").style.bottom = 25 * current_ratio_y + "px", 
                document.getElementById("current_channel").style.bottom = 25 * current_ratio_y + "px");
                document.getElementById("inventory").style.top = x * current_ratio_y + "px";
                document.getElementById("small_pet_menu").style.top = x * current_ratio_y + "px";
                document.getElementById("small_build_menu").style.top = x * current_ratio_y + "px";
                document.getElementById("small_wilderness_menu").style.top = x * current_ratio_y + "px";
                document.getElementById("settings").style.top = x * current_ratio_y + "px";
                document.getElementById("settings_spectate").style.top = x * current_ratio_y + "px";
                input = document.getElementById("player_healthbar");
                input.style.top = Math.round(16 * current_ratio_y) + "px";
                input.style.left = Math.round(82 * current_ratio_y) + "px";
                value = Math.round(22 * current_ratio_y);
                r = Math.round(150 * current_ratio_x);
                v = Math.floor((value - y - 2) / 2);
                input.style.width = r + "px";
                input.style.height = value + "px";
                document.getElementById("player_health_name").style.top = v + "px";
                document.getElementById("player_health_name").style.fontSize = y + "px";
                input = document.getElementById("enemy_healthbar");
                input.style.top = Math.round(16 * current_ratio_y + value + 4) + "px";
                input.style.left = Math.round(82 * current_ratio_y) + "px";
                input.style.height = value + "px";
                input.style.width = r + "px";
                document.getElementById("enemy_health_name").style.top = v + "px";
                document.getElementById("enemy_health_name").style.fontSize = y + "px";
                document.getElementById("chat").style.fontSize = y + "px";
                document.getElementById("chat").style.maxHeight = 8 * y + 16 + "px";
                document.getElementById("my_text").style.fontSize = y + "px";
                document.getElementById("current_channel").style.fontSize = y + "px";
                document.getElementById("player_hit").style.width = Math.ceil(20 * current_ratio_x) + "px";
                document.getElementById("player_hit").style.height = Math.ceil(20 * current_ratio_y) + "px";
                document.getElementById("player_burst").style.display = "block";
                document.getElementById("enemy_hit").style.width = Math.ceil(20 * current_ratio_x) + "px";
                document.getElementById("enemy_hit").style.height = Math.ceil(20 * current_ratio_y) + "px";
                document.getElementById("enemy_burst").style.display = "block";
                document.getElementById("player_damage").style.fontSize = y + "px";
                document.getElementById("player_damage").style.top = Math.floor(2 * Math.min(current_ratio_x, current_ratio_y)) + "px";
                document.getElementById("enemy_damage").style.fontSize = y + "px";
                document.getElementById("enemy_damage").style.top = Math.floor(2 * Math.min(current_ratio_x, current_ratio_y)) + "px";
                document.getElementById("object_selector_info").style.left = Math.ceil(400 * current_ratio_x) + "px";
                document.getElementById("object_selector_info").style.top = Math.ceil(16 * current_ratio_y) + "px";
                document.getElementById("object_selector_info").style.fontSize = y + "px";
                document.getElementById("magic_slots").style.top = Math.ceil((x + 2) * current_ratio_y) + "px";
                document.getElementById("build_menu").style.top = Math.ceil(50 * current_ratio_y) + "px";
                document.getElementById("carpentry_remove_menu").style.top = Math.ceil(50 * current_ratio_y) + "px";
                document.getElementById("chat_button").style.left = Math.ceil(15 * current_ratio_x) + "px";
                document.getElementById("chat_button").style.bottom = Math.ceil(2 * current_ratio_y) + "px";
                document.getElementById("chat_button").style.width = Math.ceil(107 * current_ratio_y) + "px";
                document.getElementById("chat_button").style.height = a + "px";
                document.getElementById("chat_button").style.lineHeight = a + "px";
                document.getElementById("chat_button").style.fontSize = y + "px";
                document.getElementById("filters_button").style.left = Math.ceil(138 * current_ratio_x) + "px";
                document.getElementById("filters_button").style.bottom = Math.ceil(2 * current_ratio_y) + "px";
                document.getElementById("filters_button").style.width = Math.ceil(107 * current_ratio_y) + "px";
                document.getElementById("filters_button").style.height = a + "px";
                document.getElementById("filters_button").style.lineHeight = a + "px";
                document.getElementById("filters_button").style.fontSize = y + "px";
                document.getElementById("contacts_button").style.left = Math.ceil(261 * current_ratio_x) + "px";
                document.getElementById("contacts_button").style.bottom = Math.ceil(2 * current_ratio_y) + "px";
                document.getElementById("contacts_button").style.width = Math.ceil(107 * current_ratio_y) + "px";
                document.getElementById("contacts_button").style.height = a + "px";
                document.getElementById("contacts_button").style.lineHeight = a + "px";
                document.getElementById("contacts_button").style.fontSize = y + "px";
                document.getElementById("quests_button").style.left = Math.ceil(384 * current_ratio_x) + "px";
                document.getElementById("quests_button").style.bottom = Math.ceil(2 * current_ratio_y) + "px";
                document.getElementById("quests_button").style.width = Math.ceil(107 * current_ratio_y) + "px";
                document.getElementById("quests_button").style.height = a + "px";
                document.getElementById("quests_button").style.lineHeight = a + "px";
                document.getElementById("quests_button").style.fontSize = y + "px";
                document.getElementById("dungeon_info").style.top = Math.ceil(94 * current_ratio_y) + "px";
                document.getElementById("dungeon_info").style.width = Math.ceil(80 * current_ratio_x) + "px";
                document.getElementById("dungeon_time").style.fontSize = index + "px";
                document.getElementById("dungeon_goal").style.fontSize = i + "px";
                document.getElementById("gamepad").style.bottom = Math.ceil(12 * current_ratio_y) + "px";
                document.getElementById("atk_button").style.bottom = Math.ceil(12 * current_ratio_y + 38) + "px";
                touch_initialized ? document.getElementById("donation_button").style.left = Math.ceil(500 * current_ratio_x) + "px" : document.getElementById("donation_button").style.right = Math.ceil(20 * current_ratio_x) + "px";
                document.getElementById("donation_button").style.bottom = Math.ceil(1 * current_ratio_y) + "px";
                document.getElementById("donation_button").style.fontSize = y - 1 + "px";
                document.getElementById("spectate_button").style.bottom = Math.ceil(1 * current_ratio_y) + "px";
                document.getElementById("spectate_button").style.fontSize = y - 1 + "px";
                try {
                    Draw.clear(ctx.hud), HUD.drawMenu();
                } catch (h) {}
            }
            if (Fullscreen.supported() || SpectateWindow.fullscreen) Fullscreen.is_enabled() ? (x = window.innerWidth / 2 - parseInt(wrapper.style.width) / 2, 
            wrapper.style.left != parseInt(x) && (wrapper.style.left = x + "px", body_offset_x = x), 
            x = window.innerHeight / 2 - parseInt(wrapper.style.height) / 2, wrapper.style.top != parseInt(x) && (wrapper.style.top = x + "px", 
            body_offset_y = x)) : (wrapper.style.top = "0px", wrapper.style.left = "0px", body_offset_y = body_offset_x = 0);
        }
    }
}

HUD = {
    drawMenu: function() {
        var w = IMAGE_SHEET[IMAGES.ACTIVITIES[0].sheet].tile_width, h = IMAGE_SHEET[IMAGES.ACTIVITIES[0].sheet].tile_height;
        bigIcons && (w *= 2, h *= 2);
        for (var val = -1, i = 0, max = IMAGES.ACTIVITIES.length; i < max; i++) if (IMAGES.ACTIVITIES[i].visible) {
            val++;
            var style = IMAGES.ACTIVITIES[i], frame = IMAGE_SHEET[style.sheet];
            ctx.hud.drawImage(frame.img[0], IMAGE_SHEET[style.sheet].tile_width * style.x, IMAGE_SHEET[style.sheet].tile_height * style.y, frame.tile_width, frame.tile_height, Math.round(width - w * (val + 1)), 16, w, h);
        }
        Draw.drawToMap(ctx.hud, IMAGES.GUI[0], {
            x: 0,
            y: 0,
            relative: !1
        });
        Draw.drawToMap(ctx.hud, IMAGES.GUI[1], {
            x: 0,
            y: height - 24,
            relative: !1
        });
    },
    drawFPS: function() {},
    drawPaused: function() {
        ctx.hud.drawImage(imageGraphics[0], width / 2 - imageGraphics[0].width / 2, height / 2 - imageGraphics[0].height / 2);
    },
    drawBuildMenu: function() {},
    drawMinimapLarge: function() {
        Draw.clear(ctx.hud);
        ctx.hud.drawImage(c.minimap, 0, 0);
    },
    drawMinimap: function() {
        var a = players[0].i, b = players[0].j;
        editor_enabled && (a = dx, b = dy);
        var pos = b * Math.round(tile_width / 16) + a * Math.round(tile_width / 16) - 20, a = a * Math.round(tile_height / 16) - b * Math.round(tile_height / 16) + 190;
        ctx.hud.clearRect(0, 14, 80, 80);
        ctx.hud.drawImage(c.minimap, Math.max(pos, 0), Math.max(a, 0), 80, 80, 0, 14, 80, 80);
        for (var j in players) "undefined" != typeof players[j] && (pos = translateTileToCoordinates(players[j].i + 13, players[j].j - 9), 
        a = 3 * map_increase, a = (Math.round((pos.x - dest_x) / 8) / 1.01 + .5 | 0) - a, 
        pos = 14 + Math.round((pos.y - dest_y) / 8), 0 < a && 14 < pos && 80 > a && 94 > pos && (ctx.hud.fillStyle = players[j].me ? "#55FF55" : "#FFFFFF", 
        ctx.hud.fillRect(a - 1, pos, 1, 1)));
    },
    setRegularButtons: function() {
        var elem = document.getElementById("action_button1"), td = document.getElementById("action_button2");
        elem.style.display = "none";
        td.style.display = "none";
        if (selected_object && selected_object.params) {
            var html = selected_object.activities[0], name = selected_object.activities[1];
            html && (elem.innerHTML = html, elem.style.display = "block");
            name && (td.innerHTML = name, td.style.display = "block");
        }
    }
};

ActionMenu = {
    create: function(e, data, dom) {
        data = data || translateMousePosition(e.clientX, e.clientY);
        if (map_visible(data.i, data.j)) {
            selected_object = obj_g(on_map[current_map][data.i][data.j]);
            if (!(selected_object instanceof Object)) {
                for (var j in players) if ("0" != j && players[j].i == data.i && players[j].j == data.j) if (players[j].b_t == BASE_TYPE.PLAYER) {
                    var src = [ "Walk here", "Duel with" ];
                    if (16 == players[0].map || 24 == players[0].map) src = [ "Attack", "Walk here" ], 
                    players[j].params.combat_level > FIGHT.calculate_monster_level(players[0]) && player_target != players[j].name && src.reverse(); else if (19 == players[0].map || 22 == players[0].map) src = [ "Walk here" ], 
                    players[j].params.pvp && (src = [ "Attack", "Walk here" ]);
                    selected_object = {
                        activities: src,
                        name: players[j].name,
                        i: data.i,
                        j: data.j,
                        id: players[j].id,
                        fn: function(event, data) {
                            switch (event) {
                              case "walk here":
                                active_menu = -1;
                                BigMenu.show(active_menu);
                                selected = data;
                                players[0].path = findPathFromTo(players[0], data, players[0]);
                                break;

                              case "duel with":
                                active_menu = -1;
                                BigMenu.show(active_menu);
                                selected_object = void 0;
                                needsProximity(players[0], players[data.id], 1, !0, !0) ? Socket.send("duel_request", {
                                    player: data.name
                                }) : selected_object = {};
                                break;

                              case "attack":
                                player_target = data.name, needsProximity(players[0], players[data.id], 1, !0, !0) ? Socket.send("attack_player", {
                                    player: data.name
                                }) : selected_object = {};
                            }
                        }
                    };
                    break;
                } else if (players[j].b_t == BASE_TYPE.PET && players[j].params.owner == players[0].id) {
                    selected_object = {
                        activities: [ "Walk here", "Pet menu" ],
                        name: players[j].name,
                        i: data.i,
                        j: data.j,
                        fn: function(word, i) {
                            switch (word) {
                              case "walk here":
                                active_menu = -1;
                                BigMenu.show(active_menu);
                                selected = i;
                                players[0].path = findPathFromTo(players[0], i, players[0]);
                                break;

                              case "pet menu":
                                active_menu = -1, BigMenu.show(active_menu), selected_object = void 0, Pet.init_menu();
                            }
                        }
                    };
                    break;
                }
                selected_object instanceof Object || (selected_object = {
                    activities: [ "Walk here" ],
                    name: "",
                    i: data.i,
                    j: data.j,
                    fn: function(word, i) {
                        switch (word) {
                          case "walk here":
                            active_menu = -1, BigMenu.show(active_menu), selected = i, players[0].path = findPathFromTo(players[0], i, players[0]);
                        }
                    }
                });
            }
            dom || (dom = document.getElementById("action_menu"), addClass(dom, "hidden"), dom.style.top = e.clientY + 10 + "px", 
            dom.style.left = e.clientX + "px", console.log(e.clientX, e.clientY), dom.innerHTML = ActionMenu.action(selected_object, 0) + ActionMenu.action(selected_object, 1), 
            0 < dom.innerHTML.length && removeClass(dom, "hidden"));
        }
    },
    act: function(i) {
        selected_object.fn(selected_object.activities[i].toLowerCase(), selected_object, players[0]);
        ActionMenu.hide();
    },
    hide: function() {
        var overlay = document.getElementById("action_menu");
        addClass(overlay, "hidden");
    },
    action: function(d, i) {
        return d && d.activities[i] && 0 < d.activities[i].length ? "<span class='line' onclick='ActionMenu.act(" + i + ")'>" + d.activities[i] + ("Walk here" == d.activities[i] ? "" : "<span class='item'>" + d.name + "</span>") + "</span>" : "";
    },
    custom_create: function(e, list) {
        var outer = document.getElementById("action_menu");
        addClass(outer, "hidden");
        outer.style.top = e.clientY + 10 + "px";
        outer.style.left = e.clientX + "px";
        for (var str = "", i = 0; i < list.length; i++) str += ActionMenu.custom_action(i, list[i].method, list[i].name, list[i].func);
        0 < str.length && (outer.innerHTML = str, removeClass(outer, "hidden"));
    },
    custom_action: function(prev, v, i, e) {
        ActionMenu.act_func[prev] = e;
        return "<span class='line' onclick='ActionMenu.act_custom(" + prev + ")'>" + v + "<span class='item'>" + i + "</span></span>";
    },
    act_custom: function(a) {
        var link = document.getElementById("action_menu");
        addClass(link, "hidden");
        ActionMenu.act_func[a]();
    },
    act_func: {}
};

function elementXY(box) {
    box = document.getElementById(box).getBoundingClientRect();
    return {
        left: box.left,
        top: box.top
    };
}

InvMenu = {
    active: 0,
    create: function(id) {
        if (null != document.getElementById("inv_" + id)) {
            var item = players[0].temp.inventory[id];
            if ("undefined" != typeof item) {
                var item = item_base[item.id], group = elementXY("inv_" + id), element = document.getElementById("action_menu");
                addClass(element, "hidden");
                element.style.top = group.top + 10 + "px";
                element.style.left = group.left - 100 + "px";
                element.innerHTML = "<span class='line' onclick='InvMenu.use(" + id + ")'>Use<span class='item'>" + item.name + "</span></span><span class='line' onclick='InvMenu.inspect(" + id + ")'>Inspect<span class='item'>" + item.name + "</span></span><span class='line' onclick='InvMenu.destroy_item(" + id + ")'>Destroy<span class='item'>" + item.name + "</span></span>";
                0 < element.innerHTML.length && removeClass(element, "hidden");
                setTimeout(function() {
                    BigMenu.show(2);
                }, 2);
            }
        }
    },
    use: function(inCss) {
        inventoryClick(inCss);
        InvMenu.hide();
    },
    destroy_item: function(i) {
        InvMenu.hide();
        var item = players[0].temp.inventory[i];
        "undefined" != typeof item && Popup.prompt("Do you want to destroy " + item_base[item.id].name + "?", function() {
            Socket.send("inventory_destroy", {
                item_id: item.id
            });
        });
    },
    inspect: function(item) {
        item = players[0].temp.inventory[item];
        "undefined" != typeof item && Items.get_info(item.id);
        InvMenu.hide();
    },
    hide: function() {
        var overlay = document.getElementById("inventory");
        addClass(overlay, "hidden");
        ActionMenu.hide();
    }
};

BigMenu = {
    show: function(iLen) {
        var effect = document.getElementById("skills_menu");
        addClass(effect, "hidden");
        var me = document.getElementById("inventory");
        addClass(me, "hidden");
        var tar = document.getElementById("settings");
        addClass(tar, "hidden");
        var element = document.getElementById("settings_spectate");
        addClass(element, "hidden");
        var domNode = document.getElementById("small_pet_menu");
        addClass(domNode, "hidden");
        var button = document.getElementById("small_build_menu");
        addClass(button, "hidden");
        var overlay = document.getElementById("small_wilderness_menu");
        addClass(overlay, "hidden");
        3 == iLen ? (BigMenu.show_skills(), removeClass(effect, "hidden")) : 2 == iLen ? (BigMenu.show_inventory(), 
        removeClass(me, "hidden")) : 0 == iLen ? GAME_STATE == GAME_STATES.SPECTATE ? removeClass(element, "hidden") : removeClass(tar, "hidden") : 5 == iLen ? removeClass(domNode, "hidden") : 4 == iLen ? (removeClass(button, "hidden"), 
        button.innerHTML = HandlebarTemplate.small_build_menu()({
            building: !0,
            remove: 300 == current_map || 0 <= guild_data.permissions.indexOf(players[0].name)
        })) : 6 == iLen && (BigMenu.show_wilderness(), removeClass(overlay, "hidden"));
    },
    show_skills: function() {
        document.getElementById("skills_menu");
        for (var j in skills[0]) document.getElementById("skill_" + j).innerHTML = skills[0][j].current + "/" + skills[0][j].level, 
        selected_skill == j && (document.getElementById("skill_name").innerHTML = capitaliseFirstLetter(j), 
        document.getElementById("total_xp").innerHTML = Math.round(skills[0][j].xp), document.getElementById("next_xp").innerHTML = Math.round(Level.xp_for_level(skills[0][j].level + 1) - skills[0][j].xp));
        document.getElementById("status_aim").innerHTML = players[0].temp.aim;
        document.getElementById("status_power").innerHTML = players[0].temp.power;
        document.getElementById("status_armor").innerHTML = players[0].temp.armor;
        document.getElementById("status_magic").innerHTML = players[0].temp.magic;
    },
    show_inventory: function() {
        "undefined" != typeof players[0].temp.inventory[selected_inv] ? document.getElementById("inv_name").innerHTML = item_base[players[0].temp.inventory[selected_inv].id].name : document.getElementById("inv_name").innerHTML = "&nbsp;";
    },
    show_wilderness: function() {
        document.getElementById("danger_level").innerHTML = Player.danger_level(players[0]);
    },
    show_remove_skill_dialog: function() {
        document.getElementById("remove_skill").style.display = "block";
    },
    hide_remove_skill_dialog: function() {
        document.getElementById("remove_skill").style.display = "none";
    },
    init_inventory: function() {
        for (var i = 0; 40 > i; i++) {
            var elem = document.getElementById("inv_" + i);
            removeClass(elem, "selected");
            if ("undefined" != typeof players[0].temp.inventory[i]) {
                var o = item_base[players[0].temp.inventory[i].id], method = IMAGE_SHEET[o.img.sheet];
                elem.style.background = 'url("' + method.url + '") no-repeat scroll ' + -o.img.x * method.tile_width + "px " + -o.img.y * method.tile_height + "px transparent";
                players[0].temp.inventory[i].selected && addClass(elem, "selected");
            } else elem.style.background = "";
        }
        document.getElementById("inv_coins").innerHTML = thousandSeperate(players[0].temp.coins) + " coins";
    },
    open_chest: function(bei, agoi) {
        for (var idx = 0; 60 > idx; idx++) {
            var ele = document.getElementById("chest_" + idx);
            ele.style.background = "";
            ele.childNodes[0].innerHTML = "&nbsp;";
        }
        chest_page = agoi;
        BigMenu.update_chest(bei);
        removeClass(document.getElementById("chest"), "hidden");
        for (idx = 2; 5 >= idx; idx++) document.getElementById("chest_page_" + idx).innerHTML = "+";
        addClass(document.getElementById("chest_page_3"), "hidden");
        addClass(document.getElementById("chest_page_4"), "hidden");
        addClass(document.getElementById("chest_page_5"), "hidden");
        removeClass(document.getElementById("chest_page_1"), "active_link");
        removeClass(document.getElementById("chest_page_2"), "active_link");
        removeClass(document.getElementById("chest_page_3"), "active_link");
        removeClass(document.getElementById("chest_page_4"), "active_link");
        removeClass(document.getElementById("chest_page_5"), "active_link");
        addClass(document.getElementById("chest_page_" + chest_page), "active_link");
        2 <= players[0].params.chest_pages && (document.getElementById("chest_page_2").innerHTML = "2", 
        removeClass(document.getElementById("chest_page_3"), "hidden"), 3 <= players[0].params.chest_pages && (document.getElementById("chest_page_3").innerHTML = "3", 
        removeClass(document.getElementById("chest_page_4"), "hidden"), 4 <= players[0].params.chest_pages && (document.getElementById("chest_page_4").innerHTML = "4", 
        removeClass(document.getElementById("chest_page_5"), "hidden"), 5 <= players[0].params.chest_pages && (document.getElementById("chest_page_5").innerHTML = "5"))));
    },
    update_chest: function(result) {
        chest_content = result;
        document.getElementById("chest_coins_amount").innerHTML = thousandSeperate(players[0].temp.coins);
        for (var h = chest_page - 1, i = 60 * h, l = Math.min(result.length, 60 * h + 60); i < l; i++) {
            var elem = document.getElementById("chest_" + (i - 60 * h)), data = item_base[result[i].id];
            data.b_i == chest_item_id && (selected_chest = i - 60 * h);
            var e = IMAGE_SHEET[data.img.sheet];
            elem.style.background = 'url("' + e.url + '") no-repeat scroll ' + -data.img.x * e.tile_width + "px " + -data.img.y * e.tile_height + "px transparent";
            for (var elem = elem.childNodes[0], data = result[i].count, e = Inventory.get_item_count(players[0], result[i].id), d = "", x = 0, j = 6 - data.toString().length - e.toString().length; x < j; x++) d += "&nbsp;";
            elem.innerHTML = data + d + e;
        }
        BigMenu.update_chest_selection();
    },
    update_chest_selection: function() {
        var i = chest_page - 1, i = parseInt(selected_chest) + 60 * i;
        if ("undefined" != typeof chest_content[i]) {
            var data = item_base[chest_content[i].id];
            document.getElementById("chest_item").innerHTML = data.name;
            0 < chest_content[i].count ? (document.getElementById("chest_withdraw").innerHTML = "Withdraw", 
            8 <= chest_content[i].count ? document.getElementById("chest_withdraw_8").innerHTML = "8" : document.getElementById("chest_withdraw_8").innerHTML = "", 
            document.getElementById("chest_destroy").innerHTML = "Destroy") : (document.getElementById("chest_withdraw").innerHTML = "", 
            document.getElementById("chest_withdraw_8").innerHTML = "", document.getElementById("chest_destroy").innerHTML = "");
            0 != chest_content[i].count && (document.getElementById("chest_destroy").innerHTML = "Destroy");
            0 < Inventory.get_item_count(players[0], data.b_i) ? (document.getElementById("chest_deposit").innerHTML = "Deposit", 
            document.getElementById("chest_deposit_all").innerHTML = "All") : (document.getElementById("chest_deposit").innerHTML = "", 
            document.getElementById("chest_deposit_all").innerHTML = "");
        } else document.getElementById("chest_item").innerHTML = "", document.getElementById("chest_withdraw").innerHTML = "", 
        document.getElementById("chest_withdraw_8").innerHTML = "", document.getElementById("chest_destroy").innerHTML = "", 
        document.getElementById("chest_deposit").innerHTML = "", document.getElementById("chest_deposit_all").innerHTML = "";
    },
    open_makeover: function(a) {
        document.getElementById("makeover_form").style.display = "block";
        document.getElementById("makeover_player_name").innerHTML = players[0].name;
        current_makeover_conf = {
            head: players[0].params.d_head,
            body: players[0].params.d_body,
            facial_hair: players[0].params.d_facial_hair,
            pants: players[0].params.d_pants
        };
        BigMenu.update_makeover();
    },
    update_makeover: function() {
        var ctx = document.getElementById("makeover_character").getContext("2d"), e = getEmptyPlayer(), event = current_makeover_conf;
        e.params.hash = event.head + " " + event.facial_hair + " " + event.body + " " + event.pants + " 0 0 0 0 0 0 0";
        ctx.clearRect(0, 0, 64, 64);
        Draw.drawPlayer(ctx, e, {
            x: 6,
            y: 32,
            relative: !1
        });
    },
    open_shop: function(a) {
        for (var tempId = 0; 60 > tempId; tempId++) {
            var ele = document.getElementById("shop_" + tempId);
            ele.style.background = "";
            ele.childNodes[0].innerHTML = "&nbsp;";
        }
        BigMenu.update_shop(a);
        removeClass(document.getElementById("shop"), "hidden");
    },
    update_shop: function(result) {
        if (shop_content && shop_content.length != result.length) for (var i = 0; 60 > i; i++) {
            var n = document.getElementById("shop_" + i);
            n.style.background = "";
            n.childNodes[0].innerHTML = "&nbsp;";
        }
        shop_content = result;
        document.getElementById("shop_coins_amount").innerHTML = thousandSeperate(players[0].temp.coins);
        for (var i = 0, tnl = result.length; i < tnl; i++) {
            var n = document.getElementById("shop_" + i), o = item_base[result[i].id], e = IMAGE_SHEET[o.img.sheet];
            n.style.background = 'url("' + e.url + '") no-repeat scroll ' + -o.img.x * e.tile_width + "px " + -o.img.y * e.tile_height + "px transparent";
            for (var n = n.childNodes[0], o = result[i].count, e = Inventory.get_item_count(players[0], result[i].id), h = "", j = 0, l = 6 - o.toString().length - e.toString().length; j < l; j++) h += "&nbsp;";
            n.innerHTML = o + h + e;
        }
        BigMenu.update_shop_selection();
    },
    update_shop_selection: function() {
        if ("undefined" != typeof shop_content[selected_shop]) {
            var item = item_base[shop_content[selected_shop].id];
            document.getElementById("shop_item").innerHTML = item.name;
            0 < shop_content[selected_shop].count ? document.getElementById("shop_buy").innerHTML = "Buy for " + thousandSeperate(item.params.price) : document.getElementById("shop_buy").innerHTML = "";
            if (0 < Inventory.get_item_count(players[0], item.b_i)) {
                var rand = Math.floor(item.params.price / 2);
                shop_npc && shop_npc.temp.general && (rand = Math.floor(.4 * item.params.price));
                document.getElementById("shop_sell").innerHTML = "Sell one for " + thousandSeperate(rand);
                document.getElementById("shop_sell_all").innerHTML = "Sell all";
            } else document.getElementById("shop_sell").innerHTML = "", document.getElementById("shop_sell_all").innerHTML = "";
        } else document.getElementById("shop_item").innerHTML = "", document.getElementById("shop_buy").innerHTML = "", 
        document.getElementById("shop_sell").innerHTML = "", document.getElementById("shop_sell_all").innerHTML = "";
    },
    in_a_fight: function(entity, args) {
        "undefined" !== typeof entity && (document.getElementById("player_health").style.width = Math.round(entity.temp.health / entity.params.health * 100) + "%", 
        document.getElementById("player_health_name").innerHTML = entity.name, removeClass(document.getElementById("player_healthbar"), "hidden"), 
        inAFight = !0);
        "undefined" !== typeof args && (monster_target_id = args.id, document.getElementById("enemy_health").style.width = Math.round(args.temp.health / args.params.health * 100) + "%", 
        document.getElementById("enemy_health_name").innerHTML = args.name + "(" + FIGHT.calculate_monster_level(args) + ")", 
        removeClass(document.getElementById("enemy_healthbar"), "hidden"));
    },
    in_a_fight_hide: function(id) {
        if (id == monster_target_id || id == players[0].id) players[0].temp.healthbar || addClass(document.getElementById("player_healthbar"), "hidden"), 
        addClass(document.getElementById("enemy_healthbar"), "hidden"), inAFight = !1;
    },
    show_damage: function(resolveOne, item, i) {
        if ("0" == item.id) var id = "player_hit"; else item.b_t == BASE_TYPE.NPC ? id = "enemy_hit" : item.b_t == BASE_TYPE.PLAYER && (id = "player_hit");
        var element = document.getElementById(id).cloneNode(!0);
        element.id = id + item.id + new Date().getTime();
        removeClass(element, "hidden");
        item = translateTileToCoordinates(item.i, item.j);
        element.innerHTML = document.getElementById(id).innerHTML;
        i && addClass(element.childNodes[0], "player_hit_max");
        element.childNodes[1].innerHTML = resolveOne;
        wrapper.appendChild(element);
        element.style.left = (item.x + 16 + players[0].mx) * current_ratio_x + "px";
        element.style.top = (item.y - 40 + players[0].my) * current_ratio_y + "px";
        addClass(element, "opacity_100");
        setTimeout(function() {
            decreaseOpacity(element, 150, 10);
        }, 150);
    },
    show_use_skill: function(a, b) {
        if (!map_visible(b.i, b.j)) return !1;
        var element = document.getElementById("use_tool").cloneNode(!0);
        element.id = "use_tool" + Math.random() + new Date().getTime();
        removeClass(element, "hidden");
        var d = translateTileToCoordinates(b.i, b.j), o = item_base[a], handler = IMAGE_SHEET[o.img.sheet];
        element.style.background = 'url("' + handler.url + '") no-repeat scroll ' + -o.img.x * handler.tile_width + "px " + -o.img.y * handler.tile_height + "px #AAAAAA";
        wrapper.appendChild(element);
        element.style.left = (d.x + 16 + players[0].mx) * current_ratio_x + "px";
        element.style.top = (d.y - 40 + players[0].my) * current_ratio_y + "px";
        addClass(element, "opacity_100");
        setTimeout(function() {
            decreaseOpacity(element, 150, 10);
        }, 150);
    },
    show_magic_slots: function() {
        var elem = document.getElementById("magic_slots");
        0 == players[0].params.magic_slots ? elem.style.display = "none" : (elem.style.display = "block", 
        elem.style.height = 33 * players[0].params.magic_slots + "px", elem.innerHTML = HandlebarTemplate.magic_slots()({
            magics: players[0].params.magics.slice(0, players[0].params.magic_slots)
        }), BigMenu.update_magic_slots());
    },
    update_magic_slots: function(i) {
        var start = 0, end = players[0].params.magic_slots - 1;
        "undefined" != typeof i && (end = start = i);
        for (i = start; i <= end; i++) start = document.getElementById("magic_slot_" + i), 
        null != start && players[0].params.magics[i].ready && (start.style.backgroundPosition = "0px -64px");
    }
};

function decreaseOpacity(node, s, name) {
    var type = /opacity_([0-9]{1,3})/.exec(node.className)[1].trim();
    0 < type ? (removeClass(node, "opacity_" + type), addClass(node, "opacity_" + (type - name)), 
    setTimeout(function() {
        decreaseOpacity(node, s, name);
    }, s)) : node.parentNode.removeChild(node);
}

function updateMouseSelector(ev) {
    if (!mouse_over_magic) {
        ev.clientX = ev.clientX || ev.pageX || ev.touches && ev.touches[0].pageX;
        ev.clientY = ev.clientY || ev.pageY || ev.touches && ev.touches[0].pageY;
        var pos = translateMousePosition(ev.clientX, ev.clientY);
        ev = "";
        var color = "#FFFF00";
        if (pos && map_visible(pos.i, pos.j) && on_map[current_map] && on_map[current_map][pos.i] && on_map[current_map][pos.i]) {
            var e;
            (e = obj_g(on_map[current_map][pos.i][pos.j])) || (e = player_map[pos.i] && player_map[pos.i][pos.j] ? player_map[pos.i][pos.j][0] : !1);
            e && e.name && "Name" != e.name && (ev = e.name, e.b_t == BASE_TYPE.PLAYER && (color = "#FFFFFF", 
            ev += "(" + FIGHT.calculate_monster_level(e) + ")"), e.b_t == BASE_TYPE.NPC && (ev = e.type == OBJECT_TYPE.SHOP ? ev + "(NPC)" : ev + ("(" + FIGHT.calculate_monster_level(e) + ")")), 
            editor_enabled && (ev += "(i: " + pos.i + ", j:" + pos.j + ")", e.blocking && (ev += "(B)")));
        }
        editor_enabled && (e = pos.i - dx, pos = pos.j - dy, 10 < pos && 11 > e && 1 < e && (pos = e - 2 + 9 * (16 - pos) + editor_page * editor_page_size, 
        pos < BASE_TYPE[tileset].length && 0 <= pos && pos < (editor_page + 1) * editor_page_size && (ev = BASE_TYPE[tileset][pos].name, 
        BASE_TYPE[tileset][pos].blocking && (ev += "(B)"))));
        document.getElementById("object_selector_info").innerHTML = ev;
        document.getElementById("object_selector_info").style.color = color;
    }
}

var MapTimer = {
    title: function() {
        return !1;
    },
    end_time: 0,
    map: -1,
    decrease: !0,
    init: function(key, op, pos, cb) {
        MapTimer.title = key;
        MapTimer.map = pos;
        MapTimer.end_time = op;
        MapTimer.decrease = cb;
        Timers.set("map_timer_display", function() {
            MapTimer.update();
        }, 1e3);
    },
    format_time: function(seconds) {
        var minutes = Math.floor(seconds / 60);
        seconds -= 60 * minutes;
        10 > seconds && (seconds = "0" + seconds);
        return minutes + ":" + seconds;
    },
    update: function() {
        document.getElementById("dungeon_info").style.display = "block";
        MapTimer.set_title();
        var position;
        position = MapTimer.decrease ? -secondsPastDelta(MapTimer.end_time) : secondsPastDelta(MapTimer.end_time);
        if (0 >= position) MapTimer.hide(); else {
            var n = Math.floor(position / 60), d = position - 60 * n;
            10 > d && (d = "0" + d);
            document.getElementById("dungeon_time").innerHTML = MapTimer.format_time(position);
            0 >= parseInt(n) && 0 >= parseInt(d) ? MapTimer.hide() : MapTimer.map != current_map ? MapTimer.hide() : Timers.set("map_timer_display", function() {
                MapTimer.update();
            }, 1e3);
        }
    },
    set_title: function() {
        var title = !1;
        try {
            title = MapTimer.title();
        } catch (b) {}
        title ? (document.getElementById("dungeon_goal").style.display = "block", document.getElementById("dungeon_goal").innerHTML = title) : document.getElementById("dungeon_goal").style.display = "none";
    },
    hide: function() {
        document.getElementById("dungeon_info").style.display = "none";
        Timers.clear("map_timer_display");
    }
};

function saveMapToFile() {
    c.minimap = document.createElement("canvas");
    c.minimap.width = 6.4 * width;
    c.minimap.height = 6 * height;
    ctx.minimap = c.minimap.getContext("2d");
    minimap_scale = 1;
    Editor.toggle_minimap();
    minimap ? (minimap = !1, HUD.drawMenu(), minimap = !0) : HUD.drawMenu();
    c.minimap.toBlob(function(blob) {
        saveAs(blob, "map" + current_map + ".png");
    });
    Editor.toggle_minimap();
    minimap_scale = .125;
    setCanvasSize(!0);
}

function saveParamImgToFile(p, b) {
    getBodyImgNoHalo(b).toBlob(function(blob) {
        saveAs(blob, p + ".png");
    });
}

function saveImgToFile(p, style) {
    var data = IMAGE_SHEET[style.sheet], canvas = document.createElement("canvas");
    canvas.width = data.tile_width;
    canvas.height = data.tile_height;
    canvas.getContext("2d").drawImage(data.img[0], data.tile_width * style.x, data.tile_height * style.y, data.tile_width, data.tile_height, 0, 0, data.tile_width, data.tile_height);
    canvas.toBlob(function(blob) {
        saveAs(blob, p + ".png");
    });
}

function getImage(uri, name) {
    var image = document.createElement("img");
    image.crossOrigin = "anonymous";
    image.src = uri;
    image.onload = name || function() {};
    return image;
}

function movementInProgress(item) {
    return item.i != item.temp.to.i || item.j != item.temp.to.j ? !0 : !1;
}

function iMapBegin() {
    return west_in_progress ? -1 : 0;
}

function iMapTo() {
    return east_in_progress ? 10 + map_increase : minimap ? 99 : 9 + map_increase;
}

function jMapBegin() {
    return south_in_progress ? -1 : 0;
}

function jMapTo() {
    return north_in_progress ? 9 + map_increase : minimap ? 99 : 8 + map_increase;
}

function ctime(req) {
    return Math.max(0, 1200 - 6 * Math.min(req.params.speed, 180));
}

function resetMovement(state, e) {
    "undefined" == typeof e && (e = !0);
    state && (state.mx = 0, state.my = 0, Timers.clear(state.id + "move"), e && (state.temp.dest = {
        i: state.i,
        j: state.j
    }), state.temp.to = {
        i: state.i,
        j: state.j
    }, state.temp.animate_until = 0, updateBase());
}

function highPerformance() {
    return slow_mode ? !1 : !0;
}

function pauseGame() {
    game_paused ? (game_paused = !1, updateBase(), refreshHUD()) : (game_paused = !0, 
    HUD.drawPaused(), highPerformance() && (Filters.applyFilter(c.base, [ {
        filter: "blur"
    }, {
        filter: "grayscale"
    }, {
        filter: "darkness",
        darkness: 50
    } ], function(c) {
        c.onload = function() {
            game_paused && ctx.base_show.drawImage(this, 0, 0);
        };
    }), Filters.applyFilter(c.objects, [ {
        filter: "blur"
    }, {
        filter: "grayscale"
    }, {
        filter: "darkness",
        darkness: 50
    } ], function(c) {
        c.onload = function() {
            game_paused && ctx.objects_show.drawImage(this, 0, 0);
        };
    })));
}

var body_offset_x = 0, body_offset_y = 0;

function translateMousePositionToScreenPosition(q3, slope) {
    var d = width / wrapper.style.width.replace("px", ""), y = height / wrapper.style.height.replace("px", "");
    q3 -= body_offset_x;
    slope -= body_offset_y;
    return {
        x: q3 * d,
        y: slope * y
    };
}

function translateMousePosition(a, interval) {
    var z = width / wrapper.style.width.replace("px", ""), x = height / wrapper.style.height.replace("px", "");
    a -= body_offset_x;
    interval -= body_offset_y;
    a = a * z - dest_x;
    interval = interval * x - dest_y;
    var x = 2 * a / tile_width, y = 2 * interval / tile_height, z = Math.round((x + y) / 2) - 1, x = Math.round((x - y) / 2);
    return {
        i: z + dx,
        j: x + dy
    };
}

function translateTileToCoordinates(width, height, d) {
    return {
        x: (height - dy) * half_tile_width_round + (width - dx) * half_tile_width_round + dest_x,
        y: (width - dx) * half_tile_height_round - (height - dy) * half_tile_height_round + dest_y,
        visible: d && width - dx >= iMapBegin() && width - dx < iMapTo() && height - dy >= jMapBegin() && height - dy <= jMapTo() ? !0 : !1
    };
}

function openMenu() {
    document.getElementById("menu").style.display = "block";
    document.getElementById("menu_button").blur();
}

function closeMenu() {
    document.getElementById("menu").style.display = "none";
}

function map_visible(startX, startY, deltaX, deltaY) {
    "undefined" == typeof deltaX && (deltaX = dx, deltaY = dy);
    return startX - deltaX >= iMapBegin() && startX - deltaX < iMapTo() && startY - deltaY >= jMapBegin() && startY - deltaY <= jMapTo() ? !0 : !1;
}

function map_walkable(newRowIndex, i, p) {
    return "undefined" == typeof on_map[newRowIndex] || "undefined" == typeof on_map[newRowIndex][i] || "undefined" == typeof on_map[newRowIndex][i][p] || on_map[newRowIndex][i][p].blocking ? !1 : 1 == node_graphs[newRowIndex].nodes[i][p].type;
}

var map_interactive_options = function(bei, agoi) {};

function findPathFromTo(data, c, result) {
    if (minimap) return [];
    if (0 == node_graphs[result.map].nodes[c.i][c.j].type) {
        c = sortClosestTo(data, [ {
            i: Math.max(c.i - 1, 0),
            j: c.j
        }, {
            i: Math.min(c.i + 1, map_size_x),
            j: c.j
        }, {
            i: c.i,
            j: Math.max(c.j - 1, 0)
        }, {
            i: c.i,
            j: Math.min(c.j + 1, map_size_y)
        } ]);
        for (c.reverse(); 0 < c.length && 0 == node_graphs[result.map].nodes[c[c.length - 1].i][c[c.length - 1].j].type; ) c.pop();
        if (0 == c.length) return [];
        c = c[c.length - 1];
    }
    data = astar.search(node_graphs[result.map].nodes, node_graphs[result.map].nodes[data.i][data.j], node_graphs[result.map].nodes[c.i][c.j]);
    if (0 == data.length) return [];
    result = [];
    for (c = data.length - 1; 0 <= c; c--) result.push({
        i: data[c].x,
        j: data[c].y
    });
    return result;
}

function declareVariablesFromDOM() {
    c.base = document.createElement("canvas");
    c.base.width = width;
    c.base.height = height;
    ctx.base = c.base.getContext("2d");
    c.base_show = document.getElementById("base_show");
    ctx.base_show = c.base_show.getContext("2d");
    c.objects = document.createElement("canvas");
    c.objects.width = width;
    c.objects.height = height;
    ctx.objects = c.objects.getContext("2d");
    c.objects_show = document.getElementById("objects_show");
    ctx.objects_show = c.objects_show.getContext("2d");
    c.players = document.createElement("canvas");
    c.players.width = width;
    c.players.height = height;
    ctx.players = c.players.getContext("2d");
    c.players_show = document.getElementById("players_show");
    ctx.players_show = c.players_show.getContext("2d");
    c.effects = document.getElementById("effects");
    ctx.effects = c.effects.getContext("2d");
    c.hud = document.getElementById("hud");
    ctx.hud = c.hud.getContext("2d");
    c.minimap = document.createElement("canvas");
    c.minimap.width = width;
    c.minimap.height = height;
    ctx.minimap = c.minimap.getContext("2d");
    wrapper = document.getElementById("wrapper");
    side = document.getElementById("side");
    side_bottom = document.getElementById("side-bottom");
    canvas = document.getElementById("wrapper");
    Filters.tmpCanvas = document.createElement("canvas");
    Filters.tmpCtx = Filters.tmpCanvas.getContext("2d");
    setStatus("Disconnected", !1);
}

function setStatus(program, aValue) {
    document.getElementById("connection_status").innerHTML = program + ' <img src="' + cdn_url + "img/" + (aValue ? "ok" : "no") + '.png" />';
}

function setResetStatus(a, o) {
    document.getElementById("reset_password_status").innerHTML = a + ' <img src="' + cdn_url + "img/" + (o ? "ok" : "no") + '.png" />';
}

function setResetFormStatus(a, o) {
    document.getElementById("reset_password_form_status").innerHTML = a + ' <img src="' + cdn_url + "img/" + (o ? "ok" : "no") + '.png" />';
}

function moveNorth(item) {
    item.j++;
    item.me ? (dy += 1, north_in_progress = !1, drawMap(), finishedMovement()) : (item.temp.animate_until = timestamp(), 
    drawMap(!1, !0, !1));
}

function moveSouth(item) {
    item.j--;
    item.me ? (--dy, south_in_progress = !1, drawMap(), finishedMovement()) : (item.temp.animate_until = timestamp(), 
    drawMap(!1, !0, !1));
}

function moveWest(post) {
    post.i--;
    post.me ? (--dx, west_in_progress = !1, drawMap(), finishedMovement()) : (post.temp.animate_until = timestamp(), 
    drawMap(!1, !0, !1));
}

function moveEast(post) {
    post.i++;
    post.me ? (dx += 1, east_in_progress = !1, drawMap(), finishedMovement()) : (post.temp.animate_until = timestamp(), 
    drawMap(!1, !0, !1));
}

function finishedMovement(a) {
    0 == players[0].path.length && "object" == typeof selected_object && selected_object.activities && selected_object.activities[0] && 0 < selected_object.activities[0].length && inDistance(players[0].i, players[0].j, selected_object.i, selected_object.j) && ActionMenu.act(0);
}

function confirmSelected() {
    void 0 != selected.id || void 0 == selected_object || void 0 == selected_object.id || void 0 != selected.i && 0 != distance(selected.i, selected.j, selected_object.i, selected_object.j) || (selected = selected_object);
    0 == players[0].path.length && 1 != Math.abs(players[0].temp.to.i - selected.i) + Math.abs(players[0].temp.to.j - selected.j) && (selected_object = {}, 
    selected = {});
    void 0 == selected.i && (selected_object = {});
}

function moveInPath(obj) {
    var data = obj.path.pop();
    map_walkable(obj.map, data.i, data.j) && inDistance(data.i, data.j, obj.i, obj.j) ? (obj.me && (Socket.send("move", JSON.merge(data, {
        t: timestamp()
    })), 16 != obj.map && 24 != obj.map || BigMenu.show_wilderness(), windowOpen && (windowOpen = !1, 
    closeAllActiveWindows())), obj.temp.to = data, obj.me && confirmSelected(), animateUntil(obj, ctime(obj)), 
    data.j > obj.j ? (obj.me && (north_in_progress = !0), Timers.set(obj.id + "move", function() {
        moveNorth(obj);
        obj = null;
    }, ctime(obj))) : data.j < obj.j ? (obj.me && (south_in_progress = !0), Timers.set(obj.id + "move", function() {
        moveSouth(obj);
        obj = null;
    }, ctime(obj))) : data.i < obj.i ? (obj.me && (west_in_progress = !0), Timers.set(obj.id + "move", function() {
        moveWest(obj);
        obj = null;
    }, ctime(obj))) : data.i > obj.i && (obj.me && (east_in_progress = !0), Timers.set(obj.id + "move", function() {
        moveEast(obj);
        obj = null;
    }, ctime(obj))), obj.me && drawMap()) : obj.path = [];
}

function resetMapShift() {
    var user = dx, pass = dy;
    dx = players[0].i - 4 - map_increase / 2;
    dy = players[0].j - 4 - map_increase / 2;
    dx == user && dy == pass || drawMap();
}

function garbageCollector() {
    for (var i in players) "undefined" == typeof players[i] || 0 == i || /pet/.test(i) ? /pet/.test(i) && "undefined" == typeof players[i.substr(0, i.length - 3)] && players[0].name + "'s pet" != players[i].name && delete players[i] : players[i].ttl < timestamp() && (delete players[i], 
    delete players[i + "pet"]);
}

var Level = {
    find_by_xp: function(index, offset) {
        for (var d = offset || 1; index > Level.xp_for_level(d) - 1; ) d++;
        return d - 1;
    },
    xp_for_level: function(_numFailures) {
        return Math.round(50 * (Math.pow(1.11, _numFailures - 1) - 1) / (1.11 - 1));
    }
};

function initDOMEvents() {
    bindOnPress(document.getElementById("login_register_button"), function() {
        do_login(document.getElementById("login_user").value, document.getElementById("login_pass").value);
        return !1;
    });
    bindOnPress(document.getElementById("chat_button"), ChatSystem.toggle);
    bindOnPress(document.getElementById("filters_button"), ChatSystem.filters);
    bindOnPress(document.getElementById("contacts_button"), Contacts.toggle);
    bindOnPress(document.getElementById("quests_button"), Quests.toggle);
    bindOnPress(document.getElementById("open_pet_menu"), function() {
        Pet.init_menu();
        BigMenu.show(-1);
    });
    bindOnPress(document.getElementById("game_options"), OptionsMenu.toggle);
    bindOnPress(document.getElementById("spectate_mode_link"), function() {
        SpectateWindow.init(!1);
    });
    bindOnPress(document.getElementById("combat_style"), Player.change_combat_style);
    bindOnPress(document.getElementById("player_info"), Player.request_more_info);
    document.getElementById("mods_link").onclick = enableMods;
    bindOnPress(document.getElementById("logout_link"), Player.client_logout);
    bindOnPress(document.getElementById("options_form_close"), function() {
        document.getElementById("options_form").style.display = "none";
    });
    bindOnPress(document.getElementById("options_form_show_game"), OptionsMenu.show_game);
    bindOnPress(document.getElementById("options_form_show_video"), OptionsMenu.show_video);
    bindOnPress(document.getElementById("options_form_show_audio"), OptionsMenu.show_audio);
    bindOnPress(document.getElementById("popup_prompt_confirm"), Popup.prompt_confirm);
    bindOnPress(document.getElementById("popup_prompt_decline"), Popup.prompt_decline);
    bindOnPress(document.getElementById("dual_prompt_choice1"), Popup.dual_prompt_confirm_first);
    bindOnPress(document.getElementById("dual_prompt_choice2"), Popup.dual_prompt_confirm_second);
    bindOnPress(document.getElementById("dual_prompt_decline"), Popup.dual_prompt_decline);
    bindOnPress(document.getElementById("input_prompt_confirm"), Popup.input_prompt_confirm);
    bindOnPress(document.getElementById("input_prompt_close"), Popup.input_prompt_close);
    bindOnPress(document.getElementById("dialog_prompt_close"), function() {
        Popup.dialog_close();
    });
    bindOnPress(document.getElementById("shop_buy"), Shop.buy);
    bindOnPress(document.getElementById("shop_sell"), function() {
        Shop.sell(!1);
    });
    bindOnPress(document.getElementById("shop_sell_all"), function() {
        Shop.sell(!0);
    });
    bindOnPress(document.getElementById("shop_close"), function() {
        addClass(document.getElementById("shop"), "hidden");
        Shop.deactivate_update();
    });
    bindOnPress(document.getElementById("chest_page_1"), function() {
        Chest.change_page(1);
    });
    bindOnPress(document.getElementById("chest_page_2"), function() {
        Chest.change_page(2);
    });
    bindOnPress(document.getElementById("chest_page_3"), function() {
        Chest.change_page(3);
    });
    bindOnPress(document.getElementById("chest_page_4"), function() {
        Chest.change_page(4);
    });
    bindOnPress(document.getElementById("chest_page_5"), function() {
        Chest.change_page(5);
    });
    bindOnPress(document.getElementById("chest_withdraw"), function() {
        Chest.withdraw(1);
    });
    bindOnPress(document.getElementById("chest_withdraw_8"), function() {
        Chest.withdraw(8);
    });
    bindOnPress(document.getElementById("chest_destroy"), Chest.destroy);
    bindOnPress(document.getElementById("chest_deposit"), function() {
        Chest.deposit(1);
    });
    bindOnPress(document.getElementById("chest_deposit_all"), function() {
        Chest.deposit(99);
    });
    bindOnPress(document.getElementById("chest_close"), function() {
        addClass(document.getElementById("chest"), "hidden");
    });
    bindOnPress(document.getElementById("chest_market_link"), function() {
        Market.open(!1);
    });
    var n = new Hammer(document.getElementById("chest"));
    n.on("swipeleft", Chest.next_page);
    n.on("swiperight", Chest.last_page);
    bindOnPress(document.getElementById("market_search_open"), function() {
        Market.open(!0);
    });
    bindOnPress(document.getElementById("market_transactions_open"), Market.client_transactions);
    bindOnPress(document.getElementById("market_new_offer_open"), Market.client_new_offer);
    bindOnPress(document.getElementById("market_close"), function() {
        addClass(document.getElementById("market"), "hidden");
        Chest.change_page(chest_page);
    });
    bindOnPress(document.getElementById("market_search_button"), Market.client_search);
    bindOnPress(document.getElementById("makeover_head_link"), function() {
        current_makeover_conf = Makeover.next(current_makeover_conf, "head");
        BigMenu.update_makeover();
    });
    bindOnPress(document.getElementById("makeover_facial_hair_link"), function() {
        current_makeover_conf = Makeover.next(current_makeover_conf, "facial_hair");
        BigMenu.update_makeover();
    });
    bindOnPress(document.getElementById("makeover_body_link"), function() {
        current_makeover_conf = Makeover.next(current_makeover_conf, "body");
        BigMenu.update_makeover();
    });
    bindOnPress(document.getElementById("makeover_pants_link"), function() {
        current_makeover_conf = Makeover.next(current_makeover_conf, "pants");
        BigMenu.update_makeover();
    });
    bindOnPress(document.getElementById("forge_make"), Forge.attempt);
    bindOnPress(document.getElementById("forge_result"), Forge.attempt);
    bindOnPress(document.getElementById("forging_close"), function() {
        addClass(document.getElementById("forging_menu"), "hidden");
        document.body.style.cursor = "";
    });
    bindOnPress(document.getElementById("duel_window_close"), function() {
        document.getElementById("duelling_form").style.display = "none";
        Socket.send("duel_cancel", {});
    });
    bindOnPress(document.getElementById("duelling_no_running"), Player.duel_settings);
    bindOnPress(document.getElementById("duelling_no_magic"), Player.duel_settings);
    bindOnPress(document.getElementById("duelling_accept"), Player.duel_button);
    for (var elem in skills[0]) document.getElementById("skill_" + elem).parentElement.onmouseover = new Function("selected_skill = '" + elem + "';BigMenu.show_skills();");
    document.getElementById("skills_menu").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("skills_menu"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    for (n = 0; 24 > n; n++) elem = document.createElement("div"), elem.id = "duel_inv_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Player.duel_stake(" + n + ")")), 
    document.getElementById("duelling_inventory").appendChild(elem);
    for (n = 0; 24 > n; n++) elem = document.createElement("div"), elem.id = "pet_inv_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Pet.menu_add(" + n + ")")), 
    document.getElementById("pet_inventory").appendChild(elem);
    for (n = 0; 16 > n; n++) elem = document.createElement("div"), elem.id = "pet_chest_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Pet.menu_remove(" + n + ")")), 
    document.getElementById("pet_chest").appendChild(elem);
    for (n = 0; 24 > n; n++) elem = document.createElement("div"), elem.id = "cabinet_inv_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Chest.cabinet_add(" + n + ")")), 
    document.getElementById("cabinet_inventory").appendChild(elem);
    for (n = 0; 16 > n; n++) elem = document.createElement("div"), elem.id = "cabinet_chest_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Chest.cabinet_remove(" + n + ")")), 
    document.getElementById("cabinet_chest").appendChild(elem);
    for (n = 0; 4 > n; n++) elem = document.createElement("div"), elem.id = "duel_my_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", bindOnPress(elem, new Function("Player.duel_stake_remove(" + n + ")")), 
    document.getElementById("duelling_my_stake").appendChild(elem);
    for (n = 0; 4 > n; n++) elem = document.createElement("div"), elem.id = "duel_other_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", document.getElementById("duelling_others_stake").appendChild(elem);
    for (n = 0; 40 > n; n++) elem = document.createElement("div"), elem.id = "forg_inv_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", document.getElementById("forging_inventory").appendChild(elem);
    for (n = 0; 4 > n; n++) for (var id = 0; 4 > id; id++) elem = document.createElement("div"), 
    elem.id = "forg_slot_" + n + "_" + id, addClass(elem, "inv_item"), elem.innerHTML = "&nbsp;", 
    document.getElementById("forging_components").appendChild(elem);
    for (n = 0; 40 > n; n++) {
        elem = document.createElement("div");
        elem.id = "inv_" + n;
        addClass(elem, "inv_item");
        elem.innerHTML = "&nbsp;";
        elem.onmouseover = new Function("selected_inv = '" + n + "';BigMenu.show_inventory();");
        elem.onclick = new Function("inventoryClick(" + n + ");left_click_cancel=true;");
        elem.oncontextmenu = new Function("inventoryRClick(" + n + ");");
        holdEvent(elem, new Function("inventoryRClick(" + n + ");"), 1e3);
        try {
            elem.addEventListener(touchstart, function(e) {
                e.preventDefault();
                left_click_cancel = !1;
                if (e.target || e.targetTouches && e.targetTouches[0].target) {
                    try {
                        var id = /[0-9]{1,2}/.exec(e.target && e.target.id || e.targetTouches[0].target.id)[0];
                    } catch (d) {
                        id = 0;
                    }
                    last_inventory_slot = id;
                    GAME_STATE == GAME_STATES.GAME && (touch_timer = setTimeout(new Function("left_click_cancel=true;inventoryRClick(" + id + ");"), 1e3));
                }
            }), elem.addEventListener(touchend, function(e) {
                clearTimeout(touch_timer);
                left_click_cancel || (inventoryClick(last_inventory_slot), left_click_cancel = !0);
            });
        } catch (e) {}
        document.getElementById("inventory").appendChild(elem);
    }
    n = document.createElement("span");
    n.id = "inv_coins";
    document.getElementById("inventory").appendChild(n);
    elem = document.createElement("span");
    elem.id = "inv_name";
    addClass(elem, "inv_item_name");
    elem.innerHTML = "&nbsp;";
    document.getElementById("inventory").appendChild(elem);
    document.getElementById("inventory").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("inventory"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    for (n = 0; 60 > n; n++) elem = document.createElement("div"), elem.id = "shop_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = '<span class="inv_numbers">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>', 
    bindOnPress(elem, new Function("selected_shop = '" + n + "';BigMenu.update_shop_selection();")), 
    elem.oncontextmenu = new Function("Shop.item_info(" + n + ");"), document.getElementById("shop_item_holder").appendChild(elem);
    for (n = 0; 60 > n; n++) elem = document.createElement("div"), elem.id = "chest_" + n, 
    addClass(elem, "inv_item"), elem.innerHTML = '<span class="inv_numbers">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>', 
    bindOnPress(elem, new Function("selected_chest = '" + n + "';BigMenu.update_chest_selection();")), 
    elem.oncontextmenu = new Function("Chest.item_info(" + n + ");"), document.getElementById("chest_item_holder").appendChild(elem);
    document.getElementById("settings").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("settings"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    document.getElementById("settings_spectate").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("settings_spectate"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    document.getElementById("small_pet_menu").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("small_pet_menu"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    document.getElementById("small_build_menu").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("small_build_menu"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
    document.getElementById("small_wilderness_menu").onmouseout = function(oEvent) {
        fixOnMouseOut(oEvent, document.getElementById("small_wilderness_menu"), function() {
            BigMenu.show(-1);
            active_menu = -1;
        });
    };
}

function inventoryClick(item) {
    clearInterval(inventory_auto_action);
    if (players[0].temp.busy) return !1;
    if (!(Android && 500 > timestamp() - lastTap)) {
        mobileDevice() || (lastTap = timestamp());
        if (left_click_cancel) return !1;
        item = players[0].temp.inventory[item];
        if ("undefined" == typeof item) return !1;
        item.selected ? Inventory.unequip(players[0], item.id) && (BigMenu.init_inventory(), 
        Socket.send("unequip", {
            data: {
                id: item.id
            }
        }), Player.update_combat_attributes(players[0]), BigMenu.show_magic_slots()) : Inventory.equip(players[0], item.id) && (BigMenu.init_inventory(), 
        Socket.send("equip", {
            data: {
                id: item.id
            }
        }), Player.update_combat_attributes(players[0]), BigMenu.show_magic_slots());
    }
}

function inventoryRClick(item) {
    clearInterval(inventory_auto_action);
    if ("undefined" != typeof item) {
        if ("undefined" == typeof players[0].temp.inventory[item]) return !1;
        InvMenu.create(item);
    }
}

function penalty_bonus() {
    Socket.send("captcha_bonus", {
        skill: document.getElementById("penalty_bonus_skill").value,
        amount: parseInt(document.getElementById("penalty_bonus_points").value)
    });
}

function mouseOverMagic(name) {
    players[0].params.magics[name] && (name = Magic[players[0].params.magics[name].id].name, 
    document.getElementById("object_selector_info").innerHTML = name, document.getElementById("object_selector_info").style.color = COLOR.WHITE, 
    mouse_over_magic = !0);
}

function mouseOutMagic(a) {
    mouse_over_magic = !1;
}

function holdEvent(element, reposition, speed) {
    var _fadeTimeoutId;
    element.onmousedown = function(event) {
        GAME_STATE != GAME_STATES.GAME || touch_initialized || (left_click_cancel = !1, 
        _fadeTimeoutId = setTimeout(function() {
            left_click_cancel = !0;
            reposition(event);
        }, speed));
    };
    element.onmouseup = function() {
        clearTimeout(_fadeTimeoutId);
    };
}

function minutesPastDelta(offset) {
    return Math.floor(secondsPastDelta(offset) / 60);
}

function secondsPastDelta(a) {
    return secondstamp() - server_time_delta - a;
}

function closeAllActiveWindows() {
    Popup.prompt_close();
    Popup.dual_prompt_close();
    Popup.input_prompt_close();
    Popup.dialog_close(!0);
    addClass(document.getElementById("chest"), "hidden");
    addClass(document.getElementById("shop"), "hidden");
    Shop.deactivate_update();
    addClass(document.getElementById("market"), "hidden");
    document.getElementById("duelling_form").style.display = "none";
    document.getElementById("makeover_form").style.display = "none";
    document.getElementById("cabinet_form").style.display = "none";
    document.getElementById("cabinet_form").style.display = "none";
    addClass(document.getElementById("pvp_loot"), "hidden");
    addClass(document.getElementById("pet_nest_form"), "hidden");
    addClass(document.getElementById("forging_menu"), "hidden");
    document.body.style.cursor = "";
}

function canUseHouseDeed(p) {
    var s = map_names[p.map], q = p.i;
    p = p.j;
    if (teleport_locations[s]) {
        var w = teleport_locations[s].to_i, m = teleport_locations[s].to_j, s = teleport_locations[s].radius;
        if (w - s < q && w + s > q && m - s < p && m + s > p) return !0;
    }
    return !1;
}

var monsters_by_level = [];

function calculateMonsterCombats() {
    for (var i = 0; i < npc_base.length; i++) npc_base[i].type != OBJECT_TYPE.ENEMY || npc_base[i].params.no_dungeon || (npc_base[i].params.combat_level = FIGHT.calculate_monster_level(npc_base[i]), 
    monsters_by_level[npc_base[i].params.combat_level] = monsters_by_level[npc_base[i].params.combat_level] || [], 
    monsters_by_level[npc_base[i].params.combat_level].push(parseInt(i)));
}

function noRender(_succeeded, interval) {
    Android && (no_render = !0, Draw.clear(ctx.base_show), Draw.clear(ctx.base), Draw.clear(ctx.objects_show), 
    Draw.clear(ctx.objects), Draw.clear(ctx.players_show), Draw.clear(ctx.players), 
    Draw.clear(ctx.effects), _succeeded || Timers.set("no_render", function() {
        no_render = !1;
    }, interval || 500));
}

function backgroundLevel(x) {
    return 100 <= x && 120 > x ? 1 : 120 <= x && 130 >= x ? 0 : x;
}

var loaded_specific_images = {};

function loadSpecificImage(id) {
    if (!loaded_specific_images[id]) {
        var val = "", data = "";
        switch (id) {
          case "gamepad":
            val = "url('sheet/gamepad.png') transparent";
            break;

          case "atk_button":
            val = "url('sheet/atk_button.png') transparent";
            break;

          case "market_example_small":
            data = "https://1641572598.rsc.cdn77.org/small/market_example_small.gif";
        }
        "" == data && "" == val && console.log("No such image " + id);
        var elem = document.getElementById(id);
        "" != data ? elem.src = data : "" != val && (elem.style.background = val);
        loaded_specific_images[id] = !0;
    }
}

function my_island() {
    return map_names[300] == players[0].name + "'s Island";
}

function extract_island_owner() {
    return map_names[300].replace("'s Island", "");
}

var OptionsMenu = {
    toggle: function() {
        "block" == document.getElementById("options_form").style.display ? document.getElementById("options_form").style.display = "none" : (document.getElementById("settings_notifications").style.display = "none", 
        Notifications.supported() && !Notifications.enabled() && (document.getElementById("settings_notifications").style.display = "block"), 
        document.getElementById("options_form").style.display = "block");
    },
    show_game: function() {
        OptionsMenu.hide_others();
        document.getElementById("options_game").style.display = "block";
    },
    show_video: function() {
        OptionsMenu.hide_others();
        document.getElementById("options_video").style.display = "block";
    },
    show_audio: function() {
        OptionsMenu.hide_others();
        document.getElementById("options_audio").style.display = "block";
    },
    hide_others: function() {
        document.getElementById("options_game").style.display = "none";
        document.getElementById("options_video").style.display = "none";
        document.getElementById("options_audio").style.display = "none";
    },
    smoothInterfaceCSS: null,
    imgsrc: null,
    smoothInterfaceEnabled: !1,
    enableSmoothInterface: function() {
        OptionsMenu.smoothInterfaceCSS = document.body.appendChild(document.createElement("link"));
        OptionsMenu.smoothInterfaceCSS.href = cdn_url + "leriel.css?v=3";
        OptionsMenu.smoothInterfaceCSS.rel = "stylesheet";
        OptionsMenu.imgsrc = IMAGE_SHEET[5].img[0].src;
        IMAGE_SHEET[5].img[0].src = cdn_url + "leriel_gui.png?v=1";
        IMAGE_SHEET[5].img[0].onload = function() {
            refreshHUD();
        };
        Draw.drawToMap(ctx.hud, IMAGES.GUI[1], {
            x: 0,
            y: height - 24,
            relative: !1
        });
        Draw.drawToMap(ctx.hud, IMAGES.GUI[0], {
            x: 0,
            y: 0,
            relative: !1
        });
    },
    disableSmoothInterface: function() {
        document.body.removeChild(OptionsMenu.smoothInterfaceCSS);
        IMAGE_SHEET[5].img[0].src = OptionsMenu.imgsrc;
        IMAGE_SHEET[5].img[0].onload = function() {
            refreshHUD();
        };
    },
    toggleSmoothInterface: function() {
        OptionsMenu.smoothInterfaceEnabled ? OptionsMenu.disableSmoothInterface() : OptionsMenu.enableSmoothInterface();
        OptionsMenu.smoothInterfaceEnabled = !OptionsMenu.smoothInterfaceEnabled;
    }
}, IMAGE_SHEET = {
    FIRST: "1",
    1: {
        url: "sheet/dgiso32_anvil.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    MONSTER1: "2",
    2: {
        url: "sheet/dg_classm32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    NEWLAND: "3",
    3: {
        url: "sheet/ground.gif",
        tile_width: 54,
        tile_height: 34,
        filters: !1
    },
    ACTIONS: "4",
    4: {
        url: "sheet/townactions.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    GUI: "5",
    5: {
        url: "gui.png",
        tile_width: 854,
        tile_height: 24,
        filters: !1
    },
    MONSTER132: "6",
    6: {
        url: "sheet/dg_monster132.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    WEAPONS: "7",
    7: {
        url: "sheet/dgweapon32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    ARMOR: "8",
    8: {
        url: "sheet/dg_armor32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    FOOD: "9",
    9: {
        url: "sheet/dg_food32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    TOOLS: "10",
    10: {
        url: "sheet/tools.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    FISH: "11",
    11: {
        url: "sheet/fish_new32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MISC: "12",
    12: {
        url: "sheet/dgmisc32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    UNDEAD: "13",
    13: {
        url: "sheet/dg_undead32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    JEWELRY: "14",
    14: {
        url: "sheet/dg_jewls32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    BIG_STUFF: "15",
    15: {
        url: "sheet/big_stuff.gif",
        tile_width: 54,
        tile_height: 64,
        filters: !1
    },
    DRAGONS: "16",
    16: {
        url: "sheet/dg_dragon32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER432: "17",
    17: {
        url: "sheet/dg_monster432.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER232: "18",
    18: {
        url: "sheet/dg_monster232.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER732: "19",
    19: {
        url: "sheet/dg_monster732.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER632: "20",
    20: {
        url: "sheet/dg_monster632.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    UNIQUES: "21",
    21: {
        url: "sheet/dg_uniques32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    HUMANS: "22",
    22: {
        url: "sheet/dg_humans32.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    ALCHEMY: "23",
    23: {
        url: "sheet/alchemyitems2.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER532: "24",
    24: {
        url: "sheet/dg_monster532.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MONSTER332: "25",
    25: {
        url: "sheet/dg_monster332.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    HEADS: "26",
    26: {
        url: "sheet/wearable/heads.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    FACIAL_HAIR: "27",
    27: {
        url: "sheet/wearable/facial_hair.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    BODIES: "28",
    28: {
        url: "sheet/wearable/bodys.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    PANTS: "29",
    29: {
        url: "sheet/wearable/pants.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    CAPES: "30",
    30: {
        url: "sheet/wearable/capes.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    LEFT_HANDS: "31",
    31: {
        url: "sheet/wearable/left_hands.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    RIGHT_HANDS: "32",
    32: {
        url: "sheet/wearable/right_hands.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    SHIELDS: "33",
    33: {
        url: "sheet/wearable/shields.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    WEPS: "34",
    34: {
        url: "sheet/wearable/weapons.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    HELMETS: "35",
    35: {
        url: "sheet/wearable/helmets.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    BOOTS: "36",
    36: {
        url: "sheet/wearable/boots.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MAGIC: "37",
    37: {
        url: "sheet/magic.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MSPELL: "38",
    38: {
        url: "sheet/mspell.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    SICOS: "39",
    39: {
        url: "sheet/sicos.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MWEAPONS: "40",
    40: {
        url: "sheet/mweapons.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    ANIMALS: "41",
    41: {
        url: "sheet/animals.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    NEWWORLD: "42",
    42: {
        url: "sheet/newworld2.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    NEWLAND_TOPS: "43",
    43: {
        url: "sheet/ground_tops.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    BOSS: "44",
    44: {
        url: "sheet/boss.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    PETS: "45",
    45: {
        url: "sheet/pets.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    POTS_CRATES: "46",
    46: {
        url: "sheet/pots_crates.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    BIG_PYRAMID: "47",
    47: {
        url: "sheet/big_pyramid.gif",
        tile_width: 576,
        tile_height: 335,
        filters: !1
    },
    HOUSE: "48",
    48: {
        url: "sheet/house.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    HOUSE_INV: "49",
    49: {
        url: "sheet/house_inv.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    FARMING_PRO: "50",
    50: {
        url: "sheet/farming_products.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    WEPS2: "51",
    51: {
        url: "sheet/wearable/weapons2h.gif",
        tile_width: 46,
        tile_height: 46,
        filters: !1
    },
    HALLOWEEN: "52",
    52: {
        url: "sheet/halloween.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    NEWLAND2: "53",
    53: {
        url: "sheet/ground2.gif",
        tile_width: 54,
        tile_height: 34,
        filters: !1
    },
    CATHEDRAL: "54",
    54: {
        url: "sheet/cathedral.gif",
        tile_width: 596,
        tile_height: 544,
        filters: !1
    },
    NEWWORLD3: "55",
    55: {
        url: "sheet/newworld3.gif",
        tile_width: 54,
        tile_height: 49,
        filters: !1
    },
    BOSS2: "56",
    56: {
        url: "sheet/boss2.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    BOSS3: "57",
    57: {
        url: "sheet/boss3.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    BOSS4: "58",
    58: {
        url: "sheet/boss4.gif",
        tile_width: 64,
        tile_height: 64,
        filters: !1
    },
    MISC2: "59",
    59: {
        url: "sheet/dgmisc2.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MISC3: "60",
    60: {
        url: "sheet/dgmisc3.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MISC4: "61",
    61: {
        url: "sheet/dgmisc4.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    MISC5: "62",
    62: {
        url: "sheet/dgmisc5.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    ARMOR2: "63",
    63: {
        url: "sheet/dg_armor2.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    },
    WEAPONS2: "64",
    64: {
        url: "sheet/dgweapon2.gif",
        tile_width: 32,
        tile_height: 32,
        filters: !1
    }
};

"undefined" == typeof JSON.clone && (module.exports = IMAGE_SHEET);

var ground_base = [], object_base = [], item_base = [], npc_base = [], players = {}, skills = {};

"undefined" == typeof map && (map = []);

"undefined" == typeof on_map && (on_map = []);

"undefined" == typeof maps_loaded && (maps_loaded = {});

var objects_data = [];

function loadMap(x, dataList, comments) {
    for (var i = 0; i < dataList.length; i++) {
        var data = dataList[i];
        map[x][data.i][data.j] = {
            b_t: data.b_t,
            b_i: data.b_i
        };
        "undefined" == typeof ground_base[data.b_i] ? console.log("Map conflict! Map " + x + " with(ground doesnt exist)", data) : ground_base[data.b_i].blocking && (map_graphs[x][data.i][data.j] = 0);
        on_map[x][data.i][data.j] = !1;
        delete data;
    }
    for (i = 0; i < comments.length; i++) {
        data = comments[i];
        if ("undefined" != typeof data.id) {
            try {
                "undefined" != typeof objects_data[data.id] && 1337 != window.location.port && "mapeditor" == players[0].name && alert("Map conflict with object_id " + data.id + " Use CTRL+F5 or try to clear your browser cache!");
            } catch (g) {
                console.log("Tile conflict on map " + x), console.log(data);
            }
            objects_data[data.id] = createObject(JSON.merge(BASE_TYPE[data.b_t][data.b_i], data));
            objects_data[data.id].map = x;
            on_map[x][data.i][data.j] = {
                b_t: data.b_t,
                b_i: data.b_i,
                id: data.id
            };
            "undefined" != typeof data.params && (on_map[x][data.i][data.j].params = data.params);
        } else on_map[x][data.i][data.j] = {
            b_t: data.b_t,
            b_i: data.b_i
        };
        !BASE_TYPE[data.b_t][data.b_i].blocking || "undefined" != typeof iamserver && data.b_t == BASE_TYPE.NPC && BASE_TYPE[data.b_t][data.b_i].type == OBJECT_TYPE.ENEMY || (map_graphs[x][data.i][data.j] = 0);
        obj_id = Math.max(on_map[x][data.i][data.j].id);
        delete data;
    }
    node_graphs[x] = new Graph(map_graphs[x]);
}

function loadPlayerMap(obj) {
    obj = JSON.parse(lzw_decode(obj));
    Carpentry.player_map = obj;
    map_names[300] = obj.owner + "'s Island";
    var items = obj.data.map, ids = obj.data.on_map;
    players[0].map = 300;
    players[0].i = 10;
    players[0].j = 10;
    for (var i = 1; objects_data[i]; ) 300 == objects_data[i].map && delete objects_data[i], 
    i++;
    map_graphs[300] = [];
    for (i = 0; i < map_size_x; i++) {
        map_graphs[300][i] = [];
        for (var j = 0; j < map_size_y; j++) map_graphs[300][i][j] = 0;
    }
    map[300] = [];
    on_map[300] = [];
    for (i = 10; i < obj.size.x + 10; i++) for (map[300][i] = [], on_map[300][i] = [], 
    j = 10; j < obj.size.y + 10; j++) map[300][i][j] = !1, on_map[300][i][j] = !1;
    for (i = 8; 10 > i; i++) for (map[300][i] = map[300][i] || [], on_map[300][i] = on_map[300][i] || [], 
    j = 8; 23 > j; j++) 8 == i && 8 == j || 8 == i && 22 == j || (map[300][i][j] = {
        b_t: BASE_TYPE.GROUND,
        b_i: [ 93, 94, 95, 96, 97, 290 ][Math.floor(6 * Math.random())]
    }, on_map[300][i][j] = !1, map_graphs[300][i][j] = 1);
    for (i = 8; 23 > i; i++) for (map[300][i] = map[300][i] || [], on_map[300][i] = on_map[300][i] || [], 
    j = 8; 10 > j; j++) 8 == i && 8 == j || 22 == i && 8 == j || (map[300][i][j] = {
        b_t: BASE_TYPE.GROUND,
        b_i: [ 93, 94, 95, 96, 97, 293 ][Math.floor(6 * Math.random())]
    }, on_map[300][i][j] = !1, map_graphs[300][i][j] = 1);
    for (i = 0; i < obj.size.x; i++) for (j = 0; j < obj.size.y; j++) map[300][i + 10][j + 10] = {
        b_t: BASE_TYPE.GROUND,
        b_i: items[i][j].i,
        params: {
            rotate: items[i][j].r || 0
        }
    }, on_map[300][i + 10][j + 10] = !1, ids[i] && ids[i][j] ? (map_graphs[300][i + 10][j + 10] = 0, 
    placeObject({
        i: i + 10,
        j: j + 10,
        map: 300,
        params: {
            rotate: ids[i][j].r || 0,
            secondstamp: ids[i][j].t,
            amount_taken: ids[i][j].a,
            items: ids[i][j].it,
            pet_id: ids[i][j].pet_id,
            other_nest: ids[i][j].ot_n,
            last_ate: ids[i][j].l_a,
            insured: ids[i][j].insu,
            allowed: ids[i][j].al || [],
            friends_only: ids[i][j].f_o || !1
        }
    }, ids[i][j].i)) : map_graphs[300][i + 10][j + 10] = 1;
    map[300][10][10] = {
        b_t: BASE_TYPE.GROUND,
        b_i: 158
    };
    on_map[300][10][10] = !1;
    map_graphs[300][10][10] = 1;
    placeObject({
        i: 9,
        j: 10,
        map: 300
    }, 69);
    map_graphs[300][9][10] = 0;
    items = {
        b_t: BASE_TYPE.GROUND,
        b_i: 286
    };
    ids = [ {
        i: 10,
        j: 7
    }, {
        i: 10,
        j: 6
    }, {
        i: 10,
        j: 5
    } ];
    for (i in ids) map[300][ids[i].i][ids[i].j] = items, on_map[300][ids[i].i][ids[i].j] = !1, 
    map_graphs[300][ids[i].i][ids[i].j] = 1;
    8 == obj.ship && placeObject({
        i: 11,
        j: 6,
        map: 300,
        params: {}
    }, 339);
    obj.owner != players[0].name && placeObject({
        i: 9,
        j: 6,
        map: 300,
        params: {}
    }, 345);
    node_graphs[300] = new Graph(map_graphs[300]);
    Timers.set("update_farming_images", function() {
        updateFarmingImages();
    }, 15e3);
}

function updateObjectImage(data) {
    if (data.type == OBJECT_TYPE.FARMING && (map[data.map || current_map][data.i][data.j].b_i = 304, 
    data.params.secondstamp)) {
        var height = secondsPastDelta(data.params.secondstamp), width = BASE_TYPE[data.b_t][data.b_i].params.img_rotates;
        data.params.rotate = Math.max(0, Math.min(width, Math.floor(height / (60 * BASE_TYPE[data.b_t][data.b_i].params.duration / width))));
    }
    497 == data.b_i && (my_island() || -1 < data.params.allowed.indexOf(players[0].name) ? (map_graphs[data.map || current_map][data.i][data.j] = 1, 
    node_graphs[data.map || current_map] && node_graphs[data.map || current_map].nodes[data.i] && (node_graphs[data.map || current_map].nodes[data.i][data.j].type = 1), 
    data.blocking = !1, on_map[data.map || current_map][data.i][data.j].blocking = !1) : (map_graphs[data.map || current_map][data.i][data.j] = 0, 
    3 >= data.params.rotate && (data.params.rotate += 4)));
    "number" == typeof data.params.rotate && data.base()["img_" + data.params.rotate] && (data.img = JSON.merge(JSON.clone(data.base().img), data.base()["img_" + data.params.rotate]));
    data.img.x = BASE_TYPE[data.b_t][data.b_i].img.x + (data.params && data.params.rotate || 0);
}

function updateFarmingImages() {
    if (300 == current_map) {
        for (var j = 10; 35 > j; j++) for (var i = 10; 35 > i; i++) if (on_map[300][j] && on_map[300][j][i]) {
            var part = objects_data[on_map[300][j][i].id];
            part.type == OBJECT_TYPE.FARMING && updateObjectImage(part);
        }
        isActive && !movementInProgress(players[0]) && drawMap();
        Timers.set("update_farming_images", function() {
            updateFarmingImages();
        }, 15e3);
    }
}

function obj_g(attrs) {
    return attrs && "undefined" != typeof attrs ? "undefined" != typeof attrs.id ? objects_data[attrs.id] : BASE_TYPE[attrs.b_t] && BASE_TYPE[attrs.b_t][attrs.b_i] : !1;
}

function obj_s(socket) {
    return 0 <= socket.id ? {
        b_t: socket.b_t,
        b_i: socket.b_i,
        id: socket.id
    } : {
        b_t: socket.b_t,
        b_i: socket.b_i
    };
}

function SAVE() {
    saveMap(map, on_map);
}

function LOAD(prop) {
    if ("undefined" != typeof map_json[prop] && "undefined" != typeof on_map_json[prop]) {
        map[prop] = [];
        on_map[prop] = [];
        for (var j = 0; j <= map_size_x; j++) {
            map[prop][j] = [];
            on_map[prop][j] = [];
            map_graphs[prop][j] = [];
            for (var x = 0; x <= map_size_y; x++) map[prop][j][x] = !1, on_map[prop][j][x] = !1, 
            map_graphs[prop][j][x] = 1;
        }
        loadMap(prop, map_json[prop], on_map_json[prop]);
        delete map_json[prop];
        delete on_map_json[prop];
        return maps_loaded[prop] = !0;
    }
    return !1;
}

function preloadMap(key, attrs) {
    "undefined" == typeof map[key] && LazyLoad.js(cdn_url + "maps/map" + key + ".js?" + (attrs ? map_hashes[key] : timestamp()), function() {
        "undefined" == typeof map[key] && LOAD(key);
    });
}

function saveMap(table, patterns) {
    for (var out = [], j = 0; j < map_size_x; j++) for (var k = 0; k < map_size_y; k++) "object" == typeof table[current_map][j][k] && out.push(JSON.stringify(JSON.merge(table[current_map][j][k], {
        i: j,
        j: k
    })));
    for (var out = JSON.stringify(out), data = [], j = 0; j < map_size_x; j++) for (k = 0; k < map_size_y; k++) "object" == typeof patterns[current_map][j][k] && data.push(JSON.stringify(JSON.merge(patterns[current_map][j][k], {
        i: j,
        j: k
    })));
    j = JSON.stringify(data);
    socket.emit("map", {
        map: lzw_encode(out),
        on_map: lzw_encode(j),
        current_map: current_map,
        sk: c_sk
    });
}

function exportObject(args) {
    var a = function(i, name) {
        return "undefined" != typeof name ? args[i][name] == args.base()[i][name] ? void 0 : args[i][name] : args[i] == args.base()[i] ? void 0 : args[i];
    }, h = function(context) {
        var map = {}, f = !0, key;
        for (key in args[context]) map[key] = a(context, key), "undefined" != typeof map[key] && (f = !1);
        if (!f) return map;
    }, d = {
        b_i: args.b_i,
        b_t: args.b_t,
        i: args.i,
        j: args.j
    }, f = {
        id: a("id"),
        activities: h("activities"),
        name: a("name"),
        img: h("img"),
        blocking: a("blocking")
    }, d = JSON.merge(d, f);
    0 < JSON.count(args.params) && (d = JSON.merge(d, {
        params: h("params")
    }));
    return d;
}

var obj_id = 0;

function createObject(data, index) {
    var add = function(e, b) {
        return "undefined" == typeof e ? b : e;
    }, p = {
        id: add(data.id, -1),
        b_i: add(data.b_i, 0),
        b_t: add(data.b_t, BASE_TYPE.OBJECT),
        base: function() {
            return BASE_TYPE[this.b_t][this.b_i];
        },
        i: add(data.i, -1),
        j: add(data.j, -1),
        map: add(data.map, void 0),
        params: add(data.params, {})
    };
    if (data && data.params && data.params.img_rotates) for (var x = 0; x <= data.params.img_rotates; x++) data["img_" + x] && (p["img_" + x] = JSON.clone(data["img_" + x]));
    if (index && 1 == index) p = JSON.merge(p, {
        name: add(data.name, "Name"),
        img: add(data.img, {}),
        type: add(data.type, 0),
        activities: add(data.activities, []),
        top: add(data.top, void 0),
        temp: add(data.temp, {}),
        fn: add(data.fn, {}),
        blocking: add(data.blocking, !0)
    }); else {
        p.name = add(data.name, p.base().name);
        p.img = add(data.img, p.base().img);
        p.img.x && "object" == typeof p.img.x && (p.img.x = p.img.x[Math.floor(Math.random() * p.img.x.length)]);
        p.blocking = add(data.blocking, p.base().blocking);
        p.type = p.base().type;
        p.activities = add(data.activities, p.base().activities);
        if (-1 == p.id && p.b_t != BASE_TYPE.GROUND && 0 < p.activities.length) {
            if (editor_enabled) {
                for (x = 1; "undefined" != typeof objects_data[x]; ) x++;
                obj_id = x - 1;
            }
            obj_id++;
            p.id = obj_id;
        }
        p.b_t == BASE_TYPE.NPC && (p.init = {}, p.init.i = p.i, p.init.j = p.j);
        p.top = add(data.top, p.base().top);
        p.temp = add(data.temp, p.base().temp);
        p.fn = function(a, b, c, d, e, f) {
            return "undefined" == typeof this.base().fn[a.toLowerCase()] ? DEFAULT_FUNCTIONS[a.toLowerCase()](b, c, d, e, f) : this.base().fn[a.toLowerCase()](b, c, d, e, f);
        };
    }
    return p;
}

var BASE_TYPE = {
    OBJECT: "1",
    1: object_base,
    GROUND: "2",
    2: ground_base,
    ITEM: "3",
    3: item_base,
    NPC: "4",
    4: npc_base,
    PLAYER: "5",
    5: players,
    PET: "6",
    6: pets
}, OBJECT_TYPE = {
    DUMMY: 0,
    TREE: 1,
    STONE: 2,
    ENEMY: 3,
    SHOP: 4,
    FISH: 5,
    COOKING: 6,
    FARMING: 7
}, IMAGES = {
    EMPTY: {
        sheet: IMAGE_SHEET.FIRST,
        x: 17,
        y: 14
    },
    ACTIVITIES: [ {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 3,
        y: 7,
        visible: !1,
        id: "wilderness"
    }, {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 1,
        y: 2,
        visible: !1,
        id: "pet"
    }, {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 0,
        y: 9,
        visible: !1,
        id: "building"
    }, {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 0,
        y: 6,
        visible: !0,
        id: "skills"
    }, {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 5,
        y: 5,
        visible: !0,
        id: "inventory"
    }, {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 3,
        y: 4,
        visible: !1,
        id: "quests"
    }, {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 2,
        y: 6,
        visible: !0,
        id: "settings"
    } ],
    GUI: [ {
        sheet: IMAGE_SHEET.GUI,
        x: 0,
        y: 0
    }, {
        sheet: IMAGE_SHEET.GUI,
        x: 0,
        y: 1
    } ]
}, TopIcons = {
    count: function() {
        for (var c = 0, n = 0; n < IMAGES.ACTIVITIES.length; n++) IMAGES.ACTIVITIES[n].visible && c++;
        return c;
    },
    get_id: function(expected_result) {
        for (var result = -1, i = IMAGES.ACTIVITIES.length - 1; 0 <= i; i--) if (IMAGES.ACTIVITIES[i].visible && result++, 
        result == expected_result) return IMAGES.ACTIVITIES.length - i - 1;
    },
    show: function(id) {
        for (var i = 0; i < IMAGES.ACTIVITIES.length; i++) if (IMAGES.ACTIVITIES[i].id == id) {
            IMAGES.ACTIVITIES[i].visible = !0;
            Timers.set("refresh_hud", function() {
                minimap || refreshHUD();
            }, 10);
            break;
        }
    },
    get_x: function(elementID) {
        for (var level = 0, n = 0; n < IMAGES.ACTIVITIES.length; n++) {
            if (IMAGES.ACTIVITIES[n].id == elementID) return IMAGES.ACTIVITIES[n].visible && level * (bigIcons ? 64 : 32);
            IMAGES.ACTIVITIES[n].visible && level++;
        }
    },
    hide: function(id) {
        for (var i = 0; i < IMAGES.ACTIVITIES.length; i++) if (IMAGES.ACTIVITIES[i].id == id) {
            IMAGES.ACTIVITIES[i].visible = !1;
            Timers.set("refresh_hud", function() {
                minimap || refreshHUD();
            }, 10);
            break;
        }
    },
    bottom_y: function() {
        return bigIcons ? 80 : 48;
    },
    top_y: function() {
        return 16;
    }
}, PERMISSIONS = {
    NONE: 0,
    MOD: 1,
    ADMIN: 2,
    PLAYER_MOD: 3
}, ACTIVITIES = {
    INSPECT: "Inspect",
    CHOP: "Chop",
    MINE: "Mine",
    DIG: "Dig",
    ATTACK: "Attack",
    TRADE_WITH: "Trade with",
    DUEL_WITH: "Duel with",
    CATCH: "Catch",
    COOK: "Cook on",
    ACCESS: "Access",
    USE: "Use",
    MAKEOVER: "Makeover",
    TALK: "Talk",
    PET_MENU: "Pet menu",
    RAKE: "Rake",
    SEED: "Seed",
    HARVEST: "Harvest",
    LOOT: "Check loot",
    OPEN: "Open",
    SLEEP: "Sleep in",
    PERMISSIONS: "Permissions"
}, DEFAULT_FUNCTIONS = {
    inspect: function(s, r, d) {
        if (!Timers.running("inspect")) return Timers.set("inspect", null_function, 500), 
        r = 1338 == config.http_port ? " i: " + s.i + " j:" + s.j : "", s.b_t == BASE_TYPE.NPC ? s.type == OBJECT_TYPE.SHOP ? addChatText("undefined" === typeof d ? "It's " + aOrAn(s.base().name) + " " + s.base().name + "(NPC)" + r : d + r, null, COLOR.WHITE) : addChatText("undefined" === typeof d ? "It's " + aOrAn(s.base().name) + " " + s.base().name + "(" + FIGHT.calculate_monster_level(s.base()) + ")" + r : d + r, null, COLOR.WHITE) : s.base().params && s.base().params.desc ? addChatText(s.base().params.desc + r, null, COLOR.WHITE) : addChatText("undefined" === typeof d ? "It's " + aOrAn(s.base().name) + " " + s.base().name + r : d + r, null, COLOR.WHITE), 
        !0;
    },
    "trade with": function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            shop_npc = a;
            Shop.activate_update();
            if (Timers.running("shop" + a.id)) return;
            Socket.send("shop_open", {
                target: a.id
            });
            Timers.set("shop" + a.id, null_function, 250);
        }
        return !0;
    },
    "catch": function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            var s = Skills.can_perform(b, a.id);
            s.status ? (Music.sound_effect("fish"), addChatText("You attempt to catch a fish...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: a.id
            })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    "cook on": function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            var s = Skills.can_perform(b, a.id);
            s.status ? (Music.sound_effect("cook"), addChatText("You attempt to cook...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: a.id
            })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    access: function(element, node) {
        selected = obj_g(element);
        needsProximity(node, element, 1, !0) && hasClass(document.getElementById("chest"), "hidden") && (chest_item_id = !1, 
        chest_npc = element, "undefined" == typeof last_chest_access || 100 < timestamp() - last_chest_access) && (Socket.send("access_chest", {
            target_id: element.id
        }), last_chest_access = timestamp());
    },
    chop: function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            var s = Skills.can_perform(b, a.id);
            s.status ? (Music.sound_effect("woodcut"), addChatText("You attempt to cut down a tree...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: a.id
            })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    mine: function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            var s = Skills.can_perform(b, a.id);
            s.status ? (Music.sound_effect("mine"), addChatText("You attempt to mine the rock...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: a.id
            })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    dig: function(object, type) {
        selected = obj_g(object);
        if (needsProximity(type, object, 1, !0)) {
            var result = Skills.can_perform(type, object.id);
            result.status ? (Music.sound_effect("dig"), addChatText("You attempt to dig the sand...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: object.id
            })) : addChatText(result.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    attack: function(value, i) {
        selected = obj_g(value);
        if (players[0].temp.target_id != value.id) {
            if (Timers.running("set_target")) return !0;
            Socket.send("set_target", {
                target: value.id
            });
            Timers.set("set_target", null_function, 100);
        }
        needsProximity(i, value, 1, !0, !0);
        return !0;
    },
    "walk here": function(player) {
        selected = player;
        players[0].path = findPathFromTo(players[0], player, players[0]);
        return !0;
    },
    makeover: function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            if (Timers.running("makeover")) return;
            Makeover.last_npc_id = a.id;
            Socket.send("makeover_start", {
                target: a.id
            });
            Timers.set("makeover", null_function, 250);
        }
        return !0;
    },
    rake: function(a, item) {
        selected = obj_g(a);
        !players[0].temp.busy && needsProximity(item, a, 1, !0) && (Inventory.has_equipped(item, 767) ? (Music.sound_effect("rake"), 
        addChatText("You attempt to rake the soil...", null, COLOR.YELLOW, "attempt"), players[0].temp.busy = !0, 
        setTimeout(function() {
            players[0].temp.busy = !1;
        }, 1e3), Socket.send("farming", {
            sub: "rake",
            position: {
                i: a.i - 10,
                j: a.j - 10
            }
        })) : addChatText("I need a rake to do that.", null, COLOR.PINK, "cannot"));
        return !0;
    },
    seed: function(a, i) {
        selected = obj_g(a);
        if (!players[0].temp.busy && needsProximity(i, a, 1, !0)) {
            var h = Inventory.get_equipped_seed(i);
            h ? (addChatText("You attempt to plant a seed...", null, COLOR.YELLOW, "attempt"), 
            players[0].temp.busy = !0, setTimeout(function() {
                players[0].temp.busy = !1;
            }, 1e3), Socket.send("farming", {
                sub: "seed",
                position: {
                    i: a.i - 10,
                    j: a.j - 10
                },
                item_id: h.b_i
            })) : addChatText("I need a seed to do that.", null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    harvest: function(a, b) {
        selected = obj_g(a);
        if (!players[0].temp.busy && needsProximity(b, a, 1, !0)) {
            if (40 == players[0].temp.inventory.length) return addChatText("Your inventory is full.", null, COLOR.PINK, "cannot"), 
            !0;
            var q = a.base().params.duration - minutesPastDelta(a.params.secondstamp);
            0 >= q ? (addChatText("You attempt to harvest a plant...", null, COLOR.YELLOW, "attempt"), 
            players[0].temp.busy = !0, setTimeout(function() {
                players[0].temp.busy = !1;
            }, 2e3), Socket.send("farming", {
                sub: "harvest",
                position: {
                    i: a.i - 10,
                    j: a.j - 10
                }
            })) : addChatText("I need to wait " + q + " minute" + sOrNoS(q) + ".", null, COLOR.PINK, "cannot");
        }
        return !0;
    },
    "check loot": function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            if (Timers.running("check_loot")) return;
            Socket.send("pvp_get_loots", {
                target_id: a.id
            });
            loot_master_id = a.id;
            Timers.set("check_loot", null_function, 250);
        }
        return !0;
    },
    "access cabinet": function(a, b) {
        selected = obj_g(a);
        needsProximity(b, a, 1, !0) && (last_cabinet = a, Chest.cabinet_open());
    },
    "sleep in": function(dir, unit) {
        selected = obj_g(dir);
        needsProximity(unit, dir, 1, !0) && !unit.temp.busy && (skills[0].health.current < skills[0].health.level ? (unit.temp.busy = !0, 
        Timers.set("player_using_skill" + unit.id, function() {
            unit.temp.busy = !1;
        }, 2e3), addChatText("You sleep in a bed...", null, COLOR.YELLOW, "attempt"), Socket.send("carpentry", {
            sub: "sleep",
            i: dir.i,
            j: dir.j
        })) : addChatText("You are already fully healed", null, COLOR.PINK, "cannot"));
        return !0;
    },
    permissions: function(callback, dir) {
        selected = obj_g(callback);
        last_permissions = callback;
        Carpentry.permissions_open();
    },
    "access mailbox": function(a, b) {
        selected = obj_g(a);
        needsProximity(b, a, 1, !0) && (last_mailbox = a, Mailbox.request());
    }
}, last_cabinet = void 0;

function placeObject(obj, type) {
    for (var id = 1, x = obj.map || current_map; "undefined" != typeof objects_data[id]; ) id++;
    obj.id = id;
    obj.map = x;
    id = createObject(JSON.merge(object_base[type], obj));
    objects_data[obj.id] = id;
    on_map[x][obj.i][obj.j] = JSON.merge(obj_s(id), obj);
    updateObjectImage(objects_data[obj.id]);
    obj && obj.params && obj.params.pet_id && setTimeout(function() {
        Pet.client_init_breeding(obj.params.pet_id, {
            i: obj.i,
            j: obj.j
        });
    }, 1e3);
    type == Breeding.nest_id && Breeding.activate_pet_alert(obj);
    Timers.set("drawmap", function() {
        drawMap();
    }, 10);
}

function placeNPC(obj, id, d) {
    var y = 2e4, h = obj.map - 100;
    20 > h ? y += 1e3 * h : 20 <= h && (y = y + 2e4 + 5e3 * (h - 20));
    for (h = obj.map || current_map; "undefined" != typeof objects_data[y]; ) y++;
    obj.id = y;
    obj.map = h;
    id = createObject(JSON.merge(npc_base[id], obj));
    objects_data[obj.id] = id;
    d && (on_map[h][obj.i][obj.j] = JSON.merge(obj_s(id), obj), "undefined" == typeof iamserver && (node_graphs[obj.map].nodes[obj.i][obj.j].type = 0));
    return objects_data[obj.id];
}

function placeObjectDungeon(data, attr) {
    var offset = 2e4, x = data.map - 100;
    20 > x ? offset += 1e3 * x : 20 <= x && (offset = offset + 2e4 + 5e3 * (x - 20));
    x = data.map || current_map;
    for (300 == x && (offset = 1); "undefined" != typeof objects_data[offset]; ) offset++;
    data.id = offset;
    data.map = x;
    var offset = data.r, m = createObject(JSON.merge(object_base[attr], data));
    m.params.rotate = offset;
    m.img.x = BASE_TYPE[m.b_t][m.b_i].img.x + (offset || 0);
    objects_data[data.id] = m;
    on_map[x][data.i][data.j] = JSON.merge(obj_s(m), data);
    updateObjectImage(objects_data[data.id]);
    data.params && data.params.pet_id ? Pet.client_init_breeding(data.params.pet_id, {
        i: data.i,
        j: data.j
    }) : data.params && data.params.other_nest && (offset = 300 == x ? 10 : 0, on_map[x][data.params.other_nest.i + offset][data.params.other_nest.j + offset].params.other_nest = {
        i: data.i - offset,
        j: data.j - offset
    });
    attr == Breeding.nest_id && (Breeding.activate_pet_alert(data), x = document.getElementById("pet_nest_form"), 
    pet_nest && pet_nest.i == data.i && pet_nest.j == data.j && x && hasClass(document.getElementById("pet_nest_form"), "hidden") && Breeding.open_nest());
}

function needsProximity(item, b, node, s, styleSheet) {
    if (distance(item.i, item.j, b.i, b.j) <= node) return !0;
    if (s) if (styleSheet) {
        b = sortClosestTo({
            i: item.i,
            j: item.j
        }, [ {
            i: b.i - 1,
            j: b.j
        }, {
            i: b.i + 1,
            j: b.j
        }, {
            i: b.i,
            j: b.j - 1
        }, {
            i: b.i,
            j: b.j + 1
        } ]);
        for (var k in b) if (node = b[k], 0 != node_graphs[item.map].nodes[node.i][node.j].type && (item.path = findPathFromTo(item, node, item), 
        0 < item.path.length)) break;
    } else item.path = findPathFromTo(item, b, item);
    return !1;
}

var clay_ore_script = {
    desc: "Clay is used for jewelry. Requires level 1 mining.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 30,
            level: 0,
            base_chance: .4,
            next: !1,
            duration: 2e3,
            xp: 5
        } ]
    } ]
}, sand_ore_script = {
    desc: "Sand is used for alchemy. Requires level 1 mining. A small chance for a crystal.",
    results: [ {
        requires: [ 286 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 1300,
            level: 1,
            base_chance: .007,
            max_chance: .007,
            next: !0,
            duration: 2e3,
            xp: 8
        }, {
            id: 187,
            level: 1,
            base_chance: .35,
            next: !1,
            duration: 2e3,
            xp: 5
        } ]
    } ]
}, copper_ore_script = {
    desc: "Copper is used for forging. Requires level 1 mining.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 32,
            level: 1,
            base_chance: .3,
            next: !1,
            duration: 2e3,
            xp: 10
        } ]
    } ]
}, tin_ore_script = {
    desc: "Tin is used for forging. Requires level 1 mining.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 33,
            level: 1,
            base_chance: .3,
            next: !1,
            duration: 2e3,
            xp: 10
        } ]
    } ]
}, iron_ore_script = {
    desc: "Iron is used for forging. Requires level 25 mining. A small chance for an emerald.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 198,
            level: 25,
            base_chance: .005,
            max_chance: .005,
            next: !0,
            duration: 2e3,
            xp: 20
        }, {
            id: 31,
            level: 25,
            base_chance: .3,
            next: !1,
            duration: 2e3,
            xp: 20
        } ]
    } ]
}, coal_ore_script = {
    desc: "Coal is used for forging. Requires level 40 mining. A small chance for a ruby.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 196,
            level: 40,
            base_chance: .005,
            max_chance: .005,
            next: !0,
            duration: 2e3,
            xp: 35
        }, {
            id: 186,
            level: 40,
            base_chance: .3,
            next: !1,
            duration: 2e3,
            xp: 35
        } ]
    } ]
}, silver_ore_script = {
    desc: "Silver is used for jewelry. Requires level 25 mining. A small chance for a sapphire.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 200,
            level: 25,
            base_chance: .005,
            max_chance: .005,
            next: !0,
            duration: 2e3,
            xp: 25
        }, {
            id: 185,
            level: 25,
            base_chance: .25,
            next: !1,
            duration: 2e3,
            xp: 25
        } ]
    } ]
}, gold_ore_script = {
    desc: "Gold is used for jewelry. Requires level 45 mining. A small chance for a diamond.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 194,
            level: 45,
            base_chance: .0025,
            max_chance: .0025,
            next: !0,
            duration: 2e3,
            xp: 40
        }, {
            id: 184,
            level: 45,
            base_chance: .3,
            next: !1,
            duration: 2e3,
            xp: 40
        } ]
    } ]
}, white_gold_ore_script = {
    desc: "White gold is used for jewelry. Requires level 55 mining. A small chance for an amethyst.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 385,
            level: 55,
            base_chance: .0015,
            max_chance: .0015,
            next: !0,
            duration: 2e3,
            xp: 55
        }, {
            id: 484,
            level: 55,
            base_chance: .35,
            next: !1,
            duration: 2e3,
            xp: 50
        } ]
    } ]
}, azurite_ore_script = {
    desc: "Azurite is used for forging. Requires level 60 mining. A small chance for an opal.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 387,
            level: 60,
            base_chance: .0015,
            max_chance: .0015,
            next: !0,
            duration: 2e3,
            xp: 55
        }, {
            id: 383,
            level: 60,
            base_chance: .25,
            next: !1,
            duration: 2e3,
            xp: 55
        } ]
    } ]
}, platinum_ore_script = {
    desc: "Platinum is used for jewelry. Requires level 75 mining. A small chance for a jadeite.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 389,
            level: 75,
            base_chance: .0015,
            max_chance: .0015,
            next: !0,
            duration: 2e3,
            xp: 75
        }, {
            id: 373,
            level: 75,
            base_chance: .2,
            next: !1,
            duration: 2e3,
            xp: 75
        } ]
    } ]
}, fire_ore_script = {
    desc: "Fire ore is used for forging. Requires level 80 mining. A small chance for an opal.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 387,
            level: 80,
            base_chance: .002,
            max_chance: .002,
            next: !0,
            duration: 2e3,
            xp: 55
        }, {
            id: 657,
            level: 80,
            base_chance: .15,
            next: !1,
            duration: 2e3,
            xp: 85
        } ]
    } ]
}, dragon_ore_script = {
    desc: "Dragonstone ore is used for forging. Requires level 110 mining. A small chance for an opal.",
    results: [ {
        requires: [ 23 ],
        skill: "mining",
        continuous: !0,
        returns: [ {
            id: 1580,
            level: 110,
            base_chance: .0015,
            max_chance: .0015,
            next: !0,
            duration: 2e3,
            xp: 100
        }, {
            id: 1447,
            level: 110,
            base_chance: .15,
            next: !1,
            duration: 2e3,
            xp: 100
        } ]
    } ]
}, teleport_script = {
    use: function(f, ctx) {
        if (f.params && "undefined" != typeof f.params.requires_one_from) {
            for (var c = !1, i = 0; i < f.params.requires_one_from.length; i++) Inventory.has_equipped(ctx, f.params.requires_one_from[i]) && (c = !0, 
            i = 9999);
            if (!c) return addChatText("I need to wear something before I can enter", null, COLOR.PINK, "cannot"), 
            !1;
        }
        selected = obj_g(f);
        if (needsProximity(ctx, f, 1, !0)) {
            if (f.params && f.params.quest) {
                if (!PlayerQuests[f.params.quest].client(f)) return !1;
            } else if ("Ship" == f.name && 300 == current_map) return touch_hold_j = touch_hold_i = 0, 
            touch_hold = !1, Popup.input_prompt("Who would you like to visit?", Carpentry.travel_to, "player_datalist"), 
            !0;
            Player.pre_teleport(players[0], f);
        }
        return !0;
    }
};

object_base[0] = createObject({
    b_i: 0,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir tree",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: [ 1, 2, 3, 4, 5, 6 ],
        y: 1
    },
    params: {
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 29,
                level: 0,
                base_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 5
            } ]
        } ],
        desc: "Fir tree is used for carpentry and forging. Requires level 1 woodcutting."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[1] = createObject({
    b_i: 1,
    b_t: BASE_TYPE.OBJECT,
    name: "Stone",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 13,
        y: 2
    },
    params: {
        desc: "That is a nice boulder."
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

for (i = 2; 13 >= i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 2,
        y: 5
    }
}, 1);

object_base[14] = createObject({
    b_i: 14,
    b_t: BASE_TYPE.OBJECT,
    name: "Dead tree",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 12,
        y: 3
    },
    params: {
        status: !0,
        respawn: 60
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[17] = createObject({
    b_i: 17,
    b_t: BASE_TYPE.OBJECT,
    name: "Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 10,
        y: 14
    },
    params: {
        desc: "My items are safe in there. Can be used to access market that enables trading with other players."
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

for (i = 18; 28 >= i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 17,
        y: 8
    }
}, 1);

object_base[29] = createObject({
    b_i: 29,
    b_t: BASE_TYPE.OBJECT,
    name: "Ladder",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 4,
        y: 9
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[30] = createObject({
    b_i: 30,
    b_t: BASE_TYPE.OBJECT,
    name: "Ladder",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 9,
        y: 11
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[31] = createObject({
    b_i: 31,
    b_t: BASE_TYPE.OBJECT,
    name: "Copper",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 0,
        y: 4
    },
    params: copper_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[32] = createObject({
    b_i: 32,
    b_t: BASE_TYPE.OBJECT,
    name: "Clay",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 1,
        y: 4
    },
    params: clay_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[33] = createObject({
    b_i: 33,
    b_t: BASE_TYPE.OBJECT,
    name: "Iron",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 3,
        y: 4
    },
    params: iron_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[34] = createObject({
    b_i: 34,
    b_t: BASE_TYPE.OBJECT,
    name: "Tin",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 1,
        y: 12
    },
    params: tin_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[35] = createObject({
    b_i: 35,
    b_t: BASE_TYPE.OBJECT,
    name: "Furnace",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 0,
        y: 0
    },
    params: {
        desc: "Furnace enables me to smelt different materials into new ones.",
        results: [ {
            requires: [ 186, 31 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 291,
                level: 40,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 31,
                    count: 1
                }, {
                    id: 186,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 32, 33 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 34,
                level: 1,
                base_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 32,
                    count: 1
                }, {
                    id: 33,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 31 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 50,
                level: 20,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 31,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 383 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 384,
                level: 65,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 140,
                consumes: [ {
                    id: 383,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 657 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 658,
                level: 80,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 250,
                consumes: [ {
                    id: 657,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1447 ],
            skill: "forging",
            continuous: !0,
            returns: [ {
                id: 1448,
                level: 90,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 300,
                consumes: [ {
                    id: 1447,
                    count: 8
                } ]
            } ]
        }, {
            requires: [ 185 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 203,
                level: 10,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 185,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 184 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 202,
                level: 25,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 25,
                consumes: [ {
                    id: 184,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 373 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 372,
                level: 60,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 373,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 484 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 485,
                level: 40,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 55,
                consumes: [ {
                    id: 484,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 30, 33 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 293,
                level: 5,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 30,
                    count: 1
                }, {
                    id: 33,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 30 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 292,
                level: 1,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 9,
                consumes: [ {
                    id: 30,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 292, 50 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 294,
                level: 1,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 12,
                consumes: [ {
                    id: 292,
                    count: 1
                }, {
                    id: 50,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 293, 50 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 295,
                level: 5,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 15,
                consumes: [ {
                    id: 293,
                    count: 1
                }, {
                    id: 50,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 292, 203 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 302,
                level: 10,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 292,
                    count: 1
                }, {
                    id: 203,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 293, 203 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 303,
                level: 12,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 293,
                    count: 1
                }, {
                    id: 203,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 292, 202 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 24,
                level: 25,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 292,
                    count: 1
                }, {
                    id: 202,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 293, 202 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 28,
                level: 27,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 293,
                    count: 1
                }, {
                    id: 202,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 292, 372 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 374,
                level: 60,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 292,
                    count: 1
                }, {
                    id: 372,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 293, 372 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 379,
                level: 65,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 70,
                consumes: [ {
                    id: 293,
                    count: 1
                }, {
                    id: 372,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 292, 485 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 487,
                level: 40,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 45,
                consumes: [ {
                    id: 292,
                    count: 1
                }, {
                    id: 485,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 293, 485 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 488,
                level: 43,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 293,
                    count: 1
                }, {
                    id: 485,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 302, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 48,
                level: 10,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 302,
                    count: 1
                }, {
                    id: 201,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 302, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 803,
                level: 12,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 35,
                consumes: [ {
                    id: 302,
                    count: 1
                }, {
                    id: 199,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 302, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 804,
                level: 14,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 302,
                    count: 1
                }, {
                    id: 197,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 374, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 375,
                level: 60,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 90,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 201,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 374, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 376,
                level: 65,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 110,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 199,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 374, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 377,
                level: 70,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 130,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 197,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 374, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 378,
                level: 75,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 170,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 195,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 374, 386 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 811,
                level: 80,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 190,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 386,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 374, 390 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 812,
                level: 90,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 245,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 390,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 374, 388 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 391,
                level: 85,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 200,
                consumes: [ {
                    id: 374,
                    count: 1
                }, {
                    id: 388,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 303, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 49,
                level: 11,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 303,
                    count: 1
                }, {
                    id: 201,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 303, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 813,
                level: 15,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 303,
                    count: 1
                }, {
                    id: 197,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 303, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 814,
                level: 18,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 303,
                    count: 1
                }, {
                    id: 195,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 379, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 380,
                level: 65,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 130,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 201,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 379, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 382,
                level: 70,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 160,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 199,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 379, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 381,
                level: 75,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 190,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 197,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 379, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 395,
                level: 80,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 250,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 195,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 379, 390 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 392,
                level: 95,
                base_chance: .2,
                next: !1,
                duration: 2e3,
                xp: 330,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 390,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 379, 386 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 822,
                level: 85,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 280,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 386,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 379, 388 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 823,
                level: 90,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 320,
                consumes: [ {
                    id: 379,
                    count: 1
                }, {
                    id: 388,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 24, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 298,
                level: 28,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 45,
                consumes: [ {
                    id: 24,
                    count: 1
                }, {
                    id: 199,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 24, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 805,
                level: 25,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 24,
                    count: 1
                }, {
                    id: 201,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 24, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 806,
                level: 34,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 24,
                    count: 1
                }, {
                    id: 195,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 303, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 299,
                level: 13,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 45,
                consumes: [ {
                    id: 303,
                    count: 1
                }, {
                    id: 199,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 24, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 131,
                level: 31,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 24,
                    count: 1
                }, {
                    id: 197,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 28, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 130,
                level: 33,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 70,
                consumes: [ {
                    id: 28,
                    count: 1
                }, {
                    id: 197,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 28, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 815,
                level: 27,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 28,
                    count: 1
                }, {
                    id: 201,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 28, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 816,
                level: 30,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 28,
                    count: 1
                }, {
                    id: 199,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 302, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 300,
                level: 16,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 302,
                    count: 1
                }, {
                    id: 195,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 28, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 301,
                level: 36,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 80,
                consumes: [ {
                    id: 28,
                    count: 1
                }, {
                    id: 195,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 487, 386 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 486,
                level: 56,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 115,
                consumes: [ {
                    id: 487,
                    count: 1
                }, {
                    id: 386,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 487, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 807,
                level: 40,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 487,
                    count: 1
                }, {
                    id: 201,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 487, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 808,
                level: 44,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 75,
                consumes: [ {
                    id: 487,
                    count: 1
                }, {
                    id: 199,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 487, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 809,
                level: 48,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 85,
                consumes: [ {
                    id: 487,
                    count: 1
                }, {
                    id: 197,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 487, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 810,
                level: 52,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 105,
                consumes: [ {
                    id: 487,
                    count: 1
                }, {
                    id: 195,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 488, 386 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 489,
                level: 58,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 165,
                consumes: [ {
                    id: 488,
                    count: 1
                }, {
                    id: 386,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 488, 201 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 818,
                level: 42,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 90,
                consumes: [ {
                    id: 488,
                    count: 1
                }, {
                    id: 201,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 488, 199 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 819,
                level: 46,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 105,
                consumes: [ {
                    id: 488,
                    count: 1
                }, {
                    id: 199,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 488, 197 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 820,
                level: 50,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 120,
                consumes: [ {
                    id: 488,
                    count: 1
                }, {
                    id: 197,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 488, 195 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 821,
                level: 54,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 150,
                consumes: [ {
                    id: 488,
                    count: 1
                }, {
                    id: 195,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 187 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 248,
                level: 65,
                base_chance: .2,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 187,
                    count: 2
                } ]
            }, {
                id: 246,
                level: 50,
                base_chance: .2,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 187,
                    count: 2
                } ]
            }, {
                id: 247,
                level: 30,
                base_chance: .3,
                max_chance: .4,
                next: !0,
                duration: 2e3,
                xp: 15,
                consumes: [ {
                    id: 187,
                    count: 2
                } ]
            }, {
                id: 249,
                level: 1,
                base_chance: .3,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 187,
                    count: 2
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to smelt...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                }), Music.sound_effect("smelt")) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[36] = createObject({
    b_i: 36,
    b_t: BASE_TYPE.OBJECT,
    name: "Anvil",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 14
    },
    params: {
        desc: "Anvil enables me to make different items and enchant them."
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            selected = obj_g(a);
            needsProximity(item, a, 1, !0) && (Inventory.has_equipped(players[0], 36) ? (Forge.forge_open(), 
            windowOpen = !0) : addChatText("I think that I'm missing something.", null, COLOR.PINK, "cannot"));
            return !0;
        }
    }
}, 1);

object_base[37] = createObject({
    b_i: 37,
    b_t: BASE_TYPE.OBJECT,
    name: "Coal",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 2,
        y: 12
    },
    params: coal_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[38] = createObject({
    b_i: 38,
    b_t: BASE_TYPE.OBJECT,
    name: "Gold",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 4
    },
    params: gold_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[39] = createObject({
    b_i: 39,
    b_t: BASE_TYPE.OBJECT,
    name: "Silver",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 9,
        y: 4
    },
    params: silver_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[40] = createObject({
    b_i: 40,
    b_t: BASE_TYPE.OBJECT,
    name: "Sand",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 11,
        y: 4
    },
    params: sand_ore_script,
    activities: [ ACTIVITIES.DIG, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[41] = createObject({
    b_i: 41,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: [ 1, 2, 3, 4, 5, 6 ],
        y: 4
    },
    params: {
        desc: "Willow tree is used for carpentry and forging. Requires level 20 woodcutting.",
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 296,
                level: 20,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 18
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[42] = createObject({
    b_i: 42,
    b_t: BASE_TYPE.OBJECT,
    name: "Inventory",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: -1,
        y: -1
    },
    params: {
        results: [ {
            requires: [ 297, 200 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 201,
                level: 10,
                base_chance: .8,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 200,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 198 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 199,
                level: 12,
                base_chance: .7,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 198,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 1300 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 1301,
                level: 1,
                base_chance: .4,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 1300,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 196 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 197,
                level: 14,
                base_chance: .6,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 196,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 194 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 195,
                level: 16,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 194,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 385 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 386,
                level: 56,
                base_chance: .45,
                max_chance: .45,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 385,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 387 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 388,
                level: 85,
                base_chance: .4,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 80,
                consumes: [ {
                    id: 387,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 389 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 390,
                level: 90,
                base_chance: .35,
                max_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 120,
                consumes: [ {
                    id: 389,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 297, 1580 ],
            skill: "jewelry",
            continuous: !0,
            returns: [ {
                id: 1581,
                level: 100,
                base_chance: .2,
                max_chance: .2,
                next: !1,
                duration: 2e3,
                xp: 180,
                consumes: [ {
                    id: 1580,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 287, 220 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 304,
                level: 1,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 15,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 220,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 204 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 305,
                level: 2,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 18,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 204,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 264 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 306,
                level: 5,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 264,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 274 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 307,
                level: 7,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 22,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 274,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 227 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 308,
                level: 10,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 25,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 227,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 283 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 795,
                level: 13,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 27,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 283,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 235 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 309,
                level: 15,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 235,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 272 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1402,
                level: 17,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 272,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 287, 215 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 311,
                level: 20,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 33,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 215,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 271 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 796,
                level: 22,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 34,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 271,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 1421 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1406,
                level: 24,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 35,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 1421,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 287, 230 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 310,
                level: 25,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 36,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 230,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 287, 228 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 312,
                level: 30,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 287,
                    count: 1
                }, {
                    id: 228,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 288, 237 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 315,
                level: 35,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 45,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 237,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 236 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 316,
                level: 37,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 48,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 236,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 205 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 317,
                level: 39,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 205,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 1422 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1407,
                level: 40,
                base_chance: .4,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 51,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 1422,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 288, 238 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 318,
                level: 41,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 52,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 238,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 207 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 319,
                level: 42,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 55,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 207,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 212 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 320,
                level: 44,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 58,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 212,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 259 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 321,
                level: 45,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 259,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 242 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1403,
                level: 47,
                base_chance: .4,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 63,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 242,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 288, 276 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 401,
                level: 48,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 276,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 288, 369 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 322,
                level: 50,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 70,
                consumes: [ {
                    id: 288,
                    count: 1
                }, {
                    id: 369,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 289, 260 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 323,
                level: 50,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 70,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 260,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 206 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 324,
                level: 52,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 76,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 206,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 233 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 325,
                level: 54,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 79,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 233,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 1423 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1409,
                level: 55,
                base_chance: .4,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 82,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 1423,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 261 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 326,
                level: 56,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 84,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 261,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 269 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 327,
                level: 58,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 90,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 269,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 1425 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1413,
                level: 60,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 93,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 1425,
                    count: 1
                }, {
                    id: 210,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 289, 239 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 329,
                level: 61,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 95,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 239,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 275 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 328,
                level: 63,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 95,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 275,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 289, 240 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1404,
                level: 64,
                base_chance: .35,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 97,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 240,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 289, 1424 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1408,
                level: 65,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 98,
                consumes: [ {
                    id: 289,
                    count: 1
                }, {
                    id: 1424,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 285 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 330,
                level: 65,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 100,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 285,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 1433 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1410,
                level: 66,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 105,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1433,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 221 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 331,
                level: 67,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 110,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 221,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 284 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 332,
                level: 69,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 130,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 284,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 1434 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1411,
                level: 70,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 140,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1434,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 241 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 333,
                level: 71,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 150,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 241,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 243 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 334,
                level: 74,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 180,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 243,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 1426 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1414,
                level: 77,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 192,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1426,
                    count: 1
                }, {
                    id: 210,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 290, 222 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 335,
                level: 78,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 200,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 222,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 245 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 336,
                level: 80,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 220,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 245,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 1435 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1412,
                level: 81,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 280,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1435,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 267 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 337,
                level: 82,
                base_chance: .3,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 350,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 267,
                    count: 10
                } ]
            } ]
        }, {
            requires: [ 290, 229 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 338,
                level: 84,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 350,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 229,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 290, 244 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1405,
                level: 87,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 240,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 244,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 225 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 855,
                level: 88,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 200,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 225,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 1427 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1415,
                level: 90,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 260,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1427,
                    count: 1
                }, {
                    id: 217,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 1428 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1416,
                level: 100,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 300,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1428,
                    count: 1
                }, {
                    id: 217,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 290, 1429 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1417,
                level: 105,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 330,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1429,
                    count: 1
                }, {
                    id: 226,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 290, 1430 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1418,
                level: 110,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 350,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1430,
                    count: 1
                }, {
                    id: 226,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 290, 1431 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1419,
                level: 115,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 390,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1431,
                    count: 1
                }, {
                    id: 226,
                    count: 8
                } ]
            } ]
        }, {
            requires: [ 290, 1432 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 1420,
                level: 120,
                base_chance: .5,
                max_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 450,
                consumes: [ {
                    id: 290,
                    count: 1
                }, {
                    id: 1432,
                    count: 1
                }, {
                    id: 226,
                    count: 12
                } ]
            } ]
        }, {
            requires: [ 991, 265 ],
            skill: "magic",
            returns: [ {
                id: 448,
                level: 3,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 265,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 991, 266 ],
            skill: "magic",
            returns: [ {
                id: 449,
                level: 20,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 266,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 991, 1012 ],
            skill: "magic",
            returns: [ {
                id: 457,
                level: 37,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 100,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1012,
                    count: 4
                }, {
                    id: 254,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 991, 1014 ],
            skill: "magic",
            returns: [ {
                id: 450,
                level: 65,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 190,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1013,
                    count: 4
                }, {
                    id: 252,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 991, 1014 ],
            skill: "magic",
            returns: [ {
                id: 451,
                level: 85,
                base_chance: .4,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 260,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1014,
                    count: 4
                }, {
                    id: 255,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 991, 1601 ],
            skill: "magic",
            returns: [ {
                id: 1612,
                level: 110,
                base_chance: .25,
                max_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 320,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1601,
                    count: 4
                }, {
                    id: 256,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1084, 265 ],
            skill: "magic",
            returns: [ {
                id: 1069,
                level: 2,
                base_chance: .7,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 15,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 265,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1084, 266 ],
            skill: "magic",
            returns: [ {
                id: 1070,
                level: 17,
                base_chance: .7,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 266,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1084, 1012 ],
            skill: "magic",
            returns: [ {
                id: 1072,
                level: 35,
                base_chance: .7,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 82,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1012,
                    count: 4
                }, {
                    id: 254,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 1084, 1013 ],
            skill: "magic",
            returns: [ {
                id: 1074,
                level: 61,
                base_chance: .6,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 165,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1013,
                    count: 4
                }, {
                    id: 252,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 1084, 1014 ],
            skill: "magic",
            returns: [ {
                id: 1076,
                level: 80,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 210,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1014,
                    count: 4
                }, {
                    id: 255,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1084, 1601 ],
            skill: "magic",
            returns: [ {
                id: 1616,
                level: 110,
                base_chance: .25,
                max_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 320,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1601,
                    count: 4
                }, {
                    id: 256,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 988, 265 ],
            skill: "magic",
            returns: [ {
                id: 479,
                level: 5,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 30,
                consumes: [ {
                    id: 990,
                    count: 2
                }, {
                    id: 265,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 988, 266 ],
            skill: "magic",
            returns: [ {
                id: 480,
                level: 25,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 60,
                consumes: [ {
                    id: 990,
                    count: 2
                }, {
                    id: 266,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 988, 1012 ],
            skill: "magic",
            returns: [ {
                id: 481,
                level: 42,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 130,
                consumes: [ {
                    id: 990,
                    count: 2
                }, {
                    id: 1012,
                    count: 6
                }, {
                    id: 254,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 988, 1013 ],
            skill: "magic",
            returns: [ {
                id: 482,
                level: 70,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 240,
                consumes: [ {
                    id: 990,
                    count: 2
                }, {
                    id: 1013,
                    count: 6
                }, {
                    id: 252,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 988, 1014 ],
            skill: "magic",
            returns: [ {
                id: 483,
                level: 90,
                base_chance: .4,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 310,
                consumes: [ {
                    id: 990,
                    count: 2
                }, {
                    id: 1014,
                    count: 6
                }, {
                    id: 255,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 988, 1601 ],
            skill: "magic",
            returns: [ {
                id: 1608,
                level: 110,
                base_chance: .25,
                max_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 320,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1601,
                    count: 6
                }, {
                    id: 256,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 989, 265 ],
            skill: "magic",
            returns: [ {
                id: 452,
                level: 9,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 40,
                consumes: [ {
                    id: 990,
                    count: 3
                }, {
                    id: 265,
                    count: 8
                } ]
            } ]
        }, {
            requires: [ 989, 266 ],
            skill: "magic",
            returns: [ {
                id: 453,
                level: 30,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 80,
                consumes: [ {
                    id: 990,
                    count: 3
                }, {
                    id: 266,
                    count: 8
                } ]
            } ]
        }, {
            requires: [ 989, 1012 ],
            skill: "magic",
            returns: [ {
                id: 455,
                level: 47,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 160,
                consumes: [ {
                    id: 990,
                    count: 3
                }, {
                    id: 1012,
                    count: 8
                }, {
                    id: 254,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 989, 1013 ],
            skill: "magic",
            returns: [ {
                id: 456,
                level: 75,
                base_chance: .5,
                max_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 290,
                consumes: [ {
                    id: 990,
                    count: 3
                }, {
                    id: 1013,
                    count: 8
                }, {
                    id: 252,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 989, 1014 ],
            skill: "magic",
            returns: [ {
                id: 454,
                level: 95,
                base_chance: .4,
                max_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 360,
                consumes: [ {
                    id: 990,
                    count: 3
                }, {
                    id: 1014,
                    count: 8
                }, {
                    id: 255,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 989, 1601 ],
            skill: "magic",
            returns: [ {
                id: 1604,
                level: 110,
                base_chance: .25,
                max_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 400,
                consumes: [ {
                    id: 990,
                    count: 1
                }, {
                    id: 1601,
                    count: 8
                }, {
                    id: 256,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1016, 270 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 233,
                level: 15,
                base_chance: .55,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 270,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1016, 271 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 233,
                level: 22,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 12,
                consumes: [ {
                    id: 271,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1016, 272 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 233,
                level: 5,
                base_chance: .8,
                next: !1,
                duration: 2e3,
                xp: 8,
                consumes: [ {
                    id: 272,
                    count: 8
                } ]
            } ]
        }, {
            requires: [ 1016, 273 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 233,
                level: 35,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 273,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1016, 274 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 233,
                level: 7,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 274,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1016, 231 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 210,
                level: 30,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 25,
                consumes: [ {
                    id: 231,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1016, 216 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 217,
                level: 50,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 45,
                consumes: [ {
                    id: 216,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1016, 224 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 226,
                level: 70,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 65,
                consumes: [ {
                    id: 224,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1157, 1159 ],
            skill: "jewelry",
            returns: [ {
                id: 1153,
                level: 1,
                base_chance: .25,
                max_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 1e3,
                consumes: [ {
                    id: 1157,
                    count: 10
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[43] = createObject({
    b_i: 43,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: [ 1, 2, 3, 4, 5, 6 ],
        y: 2
    },
    params: {
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 313,
                level: 10,
                base_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 13
            } ]
        } ],
        desc: "Oak tree is used for carpentry and forging. Requires level 10 woodcutting."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[44] = createObject({
    b_i: 44,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 11,
        y: 3
    },
    params: {
        desc: "Cactus is used for carpentry. Requires level 5 woodcutting.",
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 314,
                level: 5,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 8
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[45] = createObject({
    b_i: 45,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir tree",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: [ 1, 2, 3, 4, 5, 6 ],
        y: 0
    },
    params: {
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 29,
                level: 0,
                base_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 5
            } ]
        } ],
        desc: "Fir tree is used for carpentry and forging. Requires level 1 woodcutting."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[46] = createObject({
    b_i: 46,
    b_t: BASE_TYPE.OBJECT,
    name: "Water Well",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 9,
        y: 14
    },
    params: {
        desc: "Water well is used to fill empty vials with water.",
        results: [ {
            requires: [ 249 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 287,
                level: 1,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 1,
                consumes: [ {
                    id: 249,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 247 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 288,
                level: 1,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 1,
                consumes: [ {
                    id: 247,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 246 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 289,
                level: 1,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 2,
                consumes: [ {
                    id: 246,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 248 ],
            skill: "alchemy",
            continuous: !0,
            returns: [ {
                id: 290,
                level: 1,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 2,
                consumes: [ {
                    id: 248,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (Music.sound_effect("make_potion"), addChatText("You attempt to fill with water...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

for (i = 47; 57 >= i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 44,
        y: 7
    }
}, 1);

object_base[57] = createObject({
    b_i: 57,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 0,
        y: 8
    }
}, 1);

for (i = 58; 67 >= i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 54,
        y: 10
    }
}, 1);

object_base[68] = createObject({
    b_i: 68,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 0,
        y: 11
    }
}, 1);

object_base[69] = createObject({
    b_i: 69,
    b_t: BASE_TYPE.OBJECT,
    name: "Traveller's sign",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 10,
        y: 13
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[70] = createObject({
    b_i: 70,
    b_t: BASE_TYPE.OBJECT,
    name: "Platinum",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 4,
        y: 4
    },
    params: platinum_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[71] = createObject({
    b_i: 71,
    b_t: BASE_TYPE.OBJECT,
    name: "Azurite",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 10,
        y: 4
    },
    params: azurite_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

for (i = 72; 82 > i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 71,
        y: 1
    }
}, 1);

for (i = 82; 93 > i; i++) object_base[i] = createObject({
    b_i: i,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i - 81,
        y: 2
    }
}, 1);

for (var __id = 93, i = 1; 8 > i; i++) for (var j = 0; 18 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: j,
        y: i
    }
}, 1), __id++;

object_base[127] = createObject({
    b_i: 127,
    b_t: BASE_TYPE.OBJECT,
    name: "Entrance",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 16,
        y: 2
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[199] = createObject({
    b_i: 199,
    b_t: BASE_TYPE.OBJECT,
    name: "Entrance",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 16,
        y: 6
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[200] = createObject({
    b_i: 200,
    b_t: BASE_TYPE.OBJECT,
    name: "Entrance",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 17,
        y: 6
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[202] = createObject({
    b_i: 202,
    b_t: BASE_TYPE.OBJECT,
    name: "Stairway",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 1,
        y: 7
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[203] = createObject({
    b_i: 203,
    b_t: BASE_TYPE.OBJECT,
    name: "White Gold",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 0,
        y: 5
    },
    params: white_gold_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[219] = createObject({
    b_i: 219,
    b_t: BASE_TYPE.OBJECT,
    name: "Gate",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 0,
        y: 9
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[220] = createObject({
    b_i: 220,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 0,
        y: 6
    },
    params: {
        results: [ {
            requires: [ 22 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 594,
                level: 35,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 23
            } ]
        } ],
        desc: "Maple tree is used for carpentry and forging. Requires level 35 woodcutting."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[221] = createObject({
    b_i: 221,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Tree",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 0,
        y: 3
    },
    params: {
        results: [ {
            requires: [ 152 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 595,
                level: 45,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 30
            } ]
        } ],
        desc: "Spirit tree is used for carpentry and forging. Requires level 45 woodcutting and a steel axe."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[222] = createObject({
    b_i: 222,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 9,
        y: 3
    },
    params: {
        results: [ {
            requires: [ 152 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 596,
                level: 55,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 45
            } ]
        } ],
        desc: "Blue palm tree is used for carpentry and forging. Requires level 55 woodcutting and a steel axe."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[223] = createObject({
    b_i: 223,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Oak",
    type: OBJECT_TYPE.TREE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: [ 1, 2, 3, 4, 5, 6 ],
        y: 3
    },
    params: {
        results: [ {
            requires: [ 152 ],
            skill: "woodcutting",
            continuous: !0,
            returns: [ {
                id: 597,
                level: 65,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 55
            } ]
        } ],
        desc: "Magic oak tree is used for carpentry and forging. Requires level 65 woodcutting and a steel axe."
    },
    activities: [ ACTIVITIES.CHOP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[224] = createObject({
    b_i: 224,
    b_t: BASE_TYPE.OBJECT,
    name: "Gate",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 1,
        y: 9
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[225] = createObject({
    b_i: 225,
    b_t: BASE_TYPE.OBJECT,
    name: "Fire Stone",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 5,
        y: 4
    },
    params: fire_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

__id = 226;

for (i = 5; 9 >= i; i++) for (j = 0; 12 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    }
}, 1), __id++;

object_base[286] = createObject({
    b_i: 286,
    b_t: BASE_TYPE.OBJECT,
    name: "Pyramid",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_PYRAMID,
        x: 0,
        y: 0
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[287] = createObject({
    b_i: 287,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 1
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[288] = createObject({
    b_i: 288,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 1
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[289] = createObject({
    b_i: 289,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 2
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[290] = createObject({
    b_i: 290,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 2
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[291] = createObject({
    b_i: 291,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 2
    },
    params: {
        img_rotates: 1,
        stores: 2
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[292] = createObject({
    b_i: 292,
    b_t: BASE_TYPE.OBJECT,
    name: "Fir Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 2
    },
    params: {
        img_rotates: 1,
        heals: 1
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[293] = createObject({
    b_i: 293,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 3
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[294] = createObject({
    b_i: 294,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 3
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[295] = createObject({
    b_i: 295,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 4
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[296] = createObject({
    b_i: 296,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 4
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[297] = createObject({
    b_i: 297,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 4
    },
    params: {
        img_rotates: 1,
        stores: 4
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[298] = createObject({
    b_i: 298,
    b_t: BASE_TYPE.OBJECT,
    name: "Cactus Wood Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 4
    },
    params: {
        img_rotates: 1,
        heals: 2
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[299] = createObject({
    b_i: 299,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 5
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[300] = createObject({
    b_i: 300,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 5
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[301] = createObject({
    b_i: 301,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 6
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[302] = createObject({
    b_i: 302,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 6
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[303] = createObject({
    b_i: 303,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 6
    },
    params: {
        img_rotates: 1,
        stores: 6
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[304] = createObject({
    b_i: 304,
    b_t: BASE_TYPE.OBJECT,
    name: "Oak Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 6
    },
    params: {
        img_rotates: 1,
        heals: 3
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[305] = createObject({
    b_i: 305,
    b_t: BASE_TYPE.OBJECT,
    name: "Fence",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 0
    },
    params: {
        img_rotates: 9
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[306] = createObject({
    b_i: 306,
    b_t: BASE_TYPE.OBJECT,
    name: "Green Leaf Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 9
    },
    params: {
        img_rotates: 3,
        duration: 3,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 220,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 5
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[307] = createObject({
    b_i: 307,
    b_t: BASE_TYPE.OBJECT,
    name: "Yellow Leaf Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 8
    },
    params: {
        img_rotates: 3,
        duration: 3,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 204,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 8
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[308] = createObject({
    b_i: 308,
    b_t: BASE_TYPE.OBJECT,
    name: "Grass",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 13
    },
    params: {
        img_rotates: 3,
        duration: 2,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 757,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 5
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[309] = createObject({
    b_i: 309,
    b_t: BASE_TYPE.OBJECT,
    name: "Hay",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 14
    },
    params: {
        img_rotates: 3,
        duration: 4,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 758,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 12
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[310] = createObject({
    b_i: 310,
    b_t: BASE_TYPE.OBJECT,
    name: "Wheat",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 15
    },
    params: {
        img_rotates: 3,
        duration: 6,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 760,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 15
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[311] = createObject({
    b_i: 311,
    b_t: BASE_TYPE.OBJECT,
    name: "Apple Tree",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 11
    },
    params: {
        img_rotates: 4,
        duration: 8,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 762,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 16
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[312] = createObject({
    b_i: 312,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 7
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[313] = createObject({
    b_i: 313,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 9
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[314] = createObject({
    b_i: 314,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 11
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[315] = createObject({
    b_i: 315,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 13
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[316] = createObject({
    b_i: 316,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Oak Chair",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 15
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[317] = createObject({
    b_i: 317,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Leaf Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 7
    },
    params: {
        img_rotates: 3,
        duration: 10,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 212,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 35
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[318] = createObject({
    b_i: 318,
    b_t: BASE_TYPE.OBJECT,
    name: "Aconitum Leafs",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 4
    },
    params: {
        img_rotates: 2,
        duration: 16,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 285,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 70
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[319] = createObject({
    b_i: 319,
    b_t: BASE_TYPE.OBJECT,
    name: "Blood Herbs",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 0
    },
    params: {
        img_rotates: 2,
        duration: 20,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 221,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 80
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[320] = createObject({
    b_i: 320,
    b_t: BASE_TYPE.OBJECT,
    name: "Beast Herbs",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 1
    },
    params: {
        img_rotates: 2,
        duration: 36,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 222,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 90
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[321] = createObject({
    b_i: 321,
    b_t: BASE_TYPE.OBJECT,
    name: "Oregano Leafs",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 3
    },
    params: {
        img_rotates: 2,
        duration: 12,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 284,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 30
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[322] = createObject({
    b_i: 322,
    b_t: BASE_TYPE.OBJECT,
    name: "Yarrow Leafs",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 5
    },
    params: {
        img_rotates: 2,
        duration: 10,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 283,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 24
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[323] = createObject({
    b_i: 323,
    b_t: BASE_TYPE.OBJECT,
    name: "Tomatoes",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 21
    },
    params: {
        img_rotates: 3,
        duration: 4,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 3,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 3
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[324] = createObject({
    b_i: 324,
    b_t: BASE_TYPE.OBJECT,
    name: "Potato Plant",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 17
    },
    params: {
        img_rotates: 3,
        duration: 9,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 780,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 20
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[325] = createObject({
    b_i: 325,
    b_t: BASE_TYPE.OBJECT,
    name: "Onion Plant",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 16
    },
    params: {
        img_rotates: 3,
        duration: 10,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 781,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 26
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[326] = createObject({
    b_i: 326,
    b_t: BASE_TYPE.OBJECT,
    name: "Banana Tree",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 10
    },
    params: {
        img_rotates: 4,
        duration: 15,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 782,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 32
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[327] = createObject({
    b_i: 327,
    b_t: BASE_TYPE.OBJECT,
    name: "Pineapple",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 12
    },
    params: {
        img_rotates: 3,
        duration: 18,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 783,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 38
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[328] = createObject({
    b_i: 328,
    b_t: BASE_TYPE.OBJECT,
    name: "Carrot",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 18
    },
    params: {
        img_rotates: 3,
        duration: 19,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 784,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 50
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[329] = createObject({
    b_i: 329,
    b_t: BASE_TYPE.OBJECT,
    name: "Corn",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 19
    },
    params: {
        img_rotates: 3,
        duration: 20,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 785,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 62
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[330] = createObject({
    b_i: 330,
    b_t: BASE_TYPE.OBJECT,
    name: "Strawberries",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 20
    },
    params: {
        img_rotates: 3,
        duration: 25,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 786,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 67
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[331] = createObject({
    b_i: 331,
    b_t: BASE_TYPE.OBJECT,
    name: "Old Leaves Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 6
    },
    params: {
        img_rotates: 3,
        duration: 12,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 228,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 35
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[332] = createObject({
    b_i: 332,
    name: "Soil",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 0,
        y: 14
    },
    activities: [ ACTIVITIES.RAKE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[333] = createObject({
    b_i: 333,
    name: "Raked Soil",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 1,
        y: 14
    },
    params: {
        carpentry_item_id: 753
    },
    activities: [ ACTIVITIES.SEED, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[334] = createObject({
    b_i: 334,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 7
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[335] = createObject({
    b_i: 335,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 8
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[336] = createObject({
    b_i: 336,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 8
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[337] = createObject({
    b_i: 337,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 8
    },
    params: {
        img_rotates: 1,
        stores: 8
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[338] = createObject({
    b_i: 338,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 9
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[339] = createObject({
    b_i: 339,
    b_t: BASE_TYPE.OBJECT,
    name: "Ship",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_PYRAMID,
        x: 0,
        y: 1
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[340] = createObject({
    b_i: 340,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 10
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[341] = createObject({
    b_i: 341,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 10
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[342] = createObject({
    b_i: 342,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 10
    },
    params: {
        img_rotates: 1,
        stores: 10
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[343] = createObject({
    b_i: 343,
    b_t: BASE_TYPE.OBJECT,
    name: "Maple Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 10
    },
    params: {
        img_rotates: 1,
        heals: 5
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[344] = createObject({
    b_i: 344,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 11
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[345] = createObject({
    b_i: 345,
    b_t: BASE_TYPE.OBJECT,
    name: "Ship",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_PYRAMID,
        x: 0,
        y: 2
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[346] = createObject({
    b_i: 346,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 12
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[347] = createObject({
    b_i: 347,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 12
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[348] = createObject({
    b_i: 348,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 12
    },
    params: {
        img_rotates: 1,
        stores: 12
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[349] = createObject({
    b_i: 349,
    b_t: BASE_TYPE.OBJECT,
    name: "Spirit Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 12
    },
    params: {
        img_rotates: 1,
        heals: 6
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[350] = createObject({
    b_i: 350,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 13
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[351] = createObject({
    b_i: 351,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Floor - OVERWRITE THIS!!!",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 13
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[352] = createObject({
    b_i: 352,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 14
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[353] = createObject({
    b_i: 353,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 14
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[354] = createObject({
    b_i: 354,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 14
    },
    params: {
        img_rotates: 1,
        stores: 14
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[355] = createObject({
    b_i: 355,
    b_t: BASE_TYPE.OBJECT,
    name: "Blue Palm Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 14
    },
    params: {
        img_rotates: 1,
        heals: 7
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[356] = createObject({
    b_i: 356,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Wall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 15
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[357] = createObject({
    b_i: 357,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Floor - OVERWRITE THIS!!!",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 15
    },
    params: {
        img_rotates: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[358] = createObject({
    b_i: 358,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Table",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 16
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[359] = createObject({
    b_i: 359,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Chest",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 2,
        y: 16
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[360] = createObject({
    b_i: 360,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Cabinet",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 4,
        y: 16
    },
    params: {
        img_rotates: 1,
        stores: 16
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access cabinet"]
    }
}, 1);

object_base[361] = createObject({
    b_i: 361,
    b_t: BASE_TYPE.OBJECT,
    name: "Magic Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 16
    },
    params: {
        img_rotates: 1,
        heals: 8
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[362] = createObject({
    b_i: 362,
    b_t: BASE_TYPE.OBJECT,
    name: "Willow Bed",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 6,
        y: 8
    },
    params: {
        img_rotates: 1,
        heals: 4
    },
    activities: [ ACTIVITIES.SLEEP, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

__id = 363;

for (i = 11; 11 >= i; i++) for (j = 0; 35 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    }
}, 1), __id++;

object_base[404] = createObject({
    b_i: 404,
    b_t: BASE_TYPE.OBJECT,
    name: "Copper Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 3,
        y: 12
    },
    params: copper_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[405] = createObject({
    b_i: 405,
    b_t: BASE_TYPE.OBJECT,
    name: "Copper Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 4,
        y: 12
    },
    params: copper_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[406] = createObject({
    b_i: 406,
    b_t: BASE_TYPE.OBJECT,
    name: "Copper Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 5,
        y: 12
    },
    params: copper_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[407] = createObject({
    b_i: 407,
    b_t: BASE_TYPE.OBJECT,
    name: "Iron Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 6,
        y: 12
    },
    params: iron_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[408] = createObject({
    b_i: 408,
    b_t: BASE_TYPE.OBJECT,
    name: "Iron Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 7,
        y: 12
    },
    params: iron_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[409] = createObject({
    b_i: 409,
    b_t: BASE_TYPE.OBJECT,
    name: "Iron Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 8,
        y: 12
    },
    params: iron_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[410] = createObject({
    b_i: 410,
    b_t: BASE_TYPE.OBJECT,
    name: "Silver Ore",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 9,
        y: 12
    },
    params: silver_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[411] = createObject({
    b_i: 411,
    b_t: BASE_TYPE.OBJECT,
    name: "Silver Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 10,
        y: 12
    },
    params: silver_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[412] = createObject({
    b_i: 412,
    b_t: BASE_TYPE.OBJECT,
    name: "Silver Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 11,
        y: 12
    },
    params: silver_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[413] = createObject({
    b_i: 413,
    b_t: BASE_TYPE.OBJECT,
    name: "Silver Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 12,
        y: 12
    },
    params: silver_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[414] = createObject({
    b_i: 414,
    b_t: BASE_TYPE.OBJECT,
    name: "Gold Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 13,
        y: 12
    },
    params: gold_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[415] = createObject({
    b_i: 415,
    b_t: BASE_TYPE.OBJECT,
    name: "Gold Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 14,
        y: 12
    },
    params: gold_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[416] = createObject({
    b_i: 416,
    b_t: BASE_TYPE.OBJECT,
    name: "Gold Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 15,
        y: 12
    },
    params: gold_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[417] = createObject({
    b_i: 417,
    b_t: BASE_TYPE.OBJECT,
    name: "Tin Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 16,
        y: 12
    },
    params: tin_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[418] = createObject({
    b_i: 418,
    b_t: BASE_TYPE.OBJECT,
    name: "Coal Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 17,
        y: 12
    },
    params: coal_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[419] = createObject({
    b_i: 419,
    b_t: BASE_TYPE.OBJECT,
    name: "Platinum Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 18,
        y: 12
    },
    params: platinum_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[420] = createObject({
    b_i: 420,
    b_t: BASE_TYPE.OBJECT,
    name: "Azure Vein",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 19,
        y: 12
    },
    params: azurite_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

__id = 421;

for (i = 12; 12 >= i; i++) for (j = 0; 3 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    }
}, 1), __id++;

__id = 424;

for (i = 12; 12 >= i; i++) for (j = 3; 8 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: j,
        y: i
    }
}, 1), __id++;

object_base[432] = createObject({
    b_i: 432,
    b_t: BASE_TYPE.OBJECT,
    name: "Air Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 5,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 265, 992 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 403,
                level: 13,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 2.5,
                consumes: [ {
                    id: 265,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 266, 998 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 408,
                level: 23,
                base_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 5,
                consumes: [ {
                    id: 266,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1012, 1003 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 413,
                level: 38,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 7.5,
                consumes: [ {
                    id: 1012,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1013, 1008 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 418,
                level: 60,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 7.5,
                consumes: [ {
                    id: 1013,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[433] = createObject({
    b_i: 433,
    b_t: BASE_TYPE.OBJECT,
    name: "Flash Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 3,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 265, 993 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 402,
                level: 10,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 2,
                consumes: [ {
                    id: 265,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 266, 997 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 407,
                level: 20,
                base_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 4.5,
                consumes: [ {
                    id: 266,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1012, 1002 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 412,
                level: 34,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 7,
                consumes: [ {
                    id: 1012,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1013, 1007 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 417,
                level: 55,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 7,
                consumes: [ {
                    id: 1013,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[434] = createObject({
    b_i: 434,
    b_t: BASE_TYPE.OBJECT,
    name: "Earth Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 2,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 265, 994 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 404,
                level: 15,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 3,
                consumes: [ {
                    id: 265,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 266, 1e3 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 410,
                level: 28,
                base_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 6,
                consumes: [ {
                    id: 266,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1012, 1004 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 414,
                level: 42,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 8,
                consumes: [ {
                    id: 1012,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1013, 1009 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 419,
                level: 65,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 10.5,
                consumes: [ {
                    id: 1013,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[435] = createObject({
    b_i: 435,
    b_t: BASE_TYPE.OBJECT,
    name: "Water Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 4,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 265, 995 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 405,
                level: 17,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 3.5,
                consumes: [ {
                    id: 265,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 266, 999 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 409,
                level: 26,
                base_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 5.5,
                consumes: [ {
                    id: 266,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1012, 1005 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 415,
                level: 46,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 8.5,
                consumes: [ {
                    id: 1012,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1013, 1010 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 420,
                level: 70,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 11,
                consumes: [ {
                    id: 1013,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[436] = createObject({
    b_i: 436,
    b_t: BASE_TYPE.OBJECT,
    name: "Fire Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 1,
        y: 0
    },
    params: {
        results: [ {
            desc: "I need a medallion and a fabric to use this place",
            requires: [ 265, 996 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 406,
                level: 19,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 4,
                consumes: [ {
                    id: 265,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 266, 1001 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 411,
                level: 30,
                base_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 6.5,
                consumes: [ {
                    id: 266,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1012, 1006 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 416,
                level: 50,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 9,
                consumes: [ {
                    id: 1012,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1013, 1011 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 421,
                level: 72,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 11.5,
                consumes: [ {
                    id: 1013,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[437] = createObject({
    b_i: 437,
    b_t: BASE_TYPE.OBJECT,
    name: "Dragon Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 2
    },
    params: {
        img_rotates: 2,
        duration: 60,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 229,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 170
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[438] = createObject({
    b_i: 438,
    b_t: BASE_TYPE.OBJECT,
    name: "Kettle",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 6,
        y: 14
    },
    params: {
        desc: "I can mix food in here",
        results: [ {
            requires: [ 10 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1017,
                level: 12,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 20,
                consumes: [ {
                    id: 10,
                    count: 1
                }, {
                    id: 780,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 78 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1018,
                level: 36,
                base_chance: .45,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 78,
                    count: 1
                }, {
                    id: 783,
                    count: 1
                }, {
                    id: 781,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 247 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1023,
                level: 37,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 26,
                consumes: [ {
                    id: 783,
                    count: 2
                }, {
                    id: 247,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 205 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1024,
                level: 7,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 10,
                consumes: [ {
                    id: 205,
                    count: 1
                }, {
                    id: 760,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 104 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1025,
                level: 67,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 180,
                consumes: [ {
                    id: 104,
                    count: 1
                }, {
                    id: 780,
                    count: 2
                }, {
                    id: 784,
                    count: 1
                }, {
                    id: 781,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 92 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1026,
                level: 49,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 115,
                consumes: [ {
                    id: 92,
                    count: 1
                }, {
                    id: 784,
                    count: 2
                }, {
                    id: 781,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 14 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1027,
                level: 30,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 48,
                consumes: [ {
                    id: 14,
                    count: 1
                }, {
                    id: 781,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 110 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1028,
                level: 71,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 180,
                consumes: [ {
                    id: 110,
                    count: 1
                }, {
                    id: 781,
                    count: 3
                }, {
                    id: 780,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 112 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1029,
                level: 74,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 200,
                consumes: [ {
                    id: 112,
                    count: 1
                }, {
                    id: 784,
                    count: 3
                }, {
                    id: 783,
                    count: 2
                } ]
            } ]
        }, {
            requires: [ 102 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1030,
                level: 63,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 185,
                consumes: [ {
                    id: 102,
                    count: 2
                }, {
                    id: 213,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1142 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1139,
                level: 1,
                base_chance: .3,
                max_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 0,
                consumes: [ {
                    id: 1142,
                    count: 1
                }, {
                    id: 1140,
                    count: 1
                }, {
                    id: 1141,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1378 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1379,
                level: 103,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 482,
                consumes: [ {
                    id: 1378,
                    count: 1
                }, {
                    id: 213,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 1378 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1380,
                level: 105,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 551,
                consumes: [ {
                    id: 1378,
                    count: 1
                }, {
                    id: 206,
                    count: 3
                } ]
            } ]
        }, {
            requires: [ 1381 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1382,
                level: 107,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 512,
                consumes: [ {
                    id: 1381,
                    count: 1
                }, {
                    id: 213,
                    count: 4
                } ]
            } ]
        }, {
            requires: [ 1386 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1387,
                level: 112,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 563,
                consumes: [ {
                    id: 1386,
                    count: 1
                }, {
                    id: 213,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 1386 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1388,
                level: 114,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 610,
                consumes: [ {
                    id: 1386,
                    count: 1
                }, {
                    id: 206,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 1386 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1389,
                level: 116,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 634,
                consumes: [ {
                    id: 1386,
                    count: 1
                }, {
                    id: 214,
                    count: 5
                } ]
            } ]
        }, {
            requires: [ 1392 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1393,
                level: 120,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 594,
                consumes: [ {
                    id: 1392,
                    count: 1
                }, {
                    id: 213,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1392 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1394,
                level: 120,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 662,
                consumes: [ {
                    id: 1392,
                    count: 1
                }, {
                    id: 206,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1392 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1395,
                level: 120,
                base_chance: .35,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 696,
                consumes: [ {
                    id: 1392,
                    count: 1
                }, {
                    id: 214,
                    count: 6
                } ]
            } ]
        }, {
            requires: [ 1438 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1439,
                level: 50,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 1438,
                    count: 1
                }, {
                    id: 201,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1438 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1440,
                level: 50,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 1438,
                    count: 1
                }, {
                    id: 199,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1438 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1441,
                level: 50,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 1438,
                    count: 1
                }, {
                    id: 197,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1438 ],
            skill: "cooking",
            continuous: !1,
            returns: [ {
                id: 1442,
                level: 50,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 1438,
                    count: 1
                }, {
                    id: 195,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to cook...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[439] = createObject({
    b_i: 439,
    b_t: BASE_TYPE.OBJECT,
    name: "Cotton",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 23
    },
    params: {
        img_rotates: 3,
        duration: 8,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 265,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 7.5
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[440] = createObject({
    b_i: 440,
    b_t: BASE_TYPE.OBJECT,
    name: "Bamboo",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 22
    },
    params: {
        img_rotates: 3,
        duration: 14,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 266,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 28
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[442] = createObject({
    b_i: 442,
    b_t: BASE_TYPE.OBJECT,
    name: "Treasure Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 3,
        y: 14
    },
    params: {
        desc: "Chest usually contains a key"
    },
    activities: [ ACTIVITIES.OPEN, ACTIVITIES.INSPECT ],
    fn: {
        open: function(e, method) {
            if (players[0].temp.busy) return !1;
            players[0].temp.busy = !0;
            setTimeout(function() {
                players[0].temp.busy = !1;
            }, 1e3);
            if (e.params && "undefined" != typeof e.params.contains_id && 0 < Inventory.get_item_count_include_pet(method, e.params.contains_id)) return addChatText("I already have one " + item_base[e.params.contains_id].name, null, COLOR.PINK, "exists"), 
            !1;
            needsProximity(method, e, 1, !0) && Player.open_treasure_chest(e.id);
            return !0;
        }
    }
}, 1);

var consumes_all_keys = [ {
    id: 1057,
    count: 1
}, {
    id: 1058,
    count: 1
}, {
    id: 1059,
    count: 1
} ], treasure_chest_script = {
    use: function(a, b) {
        selected = obj_g(a);
        if (needsProximity(b, a, 1, !0)) {
            var s = Skills.can_perform(b, a.id);
            s.status ? (addChatText("You attempt to open the chest...", null, COLOR.YELLOW, "attempt"), 
            Socket.send("use_skill", {
                target_id: a.id
            })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
        }
        return !0;
    }
};

object_base[443] = createObject({
    b_i: 443,
    b_t: BASE_TYPE.OBJECT,
    name: "Big Treasure Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 4,
        y: 14
    },
    params: {
        desc: "Chest usually contains a valuable item",
        results: [ {
            requires: [ 1057, 1058, 1059 ],
            skill: "health",
            continuous: !1,
            returns: [ {
                id: 360,
                level: 100,
                base_chance: .01,
                max_chance: .01,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 359,
                level: 100,
                base_chance: .01,
                max_chance: .01,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 476,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 375,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 126,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 371,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 363,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 445,
                level: 70,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 430,
                level: 70,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 354,
                level: 70,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1290,
                level: 70,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 612,
                level: 70,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 201,
                level: 50,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1307,
                level: 50,
                base_chance: .04,
                max_chance: .04,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 46,
                level: 50,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 337,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1062,
                level: 50,
                base_chance: .025,
                max_chance: .025,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 339,
                level: 50,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 935,
                level: 50,
                base_chance: .25,
                max_chance: .25,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 830,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 173,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1286,
                level: 30,
                base_chance: .08,
                max_chance: .08,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 177,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 805,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 368,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 299,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 254,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 200,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 198,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 64,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 176,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1031,
                level: 1,
                base_chance: 1,
                max_chance: 1,
                next: !0,
                consumes: consumes_all_keys
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: treasure_chest_script
}, 1);

object_base[444] = createObject({
    b_i: 444,
    b_t: BASE_TYPE.OBJECT,
    name: "Big Treasure Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 4,
        y: 14
    },
    params: {
        desc: "Chest usually contains a valuable item",
        results: [ {
            requires: [ 1057, 1058, 1059 ],
            skill: "health",
            continuous: !1,
            returns: [ {
                id: 668,
                level: 100,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 947,
                level: 100,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 364,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 982,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 951,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 702,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 669,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 664,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 498,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 677,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 138,
                level: 70,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 393,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1062,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 384,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1307,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1290,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 824,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 495,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 477,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 983,
                level: 30,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 128,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 190,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 195,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 196,
                level: 30,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 655,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 428,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 52,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 301,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 298,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 177,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 173,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1031,
                level: 1,
                base_chance: 1,
                max_chance: 1,
                next: !0,
                consumes: consumes_all_keys
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: treasure_chest_script
}, 1);

object_base[445] = createObject({
    b_i: 445,
    b_t: BASE_TYPE.OBJECT,
    name: "Big Treasure Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 4,
        y: 14
    },
    params: {
        desc: "Chest usually contains a valuable item",
        results: [ {
            requires: [ 1057, 1058, 1059 ],
            skill: "health",
            continuous: !1,
            returns: [ {
                id: 964,
                level: 100,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 842,
                level: 100,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 823,
                level: 100,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 699,
                level: 100,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 344,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 622,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 377,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 811,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 377,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 478,
                level: 90,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 952,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1308,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 179,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 175,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1277,
                level: 90,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 680,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 888,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1311,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1312,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 661,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 159,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 500,
                level: 70,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 911,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 498,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1290,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 496,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 495,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1307,
                level: 50,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 399,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 395,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 394,
                level: 50,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 387,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1062,
                level: 50,
                base_chance: .08,
                max_chance: .08,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 385,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 197,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 658,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 35,
                level: 1,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 178,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 174,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: consumes_all_keys
            }, {
                id: 1031,
                level: 1,
                base_chance: 1,
                max_chance: 1,
                next: !0,
                consumes: consumes_all_keys
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: treasure_chest_script
}, 1);

object_base[446] = createObject({
    b_i: 446,
    b_t: BASE_TYPE.OBJECT,
    name: "Food Chest",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 3,
        y: 14
    },
    params: {
        desc: "This chest smells like fish, but I need a lock pick to open it.",
        results: [ {
            requires: [ 1060 ],
            skill: "health",
            continuous: !1,
            returns: [ {
                id: 103,
                level: 100,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: []
            }, {
                id: 99,
                level: 80,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: []
            }, {
                id: 93,
                level: 50,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: []
            }, {
                id: 79,
                level: 2,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: []
            }, {
                id: 123,
                level: 1,
                base_chance: .01,
                max_chance: .01,
                next: !0,
                consumes: []
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: treasure_chest_script
}, 1);

__id = 447;

for (i = 13; 13 >= i; i++) for (j = 0; 15 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    }
}, 1), __id++;

object_base[462] = createObject({
    b_i: 462,
    b_t: BASE_TYPE.OBJECT,
    name: "Tombstone",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 0,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[463] = createObject({
    b_i: 463,
    b_t: BASE_TYPE.OBJECT,
    name: "Tombstone",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 1,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[464] = createObject({
    b_i: 464,
    b_t: BASE_TYPE.OBJECT,
    name: "Reaper Memorial",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 2,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[465] = createObject({
    b_i: 465,
    b_t: BASE_TYPE.OBJECT,
    name: "Gargoyle Statue",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 8,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[466] = createObject({
    b_i: 466,
    b_t: BASE_TYPE.OBJECT,
    name: "Gargoyle Statue",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 9,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[467] = createObject({
    b_i: 467,
    b_t: BASE_TYPE.OBJECT,
    name: "Gargoyle Statue",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 14,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[468] = createObject({
    b_i: 468,
    b_t: BASE_TYPE.OBJECT,
    name: "Small Tombstone",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 11,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[469] = createObject({
    b_i: 469,
    b_t: BASE_TYPE.OBJECT,
    name: "Small Tombstone",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 12,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[470] = createObject({
    b_i: 470,
    b_t: BASE_TYPE.OBJECT,
    name: "Small Tombstone",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 13,
        y: 13
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[471] = createObject({
    b_i: 471,
    b_t: BASE_TYPE.OBJECT,
    name: "Guild Crystal",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "crystal_1.png",
        w: 1,
        h: 1
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(element, node) {
            selected = obj_g(element);
            needsProximity(node, element, 1, !0) && !Timers.running("leave_guild") && (Socket.send("guild", {
                sub: "leave",
                target_id: element.id
            }), Timers.set("leave_guild", null_function, 200));
        }
    }
}, 1);

object_base[472] = createObject({
    b_i: 472,
    b_t: BASE_TYPE.OBJECT,
    name: "Shrine",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "shrine_1.png",
        w: 2,
        h: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[473] = createObject({
    b_i: 473,
    b_t: BASE_TYPE.OBJECT,
    name: "Hall",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "hall_1.png",
        w: 2,
        h: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[474] = createObject({
    b_i: 474,
    b_t: BASE_TYPE.OBJECT,
    name: "Mine",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "mine_1.png",
        w: 2,
        h: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[475] = createObject({
    b_i: 475,
    b_t: BASE_TYPE.OBJECT,
    name: "Barracks",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "barracks_1.png",
        w: 2,
        h: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[476] = createObject({
    b_i: 476,
    b_t: BASE_TYPE.OBJECT,
    name: "Hall 5",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "hall_5.png",
        w: 4,
        h: 2
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[477] = createObject({
    b_i: 477,
    b_t: BASE_TYPE.OBJECT,
    name: "Rose Bush",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 24
    },
    params: {
        img_rotates: 3,
        duration: 240,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 1157,
                level: 0,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 350
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[478] = createObject({
    b_i: 478,
    b_t: BASE_TYPE.OBJECT,
    name: "Flag of Estonia",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "estonian_flag.png",
        w: 1,
        h: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && (Music.play("estonia", !0), Popup.dialog("Estonia is the country where RPG MO was born. Many of the town names in this game are based on actual town names of Estonia.", function() {
                Popup.dialog("Dorpat is a historical name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Tartu','_blank')\">Tartu</span>. Narwa is a historical name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Narva','_blank')\">Narva</span>. Whiland comes from <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Viljandi','_blank')\">Viljandi</span> but is made up by the creator of RPG MO. Reval is a historical name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Tallinn','_blank')\">Tallinn</span>.", function() {
                    Popup.dialog("Rakblood comes from <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Rakvere','_blank')\">Rakvere</span> and is also a made up name. Fellin is a historical name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Viljandi','_blank')\">Viljandi</span>. Pernau is a historical name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Parnu','_blank')\">Pärnu</span>. Walco is a made up name for <span class=\"span_link\" onclick=\"window.open('http://en.wikipedia.org/wiki/Valga,_Estonia','_blank')\">Valga</span>", function() {
                        Popup.dialog("Estonian Independence Day is celebrated on 24th of February. Fun fact: Estonia and Finland share the same anthem melody.", function() {});
                    }, "biggest");
                }, "biggest");
            }, "biggest"));
        }
    }
}, 1);

object_base[479] = createObject({
    b_i: 479,
    name: "Breeding Nest",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 2,
        y: 14
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(msg, cls) {
            pet_nest = on_map[msg.map][msg.i][msg.j];
            Breeding.open_nest();
        }
    }
}, 1);

__id = 480;

for (i = 1; 1 >= i; i++) for (j = 0; 7 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    },
    blocking: !1
}, 1), __id++;

__id = 486;

for (i = 11; 11 >= i; i++) for (j = 10; 17 > j; j++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: j,
        y: i
    },
    blocking: !1
}, 1), __id++;

object_base[493] = createObject({
    b_i: 493,
    name: "Trivia Table",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 9,
        y: 2
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            needsProximity(item, a, 1, !0) && ("undefined" == typeof last_chest_access || 250 < timestamp() - last_chest_access) && (Minigames.trivia.request_client(), 
            last_chest_access = timestamp());
        }
    }
}, 1);

object_base[494] = createObject({
    b_i: 494,
    name: "Trivia Chair",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 5,
        y: 8
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            needsProximity(item, a, 1, !0) && ("undefined" == typeof last_chest_access || 250 < timestamp() - last_chest_access) && (Minigames.trivia.request_host(), 
            last_chest_access = timestamp());
        }
    }
}, 1);

object_base[495] = createObject({
    b_i: 495,
    name: "Arena Table",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 9,
        y: 2
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            needsProximity(item, a, 1, !0) && ("undefined" == typeof last_chest_access || 250 < timestamp() - last_chest_access) && (Minigames.arena.request_client(), 
            last_chest_access = timestamp());
        }
    }
}, 1);

object_base[496] = createObject({
    b_i: 496,
    name: "Arena Chair",
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 5,
        y: 8
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            needsProximity(item, a, 1, !0) && ("undefined" == typeof last_chest_access || 250 < timestamp() - last_chest_access) && (Minigames.arena.request_host(), 
            last_chest_access = timestamp());
        }
    }
}, 1);

object_base[497] = createObject({
    b_i: 497,
    b_t: BASE_TYPE.OBJECT,
    name: "Gate",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 17
    },
    img_0: {
        pos: {
            _x: -6,
            _y: 0
        }
    },
    img_1: {
        pos: {
            _x: 6,
            _y: 0
        }
    },
    params: {
        img_rotates: 3
    },
    activities: [ ACTIVITIES.INSPECT, ACTIVITIES.PERMISSIONS ],
    fn: {}
}, 1);

__id = 498;

for (i = 0; 18 >= i; i++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: i,
        y: 15
    },
    blocking: !0
}, 1), __id++;

object_base[517] = createObject({
    b_i: 517,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: "guild_buildings.png",
        x: 0,
        y: 0,
        sheet_file: "guild_buildings.png",
        file: "graveyard_candle.png",
        w: 1,
        h: 1
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[518] = createObject({
    b_i: 518,
    b_t: BASE_TYPE.OBJECT,
    name: "Tossa jute",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 25
    },
    params: {
        img_rotates: 3,
        duration: 60,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 1013,
                level: 85,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 190
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[519] = createObject({
    b_i: 519,
    b_t: BASE_TYPE.OBJECT,
    name: "Tree of Silk Worms",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 26
    },
    params: {
        img_rotates: 4,
        duration: 70,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 1014,
                level: 95,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 240
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[520] = createObject({
    b_i: 520,
    b_t: BASE_TYPE.OBJECT,
    name: "Mailbox",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 0,
        y: 18
    },
    params: {
        img_rotates: 1
    },
    activities: [ ACTIVITIES.ACCESS, ACTIVITIES.INSPECT ],
    fn: {
        access: DEFAULT_FUNCTIONS["access mailbox"]
    }
}, 1);

object_base[521] = createObject({
    b_i: 521,
    b_t: BASE_TYPE.OBJECT,
    name: "Illusion Gate",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 15
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[522] = createObject({
    b_i: 522,
    b_t: BASE_TYPE.OBJECT,
    name: "Cathedral",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.CATHEDRAL,
        x: 0,
        y: 0
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, item) {
            needsProximity(item, a, 1, !0) && ("undefined" == typeof last_chest_access || 250 < timestamp() - last_chest_access) && (Cathedral.show_menu(), 
            last_chest_access = timestamp());
        }
    }
}, 1);

object_base[523] = createObject({
    b_i: 523,
    b_t: BASE_TYPE.OBJECT,
    name: "Traitor",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 2,
        y: 4
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[524] = createObject({
    b_i: 524,
    b_t: BASE_TYPE.OBJECT,
    name: "Poisoned Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 7,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 1014, 1362 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 458,
                level: 75,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 12,
                consumes: [ {
                    id: 1014,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[525] = createObject({
    b_i: 525,
    b_t: BASE_TYPE.OBJECT,
    name: "Blizzard Altar",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BIG_STUFF,
        x: 6,
        y: 0
    },
    params: {
        desc: "I need a medallion and a fabric to use this place",
        results: [ {
            requires: [ 1014, 1363 ],
            skill: "magic",
            continuous: !0,
            returns: [ {
                id: 459,
                level: 79,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 12.5,
                consumes: [ {
                    id: 1014,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: {
        use: function(a, b) {
            selected = obj_g(a);
            if (needsProximity(b, a, 1, !0)) {
                var s = Skills.can_perform(b, a.id);
                s.status ? (addChatText("You attempt to imbue...", null, COLOR.YELLOW, "attempt"), 
                Socket.send("use_skill", {
                    target_id: a.id
                })) : addChatText(s.reason, null, COLOR.PINK, "cannot");
            }
            return !0;
        }
    }
}, 1);

object_base[526] = createObject({
    b_i: 526,
    b_t: BASE_TYPE.OBJECT,
    name: "Flannel Tree",
    type: OBJECT_TYPE.FARMING,
    img: {
        sheet: IMAGE_SHEET.FARMING_PRO,
        x: 0,
        y: 27
    },
    params: {
        img_rotates: 3,
        duration: 25,
        results: [ {
            requires: [],
            skill: "farming",
            continuous: !1,
            returns: [ {
                id: 1012,
                level: 66,
                base_chance: 1,
                next: !1,
                duration: 2e3,
                xp: 75
            } ]
        } ]
    },
    activities: [ ACTIVITIES.HARVEST, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[527] = createObject({
    b_i: 527,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: IMAGES.EMPTY
}, 1);

__id = 528;

for (i = 0; 9 >= i; i++) object_base[__id] = createObject({
    b_i: __id,
    b_t: BASE_TYPE.OBJECT,
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD3,
        x: i,
        y: 0
    },
    blocking: !0
}, 1), __id++;

object_base[540] = createObject({
    b_i: 540,
    b_t: BASE_TYPE.OBJECT,
    name: "Jail Gate",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 10,
        y: 1
    },
    activities: [ ACTIVITIES.USE, ACTIVITIES.INSPECT ],
    fn: teleport_script
}, 1);

object_base[541] = createObject({
    b_i: 541,
    b_t: BASE_TYPE.OBJECT,
    name: "Dragonstone",
    type: OBJECT_TYPE.STONE,
    img: {
        sheet: IMAGE_SHEET.POTS_CRATES,
        x: 20,
        y: 12
    },
    params: dragon_ore_script,
    activities: [ ACTIVITIES.MINE, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

ground_base[0] = createObject({
    b_i: 0,
    name: "Grass",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[1] = createObject({
    b_i: 1,
    name: "Water",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[2] = createObject({
    b_i: 2,
    name: "Dirt",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[3] = createObject({
    b_i: 3,
    name: "Sand",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[4] = createObject({
    b_i: 4,
    name: "Cave 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[5] = createObject({
    b_i: 5,
    name: "Cave 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[6] = createObject({
    b_i: 6,
    name: "Cave Dark",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 11
    },
    blocking: !0
}, 1);

ground_base[7] = createObject({
    b_i: 7,
    name: "Ice 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[8] = createObject({
    b_i: 8,
    name: "Cave Sand",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[9] = createObject({
    b_i: 9,
    name: "Cave Grass",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[10] = createObject({
    b_i: 10,
    name: "Forest Grass",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[11] = createObject({
    b_i: 11,
    name: "Cave shore",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[12] = createObject({
    b_i: 12,
    name: "Lava",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[13] = createObject({
    b_i: 13,
    name: "Sand 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[14] = createObject({
    b_i: 14,
    name: "Underground",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[15] = createObject({
    b_i: 15,
    name: "Ice 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[16] = createObject({
    b_i: 16,
    name: "Rock",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[17] = createObject({
    b_i: 17,
    name: "Gray Rock",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[18] = createObject({
    b_i: 18,
    name: "Ice 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[19] = createObject({
    b_i: 19,
    name: "Snow",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[20] = createObject({
    b_i: 20,
    name: "Blood floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[21] = createObject({
    b_i: 21,
    name: "Dirt4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[22] = createObject({
    b_i: 22,
    name: "Blood Sand",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[23] = createObject({
    b_i: 23,
    name: "Blood River",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 17
    },
    blocking: !0
}, 1);

for (i = 0; 13 > i; i++) ground_base[24 + i] = createObject({
    b_i: 24 + i,
    name: "Blood Sand Top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 7
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.FIRST,
        x: i,
        y: 0
    }
}, 1);

ground_base[37] = createObject({
    b_i: 37,
    name: "Blood Sand Top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 7
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.FIRST,
        x: 0,
        y: 1
    }
}, 1);

ground_base[38] = createObject({
    b_i: 38,
    name: "Cloud 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 16
    },
    blocking: !1
}, 1);

for (i = 0; 18 > i; i++) ground_base[39 + i] = createObject({
    b_i: 39 + i,
    name: "Air Top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 8
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: i,
        y: 0
    }
}, 1);

ground_base[57] = createObject({
    b_i: 57,
    name: "Cloud",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 16
    },
    blocking: !1
}, 1);

ground_base[58] = createObject({
    b_i: 58,
    name: "Cloud block",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 19
    },
    blocking: !0
}, 1);

for (i = 0; 3 > i; i++) ground_base[59 + i] = createObject({
    b_i: 59 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: i,
        y: 12
    }
}, 1);

ground_base[62] = createObject({
    b_i: 62,
    name: "Grass 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[63] = createObject({
    b_i: 63,
    name: "Grass 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[64] = createObject({
    b_i: 64,
    name: "Grass 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[65] = createObject({
    b_i: 65,
    name: "Grass 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[66] = createObject({
    b_i: 66,
    name: "Grass 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[67] = createObject({
    b_i: 67,
    name: "Grass 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[68] = createObject({
    b_i: 68,
    name: "Grass 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[69] = createObject({
    b_i: 69,
    name: "Grass 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 0
    },
    blocking: !1
}, 1);

ground_base[70] = createObject({
    b_i: 70,
    name: "Spring",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[71] = createObject({
    b_i: 71,
    name: "Spring 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[72] = createObject({
    b_i: 72,
    name: "Spring 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[73] = createObject({
    b_i: 73,
    name: "Spring 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[74] = createObject({
    b_i: 74,
    name: "Spring 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[75] = createObject({
    b_i: 75,
    name: "Spring 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[76] = createObject({
    b_i: 76,
    name: "Spring 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[77] = createObject({
    b_i: 77,
    name: "Spring 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 1
    },
    blocking: !1
}, 1);

ground_base[78] = createObject({
    b_i: 78,
    name: "Forest 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[79] = createObject({
    b_i: 79,
    name: "Forest 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[80] = createObject({
    b_i: 80,
    name: "Forest 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[81] = createObject({
    b_i: 81,
    name: "Forest 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[82] = createObject({
    b_i: 82,
    name: "Forest 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[83] = createObject({
    b_i: 83,
    name: "Forest 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[84] = createObject({
    b_i: 84,
    name: "Forest 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 2
    },
    blocking: !1
}, 1);

ground_base[85] = createObject({
    b_i: 85,
    name: "Purple",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[86] = createObject({
    b_i: 86,
    name: "Purple 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[87] = createObject({
    b_i: 87,
    name: "Purple 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[88] = createObject({
    b_i: 88,
    name: "Purple 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[89] = createObject({
    b_i: 89,
    name: "Purple 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[90] = createObject({
    b_i: 90,
    name: "Purple 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[91] = createObject({
    b_i: 91,
    name: "Purple 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[92] = createObject({
    b_i: 92,
    name: "Purple 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 3
    },
    blocking: !1
}, 1);

ground_base[93] = createObject({
    b_i: 93,
    name: "Sand 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[94] = createObject({
    b_i: 94,
    name: "Sand 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[95] = createObject({
    b_i: 95,
    name: "Sand 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[96] = createObject({
    b_i: 96,
    name: "Sand 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[97] = createObject({
    b_i: 97,
    name: "Sand 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[98] = createObject({
    b_i: 98,
    name: "Dirt 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[99] = createObject({
    b_i: 99,
    name: "Dirt 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[100] = createObject({
    b_i: 100,
    name: "Dirt 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[101] = createObject({
    b_i: 101,
    name: "Dirt 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[102] = createObject({
    b_i: 102,
    name: "Dirt 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[103] = createObject({
    b_i: 103,
    name: "Stone 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[104] = createObject({
    b_i: 104,
    name: "Stone 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[105] = createObject({
    b_i: 105,
    name: "Stone 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[106] = createObject({
    b_i: 106,
    name: "Stone 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[107] = createObject({
    b_i: 107,
    name: "Stone 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[108] = createObject({
    b_i: 108,
    name: "Stone 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[109] = createObject({
    b_i: 109,
    name: "Hell 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[110] = createObject({
    b_i: 110,
    name: "Hell 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[111] = createObject({
    b_i: 111,
    name: "Hell 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[112] = createObject({
    b_i: 112,
    name: "Hell 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[113] = createObject({
    b_i: 113,
    name: "Hell 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[114] = createObject({
    b_i: 114,
    name: "Hell 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 7
    },
    blocking: !1
}, 1);

ground_base[115] = createObject({
    b_i: 115,
    name: "ice 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[116] = createObject({
    b_i: 116,
    name: "ice 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[117] = createObject({
    b_i: 117,
    name: "ice 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[118] = createObject({
    b_i: 118,
    name: "ice 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[119] = createObject({
    b_i: 119,
    name: "ice 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 8
    },
    blocking: !1
}, 1);

ground_base[120] = createObject({
    b_i: 120,
    name: "New Snow",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[121] = createObject({
    b_i: 121,
    name: "New Snow 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[122] = createObject({
    b_i: 122,
    name: "New Snow 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[123] = createObject({
    b_i: 123,
    name: "New Snow 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[124] = createObject({
    b_i: 124,
    name: "New Snow 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[125] = createObject({
    b_i: 125,
    name: "New Snow 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[126] = createObject({
    b_i: 126,
    name: "New Snow 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[127] = createObject({
    b_i: 127,
    name: "New Snow 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 9
    },
    blocking: !1
}, 1);

ground_base[128] = createObject({
    b_i: 128,
    name: "New Snow 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[129] = createObject({
    b_i: 129,
    name: "New Snow 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[130] = createObject({
    b_i: 130,
    name: "New Snow 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[131] = createObject({
    b_i: 131,
    name: "New Snow 11",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[132] = createObject({
    b_i: 132,
    name: "New Snow 12",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[133] = createObject({
    b_i: 133,
    name: "New Snow 13",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[134] = createObject({
    b_i: 134,
    name: "New Snow 14",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 10
    },
    blocking: !1
}, 1);

ground_base[135] = createObject({
    b_i: 135,
    name: "Stone Path",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[136] = createObject({
    b_i: 136,
    name: "Stone Path 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[137] = createObject({
    b_i: 137,
    name: "Stone Path 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[138] = createObject({
    b_i: 138,
    name: "Stone Path 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[139] = createObject({
    b_i: 139,
    name: "Stone Path 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[140] = createObject({
    b_i: 140,
    name: "Stone Path 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 11
    },
    blocking: !1
}, 1);

ground_base[141] = createObject({
    b_i: 141,
    name: "Stone Path 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 12
    },
    blocking: !1
}, 1);

ground_base[142] = createObject({
    b_i: 142,
    name: "Stone Path 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 12
    },
    blocking: !1
}, 1);

ground_base[143] = createObject({
    b_i: 143,
    name: "Stone Path 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 12
    },
    blocking: !1
}, 1);

ground_base[144] = createObject({
    b_i: 144,
    name: "Stone Path 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 12
    },
    blocking: !1
}, 1);

ground_base[145] = createObject({
    b_i: 145,
    name: "Stone Path 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 12
    },
    blocking: !1
}, 1);

for (i = 0; 13 > i; i++) ground_base[145 + i] = createObject({
    b_i: 145 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 10
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 0
    }
}, 1);

for (i = 0; 4 > i; i++) ground_base[157 + i] = createObject({
    b_i: 157 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 4
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 4
    }
}, 1);

for (i = 0; 10 > i; i++) ground_base[160 + i] = createObject({
    b_i: 160 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 10
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 1
    }
}, 1);

for (i = 0; 13 > i; i++) ground_base[169 + i] = createObject({
    b_i: 169 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 2
    }
}, 1);

for (i = 0; 10 > i; i++) ground_base[181 + i] = createObject({
    b_i: 181 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 3
    }
}, 1);

for (i = 0; 13 > i; i++) ground_base[190 + i] = createObject({
    b_i: 190 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 8
    }
}, 1);

for (i = 0; 13 > i; i++) ground_base[202 + i] = createObject({
    b_i: 202 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 1
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 9
    }
}, 1);

for (i = 0; 13 > i; i++) ground_base[214 + i] = createObject({
    b_i: 214 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 2
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 10
    }
}, 1);

for (i = 0; 13 > i; i++) ground_base[226 + i] = createObject({
    b_i: 226 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 3
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 11
    }
}, 1);

for (i = 0; 8 > i; i++) ground_base[238 + i] = createObject({
    b_i: 238 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 18
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 4
    }
}, 1);

for (i = 0; 8 > i; i++) ground_base[245 + i] = createObject({
    b_i: 245 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 18
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 5
    }
}, 1);

ground_base[253] = createObject({
    b_i: 253,
    name: "dry 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[254] = createObject({
    b_i: 254,
    name: "dry 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[255] = createObject({
    b_i: 255,
    name: "dry 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[256] = createObject({
    b_i: 256,
    name: "dry 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[257] = createObject({
    b_i: 257,
    name: "dry 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[258] = createObject({
    b_i: 258,
    name: "dry 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[259] = createObject({
    b_i: 259,
    name: "white",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[260] = createObject({
    b_i: 260,
    name: "white 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[261] = createObject({
    b_i: 261,
    name: "white 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[262] = createObject({
    b_i: 262,
    name: "white 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[263] = createObject({
    b_i: 263,
    name: "white 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[264] = createObject({
    b_i: 264,
    name: "white 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 20
    },
    blocking: !1
}, 1);

ground_base[265] = createObject({
    b_i: 265,
    name: "Dry block",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[266] = createObject({
    b_i: 266,
    name: "Dry block 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 1,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[267] = createObject({
    b_i: 267,
    name: "Dry block 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 2,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[268] = createObject({
    b_i: 268,
    name: "Dry block 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 3,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[269] = createObject({
    b_i: 269,
    name: "Dry block 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 4,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[270] = createObject({
    b_i: 270,
    name: "Dry block 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 5,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[271] = createObject({
    b_i: 271,
    name: "white 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 21
    },
    blocking: !1
}, 1);

ground_base[272] = createObject({
    b_i: 272,
    name: "white 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 21
    },
    blocking: !1
}, 1);

ground_base[273] = createObject({
    b_i: 273,
    name: "white 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 21
    },
    blocking: !1
}, 1);

ground_base[271] = createObject({
    b_i: 271,
    name: "white 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 21
    },
    blocking: !1
}, 1);

ground_base[272] = createObject({
    b_i: 272,
    name: "white 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[273] = createObject({
    b_i: 273,
    name: "white 11",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[274] = createObject({
    b_i: 274,
    name: "white 12",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 21
    },
    blocking: !0
}, 1);

ground_base[275] = createObject({
    b_i: 275,
    name: "white 13",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 20
    },
    blocking: !0
}, 1);

ground_base[276] = createObject({
    b_i: 276,
    name: "Brown",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[277] = createObject({
    b_i: 277,
    name: "Brown 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[278] = createObject({
    b_i: 278,
    name: "Brown 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[279] = createObject({
    b_i: 279,
    name: "Brown 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[280] = createObject({
    b_i: 280,
    name: "Brown 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[281] = createObject({
    b_i: 281,
    name: "Brown 6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 18
    },
    blocking: !1
}, 1);

ground_base[282] = createObject({
    b_i: 282,
    name: "Brown 7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 6,
        y: 19
    },
    blocking: !1
}, 1);

ground_base[283] = createObject({
    b_i: 283,
    name: "Brown 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 7,
        y: 19
    },
    blocking: !1
}, 1);

ground_base[284] = createObject({
    b_i: 284,
    name: "Brown 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 19
    },
    blocking: !1
}, 1);

ground_base[285] = createObject({
    b_i: 285,
    name: "Brown 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 19
    },
    blocking: !1
}, 1);

ground_base[286] = createObject({
    b_i: 286,
    name: "Wood",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 19
    },
    blocking: !1
}, 1);

for (i = 0; 6 > i; i++) ground_base[287 + i] = createObject({
    b_i: 287 + i,
    name: "Ground top",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 4
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.NEWLAND_TOPS,
        x: i,
        y: 12
    }
}, 1);

ground_base[293] = createObject({
    b_i: 293,
    name: "Desert 1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[294] = createObject({
    b_i: 294,
    name: "Desert 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[295] = createObject({
    b_i: 295,
    name: "Desert 3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[296] = createObject({
    b_i: 296,
    name: "Desert 4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[297] = createObject({
    b_i: 297,
    name: "Desert 5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 4
    },
    blocking: !1
}, 1);

ground_base[298] = createObject({
    b_i: 298,
    name: "Wood 2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 19
    },
    blocking: !1
}, 1);

ground_base[299] = createObject({
    b_i: 299,
    name: "CARPENTRY - Wooden Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 1
    }
}, 1);

ground_base[300] = createObject({
    b_i: 300,
    name: "CARPENTRY - Cactus Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 3
    }
}, 1);

ground_base[301] = createObject({
    b_i: 301,
    name: "CARPENTRY - Oak Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 5
    }
}, 1);

ground_base[302] = createObject({
    b_i: 302,
    name: "Cave Water",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 15
    },
    blocking: !0
}, 1);

ground_base[303] = createObject({
    b_i: 303,
    name: "Mid Water",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 14
    },
    blocking: !0
}, 1);

ground_base[304] = createObject({
    b_i: 304,
    name: "Farming tile(do not use)",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    top: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 1,
        y: 14
    },
    blocking: !0
}, 1);

ground_base[305] = createObject({
    b_i: 305,
    name: "CARPENTRY - Willow Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 7
    }
}, 1);

ground_base[306] = createObject({
    b_i: 306,
    name: "CARPENTRY - Maple Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 9
    }
}, 1);

ground_base[307] = createObject({
    b_i: 307,
    name: "CARPENTRY - Spirit Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 11
    }
}, 1);

ground_base[308] = createObject({
    b_i: 308,
    name: "CARPENTRY - Blue Palm Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 13
    }
}, 1);

ground_base[309] = createObject({
    b_i: 309,
    name: "CARPENTRY - Blue Palm Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 13
    }
}, 1);

ground_base[310] = createObject({
    b_i: 310,
    name: "CARPENTRY - Magic Floor",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 0,
        y: 0
    },
    blocking: !1,
    top: {
        sheet: IMAGE_SHEET.HOUSE,
        x: 7,
        y: 15
    }
}, 1);

ground_base[311] = createObject({
    b_i: 311,
    name: "cave 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[312] = createObject({
    b_i: 312,
    name: "cave 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[313] = createObject({
    b_i: 313,
    name: "cave 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[314] = createObject({
    b_i: 314,
    name: "cave 11",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[315] = createObject({
    b_i: 315,
    name: "cave 12",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 5
    },
    blocking: !1
}, 1);

ground_base[316] = createObject({
    b_i: 316,
    name: "dungeon 8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[317] = createObject({
    b_i: 317,
    name: "dungeon 9",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[318] = createObject({
    b_i: 318,
    name: "dungeon 10",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[319] = createObject({
    b_i: 319,
    name: "dungeon 11",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[320] = createObject({
    b_i: 320,
    name: "dungeon 12",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 6
    },
    blocking: !1
}, 1);

ground_base[321] = createObject({
    b_i: 321,
    name: "Fish1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[322] = createObject({
    b_i: 322,
    name: "Fish2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[323] = createObject({
    b_i: 323,
    name: "Fish3",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[324] = createObject({
    b_i: 324,
    name: "Fish4",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[325] = createObject({
    b_i: 325,
    name: "Fish5",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 13
    },
    blocking: !0
}, 1);

ground_base[326] = createObject({
    b_i: 326,
    name: "Fish6",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 8,
        y: 14
    },
    blocking: !0
}, 1);

ground_base[327] = createObject({
    b_i: 327,
    name: "Fish7",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 9,
        y: 14
    },
    blocking: !0
}, 1);

ground_base[328] = createObject({
    b_i: 328,
    name: "Fish8",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 10,
        y: 14
    },
    blocking: !0
}, 1);

ground_base[329] = createObject({
    b_i: 329,
    name: "crabs1",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 11,
        y: 14
    },
    blocking: !1
}, 1);

ground_base[330] = createObject({
    b_i: 330,
    name: "crabs2",
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: 12,
        y: 14
    },
    blocking: !1
}, 1);

for (i = 0; 12 > i; i++) ground_base[331 + i] = createObject({
    b_i: 331 + i,
    name: "Graveyard tile " + (i + 1),
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND,
        x: i,
        y: 22
    },
    blocking: !1
}, 1);

for (i = 0; 14 > i; i++) ground_base[343 + i] = createObject({
    b_i: 343 + i,
    name: "Cathedral tile " + (i + 1),
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND2,
        x: i,
        y: 0
    },
    blocking: !1
}, 1);

for (i = 0; 14 > i; i++) ground_base[357 + i] = createObject({
    b_i: 357 + i,
    name: "Nowhere" + (i + 1),
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND2,
        x: i,
        y: 1
    },
    blocking: !1
}, 1);

for (i = 0; 5 > i; i++) ground_base[371 + i] = createObject({
    b_i: 371 + i,
    name: "Nowhere 2nd" + (i + 1),
    b_t: BASE_TYPE.GROUND,
    img: {
        sheet: IMAGE_SHEET.NEWLAND2,
        x: i,
        y: 2
    },
    blocking: !1
}, 1);

var ground_images = [];

function prepareTopImages() {
    for (var i = 0; i < ground_base.length; i++) if (ground_base[i].top) {
        var canvas = Filters.getCanvas(54, 49), context = canvas.getContext("2d");
        Draw.clear(context);
        var y = ground_base[i].img, data = IMAGE_SHEET[y.sheet], x = data.tile_width * y.x, y = data.tile_height * y.y;
        context.drawImage(data.img[0], x, y, data.tile_width, data.tile_height, 0, 7, data.tile_width, data.tile_height);
        y = ground_base[i].top;
        data = IMAGE_SHEET[y.sheet];
        x = data.tile_width * y.x;
        y = data.tile_height * y.y;
        context.drawImage(data.img[0], x, y, data.tile_width, data.tile_height, 0, -16, data.tile_width, data.tile_height);
        ground_images[i] = {
            sheet: "top_" + i,
            x: 0,
            y: 0,
            url: "top_" + i
        };
        IMAGE_SHEET["top_" + i] = {
            img: [ canvas ],
            tile_width: 54,
            tile_height: 49,
            filters: !1
        };
    }
}

object_base[15] = createObject({
    b_i: 15,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Fishing Rod",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 1 fishing and a fishing rod.",
        results: [ {
            requires: [ 7 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 116,
                level: 80,
                base_chance: .05,
                max_chance: .15,
                next: !0,
                duration: 2e3,
                xp: 100
            }, {
                id: 108,
                level: 68,
                base_chance: .1,
                max_chance: .25,
                next: !0,
                duration: 2e3,
                xp: 83
            }, {
                id: 104,
                level: 65,
                base_chance: .2,
                max_chance: .35,
                next: !0,
                duration: 2e3,
                xp: 80
            }, {
                id: 1370,
                level: 47,
                base_chance: .2,
                max_chance: .35,
                next: !0,
                duration: 2e3,
                xp: 46
            }, {
                id: 86,
                level: 45,
                base_chance: .4,
                max_chance: .55,
                next: !0,
                duration: 2e3,
                xp: 40
            }, {
                id: 16,
                level: 40,
                base_chance: .3,
                max_chance: .6,
                next: !0,
                duration: 2e3,
                xp: 30
            }, {
                id: 78,
                level: 35,
                base_chance: .35,
                max_chance: .6,
                next: !0,
                duration: 2e3,
                xp: 24
            }, {
                id: 14,
                level: 30,
                base_chance: .35,
                max_chance: .6,
                next: !0,
                duration: 2e3,
                xp: 20
            }, {
                id: 1396,
                level: 20,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 12,
                level: 20,
                base_chance: .35,
                max_chance: .65,
                next: !0,
                duration: 2e3,
                xp: 15
            }, {
                id: 72,
                level: 15,
                base_chance: .5,
                max_chance: .65,
                next: !0,
                duration: 2e3,
                xp: 12
            }, {
                id: 10,
                level: 10,
                base_chance: .35,
                max_chance: .65,
                next: !0,
                duration: 2e3,
                xp: 10
            }, {
                id: 68,
                level: 1,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 50
            }, {
                id: 1368,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                duration: 2e3,
                xp: 3
            }, {
                id: 8,
                level: 0,
                base_chance: .5,
                max_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 5
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[400] = createObject({
    b_i: 400,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Wooden Harpoon",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 50 fishing and a wooden harpoon.",
        results: [ {
            requires: [ 125 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 100,
                level: 60,
                base_chance: .3,
                max_chance: .45,
                next: !0,
                duration: 2e3,
                xp: 75
            }, {
                id: 98,
                level: 58,
                base_chance: .35,
                max_chance: .45,
                next: !0,
                duration: 2e3,
                xp: 70
            }, {
                id: 96,
                level: 55,
                base_chance: .3,
                max_chance: .45,
                next: !0,
                duration: 2e3,
                xp: 68
            }, {
                id: 1396,
                level: 50,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 94,
                level: 50,
                base_chance: .3,
                max_chance: .5,
                next: !0,
                duration: 2e3,
                xp: 60
            }, {
                id: 1368,
                level: 50,
                base_chance: .15,
                max_chance: .15,
                next: !1,
                duration: 2e3,
                xp: 3
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[401] = createObject({
    b_i: 401,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Fishing Net",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 5 fishing and a fishing net.",
        results: [ {
            requires: [ 124 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 214,
                level: 85,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                duration: 2e3,
                xp: 10
            }, {
                id: 1399,
                level: 85,
                base_chance: 5e-4,
                max_chance: 5e-4,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 1398,
                level: 85,
                base_chance: 5e-4,
                max_chance: 5e-4,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 120,
                level: 85,
                base_chance: .05,
                max_chance: .1,
                next: !0,
                duration: 2e3,
                xp: 150
            }, {
                id: 118,
                level: 82,
                base_chance: .15,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 120
            }, {
                id: 206,
                level: 70,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                duration: 2e3,
                xp: 4
            }, {
                id: 90,
                level: 43,
                base_chance: .2,
                max_chance: .25,
                next: !0,
                duration: 2e3,
                xp: 47
            }, {
                id: 88,
                level: 43,
                base_chance: .3,
                max_chance: .45,
                next: !0,
                duration: 2e3,
                xp: 45
            }, {
                id: 1396,
                level: 50,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 82,
                level: 40,
                base_chance: .3,
                max_chance: .5,
                next: !0,
                duration: 2e3,
                xp: 35
            }, {
                id: 76,
                level: 25,
                base_chance: .5,
                max_chance: .6,
                next: !0,
                duration: 2e3,
                xp: 18
            }, {
                id: 74,
                level: 23,
                base_chance: .5,
                max_chance: .6,
                next: !0,
                duration: 2e3,
                xp: 16
            }, {
                id: 213,
                level: 5,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                duration: 2e3,
                xp: 2
            }, {
                id: 70,
                level: 5,
                base_chance: .5,
                max_chance: .6,
                next: !1,
                duration: 2e3,
                xp: 8
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[402] = createObject({
    b_i: 402,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Steel Harpoon",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 63 fishing and a steel harpoon.",
        results: [ {
            requires: [ 126 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 122,
                level: 95,
                base_chance: .1,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 180
            }, {
                id: 1399,
                level: 85,
                base_chance: 5e-4,
                max_chance: 5e-4,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 1398,
                level: 85,
                base_chance: 5e-4,
                max_chance: 5e-4,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 114,
                level: 75,
                base_chance: .3,
                max_chance: .4,
                next: !0,
                duration: 2e3,
                xp: 90
            }, {
                id: 112,
                level: 73,
                base_chance: .3,
                max_chance: .45,
                next: !0,
                duration: 2e3,
                xp: 88
            }, {
                id: 1396,
                level: 70,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 110,
                level: 70,
                base_chance: .3,
                max_chance: .5,
                next: !0,
                duration: 2e3,
                xp: 85
            }, {
                id: 1372,
                level: 63,
                base_chance: .3,
                max_chance: .4,
                next: !0,
                duration: 2e3,
                xp: 82
            }, {
                id: 102,
                level: 63,
                base_chance: .3,
                max_chance: .4,
                next: !0,
                duration: 2e3,
                xp: 78
            }, {
                id: 1368,
                level: 63,
                base_chance: .15,
                max_chance: .15,
                next: !1,
                duration: 2e3,
                xp: 3
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[403] = createObject({
    b_i: 403,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Cage",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 35 fishing and a cage.",
        results: [ {
            requires: [ 127 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 106,
                level: 65,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                duration: 2e3,
                xp: 130
            }, {
                id: 247,
                level: 48,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 92,
                level: 48,
                base_chance: .3,
                max_chance: .4,
                next: !0,
                duration: 2e3,
                xp: 55
            }, {
                id: 1396,
                level: 43,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 84,
                level: 43,
                base_chance: .35,
                max_chance: .5,
                next: !0,
                duration: 2e3,
                xp: 38
            }, {
                id: 249,
                level: 35,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 1
            }, {
                id: 80,
                level: 35,
                base_chance: .4,
                max_chance: .65,
                next: !1,
                duration: 2e3,
                xp: 28
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[441] = createObject({
    b_i: 441,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Iron Fishing Rod",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 65 fishing and an iron fishing rod.",
        results: [ {
            requires: [ 1036 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 116,
                level: 80,
                base_chance: .05,
                max_chance: .15,
                next: !0,
                duration: 2e3,
                xp: 100
            }, {
                id: 108,
                level: 68,
                base_chance: .1,
                max_chance: .25,
                next: !0,
                duration: 2e3,
                xp: 83
            }, {
                id: 104,
                level: 65,
                base_chance: .2,
                max_chance: .35,
                next: !0,
                duration: 2e3,
                xp: 80
            }, {
                id: 68,
                level: 1,
                base_chance: .001,
                max_chance: .001,
                next: !1,
                duration: 2e3,
                xp: 50
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[538] = createObject({
    b_i: 538,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Poseidon' Trident",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 95 fishing and an poseidon's trident.",
        results: [ {
            requires: [ 1397 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 1392,
                level: 120,
                base_chance: .05,
                max_chance: .15,
                next: !0,
                duration: 2e3,
                xp: 270
            }, {
                id: 1390,
                level: 116,
                base_chance: .05,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 250
            }, {
                id: 1386,
                level: 112,
                base_chance: .05,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 235
            }, {
                id: 1384,
                level: 108,
                base_chance: .08,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 225
            }, {
                id: 1381,
                level: 106,
                base_chance: .1,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 215
            }, {
                id: 1378,
                level: 103,
                base_chance: .1,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 210
            }, {
                id: 1376,
                level: 99,
                base_chance: .1,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 195
            }, {
                id: 1374,
                level: 95,
                base_chance: .1,
                max_chance: .2,
                next: !0,
                duration: 2e3,
                xp: 185
            }, {
                id: 1400,
                level: 95,
                base_chance: .001,
                max_chance: .001,
                next: !0,
                duration: 2e3,
                xp: 80
            }, {
                id: 1368,
                level: 95,
                base_chance: .05,
                max_chance: .05,
                next: !1,
                duration: 2e3,
                xp: 3
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[539] = createObject({
    b_i: 539,
    b_t: BASE_TYPE.OBJECT,
    name: "Fish - Poseidon' Trident",
    type: OBJECT_TYPE.FISH,
    img: IMAGES.EMPTY,
    params: {
        desc: "Requires level 95 fishing and an poseidon's trident.",
        results: [ {
            requires: [ 1397 ],
            skill: "fishing",
            continuous: !0,
            returns: [ {
                id: 1392,
                level: 120,
                base_chance: .1,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 270
            }, {
                id: 1390,
                level: 116,
                base_chance: .1,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 250
            }, {
                id: 1386,
                level: 112,
                base_chance: .1,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 235
            }, {
                id: 1384,
                level: 108,
                base_chance: .1,
                max_chance: .3,
                next: !0,
                duration: 2e3,
                xp: 225
            }, {
                id: 1381,
                level: 106,
                base_chance: .12,
                max_chance: .22,
                next: !0,
                duration: 2e3,
                xp: 215
            }, {
                id: 1378,
                level: 103,
                base_chance: .12,
                max_chance: .22,
                next: !0,
                duration: 2e3,
                xp: 210
            }, {
                id: 1376,
                level: 99,
                base_chance: .12,
                max_chance: .22,
                next: !0,
                duration: 2e3,
                xp: 195
            }, {
                id: 1374,
                level: 95,
                base_chance: .15,
                max_chance: .25,
                next: !0,
                duration: 2e3,
                xp: 185
            }, {
                id: 1368,
                level: 95,
                base_chance: .01,
                max_chance: .01,
                next: !1,
                duration: 2e3,
                xp: 3
            } ]
        } ]
    },
    activities: [ ACTIVITIES.CATCH, ACTIVITIES.INSPECT ],
    fn: {}
}, 1);

object_base[16] = createObject({
    b_i: 16,
    b_t: BASE_TYPE.OBJECT,
    name: "Campfire",
    type: OBJECT_TYPE.COOKING,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 11,
        y: 14
    },
    params: {
        results: [ {
            requires: [ 8 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 9,
                level: 0,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 9,
                consumes: [ {
                    id: 8,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 68 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 69,
                level: 30,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 1250,
                consumes: [ {
                    id: 68,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 70 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 71,
                level: 5,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 15,
                consumes: [ {
                    id: 70,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1368 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1369,
                level: 1,
                base_chance: .7,
                next: !1,
                duration: 2e3,
                xp: 5,
                consumes: [ {
                    id: 1368,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 10 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 11,
                level: 10,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 18,
                consumes: [ {
                    id: 10,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 72 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 73,
                level: 15,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 22,
                consumes: [ {
                    id: 72,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 12 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 13,
                level: 20,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 27,
                consumes: [ {
                    id: 12,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 74 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 75,
                level: 23,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 29,
                consumes: [ {
                    id: 74,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 76 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 77,
                level: 25,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 33,
                consumes: [ {
                    id: 76,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 14 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 15,
                level: 30,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 36,
                consumes: [ {
                    id: 14,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 78 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 79,
                level: 35,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 43,
                consumes: [ {
                    id: 78,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 80 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 81,
                level: 36,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 50,
                consumes: [ {
                    id: 80,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 16 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 17,
                level: 40,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 57,
                consumes: [ {
                    id: 16,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 82 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 83,
                level: 41,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 67,
                consumes: [ {
                    id: 82,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 84 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 85,
                level: 43,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 72,
                consumes: [ {
                    id: 84,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 86 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 87,
                level: 45,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 72,
                consumes: [ {
                    id: 86,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1370 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1371,
                level: 47,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 76,
                consumes: [ {
                    id: 1370,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 88 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 89,
                level: 44,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 86,
                consumes: [ {
                    id: 88,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 90 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 91,
                level: 48,
                base_chance: .4,
                next: !1,
                duration: 2e3,
                xp: 89,
                consumes: [ {
                    id: 90,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 92 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 93,
                level: 48,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 107,
                consumes: [ {
                    id: 92,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 94 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 95,
                level: 50,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 117,
                consumes: [ {
                    id: 94,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1438 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1443,
                level: 50,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 75,
                consumes: [ {
                    id: 1438,
                    count: 1
                }, {
                    id: 494,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 96 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 97,
                level: 55,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 133,
                consumes: [ {
                    id: 96,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 98 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 99,
                level: 58,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 136,
                consumes: [ {
                    id: 98,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 100 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 101,
                level: 60,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 146,
                consumes: [ {
                    id: 100,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 102 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 103,
                level: 63,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 152,
                consumes: [ {
                    id: 102,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1372 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1373,
                level: 64,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 154,
                consumes: [ {
                    id: 1372,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 104 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 105,
                level: 65,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 156,
                consumes: [ {
                    id: 104,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 106 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 107,
                level: 64,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 254,
                consumes: [ {
                    id: 106,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 108 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 109,
                level: 68,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 162,
                consumes: [ {
                    id: 108,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 110 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 111,
                level: 70,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 166,
                consumes: [ {
                    id: 110,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 112 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 113,
                level: 73,
                base_chance: .35,
                next: !1,
                duration: 2e3,
                xp: 171,
                consumes: [ {
                    id: 112,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 114 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 115,
                level: 75,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 180,
                consumes: [ {
                    id: 114,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 116 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 117,
                level: 80,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 200,
                consumes: [ {
                    id: 116,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 118 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 119,
                level: 82,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 240,
                consumes: [ {
                    id: 118,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 120 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 121,
                level: 85,
                base_chance: .25,
                next: !1,
                duration: 2e3,
                xp: 308,
                consumes: [ {
                    id: 120,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 122 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 123,
                level: 95,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 369,
                consumes: [ {
                    id: 122,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1374 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1375,
                level: 95,
                base_chance: .3,
                next: !1,
                duration: 2e3,
                xp: 322,
                consumes: [ {
                    id: 1374,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1376 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1377,
                level: 99,
                base_chance: .2,
                next: !1,
                duration: 2e3,
                xp: 382,
                consumes: [ {
                    id: 1376,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1384 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1385,
                level: 108,
                base_chance: .2,
                next: !1,
                duration: 2e3,
                xp: 422,
                consumes: [ {
                    id: 1384,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 1390 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 1391,
                level: 116,
                base_chance: .2,
                next: !1,
                duration: 2e3,
                xp: 482,
                consumes: [ {
                    id: 1390,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 490 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 491,
                level: 1,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 9,
                consumes: [ {
                    id: 490,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 492 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 493,
                level: 1,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 9,
                consumes: [ {
                    id: 492,
                    count: 1
                } ]
            } ]
        }, {
            requires: [ 494 ],
            skill: "cooking",
            continuous: !0,
            returns: [ {
                id: 6,
                level: 2,
                base_chance: .5,
                next: !1,
                duration: 2e3,
                xp: 11,
                consumes: [ {
                    id: 494,
                    count: 1
                } ]
            } ]
        } ]
    },
    activities: [ ACTIVITIES.COOK, ACTIVITIES.INSPECT ],
    fn: {
        inspect: function() {
            addChatText("I can cook some raw food on this.", null, COLOR.WHITE);
            return !0;
        }
    }
}, 1);

var KEY_ACTION = {
    UP: 0,
    DOWN: 1,
    LEFT: 2,
    RIGHT: 3,
    TOGGLE_EDITOR: 4,
    TOGGLE_MINIMAP: 5,
    EDITOR_GROUND_TILES: 6,
    EDITOR_OBJECT_TILES: 7,
    EDITOR_NPC_TILES: 8,
    START_CHAT: 9,
    SEND_CHAT: 10,
    LOGIN: 11,
    BROWSER_BACK: 12,
    CANCEL_CHAT: 13,
    EDITOR_TILESHEET_PREV: 14,
    EDITOR_TILESHEET_NEXT: 15,
    EDITOR_UP: 16,
    EDITOR_DOWN: 17,
    EDITOR_LEFT: 18,
    EDITOR_RIGHT: 19,
    MAGIC_0: 20,
    MAGIC_1: 21,
    MAGIC_2: 22,
    MAGIC_3: 23,
    SWITCH_LANGUAGE_UP: 24,
    SWITCH_LANGUAGE_DOWN: 25,
    MAGIC_4: 26,
    START_CHAT_SLASH: 27,
    EDITOR_COPY: 28,
    EDITOR_SET_AS_TARGET: 29,
    EDITOR_MAKE_TELEPORT: 30,
    ACTIVATE_ATTACK: 31,
    START_CHAT_SPECTATE: 32,
    HIDE_IFRAME: 33,
    TAKE_SCREENSHOT: 34,
    SHOW_OPTIONS: 35
}, keyMap = {
    action: function(e) {
        e = e.charCode || e.keyCode;
        if (captcha) 13 == e && (players[0].params.numcaptcha ? Socket.send("captcha", {
            value: document.getElementById("numcaptcha_input").value
        }) : Socket.send("captcha", {
            response: Recaptcha.get_response(),
            challenge: Recaptcha.get_challenge()
        })); else if (Popup.input_prompt_active) 13 == e && Popup.input_prompt_confirm(); else if (FormHelper.is_form_visible("trivia") && 13 == e && document.activeElement && "trivia_answer" == document.activeElement.id) Minigames.trivia.submit_answer(); else return keyMap.keys[GAME_STATE][e];
    },
    keys: {
        0: {
            13: KEY_ACTION.LOGIN,
            44: KEY_ACTION.TAKE_SCREENSHOT,
            123: KEY_ACTION.TAKE_SCREENSHOT,
            27: KEY_ACTION.SHOW_OPTIONS
        },
        1: {
            38: KEY_ACTION.UP,
            40: KEY_ACTION.DOWN,
            37: KEY_ACTION.LEFT,
            39: KEY_ACTION.RIGHT,
            49: KEY_ACTION.MAGIC_0,
            50: KEY_ACTION.MAGIC_1,
            51: KEY_ACTION.MAGIC_2,
            52: KEY_ACTION.MAGIC_3,
            53: KEY_ACTION.MAGIC_4,
            87: KEY_ACTION.UP,
            83: KEY_ACTION.DOWN,
            65: KEY_ACTION.LEFT,
            68: KEY_ACTION.RIGHT,
            69: KEY_ACTION.TOGGLE_EDITOR,
            13: KEY_ACTION.START_CHAT,
            8: KEY_ACTION.BROWSER_BACK,
            111: KEY_ACTION.START_CHAT_SLASH,
            16: KEY_ACTION.ACTIVATE_ATTACK,
            44: KEY_ACTION.TAKE_SCREENSHOT,
            123: KEY_ACTION.TAKE_SCREENSHOT,
            27: KEY_ACTION.SHOW_OPTIONS
        },
        2: {
            69: KEY_ACTION.TOGGLE_EDITOR,
            77: KEY_ACTION.TOGGLE_MINIMAP,
            49: KEY_ACTION.EDITOR_GROUND_TILES,
            50: KEY_ACTION.EDITOR_OBJECT_TILES,
            51: KEY_ACTION.EDITOR_NPC_TILES,
            81: KEY_ACTION.EDITOR_TILESHEET_PREV,
            87: KEY_ACTION.EDITOR_TILESHEET_NEXT,
            38: KEY_ACTION.EDITOR_UP,
            40: KEY_ACTION.EDITOR_DOWN,
            37: KEY_ACTION.EDITOR_LEFT,
            39: KEY_ACTION.EDITOR_RIGHT,
            67: KEY_ACTION.EDITOR_COPY,
            84: KEY_ACTION.EDITOR_SET_AS_TARGET,
            83: KEY_ACTION.EDITOR_MAKE_TELEPORT
        },
        3: {
            13: KEY_ACTION.SEND_CHAT,
            8: KEY_ACTION.BROWSER_BACK,
            27: KEY_ACTION.CANCEL_CHAT,
            38: KEY_ACTION.SWITCH_LANGUAGE_UP,
            40: KEY_ACTION.SWITCH_LANGUAGE_DOWN,
            44: KEY_ACTION.TAKE_SCREENSHOT,
            123: KEY_ACTION.TAKE_SCREENSHOT
        },
        4: {
            13: KEY_ACTION.START_CHAT_SPECTATE,
            27: KEY_ACTION.HIDE_IFRAME,
            111: KEY_ACTION.START_CHAT_SLASH,
            44: KEY_ACTION.TAKE_SCREENSHOT,
            123: KEY_ACTION.TAKE_SCREENSHOT
        }
    }
}, regular_onclick = function(e) {
    if (!(Android && 500 > timestamp() - lastTap || left_click_cancel || (clearInterval(inventory_auto_action), 
    captcha || (mobileDevice() ? lastTap = timestamp() : setCanvasSize(), GAME_STATE == GAME_STATES.CHAT && "current_channel" != e.target.id && document.getElementById("my_text").focus(), 
    2 != socket_status && GAME_STATE != GAME_STATES.SPECTATE || "hud" != e.target.id)))) {
        try {
            e.clientX = e.clientX || e.pageX || e.touches[0].pageX, e.clientY = e.clientY || e.pageY || e.touches[0].pageY;
        } catch (b) {
            e.clientX = touch_last_x, e.clientY = touch_last_y;
        }
        var pos = translateMousePositionToScreenPosition(e.clientX, e.clientY);
        if (GAME_STATE != GAME_STATES.SPECTATE && (100 > pos.x && 100 > pos.y || minimap)) Editor.toggle_minimap(), 
        minimap ? (minimap = !1, HUD.drawMenu(), minimap = !0) : HUD.drawMenu(); else {
            var key = TopIcons.count(), val = bigIcons ? 64 : 32;
            pos.y <= TopIcons.bottom_y() && pos.x >= width - key * val && pos.y >= TopIcons.top_y() ? active_menu != (pos.x - width + key * val) / val << 0 ? (active_menu = (pos.x - width + key * val) / val << 0, 
            BigMenu.show(TopIcons.get_id(active_menu))) : (active_menu = -1, BigMenu.show(active_menu)) : (active_menu = -1, 
            BigMenu.show(active_menu));
            ActionMenu.hide();
            if (GAME_STATE != GAME_STATES.SPECTATE && (pos = translateMousePosition(e.clientX, e.clientY), 
            !(!map_visible(pos.i, pos.j) || 0 > pos.i || 0 > pos.j || pos.i > map_size_x || pos.j > map_size_y))) {
                if (building_mode_enabled) return Carpentry.build_regular_click(pos);
                on_map[current_map][pos.i] && (selected_object = obj_g(on_map[current_map][pos.i][pos.j]));
                "object" == typeof selected_object && selected_object.activities && selected_object.activities[0] && 0 < selected_object.activities[0].length ? ActionMenu.act(0) : (selected = {}, 
                0 < players[0].path.length ? (players[0].path = [], selected_object = {}) : (16 == players[0].map || 19 == players[0].map || 24 == players[0].map ? (e.clientX = e.clientX || e.pageX || e.touches[0].pageX, 
                e.clientY = e.clientY || e.pageY || e.touches[0].pageY, ActionMenu.create(e, void 0, !0), 
                ActionMenu.act(0)) : players[0].path = findPathFromTo(players[0], pos, players[0]), 
                selected_object = {}, 0 < players[0].path.length && (players[0].temp.busy && Socket.send("run_from_fight", {}), 
                selected = pos, updateBase())));
            }
        }
    }
}, regular_oncontextmenu = function(e) {
    if (!captcha && (e.preventDefault(), GAME_STATE == GAME_STATES.CHAT && document.getElementById("my_text").focus(), 
    GAME_STATE != GAME_STATES.SPECTATE && 2 == socket_status && "hud" == e.target.id)) return e.clientX = e.clientX || e.pageX || e.touches[0].pageX, 
    e.clientY = e.clientY || e.pageY || e.touches[0].pageY, ActionMenu.create(e), !1;
}, regular_onmousemove = function(domEvent) {
    if (2 == socket_status || GAME_STATE == GAME_STATES.SPECTATE) {
        var pos = translateMousePositionToScreenPosition(domEvent.clientX, domEvent.clientY);
        if (100 > pos.x && 100 > pos.y || minimap) document.getElementById("object_selector_info").innerHTML = map_names[players[0].map], 
        document.getElementById("object_selector_info").style.color = COLOR.WHITE; else {
            var key = TopIcons.count(), val = bigIcons ? 64 : 32;
            pos.y <= TopIcons.bottom_y() && pos.x >= width - key * val && pos.y >= TopIcons.top_y() && !touch_initialized ? active_menu != (pos.x - width + key * val) / val << 0 && (active_menu = (pos.x - width + key * val) / val << 0, 
            BigMenu.show(TopIcons.get_id(active_menu))) : updateMouseSelector(domEvent);
        }
    }
}, gamepadEnabled = !1, lastController = "keyboard", gamepadButtons = {
    0: !0,
    1: !0,
    2: !0,
    3: !0,
    4: !0,
    11: !0,
    5: !0,
    7: !0
};

if (navigator.getGamepads) {
    var gamepadRefresh = function() {
        var x = navigator.getGamepads && (navigator.getGamepads()[0] || navigator.getGamepads()[1]);
        if (x && 0 == x.buttons.length && (x = navigator.getGamepads()[1], !x || 0 == x.buttons.length)) return;
        if (void 0 !== x) {
            gamepadEnabled = !0;
            var vector = x.axes, result = x.buttons;
            .5 > result[0].value && (gamepadButtons[0] = !0);
            .5 > result[1].value && (gamepadButtons[1] = !0);
            .5 > result[2].value && (gamepadButtons[2] = !0);
            .5 > result[3].value && (gamepadButtons[3] = !0);
            .5 > result[4].value && (gamepadButtons[4] = !0);
            .5 > result[11].value && (gamepadButtons[11] = !0);
            .5 > result[5].value && (gamepadButtons[5] = !0);
            .5 > result[7].value && (gamepadButtons[7] = !0, touch_hold_atk = !1);
            .5 <= result[0].value && gamepadButtons[0] && (Popup.accept(), gamepadButtons[0] = !1);
            .5 <= result[1].value && gamepadButtons[1] && (closeAllActiveWindows(), gamepadButtons[1] = !1);
            .5 <= result[2].value && gamepadButtons[2] && (hasClass(document.getElementById("inventory"), "hidden") ? BigMenu.show(2) : BigMenu.show(-1), 
            gamepadButtons[2] = !1);
            .5 <= result[3].value && gamepadButtons[3] && (hasClass(document.getElementById("skills_menu"), "hidden") ? BigMenu.show(3) : BigMenu.show(-1), 
            gamepadButtons[3] = !1);
            .5 <= result[4].value && gamepadButtons[4] && (hasClass(document.getElementById("chest"), "hidden") || ("undefined" == typeof Chest.deposit_all ? enableMods() : Chest.deposit_all()), 
            gamepadButtons[4] = !1);
            .5 <= result[7].value && gamepadButtons[7] && (touch_hold_atk = !0, gamepadButtons[7] = !1);
            if (.25 < Math.abs(vector[2]) || .25 < Math.abs(vector[3]) || .5 <= result[11].value && gamepadButtons[11] || .5 <= result[5].value && gamepadButtons[5]) {
                var evt = document.getElementById("gamepad_cursor");
                evt.style.display = "block";
                Timers.set("disable_gamepad_cursor", function() {
                    document.getElementById("gamepad_cursor").style.display = "none";
                }, 1e4);
                var x = parseInt(evt.style.left) || 0, y = parseInt(evt.style.top) || 0, x = x + 15 * vector[2], y = y + 15 * vector[3], x = Math.range(x, body_offset_x, body_offset_x + parseInt(wrapper.style.width)), y = Math.range(y, body_offset_y, body_offset_y + parseInt(wrapper.style.height));
                evt.style.left = x + "px";
                evt.style.top = y + "px";
                var evt = "mousemove", button = -1;
                .5 <= result[11].value && gamepadButtons[11] ? (left_click_cancel = !1, evt = "click", 
                button = 0, gamepadButtons[11] = !1) : .5 <= result[5].value && gamepadButtons[5] && (evt = "contextmenu", 
                button = 2, gamepadButtons[5] = !1);
                var target = document.elementFromPoint(x - 2, y - 2);
                if (target) {
                    "click" == evt && "select" == (target.tagName + "").toLowerCase() && (evt = "mousedown");
                    var event = document.createEvent("MouseEvents");
                    event.initMouseEvent(evt, !0, !0, window, 0, 0, 0, x - target.offsetLeft, y - target.offsetTop, !1, !1, !1, !1, button, null);
                    target.dispatchEvent(event);
                }
            }
            y = result && .5 <= result[12].value || vector && -.5 > vector[1] && .5 < vector[0];
            evt = result && .5 <= result[13].value || vector && .5 < vector[1] && -.5 > vector[0];
            x = result && .5 <= result[14].value || vector && -.5 > vector[0] && -.5 > vector[1];
            vector = result && .5 <= result[15].value || vector && .5 < vector[0] && .5 < vector[1];
            y || evt || x || vector ? (touch_hold = !0, y ? (touch_hold_i = 0, touch_hold_j = 1) : vector ? (touch_hold_i = 1, 
            touch_hold_j = 0) : evt ? (touch_hold_i = 0, touch_hold_j = -1) : x && (touch_hold_i = -1, 
            touch_hold_j = 0), lastController = "gamepad") : "gamepad" == lastController && (touch_hold = !1);
        }
    };
    setInterval(gamepadRefresh, 16);
}

var editor_enabled = !1, editor_mouse_drag = !1, editor_mouse_dragged = !1, editor_mouse_pos = {}, editor_dx = 0, editor_dy = 0, editor_pick = 0, editor_page = 0, editor_page_size = 27, editor_click_i = -1, editor_click_j = -1, tileset = BASE_TYPE.GROUND, editor_onclick = function(data) {
    if (Editor.ignore_next_click) data.preventDefault(); else if (data.preventDefault(), 
    setCanvasSize(), !editor_mouse_dragged) {
        data = translateMousePosition(data.clientX, data.clientY);
        var x = data.i - dx, y = data.j - dy;
        10 < y && 11 > x && 1 < x && (console.log(x + " ja " + y), y = 16 - y, x -= 2, console.log(x + 9 * y), 
        x = x + 9 * y + editor_page * editor_page_size, x < BASE_TYPE[tileset].length && 0 <= x && x < (editor_page + 1) * editor_page_size && (editor_pick = x, 
        Editor.draw_selection()));
        if (map_visible(data.i, data.j) && 0 <= data.i && 0 <= data.j && (editor_click_i != data.i || editor_click_j != data.j)) {
            if (tileset == BASE_TYPE.GROUND) {
                x = map[current_map][data.i][data.j];
                if (x.b_i == editor_pick) return;
                map[current_map][data.i][data.j] = obj_s(BASE_TYPE[tileset][editor_pick]);
            } else if (tileset == BASE_TYPE.OBJECT || tileset == BASE_TYPE.NPC) {
                x = on_map[current_map][data.i][data.j];
                if (x.b_i == editor_pick) return;
                "undefined" != typeof on_map[current_map][data.i][data.j] && 0 < on_map[current_map][data.i][data.j].id && (delete objects_data[on_map[current_map][data.i][data.j].id], 
                on_map[current_map][data.i][data.j] = !1);
                BASE_TYPE[tileset][editor_pick].activities && 0 < BASE_TYPE[tileset][editor_pick].activities.length ? (x = createObject(JSON.merge(BASE_TYPE[tileset][editor_pick], {
                    i: data.i,
                    j: data.j
                })), objects_data[x.id] = x, on_map[current_map][data.i][data.j] = obj_s(x)) : on_map[current_map][data.i][data.j] = obj_s(BASE_TYPE[tileset][editor_pick]);
            }
            editor_click_i = data.i;
            editor_click_j = data.j;
            drawMap();
        }
    }
}, Editor = {
    toggle: function() {
        (editor_enabled = !editor_enabled) ? (setGameState(GAME_STATES.EDITOR), removeClass(document.getElementById("editor_button"), "red_button"), 
        players[0].params.speed = 999, wrapper.onclick = editor_onclick, wrapper.oncontextmenu = function(e) {
            e.preventDefault();
            e = translateMousePosition(e.clientX, e.clientY, !0);
            console.log(e);
            map_visible(e.i, e.j) && ("undefined" != typeof on_map[current_map][(e.i, e.j)].id && 0 < on_map[current_map][e.i][e.j].id && delete objects_data[on_map[current_map][e.i][e.j].id], 
            on_map[current_map][e.i][e.j] = !1, drawMap());
        }, wrapper.onmousedown = function(e) {
            if (Editor.ignore_next_click) e.preventDefault(); else return e.clientX = e.clientX || e.pageX || e.touches[0].pageX, 
            e.clientY = e.clientY || e.pageY || e.touches[0].pageY, editor_mouse_drag = !0, 
            editor_mouse_dragged = !1, editor_mouse_pos = translateMousePosition(e.clientX, e.clientY), 
            editor_mouse_pos.i -= dx, editor_mouse_pos.j -= dy, editor_dx = dx, editor_dy = dy, 
            console.log(e), e.preventDefault(), !1;
        }, wrapper.onmousemove = function(e) {
            updateMouseSelector(e);
            e.clientX = e.clientX || e.pageX || e.touches[0].pageX;
            e.clientY = e.clientY || e.pageY || e.touches[0].pageY;
            var dir = translateMousePosition(e.clientX, e.clientY);
            mouse = JSON.clone(dir);
            dir.i -= dx;
            dir.j -= dy;
            editor_mouse_drag && (e.ctrlKey ? (selected = {
                i: null,
                j: null
            }, editor_onclick(e), updateBase()) : (editor_mouse_dragged = !0, dir.i == editor_mouse_pos.i && dir.j == editor_mouse_pos.j || dx == editor_dx - (dir.i - editor_mouse_pos.i) && dy == editor_dy - (dir.j - editor_mouse_pos.j) || (dx = editor_dx - (dir.i - editor_mouse_pos.i), 
            dy = editor_dy - (dir.j - editor_mouse_pos.j), drawMap())));
        }, wrapper.onmouseup = function(e) {
            Editor.ignore_next_click ? e.preventDefault() : (editor_mouse_drag = !1, editor_click_j = editor_click_i = -1);
        }, Editor.draw_selection(), addLog("Entered editor mode")) : (setGameState(GAME_STATES.GAME), 
        addClass(document.getElementById("editor_button"), "red_button"), players[0].params.speed = 100, 
        wrapper.onclick = regular_onclick, wrapper.onmousemove = void 0, wrapper.onmouseup = void 0, 
        wrapper.onmousedown = void 0, wrapper.oncontextmenu = regular_oncontextmenu, refreshHUD(), 
        addLog("Exited editor mode"));
    },
    ignore_next_click: !1,
    toggle_minimap: function() {
        (minimap = !minimap) ? (selected = {
            i: null,
            j: null
        }, Draw.clear(ctx.hud), tile_width *= minimap_scale, tile_height *= minimap_scale, 
        half_tile_width = Math.floor(tile_width / 2), half_tile_width_round = Math.round(tile_width / 2), 
        half_tile_height = Math.floor(tile_height / 2), half_tile_height_round = Math.round(tile_height / 2), 
        editor_dx = dx, editor_dy = dy, dy = dx = 0, drawMap(), updateBase(), HUD.drawMinimapLarge()) : (tile_width /= minimap_scale, 
        tile_height /= minimap_scale, half_tile_width = Math.floor(tile_width / 2), half_tile_width_round = Math.round(tile_width / 2), 
        half_tile_height = Math.floor(tile_height / 2), half_tile_height_round = Math.round(tile_height / 2), 
        dx = editor_dx, dy = editor_dy, Draw.clear(ctx.hud), drawMap());
    },
    editor_copy: function() {
        mouse && (editor_pick = tileset == BASE_TYPE.GROUND ? map[current_map][mouse.i][mouse.j] && map[current_map][mouse.i][mouse.j].b_i || 0 : on_map[current_map][mouse.i][mouse.j] && on_map[current_map][mouse.i][mouse.j].b_i || 0, 
        console.log(mouse, editor_pick));
    },
    teleport_position: {},
    editor_set_teleport_position: function() {
        console.log("New target:", mouse);
        Editor.teleport_position = {
            to_map: current_map,
            to_i: mouse.i,
            to_j: mouse.j
        };
    },
    editor_make_teleport: function() {
        if (on_map[current_map][mouse.i][mouse.j]) {
            var b = JSON.clone(mouse);
            Editor.ignore_next_click = !0;
            Popup.prompt("Set teleport position to " + mouse.i + ", " + mouse.j + "?", function() {
                setTimeout(function() {
                    editor_mouse_drag = Editor.ignore_next_click = !1;
                }, 150);
                on_map[current_map][b.i][b.j].params = JSON.merge(on_map[current_map][b.i][b.j].params, Editor.teleport_position);
                current_map == Editor.teleport_position.to_map && delete on_map[current_map][b.i][b.j].params.to_map;
            }, function() {
                setTimeout(function() {
                    editor_mouse_drag = Editor.ignore_next_click = !1;
                }, 150);
            });
        }
    },
    draw_selection: function() {
        Draw.clear(ctx.hud);
        for (var i = editor_page * editor_page_size; i < Math.min(BASE_TYPE[tileset].length, (editor_page + 1) * editor_page_size); i++) {
            var index = i - editor_page * editor_page_size, index = translateTileToCoordinates(index % 9 + dx + 2, dy + 16 - Math.floor(index / 9));
            Draw.drawToMap(ctx.hud, BASE_TYPE[tileset][i].img, {
                x: index.x,
                y: index.y + 16
            });
            i == editor_pick && Draw.drawToMap(ctx.hud, BASE_TYPE[tileset][i].img, {
                x: index.x,
                y: index.y + 16
            }, 0, 1);
            "object" == typeof BASE_TYPE[tileset][i].top && Draw.drawToMap(ctx.hud, BASE_TYPE[tileset][i].top, {
                x: index.x,
                y: index.y
            });
        }
        HUD.drawMinimap();
    },
    ground_tiles: function() {
        tileset = BASE_TYPE.GROUND;
        editor_page = editor_pick = 0;
        Editor.draw_selection();
    },
    object_tiles: function() {
        tileset = BASE_TYPE.OBJECT;
        editor_page = editor_pick = 0;
        Editor.draw_selection();
    },
    npc_tiles: function() {
        tileset = BASE_TYPE.NPC;
        editor_page = editor_pick = 0;
        Editor.draw_selection();
    },
    previous_page: function() {
        editor_page = Math.max(0, editor_page - 1);
        Editor.draw_selection();
    },
    next_page: function() {
        editor_page = Math.min(Math.floor(BASE_TYPE[tileset].length / editor_page_size), editor_page + 1);
        Editor.draw_selection();
    },
    editor_up: function() {
        --dx;
        dy += 1;
        drawMap();
    },
    editor_down: function() {
        dx += 1;
        --dy;
        drawMap();
    },
    editor_left: function() {
        --dx;
        --dy;
        drawMap();
    },
    editor_right: function() {
        dx += 1;
        dy += 1;
        drawMap();
    }
}, pass, salt, save_user_data, socket, socket_status, user, user_data, premium;

salt = "VrcKI3oIMxoFziqmGDXi3tiO8V0VYhSBnbrt8uPc";

var session_salt = "", player_target = "", loot_master_id = 0;

pass = user = "";

premium = !1;

socket = "";

socket_status = 0;

user_data = {};

inAFight = windowOpen = !1;

lastRunAwayAttempt = 0;

var socket_io_loaded_fallback = !1, c_sk = randomSalt(10);

function load_user_data() {
    user_data = localStorage.user || localStorage.kongregate || localStorage.newgrounds || {};
    if (0 < user_data.length) try {
        user_data = JSON.parse(user_data);
        document.getElementById("login_user").value = user_data.user;
        if (user_data.pass) password = user_data.pass; else for (var password = "", hash = 0; hash < user_data.pass_length; hash++) password += "~";
        document.getElementById("login_pass").value = password;
    } catch (d) {
        return user_data = {};
    } else !Android || getParameterByName("inapp") && "gamescom" == getParameterByName("inapp") || (alert("This is an online game and we require you to create an account first."), 
    document.getElementById("login_user").value = prompt("Choose your username"), document.getElementById("login_pass").value = prompt("Choose password for your username(minimum 6 symbols)"), 
    auto_connect = !0);
}

save_user_data = function() {
    return localStorage.user = JSON.stringify(user_data);
};

function checkTransport() {
    if ("websocket" != socket.socket.transport.name) {
        var page = document.getElementById("https_link");
        page && (page.style.display = "block");
    }
}

window.connect = function(url) {
    ServerList.last_connected = url;
    document.getElementById("login_world").value = url;
    socket && (0 < socket_status ? (socket.disconnect(), io.j = [], io.sockets = []) : -2 == socket_status && (io.j = [], 
    io.sockets = [], socket.socket.options.reconnect = !1));
    socket = io.connect(url || socket_url, {
        "flash policy port": config.http_port,
        "force new connection": !0
    });
    setTimeout(function() {
        "function" == typeof switchWorldBugFix && switchWorldBugFix();
    }, 1e3);
    socket.on("connect", function() {
        setStatus("Connected", !0);
        game_timestamp.connected = game_timestamp.connected || timestamp();
        checkTransport();
        SpectateWindow.connected();
        socket.emit("checksum", {
            checksum: release_checksum,
            version: release_version
        });
        return socket_status = 1;
    });
    socket.on("disconnect", function() {
        setStatus("Disconnected", !1);
        preloadPlayer();
        resetMapShift();
        drawMap();
        2e3 < timestamp() - Spectate.last_watch_requested && (alternative_login_function(), 
        "undefined" != typeof kongregate && addChatText("Connection lost... attempting to reconnect...", void 0, COLOR.PINK));
        setGameState(GAME_STATES.LOGIN);
        return socket_status = -1;
    });
    socket.on("reconnecting", function(num) {
        setStatus("Reconnecting in " + parseInt(num) / 1e3 + " seconds", !1);
        64e3 <= parseInt(num) && location.reload(!0);
        socket_status = -2;
        16e3 <= parseInt(num) && ServerList.next_best_server();
    });
    socket.on("reconnect", function() {
        setStatus("Reconnected", !0);
        user && 0 < user.length && auto_connect && (socket_status = 1, using_alternate_login || repeat_login());
        checkTransport();
        return socket_status = 1;
    });
    socket.on("reconnect_failed", function() {
        setStatus("Failed to reconnect", !1);
        return socket_status = -3;
    });
    socket.on("message", function(data) {
        if ("object" === typeof data && data.action) switch (data.action) {
          case "checksum":
            try {
                EventEmitter.emit(document, "checksum", data);
            } catch (d) {}
            break;

          case "shutdown":
            var i = Player.location_name(players[0]);
            socket.disconnect();
            data.b ? (localStorage.b = (timestamp() + 6048e5).toString(), setKypsis("b", !0, 7), 
            finishedLoading = !1) : data.reconnect ? ("Party Dungeon" != i ? setTimeout(function() {
                ServerList.next_best_server();
            }, 2500) : setTimeout(function() {
                connect(ServerList.last_connected);
            }, 3e4), addChatText("Server maintenance... attempting to reconnect...", void 0, COLOR.PINK), 
            setTimeout(function() {
                Chat.client_commands["/ping all"]();
            }, 12e4)) : (setTimeout(function() {
                location.reload(!0);
            }, 4e4), alert(data.msg));
            break;

          case "message":
            "object" == typeof data.data.message ? addChatText(data.data.message) : addChatText(data.data.message, data.data.name, data.data.color, data.data.type, data.data.lang, data.data.to, data.data.server);
            break;

          case "remove_line":
            Chat.remove_line(data.line, data.moderator);
            break;

          case "mos_balance":
            data.balance != last_mos_balance && addChatText("Your MOS points balance is " + data.balance, void 0, COLOR.TEAL);
            last_mos_balance = data.balance;
            WebPayment.set_balance(data.balance);
            1e3 <= data.balance && Achievements.report("1000_MOS");
            break;

          case "death":
            if (data.target.id == players[0].id) i = getEmptyPlayer(), players && 12 == players[0].map ? i = {
                map: 12,
                i: 32,
                j: 24
            } : players && 24 == players[0].map ? i = {
                map: 24,
                i: 11,
                j: 14
            } : players && 0 != players[0].map && (i = players[0]), players[0].i = i.i, players[0].j = i.j, 
            players[0].map = i.map, resetMapShift(), resetMovement(players[0], !0), setTimeout(function() {
                players[0].temp.target_id = -1;
                skills[0].health.current = skills[0].health.level;
                Player.update_healthbar();
            }, 2e3), Music.sound_effect("death"), spectator_mode || (addChatText("You have been killed...", void 0, COLOR.PINK), 
            _gaq.push([ "_trackPageview", "/death" ])), Timers.set(players[0].id + "reset_inventory", function() {
                BigMenu.init_inventory();
            }, 3e3); else {
                if (data.target.b_t == BASE_TYPE.PLAYER) {
                    i = getEmptyPlayer();
                    if (!players[data.target.id]) break;
                    19 != players[data.target.id].map && (players[data.target.id].i = i.i, players[data.target.id].j = i.j, 
                    players[data.target.id].map = i.map, i.map != current_map && (delete players[data.target.id], 
                    delete players[data.target.id + "pet"]));
                } else data.target && data.target.id == players[0].temp.target_id && (players[0].temp.busy = !1), 
                objects_data[data.target.id] && map_settings[objects_data[data.target.id].map] && !map_settings[objects_data[data.target.id].map].respawn ? map_settings[objects_data[data.target.id].map].monsters_left-- : setTimeout(function() {
                    var message = objects_data[data.target.id];
                    message && Monster.display(message);
                }, Monster.respawn_time(data.target.id)), Monster.hide(objects_data[data.target.id]);
                updateBase();
            }
            BigMenu.in_a_fight_hide(data.target.id);
            data.target.id == monster_target_id && Music.sound_effect("hit");
            break;

          case "monster_visible":
            var name = objects_data[data.target_id];
            name && (Timers.clear("monster_visible" + name.id), Monster.display(name));
            break;

          case "magic_animation":
            addAnimation(Magic[data.id].animation, data.i, data.j, data.map);
            break;

          case "monster_invisible":
            if (name = objects_data[data.target_id]) Timers.set("monster_visible" + name.id, function() {
                Monster.display(name);
            }, Math.max(1, data.duration - 500)), Monster.hide(name);
            break;

          case "use_skill":
            if (!isActive || minimap) break;
            BigMenu.show_use_skill(data.item_id, data.position);
            break;

          case "hash":
            players[0].params.hash = data.data.hash;
            updateBase();
            break;

          case "item_drop":
            Inventory.add(players[0], data.data.id) ? (addChatText("Loot: " + item_base[data.data.id].name, void 0, COLOR.YELLOW, "loot"), 
            hasClass(document.getElementById("forging_menu"), "hidden") ? hasClass(document.getElementById("pet_nest_form"), "hidden") || Breeding.open_nest() : Forge.forge_open()) : (addChatText("Your inventory is full!", void 0, COLOR.PINK), 
            12 == current_map && (i = "right mouse clicking on it", touch_initialized && (i = "long pressing it"), 
            addChatText("You can remove an item from inventory by " + i + " and choosing Destroy", void 0, COLOR.TEAL)));
            BigMenu.init_inventory();
            break;

          case "inventory":
            players[0].temp.inventory = data.data;
            BigMenu.init_inventory();
            hasClass(document.getElementById("forging_menu"), "hidden") ? hasClass(document.getElementById("pet_nest_form"), "hidden") || Breeding.open_nest() : Forge.forge_open();
            break;

          case "shop_refresh":
            BigMenu.update_shop(data.content);
            BigMenu.init_inventory();
            break;

          case "shop_open":
            shop_opened && (BigMenu.open_shop(data.content), windowOpen = !0);
            break;

          case "chest_open":
            Chest.open(data.content, data.open, data.carpentry);
            windowOpen = !0;
            break;

          case "skills":
            "string" == typeof data.data.skill ? (skills[0][data.data.skill] = data.data.stats, 
            data.data.pet_xp && (players[0].pet.xp = data.data.pet_xp)) : (skills[0] = data.data, 
            players[0].temp.healthbar && Player.update_healthbar());
            BigMenu.show_skills();
            break;

          case "level_up":
            addChatText("You gained 1 " + data.data + " level!", void 0, COLOR.TEAL);
            _gaq.push([ "_trackPageview", "/level_up" ]);
            "undefined" != typeof kongregate && kongregate.api && kongregate.api.stats.submit(data.data, skills[0][data.data].level + 1);
            break;

          case "monster_spawn":
            Monster.respawn(data.target.id);
            on_map[current_map][data.target.i][data.target.j] = obj_s(data.target);
            updateBase();
            node_graphs[data.target.map].nodes[data.target.i][data.target.j].type = 0;
            break;

          case "attack":
            data.attacker == players[0].id && (data.attacker = "0", players[0].temp.target_id = data.defender, 
            selected = objects_data[data.defender] || players[data.defender] || {
                i: null,
                j: null
            });
            data.defender == players[0].id && (spectator_mode || addChatText("You are under attack!", !1, COLOR.WHITE), 
            data.defender = "0", players[0].temp.target_id = data.attacker, selected = objects_data[data.attacker] || players[data.attacker] || {
                i: null,
                j: null
            });
            if ("0" == data.defender || "0" == data.attacker) players[0].temp.busy = !0, players[0].path = [], 
            players[0].params.health = skills[0].health.level, players[0].temp.health = skills[0].health.current, 
            BigMenu.in_a_fight(players[0], data.data), document.getElementById("duelling_form").style.display = "none";
            break;

          case "hit":
            if (data.target.id == players[0].id) {
                if (players[0].i != data.target.i || players[0].j != data.target.j) players[0].i = data.target.i, 
                players[0].j = data.target.j, resetMapShift(), resetMovement(players[0], !0);
                BigMenu.in_a_fight(data.target);
                0 < data.hit && Music.sound_effect("hurt");
                data.target.id = 0;
            }
            i = !1;
            data.target.id == players[0].temp.target_id && (BigMenu.in_a_fight(void 0, data.target), 
            0 == data.hit ? Music.sound_effect("miss") : (Music.sound_effect("hit"), FIGHT.max_damage() == data.hit && 0 == players[0].params.magic_slots && (i = !0)));
            if (map_visible(data.target.i, data.target.j)) {
                if (!isActive || minimap) break;
                BigMenu.show_damage(data.hit, data.target, i);
                data.target.b_t == BASE_TYPE.PLAYER && "undefined" == typeof players[data.target.id] ? Socket.send("whois", {
                    id: data.target.id
                }) : data.target.b_t == BASE_TYPE.PLAYER && (players[data.target.id].ttl = timestamp() + 12e4);
            }
            break;

          case "join":
            Timers.running("disc_" + data.name) ? (online_players[data.name] = data.world, Timers.clear("disc_" + data.name)) : online_players[data.name] || (online_players[data.name] = data.world, 
            data.name.filterChat("EN") == data.name && addChatText(data.name + " has joined the game.", data.name, COLOR.ORANGE, "join_leave"), 
            Player.add_players_datalist(data.name));
            break;

          case "player_data":
            data.data.map == current_map && (players[data.data.id] = JSON.merge(getEmptyPlayer(), data.data), 
            Pet.client_init(players[data.data.id]), resetMovement(players[data.id]), players[data.data.id].ttl = timestamp() + 12e4, 
            map_visible(data.data.i, data.data.j) && (drawMap(!1, !0, !1), updateBase(), HUD.drawMinimap()), 
            Socket.send("move", {
                to: data.data.id,
                i: players[0].temp.to.i,
                j: players[0].temp.to.j,
                t: timestamp()
            }));
            break;

          case "teleport":
            delete players[data.player_id];
            delete players[data.player_id + "pet"];
            data.map == current_map && setTimeout(function() {
                Socket.send("move", {
                    to: data.player_id,
                    i: players[0].temp.to.i,
                    j: players[0].temp.to.j,
                    t: timestamp()
                });
            }, 500);
            "undefined" != typeof data.data && (players[data.player_id] = JSON.merge(getEmptyPlayer(), data.data), 
            Pet.client_init(players[data.player_id]));
            drawMap(!1, !0, !1);
            updateBase();
            HUD.drawMinimap();
            break;

          case "player_info_results":
            Player.more_info_dialog(data.results);
            12 == players[0].map || data.results.email || addChatText("Warning! There is no email associated with your account. If you lose your password you can't get back in. Your account is also vulnerable to hijacking. Go to Settings -> Player info to secure your account.", void 0, COLOR.PINK);
            break;

          case "referral_results":
            Player.referral_dialog(data.results);
            _gaq.push([ "_trackPageview", "/referral_dialog" ]);
            break;

          case "market_search_results":
            Market.client_search_results(data.results);
            break;

          case "market_transaction_offers":
            Market.client_transaction_offers(data.results);
            break;

          case "market_transaction_items":
            Market.client_transaction_items(data.results);
            break;

          case "market_open":
            Market.open_specific(data.page);
            break;

          case "magic_ready":
            players[0].params.magics[data.slot].ready = !0;
            Timers.clear("magic_cooldown" + data.slot);
            BigMenu.update_magic_slots(data.slot);
            break;

          case "magic_cooldown":
            players[0].params.magics[data.slot] = data.magic;
            BigMenu.show_magic_slots();
            Player.client_magic_cooldown(data.slot, 0);
            break;

          case "makeover_open":
            BigMenu.open_makeover(data["new"] ? !0 : !1);
            windowOpen = !0;
            break;

          case "captcha_response":
            data.status ? (captcha = !1, document.getElementById("captcha_menu").style.display = "none", 
            clearInterval(captcha_interval)) : (document.getElementById("captcha_response").style.display = "block", 
            players[0].params.numcaptcha || Recaptcha.create("6LdVM-ASAAAAAPQ6Kvn12-fL7eIgZqfnj9W3LamE", "captcha", {
                theme: "blackglass",
                callback: Recaptcha.focus_response_field
            }));
            break;

          case "captcha":
            captcha = !0;
            touch_hold = !1;
            document.getElementById("captcha_menu").style.display = "block";
            document.getElementById("captcha_response").style.display = "none";
            document.getElementById("captcha_timeout").innerHTML = "180";
            document.getElementById("penalty_points").innerHTML = -players[0].params.penalty;
            removeClass(document.getElementById("penalty_points"), "green");
            removeClass(document.getElementById("penalty_points"), "red");
            removeClass(document.getElementById("penalty_points"), "orange");
            0 < players[0].params.penalty ? addClass(document.getElementById("penalty_points"), "red") : 5 == -players[0].params.penalty ? addClass(document.getElementById("penalty_points"), "orange") : addClass(document.getElementById("penalty_points"), "green");
            captcha_timeout = 180;
            data.img ? (document.getElementById("recaptcha").style.display = "none", document.getElementById("numcaptcha").style.display = "block", 
            document.getElementById("numcaptcha_img").src = "data:image/png;base64," + data.img, 
            document.getElementById("numcaptcha_input").value = "") : (document.getElementById("recaptcha").style.display = "block", 
            document.getElementById("numcaptcha").style.display = "none", Recaptcha.create("6LdVM-ASAAAAAPQ6Kvn12-fL7eIgZqfnj9W3LamE", "captcha", {
                theme: "blackglass",
                callback: Recaptcha.focus_response_field
            }));
            captcha_interval = setInterval(function() {
                captcha ? (captcha_timeout--, document.getElementById("captcha_timeout").innerHTML = captcha_timeout, 
                0 == captcha_timeout && (captcha = !1, document.getElementById("captcha_menu").style.display = "none", 
                Socket.send("message", {
                    data: "/penalty",
                    lang: "EN"
                }))) : clearInterval(captcha_interval);
            }, 1e3);
            12 == current_map && Popup.dialog("This is a captcha! It is used to make sure you are not a robot. Fill these, because 5 misses = BAN!", function() {});
            Notifications.show("An anti-bot captcha challenge has appeared! Do not miss these!");
            SpectateWindow.captcha();
            _gaq.push([ "_trackPageview", "/captcha" ]);
            break;

          case "captcha_bonus":
            showCaptchaBonus();
            break;

          case "disconnect":
            delete players[data.id];
            delete players[data.id + "pet"];
            Timers.set("disc_" + data.name, function() {
                delete online_players[data.name];
                data.name.filterChat("EN") == data.name && addChatText(data.name + " has left the game.", data.name, COLOR.PINK, "join_leave");
            }, 3e4);
            break;

          case "clue":
            return session_salt = data.salt, pass_hash = /^~[~]{6,}/.test(pass) ? user_data.pass_hash : hex_sha256(user + salt + pass), 
            i = {
                user: user,
                pass: hex_sha256(pass_hash + session_salt),
                ip_data: ip_data
            }, socket.emit("login", i);

          case "register":
            session_salt = data.salt;
            pass_hash = hex_sha256(user + salt + pass);
            i = new Fingerprint2({
                swfPath: "swf/FontList.swf",
                excludeUserAgent: !0
            });
            try {
                i.get(function(x) {
                    return socket.emit("login", {
                        user: user,
                        pass: hex_sha256(user + salt + pass),
                        ip_data: ip_data,
                        ref: getParameterByName("ref") || getParameterByName("kv_ref"),
                        fp: x
                    });
                });
            } catch (g) {
                return socket.emit("login", {
                    user: user,
                    pass: hex_sha256(user + salt + pass),
                    ip_data: ip_data,
                    ref: getParameterByName("ref") || getParameterByName("kv_ref")
                });
            }
            break;

          case "reset_password":
            "ok" == data.status && setResetStatus("Instructions sent", !0);
            break;

          case "set_password":
            "ok" == data.status && (Timers.clear("failed_password"), setResetFormStatus("Updated!", !0));
            break;

          case "login":
            if ("ok" === data.status) {
                spectator_mode = !1;
                chest_page = 1;
                Contacts.friends = [];
                Contacts.ignores = [];
                first_login && (addChatText("Login successful! Chat is being moderated, please follow the rules at http://mo.ee/rules", void 0, COLOR.WHITE), 
                addChatText("For help, go to http://forums.mo.ee", void 0, COLOR.TEAL), Android && "1" == getParameterByName("inapp") && (addChatText("Warning! Your device might experience problems!", void 0, COLOR.PINK), 
                addChatText("In case of problems download Chrome from App Store and open game http://mo.ee", void 0, COLOR.PINK)), 
                -1 == "rpg.mo.ee rpg-de.mo.ee 757697685.r.cdn77.net rpgssl.r.worldssl.net 82.131.43.200 1239889624.rsc.cdn77.org".split(" ").indexOf(window.location.hostname) && (addChatText("Make sure not to insert your password anywhere but http://rpg.mo.ee", void 0, COLOR.PINK), 
                addChatText("Other sites will just steal your password!", void 0, COLOR.PINK)));
                first_login = !1;
                user && "undefined" != typeof pass_hash && (user_data = {}, user_data.user = user, 
                user_data.pass_length = pass.length, user_data.pass_hash = pass_hash, save_user_data());
                Timers.set(players[0].id + "reset_inventory", function() {
                    BigMenu.init_inventory();
                }, 1500);
                setGameState(GAME_STATES.GAME);
                socket_status = 2;
                Socket.send("user_agent", {
                    ua: navigator.userAgent || navigator.vendor || window.opera,
                    inapp: getParameterByName("inapp"),
                    stats: reportTimes(game_timestamp)
                });
                setTimeout(function() {
                    Player.ignore_more_info_dialog = !0;
                    Socket.send("player_info_request", {});
                }, 2500);
                !("standalone" in window.navigator) || window.navigator.standalone || 0 < getParameterByName("inapp").length || Popup.dialog('Use "Add to Home Screen" feature to go full screen!<img src="img/home_screen.png"/>', function() {}, "biggest");
                Music.preload_sfx();
                "undefined" != typeof kongregate && (kongregate.api && kongregate.api.stats.submit("login", 1), 
                document.getElementById("enable_kongregate").style.display = "none", "kongregate" != provider && kongregate.user_name.toLowerCase() == user.toLowerCase() && (document.getElementById("enable_kongregate").style.display = "block"));
                Steam.enabled() && greenworks.getSteamId() && Socket.send("steam", {
                    sub: "set",
                    steamid: greenworks.getSteamId().staticAccountId,
                    screenname: greenworks.getSteamId().screenName
                });
                setTimeout(function() {
                    setCanvasSize();
                    Socket.send("move", {
                        i: players[0].temp.to.i,
                        j: players[0].temp.to.j,
                        t: timestamp()
                    });
                }, 1e3);
                try {
                    localStorage.active_user = user;
                } catch (k) {}
                return 2;
            }
            if ("logged-in" === data.status) return real_login_function(), data.retry ? setTimeout(function() {
                repeat_login();
            }, 2e3) : data.connect && (socket.disconnect(), Music.stop(), auto_connect = !1, 
            setTimeout(function() {
                socket.socket.reconnect();
            }, 1e3)), setStatus("User already logged in!", !1);
            if ("version-mismatch" === data.status) return real_login_function(), setStatus("Reload game!", !1);
            if ("provider" == data.status) return real_login_function(), setStatus("Use " + data.provider + " to login", !1);
            if ("exists_regular" == data.status) return real_login_function(), setStatus("Account name in use!", !1);
            if ("server-full" == data.status) return real_login_function(), setStatus("World is full!", !1);
            if ("provider_failed" == data.status) return real_login_function(), setStatus("Authorization failed! Refresh?", !1);
            if ("restart-in-progress" == data.status) return real_login_function(), setStatus("Server maintenance", !1);
            if ("too-many" == data.status) return real_login_function(), socket.disconnect(), 
            Music.stop(), auto_connect = !1, setTimeout(function() {
                socket.socket.reconnect();
            }, 4e3), setStatus("Too many accounts for IP", !1);
            if ("not-premium" == data.status) {
                Popup.on_top_dialog('Need to have a premium account to play on this world. Premium account costs 500 MOS per 30 days. To buy premium write <font color="' + COLOR.TEAL + '">/premium</font> in chat. To test ping of all servers write <font color="' + COLOR.TEAL + '">/ping all</font><br><br>Reasons to go premium:' + premium_text, function() {}, "biggest");
                real_login_function();
                setStatus("Premium only", !1);
                localStorage.premium = !1;
                break;
            } else return real_login_function(), setStatus('Wrong password <b onclick="showResetPassword()" class="pointer">[Reset]</b> ', !1);

          case "my_pet_data":
            players[0].pet = data.data;
            Pet.client_init(players[0]);
            "block" == document.getElementById("pet_form").style.display && Pet.init_menu();
            break;

          case "my_data":
            players[0] = JSON.merge(data.data, {
                me: !0
            });
            Pet.client_init(players[0]);
            Timers.set("unfreeze", function() {
                players[0].temp.busy = !1;
            }, 2e3);
            resetMapShift();
            BigMenu.show_magic_slots();
            if (players[0].permissions == PERMISSIONS.ADMIN && !admin_initialized) for (admin_initialized = !0, 
            removeClass(document.getElementById("side"), "hidden"), removeClass(document.getElementById("menu_save_button"), "hidden"), 
            removeClass(document.getElementById("editor_button"), "hidden"), i = 1; i < maps; i++) preloadMap(i, !1);
            if (players[0].permissions == PERMISSIONS.PLAYER_MOD || players[0].permissions == PERMISSIONS.MOD) mod_initialized = !0;
            players[0].temp.busy || BigMenu.in_a_fight_hide(players[0].id);
            players[0].temp.healthbar && (removeClass(document.getElementById("player_healthbar"), "hidden"), 
            document.getElementById("player_health_name").innerHTML = players[0].name, Player.update_healthbar());
            players[0].temp.run ? document.getElementById("settings_run").innerHTML = "Auto run away from fights(on)" : document.getElementById("settings_run").innerHTML = "Auto run away from fights(off)";
            Player.set_healthbar_text(players[0].temp.healthbar);
            Spectate.set_spectator_text();
            document.getElementById("spectate_button").style.display = "none";
            addClass(document.getElementById("login_box"), "hidden");
            show_donations && (document.getElementById("donation_button").style.display = "block", 
            document.getElementById("mos_market_link").style.display = "block");
            resetMovement(players[0], !0);
            BigMenu.init_inventory();
            Player.update_combat_style();
            TopIcons.show("skills");
            TopIcons.show("inventory");
            if (players[0].map != current_map) {
                selected_object = {};
                touch_hold = !1;
                for (var context in players) 0 != context && delete players[context];
                removeClass(wrapper, "level" + backgroundLevel(current_map));
                100 <= current_map && 300 > current_map && randomMapCleanup(current_map - 100);
                current_map = players[0].map;
                300 == current_map ? my_island() ? TopIcons.show("building") : TopIcons.hide("building") : 120 <= current_map ? TopIcons.show("building") : TopIcons.hide("building");
                16 == current_map ? (TopIcons.show("wilderness"), 0 == Player.danger_level(players[0]) && Popup.dialog("WARNING! You have entered a PvP map. Other players are able to <font color=" + COLOR.TEAL + ">kill</font> you and take your gear. Proceed with caution.", function() {}, "big")) : 24 == current_map ? (TopIcons.show("wilderness"), 
                0 == Player.danger_level(players[0]) && Popup.dialog("WARNING! You have entered a PvP map. Other players are able to <font color=" + COLOR.TEAL + ">kill</font> you. Your gear is safe if you die by another player on this map.", function() {}, "big")) : TopIcons.hide("wilderness");
                current_map == Cathedral.map ? Cathedral.init_timer() : 23 == current_map && Player.illusion_guild_timer();
                addClass(wrapper, "level" + backgroundLevel(players[0].map));
                if ("undefined" == typeof map[current_map]) return LazyLoad.js(cdn_url + "maps/map" + players[0].map + ".js?" + map_hashes[players[0].map], function() {
                    "undefined" == typeof map[players[0].map] && LOAD(players[0].map);
                    Editor.toggle_minimap();
                    Editor.toggle_minimap();
                    refreshHUD();
                    drawMap();
                    updateBase();
                    Music.play(players[0].map);
                }), !1;
                Editor.toggle_minimap();
                Editor.toggle_minimap();
                refreshHUD();
                drawMap();
                updateBase();
                Music.play(players[0].map);
                break;
            }
            drawMap();
            updateBase();
            current_map == Cathedral.map && Cathedral.init_timer();
            if (!premium && Player.has_premium(players[0].temp.premium_until)) try {
                premium = !0, localStorage.premium = !0;
            } catch (m) {}
            break;

          case "keep_alive":
            players[data.id] && (players[data.id].ttl = timestamp() + 12e4);
            break;

          case "move":
            "undefined" == typeof players[data.id] ? Socket.send("whois", {
                id: data.id
            }) : (Pet.client_init(players[data.id]), 11e4 > players[data.id].ttl - timestamp() && Socket.send("move", {
                to: data.id,
                i: players[0].temp.to.i,
                j: players[0].temp.to.j,
                t: timestamp()
            }), players[data.id].ttl = timestamp() + 12e4, players[data.id].map != data.map && (players[data.id].i = data.i, 
            players[data.id].j = data.j, resetMovement(players[data.id], !0)), players[data.id].map = data.map, 
            players[data.id].temp.dest = {
                i: data.i,
                j: data.j
            }, movementInProgress(players[data.id]) && !inDistance(players[data.id].i, players[data.id].j, players[data.id].temp.to.i, players[data.id].temp.to.j) ? resetMovement(players[data.id], !1) : 4 < distance(players[data.id].i, players[data.id].j, data.i, data.j) && (players[data.id].i = data.i, 
            players[data.id].j = data.j, resetMovement(players[data.id], !1)));
            break;

          case "new_player":
            setTimeout(function() {
                objects_data[6411] && objects_data[6411].fn("talk", objects_data[6411], players[0]);
            }, 2500);
            chat_filters.chat = !0;
            break;

          case "duel_dialog":
            Player.duel_dialog(data.settings);
            windowOpen = !0;
            break;

          case "duel_cancel":
            document.getElementById("duelling_form").style.display = "none";
            addChatText("Other player has cancelled the duel request.", void 0, COLOR.TEAL, "duel");
            break;

          case "btc_open":
            WebPayment.open(!0);
            WebPayment.update_bitcoin(data.hash);
            break;

          case "achievement":
            Achievements.report(data.name);
            break;

          case "steam":
            switch (data.sub) {
              case "leaderboards":
                Steam.highscore.show(data.data);
                break;

              case "achievements":
                for (i = 0; i < data.achievements.length; i++) data.achievements[i].achieved || (context = data.achievements[i].apiname, 
                Achievements.check(context) && Achievements.report(context));
                break;

              case "report_achievement":
                Achievements.report(data.name);
                break;

              case "open":
                data.error ? WebPayment.steam_failed() : (data.trusted && (document.getElementById("steam_trusted").style.display = "block"), 
                players[0].temp.country = data.country, WebPayment.steam_update_credit(4));
                break;

              case "finalize":
                data.retry ? Timers.set("steam_finalize", function() {
                    Popup.dual_prompt("Click 'OK' after you have authorized the payment. Click 'Cancel' to cancel your payment.", "OK", function() {
                        Socket.send("steam", {
                            sub: "finalize",
                            orderid: data.orderid,
                            steamid: greenworks.getSteamId().staticAccountId
                        });
                    }, "Cancel", null_function);
                }, 5e3) : (data.steamurl && createExternalLink(data.steamurl)(), Timers.set("steam_finalize", function() {
                    data.steamurl ? Popup.dialog('Click \'OK\' after you have authorized the payment<br>Copy paste link<br><input type="text" value="' + data.steamurl + '" class="market_select pointer" onclick="this.select();"/>', function() {
                        Socket.send("steam", {
                            sub: "finalize",
                            orderid: data.orderid,
                            steamid: greenworks.getSteamId().staticAccountId
                        });
                    }) : Popup.dialog("Click 'OK' after you have authorized the payment", function() {
                        Socket.send("steam", {
                            sub: "finalize",
                            orderid: data.orderid,
                            steamid: greenworks.getSteamId().staticAccountId
                        });
                    });
                }, 5e3));
            }
            break;

          case "player_map":
            if ("undefined" == typeof data.map) break;
            setTimeout(function() {
                for (var player in players) 0 != player && delete players[player];
            }, 1e3);
            data.player && (players[0].name = data.player);
            loadPlayerMap(data.map);
            document.getElementById("building_menu_button") && Carpentry.show_buildings();
            current_map = 0;
            break;

          case "time":
            if ("undefined" == typeof data.data) break;
            server_time_delta = -(data.data - secondstamp());
            break;

          case "contacts":
            "undefined" != typeof kongregate && (data.contacts = Contacts.merge_kongregate_friends(data.contacts, kongregate.friends || []));
            for (i in data.contacts) "friends" == data.contacts[i].status ? (Contacts.friends.push({
                name: data.contacts[i].with_player,
                online: !1,
                world: "Offline",
                friend: !0
            }), Player.add_players_datalist(data.contacts[i].with_player)) : Contacts.ignores.push(data.contacts[i].with_player);
            break;

          case "channel_subscriptions":
            "" != document.getElementById("current_channel").value && (active_channel = document.getElementById("current_channel").value);
            Contacts.channels.EN = !0;
            for (i in data.channels) Contacts.channels[data.channels[i].channel] = !0;
            Contacts.channels[default_lang.toUpperCase()] = !0;
            "steam" == getParameterByName("inapp") && (Contacts.channels.ST = !0);
            Contacts.update_channel_list();
            "steam" == getParameterByName("inapp") && "EN" == default_lang.toUpperCase() ? document.getElementById("current_channel").value = "ST" : document.getElementById("current_channel").value = default_lang.toUpperCase();
            active_channel && !active_channel_first && (document.getElementById("current_channel").value = active_channel);
            active_channel_first = !1;
            break;

          case "online_players":
            online_players = {};
            for (i in data.list) online_players[data.list[i].name] = data.list[i].world, Player.add_players_datalist(data.list[i].name);
            break;

          case "event":
            _gaq.push([ "_trackPageview", "/" + data.data ]);
            "completed_tutorial" == data.data && (Achievements.report("COMPLETED_TUTORIAL"), 
            Popup.dialog("This is the end of tutorial! You are now at the beginners town called Dorpat.", function() {
                Popup.dialog("You'll find some of the tutorial NPC's in this town too in case you forgot something.", function() {
                    Popup.dialog("I recommend you continue with quests and gain lots of strength. Get wealthy by selling loot to build your very own house.", function() {
                        Popup.dialog("If you ever need help use the chat button on bottom left or just press the [Enter] key. You can also find all kinds of information from our <span class=\"span_link\" onclick=\"window.open('http://mo.ee/wiki.html','_blank')\">wiki</span>.", function() {
                            Popup.dialog("To make sure you always have access to your account in case you forget your password please enter your valid e-mail to the next window.", function() {
                                Player.request_more_info();
                            });
                        }, "biggest");
                    });
                });
            }));
            break;

          case "quests":
            player_quests = data.quests;
            break;

          case "update_quest":
            player_quests.length > data.quest_id && (player_quests[data.quest_id].progress = data.progress);
            Quests.refresh();
            break;

          case "quest_complete":
            addChatText("Quest '" + quests[data.quest_id].name + "' complete! Reward " + Quests.show_reward(data.quest_id, data.reward_result), void 0, COLOR.TEAL);
            player_quests[data.quest_id].progress = quests[data.quest_id].amount;
            player_quests[data.quest_id].reward_result = data.reward_result;
            quests.length > data.quest_id + 1 && player_quests.length - 1 == data.quest_id && player_quests.push({
                quest_id: data.quest_id + 1,
                progress: 0,
                reward_result: 0
            });
            Quests.refresh();
            _gaq.push([ "_trackPageview", "/quest_" + data.quest_id + "_complete" ]);
            "undefined" != typeof kongregate && kongregate.api && kongregate.api.stats.submit("quest", 1);
            break;

          case "pvp_loots":
            removeClass(document.getElementById("pvp_loot"), "hidden");
            document.getElementById("pvp_loot_results").innerHTML = HandlebarTemplate.loot_master_results()({
                results: data.results
            });
            windowOpen = !0;
            break;

          case "random_map":
            document.getElementById("quests_party_form").style.display = "none";
            var obj;
            data.packed ? (context = JSON.parse(lzw_decode(data.options)), data.options = context.options, 
            obj = context.data, guild_data = context) : _gaq.push([ "_trackPageview", "/dungeon" ]);
            loadCustomMap(data.map_id, data.options, obj);
            120 > data.map_id && (Contacts.save_channel(data.options.channel), dungeon_timer = data.options.end_time, 
            dungeon_goal = data.options.monsters, MapTimer.init(1 == data.options.type ? function() {
                return !1;
            } : function() {
                return map_settings[current_map].monsters_left + "/" + dungeon_goal;
            }, dungeon_timer, data.map_id, !0));
            break;

          case "quests_hall_of_fame":
            PartyQuests.show_hall_of_fame(data.results);
            break;

          case "active_party":
            PartyQuests.show_active_party(data.data);
            break;

          case "remove_party":
            PartyQuests.remove_active_party(data.data);
            break;

          case "party_list":
            PartyQuests.show_list(data.data);
            break;

          case "leave_party":
            PartyQuests.leave_party(data.data);
            break;

          case "cabinet_items":
            on_map[current_map][data.cabinet.i][data.cabinet.j].params.items = data.items;
            "none" != document.getElementById("cabinet_form").style.display && last_cabinet.i == data.cabinet.i && last_cabinet.j == data.cabinet.j && Chest.cabinet_open();
            break;

          case "minigames":
            switch (data.sub) {
              case "trivia":
                Minigames.trivia.handle_client(data);
                break;

              case "arena":
                Minigames.arena.handle_client(data);
            }
            break;

          case "consecutive_logins_dialog":
            Player.consecutive_logins_dialog(data.data);
            break;

          case "show_rules":
            Player.show_rules();
            break;

          case "changename":
            Popup.dialog("Your character name is inappropriate! Make a new one! If you log in with an inappropriate username again you will be banned.", function() {
                socket.disconnect();
                auto_connect = !1;
                setTimeout(function() {
                    socket.socket.reconnect();
                }, 1e3);
            }, void 0, !0);
            document.getElementById("login_user").value = "";
            document.getElementById("login_pass").value = "";
            break;

          case "mailbox":
            switch (data.sub) {
              case "fetch_result":
                i = 300 == current_map ? 10 : 0, data.position == last_mailbox.i - i + "-" + (last_mailbox.j - i) && Mailbox.show(data.messages);
            }
            break;

          case "cathedral_hall_of_fame":
            Cathedral.show_hall_of_fame(data.results);
            break;

          case "guild":
            switch (data.sub) {
              case "place":
                "floors" == data.type ? map[current_map][data.i][data.j] = {
                    b_t: BASE_TYPE.GROUND,
                    b_i: data.id
                } : (obj = {
                    i: data.i,
                    j: data.j,
                    map: data.map,
                    r: data.r || 0
                }, i = {
                    pet_id: data.pet_id,
                    other_nest: data.ot_n,
                    secondstamp: data.t,
                    last_ate: data.l_a,
                    insured: data.insu,
                    amount_taken: data.a,
                    allowed: data.al || [],
                    friends_only: data.f_o || !1
                }, 300 == current_map && (obj.params = i), node_graphs[data.map].nodes[data.i][data.j].type = 0, 
                placeObjectDungeon(obj, data.id), 497 == data.id && FormHelper.is_form_visible("permissions") && last_permissions && Carpentry.permissions_open());
                map_visible(data.i, data.j) && drawMap();
                break;

              case "remove":
                "floors" != data.type && (on_map[data.map][data.i][data.j] = !1, node_graphs[data.map].nodes[data.i][data.j].type = 1), 
                map_visible(data.i, data.j) && drawMap();
            }
            break;

          case "spectate":
            switch (data.sub) {
              case "move":
                "undefined" == typeof map[players[0].map] ? (players[0].i = data.i, players[0].j = data.j) : (i = map_increase, 
                map_increase = 12, players[0].path = findPathFromTo(players[0], {
                    i: data.i,
                    j: data.j
                }, players[0]), map_increase = i, 0 == players[0].path.length && (players[0].i = data.i, 
                players[0].j = data.j, resetMapShift(), resetMovement(players[0], !0)));
                break;

              case "dropped":
                spectator_mode = !1;
                setGameState(GAME_STATES.LOGIN);
                100 <= current_map && 300 > current_map && randomMapCleanup(current_map - 100);
                players[0] = getEmptyPlayer();
                addClass(document.getElementById("player_healthbar"), "hidden");
                resetMapShift();
                resetMovement(players[0], !0);
                drawMap();
                updateBase();
                Spectate.spectate_streams();
                break;

              case "streams":
                context = [];
                for (i = 0; i < data.data.length; i++) obj = data.data[i], obj.r && !SpectateWindow.key || obj.n == SpectateWindow.player || context.push({
                    name: obj.n,
                    location: obj.l,
                    idle: obj.i,
                    idle_value: obj.v,
                    combat_level: obj.c,
                    red: obj.r,
                    server: obj.s
                });
                0 == context.length && SpectateWindow.no_streams_available();
                sortArrayOfObjectsByFieldValueAsc(context, "idle_value");
                initHandlebars();
                i = FormHelper.get_form("streams");
                i.content.innerHTML = HandlebarTemplate.streams_form()(context);
                TableSorter.init(i.content);
                break;

              case "key":
                SpectateWindow.key = data.key;
                break;

              case "my_data":
                spectator_mode = !0;
                GAME_STATE != GAME_STATES.CHAT && setGameState(GAME_STATES.SPECTATE);
                players[0] = JSON.merge(getEmptyPlayer(), data.data);
                players[0].params = JSON.merge(getEmptyPlayer().params, data.data.params);
                players[0].temp = JSON.merge(getEmptyPlayer().temp, data.data.temp);
                players[0].me = !0;
                Pet.client_init(players[0]);
                resetMapShift();
                players[0].temp.busy || BigMenu.in_a_fight_hide(players[0].id);
                removeClass(document.getElementById("player_healthbar"), "hidden");
                document.getElementById("player_health_name").innerHTML = players[0].name;
                Player.set_healthbar_text(players[0].temp.healthbar);
                resetMovement(players[0], !0);
                TopIcons.hide("skills");
                TopIcons.hide("inventory");
                TopIcons.hide("pet");
                if (players[0].map != current_map) {
                    selected_object = {};
                    touch_hold = !1;
                    for (context in players) 0 != context && delete players[context];
                    removeClass(wrapper, "level300");
                    for (i = 0; i < maps; i++) removeClass(wrapper, "level" + i);
                    100 <= current_map && 300 > current_map && randomMapCleanup(current_map - 100);
                    current_map = players[0].map;
                    TopIcons.hide("building");
                    TopIcons.hide("wilderness");
                    addClass(wrapper, "level" + backgroundLevel(players[0].map));
                    current_map == Cathedral.map ? Cathedral.init_timer() : 23 == current_map && Player.illusion_guild_timer();
                    if ("undefined" == typeof map[current_map]) return LazyLoad.js(cdn_url + "maps/map" + players[0].map + ".js?" + map_hashes[players[0].map], function() {
                        "undefined" == typeof map[players[0].map] && LOAD(players[0].map);
                        resetMapShift();
                        resetMovement(players[0], !0);
                        Editor.toggle_minimap();
                        Editor.toggle_minimap();
                        refreshHUD();
                        drawMap();
                        updateBase();
                        Music.play(players[0].map);
                    }), !1;
                    Editor.toggle_minimap();
                    Editor.toggle_minimap();
                    refreshHUD();
                    drawMap();
                    updateBase();
                    Music.play(players[0].map);
                    break;
                }
                drawMap();
                updateBase();
            }
        }
    });
};

var Socket = {
    send: function(eventName, data) {
        if (2 == socket_status || "whois" == eventName) data = data || {}, data.sk = c_sk, 
        socket.emit(eventName, data);
    }
};

do_login = function(arrayA, arrayB, e, four) {
    if (!Timers.running("log_in_process")) {
        Timers.set("log_in_process", null_function, 1e3);
        try {
            "android" == getParameterByName("inapp") && Fullscreen.request();
        } catch (f) {}
        if ("undefined" == typeof e) {
            if (!arrayA || !arrayB || 1 > arrayA.length || 1 > arrayB.length) return setStatus("You need to fill in all fields!", !1), 
            !1;
            if (6 > arrayB.length) return setStatus("Password has to be at least 6 symbols!", !1), 
            !1;
            user = arrayA.toLowerCase().trim();
            pass = arrayB;
            token = provider = void 0;
            1 === socket_status ? (socket.emit("handshake", {
                user: user,
                version: GAME_VERSION,
                sk: c_sk
            }), auto_connect = !0) : _gaq.push([ "_trackPageview", "/not_connected" ]);
        } else user = arrayA, pass = arrayB, provider = e, token = four, 1 === socket_status ? (socket.emit("handshake", {
            user: user,
            pass: pass,
            provider: provider,
            token: four,
            version: GAME_VERSION,
            ip_data: ip_data,
            ref: getParameterByName("ref") || getParameterByName("kv_ref"),
            sk: c_sk
        }), auto_connect = !0) : _gaq.push([ "_trackPageview", "/not_connected" ]);
    }
};

repeat_login = function() {
    do_login(user, pass, provider, token);
};

reset_password = function(email) {
    isEmail(email) ? socket.emit("reset_password", {
        email: email,
        sk: c_sk
    }) : setResetStatus("Invalid e-mail", !1);
};

reset_password_form = function(value, lhs, rhs) {
    6 > lhs.length ? setResetFormStatus("Password has to be at least 6 symbols!", !1) : 0 == value.length ? setResetFormStatus("User missing", !1) : lhs == rhs ? (socket.emit("set_password", {
        email: getParameterByName("reset_email"),
        code: getParameterByName("reset_code"),
        user: value.toLowerCase(),
        pass: hex_sha256(value.toLowerCase() + salt + lhs)
    }), setResetFormStatus("Updating...", !1), Timers.set("failed_password", function() {
        setResetFormStatus("Invalid user", !1);
    }, 3e3)) : setResetFormStatus("Passwords do not match", !1);
};

function showCaptchaBonus() {
    document.getElementById("captcha_bonus_assign").style.display = "block";
    document.getElementById("penalty_points_bonus").innerHTML = -players[0].params.penalty;
    removeClass(document.getElementById("penalty_points_bonus"), "green");
    removeClass(document.getElementById("penalty_points_bonus"), "red");
    removeClass(document.getElementById("penalty_points_bonus"), "orange");
    addClass(document.getElementById("captcha_red"), "hidden");
    addClass(document.getElementById("captcha_green"), "hidden");
    0 < players[0].params.penalty ? (addClass(document.getElementById("penalty_points_bonus"), "red"), 
    removeClass(document.getElementById("captcha_red"), "hidden"), document.getElementById("penalty_bonus_points").value = 0) : (5 == -players[0].params.penalty ? addClass(document.getElementById("penalty_points_bonus"), "orange") : addClass(document.getElementById("penalty_points_bonus"), "green"), 
    removeClass(document.getElementById("captcha_green"), "hidden"), document.getElementById("captcha_green").innerHTML = "* Assign points to get experience", 
    document.getElementById("penalty_bonus_points").value = -players[0].params.penalty);
}

var ServerList = {
    last_connected: void 0,
    downloaded: [ {
        url: "https://rpg.mo.ee",
        display: "World - 1",
        world: 1,
        premium: !1
    }, {
        url: "https://rpg-de.mo.ee",
        display: "World - 2",
        world: 2,
        premium: !1
    }, {
        url: "https://rpg-us.mo.ee",
        display: "Premium - 3",
        world: 3,
        premium: !0
    }, {
        url: "https://rpg-ee.mo.ee",
        display: "World - 4",
        world: 4,
        premium: !1
    }, {
        url: "https://rpg-de2.mo.ee",
        display: "World - 5",
        world: 5,
        premium: !1
    }, {
        url: "https://rpg-de3.mo.ee",
        display: "World - 6",
        world: 6,
        premium: !1
    }, {
        url: "https://rpg-de4.mo.ee",
        display: "World - 7",
        world: 7,
        premium: !1
    } ],
    socket_url: void 0,
    fetch: function() {
        ServerList.loaded();
    },
    loaded: function() {
        for (var wrapper = document.getElementById("login_world"), i = 0; i < ServerList.downloaded.length; i++) {
            var test = ServerList.downloaded[i];
            if (!document.getElementById("world-" + test.world)) {
                var d = document.createElement("option");
                d.innerHTML = test.display;
                d.value = test.url;
                d.id = "world-" + test.world;
                d.disabled = !0;
                wrapper.appendChild(d);
                ServerList.preping(i, !1);
            }
        }
    },
    connect_by_prefix: function(name, constructor) {
        for (var i = 0; i < ServerList.downloaded.length; i++) {
            var e = ServerList.downloaded[i];
            if (e.world == name) {
                if (!e.ping) break;
                e.url != ServerList.last_connected && connect(e.url);
                var wait = setInterval(function() {
                    if (0 < socket_status && ServerList.last_connected == e.url) {
                        clearInterval(wait);
                        for (var player in players) 0 != player && delete players[player];
                        constructor();
                    }
                }, 100);
                break;
            }
        }
    },
    use_command_connect_by_prefix: function(a, b) {
        0 == Player.danger_level(players[0]) ? ServerList.connect_by_prefix(a, b) : addChatText("Can only use this command when danger level is 0", void 0, COLOR.PINK);
    },
    change: function() {
        var thing = document.getElementById("login_world").value;
        if (ServerList.last_connected == thing) return !1;
        for (var index in players) 0 != index && delete players[index];
        connect(thing);
    },
    socket_ready: function() {
        ServerList.socket_url && connect(ServerList.socket_url);
        ServerList.socket_ready_poller();
    },
    socket_ready_poller: function() {
        var position = ServerList.downloaded.length, begin = 0;
        if (!(0 < socket_status)) {
            for (var i = 0; i < ServerList.downloaded.length; i++) ServerList.downloaded[i].fail && begin++;
            if (begin < position) setTimeout(function() {
                ServerList.socket_ready_poller();
            }, 500); else {
                for (i = 0; i < ServerList.downloaded.length; i++) position = ServerList.downloaded[i], 
                position.fail && (position.ping = 100 + i, document.getElementById("world-" + position.world).disabled = !1);
                ServerList.socket_url = ServerList.downloaded[0].url;
                connect(ServerList.socket_url);
                addChatText("We recommend using the latest version of Chrome to play RPG MO", void 0, COLOR.TEAL);
            }
        }
    },
    preping: function(a, b) {
        loadJSON(ServerList.downloaded[a].url + "/ping?t=" + timestamp(), function(err) {
            ServerList.ping(a, b);
        }, function(rej) {
            ServerList.ping(a, b);
        });
    },
    ping: function(index, offset) {
        var data = ServerList.downloaded[index];
        data.time = timestamp();
        loadJSON(data.url + "/ping?t=" + timestamp(), function(obj) {
            delete data.fail;
            document.getElementById("world-" + data.world).disabled = !1;
            var type = data.premium ? "Premium" : "World";
            document.getElementById("world-" + data.world).innerHTML = type + " - " + data.world + " - " + obj.o + " online";
            data.ping = timestamp() - data.time;
            (!data.premium || data.premium && premium) && 197 > obj.o && (ServerList.socket_url = ServerList.socket_url || data.url);
            ServerList.socket_url != data.url || offset || (document.getElementById("login_world").value = ServerList.socket_url, 
            socket_io_loaded && connect(ServerList.socket_url));
            offset && addChatText("Your ping to World " + data.world + " is: " + data.ping + "ms", void 0, COLOR.TEAL);
        }, function() {
            document.getElementById("world-" + data.world).disabled = !0;
            data.fail = !0;
            addChatText("Your ping to World " + data.world + " timed out", void 0, COLOR.PINK);
        });
    },
    auto_log: function() {
        user && 0 < user.length && auto_connect && (using_alternate_login || repeat_login());
    },
    next_best_server: function(row) {
        var x;
        if ("undefined" == typeof row) row = 0; else if (row > ServerList.downloaded.length) {
            row = {};
            for (var i = 0; i < ServerList.downloaded.length; i++) x = ServerList.downloaded[i], 
            row[x.world] || (ServerList.preping(i, !0), row[x.world] = !0);
            return;
        }
        for (i = 0; i < ServerList.downloaded.length; i++) if (ServerList.downloaded[i].url == ServerList.last_connected) {
            x = (i + row) % ServerList.downloaded.length;
            break;
        }
        i = (x + 1) % ServerList.downloaded.length;
        return !premium && ServerList.downloaded[i].premium || !ServerList.downloaded[i].ping ? ServerList.next_best_server(row + 1) : ServerList.connect_by_prefix(ServerList.downloaded[i].world, ServerList.auto_log);
    }
};

1338 == config.http_port && ServerList.downloaded.push({
    url: "http://90.190.26.75:1338",
    display: "World - 10",
    world: 10,
    premium: !1
});

var Achievements = {
    report: function(oPlugin) {
        Steam.enabled() && Steam.report_achievement(oPlugin);
    },
    check: function(name) {
        if ("Name" != players[0].name) {
            if ("COMPLETED_TUTORIAL" == name) {
                if (12 != players[0].map) return !0;
            } else if (/(.*\w)_30/g.test(name)) {
                if (name = /(.*\w)_30/g.exec(name)[1].toLowerCase(), 30 <= skills[0][name].level) return !0;
            } else if (/(.*\w)_60/g.test(name)) {
                if (name = /(.*\w)_60/g.exec(name)[1].toLowerCase(), 60 <= skills[0][name].level) return !0;
            } else if (/(.*\w)_90/g.test(name)) {
                if (name = /(.*\w)_90/g.exec(name)[1].toLowerCase(), 90 <= skills[0][name].level) return !0;
            } else if ("PARTY_QUEST_NORMAL" == name) {
                if (0 < players[0].temp.quest_diff) return !0;
            } else if ("PARTY_QUEST_HELL" == name) {
                if (1 < players[0].temp.quest_diff) return !0;
            } else if ("1_YEAR_OLD" == name) {
                if (31536e6 <= timestamp() - players[0].temp.created_at) return !0;
            } else if ("100_DAILY" == name) {
                if (100 <= players[0].temp.consecutive_logins) return !0;
            } else if (/CHEST_PAGE_(\d)/g.test(name)) {
                if (name = /CHEST_PAGE_(\d)/g.exec(name)[1], players[0].params.chest_pages >= name) return !0;
            } else if ("PREMIUM" == name && Player.has_premium(players[0].temp.premium_until)) return !0;
            return !1;
        }
    }
}, Player = {
    auto_action: function(data) {
        if (data && 42 == data.b_i) inventory_auto_action = setInterval(function() {
            Skills.can_perform(players[0], -42, !0).status ? setTimeout(function() {
                Socket.send("use_skill", {
                    target_id: -42
                });
            }, 10) : clearInterval(inventory_auto_action);
        }, 2500); else if ("object" == typeof selected_object && selected_object.id) {
            var args = Skills.can_perform(players[0], selected_object.id);
            args.status ? (players[0].temp.busy = !1, selected_object.fn(selected_object.activities[0].toLowerCase(), selected_object, players[0]), 
            Timers.set("auto_action", function() {
                Player.auto_action(data);
            }, 100)) : "Cannot do that yet." == args.reason ? Timers.set("auto_action", function() {
                Player.auto_action(data);
            }, 100) : "Your inventory is full." == args.reason && SpectateWindow.iframe && SpectateWindow.sendMessage({
                action: "chat_message",
                text: args.reason,
                color: COLOR.PINK
            });
        }
    },
    update_player_look: function(data) {
        for (var result = {
            head: data.params.d_head,
            facial_hair: data.params.d_facial_hair,
            body: data.params.d_body,
            pants: data.params.d_pants,
            cape: 0,
            left_hand: 0,
            right_hand: 0,
            shield: 0,
            helmet: 0,
            boots: 0,
            weapon: 0,
            hands: 0
        }, i = 0, length = data.temp.inventory.length; i < length; i++) {
            var obj = data.temp.inventory[i];
            if (obj.selected && (obj = item_base[obj.id], obj.params && "object" == typeof obj.params.visible)) for (var name in result) "undefined" != typeof obj.params.visible[name] && (result[name] = obj.params.visible[name]);
        }
        i = data.params.hash;
        result = result.head + " " + result.facial_hair + " " + result.body + " " + result.pants + " " + result.cape + " " + result.left_hand + " " + result.right_hand + " " + result.shield + " " + result.weapon + " " + result.helmet + " " + result.boots + " " + result.hands;
        data.params.hash = result;
        i != result && (Player.send_hash(data), Player.send_data(data.id), AREA.publish(clients[data.id], {
            action: "player_data",
            data: Player.share_data(data.id)
        }));
    },
    send_hash: function(socket) {
        "undefined" != typeof sockets[socket.id] && SSocket.send(sockets[socket.id], {
            action: "hash",
            data: {
                hash: socket.params.hash
            }
        });
    },
    send_event: function(i, name) {
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "event",
            data: name
        });
    },
    update_combat_attributes: function(data) {
        for (var x = 0, y = 0, w = 0, h = 0, offset = 0, height = 0, width = 0, left = 0, i = 0, len = data.temp.inventory.length; i < len; i++) {
            var item = data.temp.inventory[i];
            item.selected && (item = item_base[item.id], x += item.params.power ? item.params.power : 0, 
            y += item.params.aim ? item.params.aim : 0, w += item.params.armor ? item.params.armor : 0, 
            h += item.params.magic ? item.params.magic : 0, offset += item.params.speed ? item.params.speed : 0, 
            height += item.params.magic_slots ? item.params.magic_slots : 0, width += item.params.cooldown ? item.params.cooldown : 0, 
            left += item.params.magic_block ? item.params.magic_block : 0);
        }
        offset = Math.min(Math.round(.5 * offset) + 150, 180);
        i = data.me ? 0 : data.id;
        data.temp.power = x;
        data.temp.aim = y;
        data.temp.armor = w;
        data.temp.magic = h;
        data.params.speed = offset;
        data.params.magic_slots = height;
        data.params.cooldown = width;
        data.temp.total_strength = Math.max(skills[i].strength.current + x / 2, 0);
        data.temp.total_accuracy = Math.max(skills[i].accuracy.current + y / 2, 0);
        data.temp.total_defense = Math.max(skills[i].defense.current + w / 3, 0);
        data.temp.magic_block = Math.max(left, 0);
        data.temp.combat_style == COMBAT_STYLE.AGGRESSIVE ? data.temp.total_strength++ : data.temp.combat_style == COMBAT_STYLE.DEFENSIVE ? data.temp.total_defense++ : data.temp.combat_style == COMBAT_STYLE.ACCURATE && data.temp.total_accuracy++;
    },
    change_combat_style: function() {
        var humans = (3 > parseInt(players[0].temp.combat_style) ? parseInt(players[0].temp.combat_style) + 1 : "0").toString();
        Socket.send("combat_style", {
            mode: humans
        });
    },
    update_combat_style: function() {
        var e = "controlled";
        players[0].temp.combat_style == COMBAT_STYLE.AGGRESSIVE ? e = "aggressive" : players[0].temp.combat_style == COMBAT_STYLE.DEFENSIVE ? e = "defensive" : players[0].temp.combat_style == COMBAT_STYLE.ACCURATE && (e = "accurate");
        document.getElementById("combat_style").innerHTML = "Fighting mode (" + e + ")";
    },
    init: function(id) {
        Player.update_combat_attributes(clients[id]);
        Player.update_combat_level(clients[id]);
        Timers.set(id + "heal", function() {
            Player.heal(id);
        }, 6e4);
    },
    send_data: function(i) {
        Timers.set(i + "send_data", function() {
            "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
                action: "my_data",
                data: clients[i]
            });
        }, 5);
    },
    send_pet_data: function(i) {
        Timers.set(i + "send_pet_data", function() {
            "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
                action: "my_pet_data",
                data: clients[i].pet
            });
        }, 5);
    },
    send_inventory: function(i) {
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "inventory",
            data: clients[i].temp.inventory
        });
    },
    send_message: function(i, c, d, e, w, g) {
        c = {
            action: "message",
            data: {
                message: c,
                color: d,
                type: e,
                name: w,
                user: w,
                server: g
            }
        };
        "undefined" != typeof sockets[i] ? SSocket.send(sockets[i], c) : AREA.private_msg({
            id: 0
        }, JSON.merge(c, {
            to: i
        }));
    },
    send_debug: function(k, v) {
        "undefined" != typeof sockets[k] && SSocket.send(sockets[k], {
            action: "debug",
            data: v
        });
    },
    magic_cooldown: function(id, i) {
        var socket = clients[id];
        if ("undefined" != typeof socket) {
            var other = clients[socket.id].params.magics[i];
            clients[socket.id].params.magics[i].ready = !1;
            SSocket.send(sockets[socket.id], {
                action: "magic_cooldown",
                slot: i,
                magic: clients[socket.id].params.magics[i]
            });
            setTimeout(function() {
                if ("undefined" != typeof sockets[socket.id]) for (var ii = 0; ii < clients[socket.id].params.magics.length; ii++) if (clients[socket.id].params.magics[ii].id == other.id) {
                    clients[socket.id].params.magics[ii].ready = !0;
                    SSocket.send(sockets[socket.id], {
                        action: "magic_ready",
                        slot: ii
                    });
                    i != ii && Player.send_data(id);
                    break;
                }
            }, Magic[socket.params.magics[i].id].params.cooldown * (1 - socket.params.cooldown));
        }
    },
    client_magic_cooldown: function(a, b) {
        var obj = document.getElementById("magic_slot_" + a);
        if (null != obj) {
            var margin = -Math.max(0, Math.round(32 - b / (Magic[players[0].params.magics[a].id].params.cooldown * (1 - players[0].params.cooldown)) * 32));
            obj.style.backgroundPosition = "0px " + margin + "px";
            0 > margin && Timers.set("magic_cooldown" + a, function() {
                Player.client_magic_cooldown(a, b + 100);
            }, 100);
        }
    },
    client_use_magic: function(id) {
        !Timers.running("use_magic" + id) && players[0].params.magic_slots - 1 >= id && players[0].params.magics.length > id && players[0].params.magics[id] && players[0].params.magics[id].ready && (Socket.send("use_magic", {
            slot: id
        }), Timers.set("use_magic" + id, null_function, Magic[players[0].params.magics[id].id].params.cooldown * (1 - players[0].params.cooldown)));
    },
    use_magic: function(id, i) {
        var client = clients[id];
        if ("undefined" == typeof client) return !1;
        if (client.params.magic_slots - 1 >= i && 0 <= i && client.params.magics[i] && client.params.magics[i].ready) if (0 <= client.temp.fight_id && fights[client.temp.fight_id] && fights[client.temp.fight_id].settings.magic_allowed) {
            client.params.magics[i].count--;
            Player.inc_xp(client, "magic", Magic[client.params.magics[i].id].params.xp);
            var j = FIGHT.enemy_coords(client.temp.fight_id, client);
            AREA.publish(clients[client.id], {
                action: "magic_animation",
                id: client.params.magics[i].id,
                i: j.i,
                j: j.j,
                map: j.map
            }, !0);
            FIGHT.add_magic_damage(client.temp.fight_id, client.params.magics[i].id, clients[id]);
            if (0 < client.params.magics[i].count) Player.magic_cooldown(id, i); else {
                clients[client.id].params.magics.splice(i, 1);
                for (j = 0; j < clients[client.id].params.magics.length; j++) clients[client.id].params.magics[j].i = j;
                Player.send_data(id);
            }
        } else return Timers.set("can_only_use_in_fight" + id, function() {
            Player.send_message(id, "Can only use this spell in a fight", COLOR.ORANGE, "magic");
        }, 500), !1;
    },
    heal: function(i, amount) {
        if ("undefined" != typeof clients[i] && "undefined" != typeof sockets[i]) {
            var data = clients[i], c = !1, r = !1;
            "undefined" == typeof amount && (amount = 1);
            for (var j in skills[i]) "undefined" != typeof skills[i][j] && skills[i][j].current != skills[i][j].level && (skills[i][j].current = skills[i][j].current < skills[i][j].level ? Math.min(skills[i][j].current + amount, skills[i][j].level) : Math.max(skills[i][j].current - amount, skills[i][j].level), 
            "health" == j ? data.temp.health = skills[data.id].health.current : 0 <= [ "accuracy", "defense", "strength", "magic" ].indexOf(j) && (r = !0), 
            c = !0);
            r && Player.update_combat_attributes(data);
            c && Player.notify_skills(i);
            skills[i].health.current > skills[i].health.level && AREA.publish(data, {
                action: "magic_animation",
                id: 29,
                i: data.i,
                j: data.j,
                map: data.map
            }, !0);
            Timers.set(data.id + "heal", function() {
                Player.heal(i);
            }, 6e4);
        }
    },
    died: function(i, s, data, key) {
        if ("undefined" != typeof clients[i] && "undefined" != typeof sockets[i]) {
            var args = [];
            if (clients[i].params.pvp && Minigames.arena.settings.keep_items || 24 == clients[i].map) s = 40;
            var p = getEmptyPlayer(), a = 40 > s ? !0 : !1;
            0 == clients[i].params.magic_slots && (a = !1);
            AREA.publish(clients[i], {
                action: "death",
                target: Player.share_data(i)
            }, !1);
            if (12 == clients[i].map) p = {
                map: 12,
                i: 32,
                j: 24
            }, AREA.update(clients[i], p), clients[i].i = p.i, clients[i].j = p.j, clients[i].map = p.map; else if (19 != clients[i].map) {
                if (24 == clients[i].map) p = {
                    map: 24,
                    i: 11,
                    j: 14
                }; else if (22 == clients[i].map) {
                    args = Cathedral.entrance_position;
                    AREA.update(clients[i], args);
                    clients[i].i = args.i;
                    clients[i].j = args.j;
                    clients[i].map = args.map;
                    Cathedral.player_died(clients[i]);
                    skills[i].health.current = skills[i].health.level;
                    clients[i].temp.target_id = -1;
                    clients[i].temp.busy = !1;
                    Player.update_combat_attributes(clients[i]);
                    Player.update_player_look(clients[i]);
                    SSocket.send(sockets[i], {
                        action: "my_data",
                        data: clients[i]
                    });
                    Player.notify_skills(i);
                    return;
                }
                AREA.update(clients[i], p);
                clients[i].i = p.i;
                clients[i].j = p.j;
                clients[i].map = p.map;
            }
            clients[i].temp.created_at < timestamp() - 72e5 || "string" == typeof key || (s = 40, 
            a = !1, Player.send_message(i, "Be more careful! However, this time I will let you keep your items...", COLOR.TEAL));
            var id = 0, testResults = .5;
            clients[i].pet.enabled && (id = clients[i].pet.id, Inventory.remove(clients[i], pets[clients[i].pet.id].params.item_id) || (id = 0));
            40 > s && Inventory.has_equipped(clients[i], 855) && (Inventory.remove(clients[i], 855), 
            args.push(855), a = !1, testResults = .25, s += 5);
            var p = Inventory.remove_less_valuable(i, s), k;
            for (k in p) args.push(p[k].id);
            id && (40 > s && (clients[i].pet.xp *= testResults), Inventory.add(clients[i], pets[id].params.item_id, !0), 
            Pet.init(clients[i], pets[id].params.item_id));
            for (k = 0; k < data.length; k++) Inventory.remove(clients[i], data[k]);
            clients[i].temp.target_id = -1;
            clients[i].temp.busy = !1;
            if (a) {
                if (0 < clients[i].params.magics.length) {
                    s = [];
                    for (k in clients[i].params.magics) data = Magic[clients[i].params.magics[k].id], 
                    s.push(Math.ceil(clients[i].params.magics[k].count / data.params.uses) + "x " + data.name);
                    Elog.log("Player " + clients[i].name + " died and lost magics: " + s.join(", "));
                }
                clients[i].params.magics = [];
            }
            skills[i].health.current = skills[i].health.level;
            for (var r in skills[i]) "undefined" != typeof skills[i][r] && (skills[i][r].current = skills[i][r].level);
            Player.update_combat_attributes(clients[i]);
            Player.update_player_look(clients[i]);
            r = users_list[key] && clients[users_list[key]];
            "undefined" != typeof key && r && 16 == r.map ? PVP.win(clients[i], key, p) : "undefined" != typeof key && 24 == clients[i].map && (Player.send_message(i, "You were killed by " + key, COLOR.WHITE), 
            Player.send_message(users_list[key], "You killed " + clients[i].name, COLOR.WHITE));
            SSocket.send(sockets[i], {
                action: "my_data",
                data: clients[i]
            });
            Player.notify_skills(i);
            if (19 == clients[i].map) Minigames.arena.player_died(clients[i], key); else if (0 < args.length) {
                Elog.log("Player " + clients[i].name + " died and lost: [" + args.join(", ") + "]");
                i = [];
                for (k in args) i.push(item_base[args[k]].name + "(" + args[k] + ")");
                Elog.log(i.join(", "));
            }
        }
    },
    can_move: function(post) {
        return post.temp.busy ? !1 : !0;
    },
    in_a_fight: function(post, scale) {
        post.temp.busy = !0;
        post.temp.fight_id = scale;
        post.temp.duel_id = -1;
        post.temp.duel_with = "";
    },
    gained_level: function(a, b) {
        var param = skills[a.id][b].level, value = Level.find_by_xp(skills[a.id][b].xp, param);
        param != value && (skills[a.id][b].level = value, skills[a.id][b].current = "health" == b ? skills[a.id][b].current + 1 : Math.max(value, skills[a.id][b].current), 
        Player.report_level_up(a, b));
    },
    report_level_up: function(a, b) {
        a && sockets[a.id] && (Player.update_combat_level(a), SSocket.send(sockets[a.id], {
            action: "level_up",
            data: b
        }), SteamPayments.set_user_stats_for_game(a, b));
    },
    update_combat_level: function(socket) {
        socket && sockets[socket.id] && skills[socket.id] && (clients[socket.id].params.combat_level = Math.floor((skills[socket.id].accuracy.level + skills[socket.id].strength.level + skills[socket.id].defense.level + skills[socket.id].health.level + skills[socket.id].magic.level) / 4));
    },
    chest_size: function(e) {
        if ("undefined" == typeof e) return 0;
        e.temp.chest_size = 60 * e.params.chest_pages;
        return 60 * e.params.chest_pages;
    },
    inc_xp: function(a, b, c) {
        if (0 != c) if ("combat" == b) switch (Player.inc_xp(a, "health", c / 2), a.temp.combat_style) {
          case COMBAT_STYLE.CONTROLLED:
            Player.inc_xp(a, "accuracy", c / 3);
            Player.inc_xp(a, "defense", c / 3);
            Player.inc_xp(a, "strength", c / 3);
            break;

          case COMBAT_STYLE.AGGRESSIVE:
            Player.inc_xp(a, "strength", c);
            break;

          case COMBAT_STYLE.ACCURATE:
            Player.inc_xp(a, "accuracy", c);
            break;

          case COMBAT_STYLE.DEFENSIVE:
            Player.inc_xp(a, "defense", c);
        } else Private.set(a.id, "skills_saved", !1), skills[a.id][b].xp += c * config.xp_multiplier * (skills[a.id][b].multiplier || 1), 
        Pet.inc_xp(a, c * config.xp_multiplier), Player.gained_level(a, b), -1 != [ "health", "accuracy", "strength", "defense" ].indexOf(b) ? Timers.set(a.id + "notify_xp", function() {
            Player.notify_skills(a.id);
        }, 1e3) : Player.notify_skills(a.id, b);
    },
    finished_fight: function(details, initialClass) {
        "undefined" != typeof details && (details.temp.busy = !1, details.temp.fight_id = -1, 
        details.temp.target_id = -1, details.temp.duel_with = "", details.temp.duel_id = -1, 
        0 >= details.temp.health || SSocket.send(sockets[details.id], {
            action: "my_data",
            data: details
        }));
    },
    notify_skills: function(i, err) {
        sockets[i] && (err ? SSocket.send(sockets[i], {
            action: "skills",
            data: {
                skill: err,
                stats: skills[i][err],
                pet_xp: clients[i].pet && clients[i].pet.xp
            }
        }) : SSocket.send(sockets[i], {
            action: "skills",
            data: skills[i]
        }));
    },
    skills: function(obj) {
        return obj.me ? skills[0] : skills[obj.id];
    },
    save: function(id, val) {
        Timers.clear("save_player" + id);
        var client = clients[id];
        client && client.l && (!val && Private.get(id, "skills_saved") || store.set("skills_" + client.name, JSON.stringify(skills[client.id])), 
        (6e4 > timestamp() - clients[id].temp.idle_time || val) && store.set("data_" + client.name, JSON.stringify(clients[client.id])), 
        AREA.publish(client, {
            action: "move",
            i: client.i,
            j: client.j,
            map: client.map,
            id: client.id
        }), "undefined" != typeof client.backup || !val && Private.get(id, "skills_saved") || AREA.hiscores(client, {
            action: "levels",
            skills: skills[id]
        }), Private.set(id, "skills_saved", !0));
    },
    is_mod: function(names) {
        return /^(kemikaalikeijo|nox|dendrek|roase|foxy|sachro|opasni|m00derator|atomicdawgie|marxgames|imperialuser|crafty|blu|bobdylan|x6ken|p00nedbyme|hiyocchi|tsukino|macavele|stahna|tslice|ohhpaigey)$/.test(names);
    },
    is_admin: function(names) {
        return /^(margus|reside)$/.test(names);
    },
    load: function(i, widget) {
        var p = clients[i], client = sockets[i];
        store.get("data_" + clients[i].name, function(err, data) {
            if (!sockets[i] || err) Player.logout(i); else {
                try {
                    data = JSON.parse(data);
                } catch (k) {
                    console.log("PLAYER LOAD ERROR", data);
                    Player.logout(i);
                    return;
                }
                if (data && "object" == typeof data.params) {
                    delete data.id;
                    var a = clients[i].temp.address;
                    clients[i] = JSON.merge(clients[i], data);
                    clients[i].params = JSON.merge(getEmptyPlayer().params, clients[i].params);
                    clients[i].temp = JSON.merge(getEmptyPlayer().temp, clients[i].temp);
                    clients[i].temp.address = a;
                    clients[i].l = !1;
                    p = clients[i];
                    Player.is_admin(clients[i].name) ? (clients[i].permissions = PERMISSIONS.MOD, Player.report_spectator_key(clients[i], Spectate.key)) : Player.is_mod(clients[i].name) ? (clients[i].permissions = PERMISSIONS.PLAYER_MOD, 
                    Player.report_spectator_key(clients[i], Spectate.key)) : clients[client.id].permissions = "mapeditor" == clients[client.id].name ? PERMISSIONS.ADMIN : PERMISSIONS.NONE;
                }
                100 <= clients[i].map && (activeDungeons[clients[i].map - 100] && -1 < activeDungeons[clients[i].map - 100].players.indexOf(p.name) ? (a = AREA.area(clients[i]), 
                "undefined" == typeof areas[a] && (areas[a] = {}, sub.subscribe(config.prefix + a.toString()), 
                sub_local.subscribe(config.prefix + a.toString())), SSocket.send(sockets[i], {
                    action: "random_map",
                    options: activeDungeons[clients[i].map - 100].options,
                    map_id: clients[i].map
                })) : ((a = teleport_locations[map_names[clients[i].temp.last_map]]) || (a = teleport_locations.Dorpat), 
                clients[i].i = a.to_i, clients[i].j = a.to_j, clients[i].map = a.to_map));
                if (300 == p.map || "undefined" == typeof areas[AREA.area(clients[i])]) (a = teleport_locations[map_names[clients[i].temp.last_map]]) || (a = teleport_locations.Dorpat), 
                clients[i].i = a.to_i, clients[i].j = a.to_j, clients[i].map = a.to_map, clients[i].params.island = !1;
                areas[AREA.area(clients[i])][i] = i;
                delete clients[client.id].me;
                delete clients[client.id].mx;
                delete clients[client.id].my;
                clients[client.id].temp.busy = !1;
                clients[client.id].temp.duel_with = "";
                clients[client.id].temp.duel_id = -1;
                if (!clients[client.id].temp.last_captcha || 19e4 < timestamp() - clients[client.id].temp.last_captcha) clients[client.id].temp.penalty = !1;
                clients[client.id].temp.target_id = -1;
                clients[client.id].temp.fight_id = -1;
                clients[client.id].temp.active_offers = 100;
                Private.set(client.id, "balance", 0);
                AREA.sql(clients[client.id], {
                    action: "login"
                });
                AREA.sql(clients[client.id], {
                    action: "market_active_offers"
                });
                AREA.sql(clients[client.id], {
                    action: "market_active_transactions"
                });
                5 <= p.params.penalty || 0 == p.i && 0 == p.j && 0 == p.map ? (clients[i].i = 0, 
                clients[i].j = 0, clients[i].map = 0, Player.send_message(client.id, "You have been sentenced to jail for getting -5 penalty points", COLOR.TEAL), 
                Player.send_data(client.id)) : (a = clients[i], a = (a = map[a.map][a.i][a.j]) && a.b_i ? ground_base[a.b_i] : void 0, 
                (0 != on_map[clients[i].map][clients[i].i][clients[i].j] || a && a.blocking) && on_map[clients[i].map][clients[i].i][clients[i].j].b_t != BASE_TYPE.NPC && (a = getEmptyPlayer(), 
                clients[i].i = a.i, clients[i].j = a.j, clients[i].map = a.map));
                23 == p.map && Timers.set("poseidon" + p.name, function() {
                    Player.poseidon_timeout(p.name);
                }, 1e3 * (p.temp.poseidon_until - secondstamp()));
                if (ban_list[clients[i].temp.address] || ban_list_names[clients[i].name]) SSocket.send(sockets[i], {
                    action: "shutdown",
                    msg: "Game update! Please reload."
                }), Private.set(i, "no_disconnect", !0), sockets[i].disconnect(); else {
                    widget && "undefined" == typeof clients[client.id].temp.created_at ? (clients[client.id].temp.inventory = JSON.clone(starting_inventory), 
                    clients[client.id].temp.created_at = timestamp(), a = {
                        i: 32,
                        j: 17,
                        map: 12
                    }, AREA.update(clients[client.id], a), clients[client.id].i = a.i, clients[client.id].j = a.j, 
                    clients[client.id].map = a.map, clients[client.id].quests["1"] = {
                        step: 1
                    }, Player.send_new_player(client.id), Player.send_event(client.id, "new_player")) : (Player.send_event(client.id, "existing_player"), 
                    "undefined" == typeof clients[client.id].temp.created_at && (clients[client.id].temp.created_at = 13464576e5));
                    1 < config.xp_multiplier && Player.send_message(client.id, "Current experience rate is " + config.xp_multiplier + "x", COLOR.TEAL);
                    Player.update_player_look(clients[client.id]);
                    SSocket.send(sockets[i], {
                        action: "my_data",
                        data: clients[client.id]
                    });
                    AREA.publish(clients[i], {
                        action: "player_data",
                        data: Player.share_data(i)
                    });
                    setTimeout(function() {
                        clients[i] && AREA.all(clients[i], {
                            action: "join",
                            name: clients[i].name,
                            world: config.prefix
                        });
                    }, 1e3);
                    store.get("skills_" + clients[i].name, function(err, data) {
                        sockets[i] && ((data = JSON.parse(data)) && "object" == typeof data.health && (skills[i] = JSON.merge(getEmptySkills(), data)), 
                        SSocket.send(sockets[i], {
                            action: "skills",
                            data: skills[i]
                        }), Player.init(i), SSocket.send(sockets[i], {
                            action: "time",
                            data: secondstamp()
                        }), clients[i].l = !0, (19 == clients[i].map || clients[i].backup) && Minigames.player_activate(i), 
                        setTimeout(function() {
                            Player.handle_consecutive_logins(i);
                        }, 1e3));
                    });
                    for (a = 0; a < clients[i].params.magic_slots; a++) clients[i].params.magics[a] && !clients[i].params.magics[a].ready && Player.magic_cooldown(i, a);
                    Chest.load(i);
                    AREA.sql(clients[client.id], {
                        action: "mos_balance"
                    });
                    AREA.sql(clients[client.id], {
                        action: "quests"
                    });
                    store.hset("users_" + clients[i].name, "last_login", timestamp());
                    store.zadd([ "online", parseInt(secondstamp()), config.prefix + "::" + clients[i].name ], function(r, s) {});
                    if (a = geoip.lookup(clients[client.id].temp.address)) clients[i].temp.country = a.country;
                }
            }
        });
    },
    send_new_player: function(id) {
        SSocket.send(sockets[id], {
            action: "new_player"
        });
    },
    get_logged_users: function(id, rev) {
        var s = [], series = [];
        if (clients[id]) {
            var sha = parseInt(secondstamp()) - 31;
            store.zrangebyscore([ "online", sha, "+inf" ], function(act_listItems, choices) {
                for (var i = 0; i < choices.length; i++) {
                    var str = choices[i].split("::"), cml = str[0];
                    str.shift();
                    str = str.join("::");
                    s.push(str);
                    series.push({
                        world: cml,
                        name: str
                    });
                }
                1 < s.length && (SSocket.send(sockets[id], {
                    action: "online_players",
                    list: series
                }), rev || clients[id] && clients[id].permissions == PERMISSIONS.MOD ? Player.send_message(id, "Currently online(" + s.length + "): " + s.join(", "), COLOR.WHITE) : Player.send_message(id, "Currently online: " + s.length, COLOR.WHITE));
                total_online = s.length;
            });
        }
    },
    last_teleport: 0,
    pre_teleport: function(a, b) {
        map_change_in_progress || 1500 > timestamp() - Player.last_teleport && 19 != current_map || 500 > timestamp() - Player.last_teleport && 19 == current_map || ("undefined" != typeof b.params.to_map && a.map != b.params.to_map && "undefined" == typeof map[b.params.to_map] ? (addChatText("Loading...", null, COLOR.WHITE), 
        map_change_in_progress = !0, LazyLoad.js(cdn_url + "maps/map" + b.params.to_map + ".js?" + map_hashes[b.params.to_map], function() {
            LOAD(b.params.to_map);
            map_change_in_progress = !1;
            Player.teleport(a, b);
        })) : Player.teleport(a, b));
    },
    teleport: function(path, obj) {
        if ("undefined" != typeof obj.params.to_map && obj.params.to_map != current_map) for (var playerno in players) 0 != playerno && delete players[playerno];
        Player.last_teleport = timestamp();
        Socket.send("teleport", {
            target_id: obj.id
        });
    },
    toggle_healthbar: function() {
        players[0].temp.healthbar = !players[0].temp.healthbar;
        Socket.send("toggle_healthbar", {
            healthbar: players[0].temp.healthbar
        });
        players[0].temp.healthbar ? (removeClass(document.getElementById("player_healthbar"), "hidden"), 
        document.getElementById("player_health_name").innerHTML = players[0].name, Player.update_healthbar()) : -1 == players[0].temp.target_id && addClass(document.getElementById("player_healthbar"), "hidden");
        Player.set_healthbar_text(players[0].temp.healthbar);
    },
    set_healthbar_text: function(a) {
        a ? document.getElementById("settings_healthbar").innerHTML = "Permanent health bar (on)" : document.getElementById("settings_healthbar").innerHTML = "Permanent health bar (off)";
    },
    update_healthbar: function() {
        players[0].temp.healthbar && removeClass(document.getElementById("player_healthbar"), "hidden");
        document.getElementById("player_health_name").innerHTML = players[0].name;
        -1 == players[0].temp.target_id && (document.getElementById("player_health").style.width = Math.round(skills[0].health.current / skills[0].health.level * 100) + "%");
    },
    share_data: function(i) {
        return "undefined" == typeof clients[i] ? {} : {
            name: clients[i].name,
            b_i: clients[i].b_i,
            b_t: clients[i].b_t,
            params: {
                speed: clients[i].params.speed,
                hash: clients[i].params.hash,
                combat_level: clients[i].params.combat_level,
                health: clients[i].params.health,
                pvp: clients[i].params.pvp
            },
            temp: {
                health: clients[i].temp.health,
                to: clients[i].temp.to,
                dest: clients[i].temp.dest,
                cathedral_level: clients[i].temp.cathedral_level,
                cathedral_time: clients[i].temp.cathedral_time,
                poseidon_until: clients[i].temp.poseidon_until
            },
            map: clients[i].map,
            pet: {
                id: clients[i].pet.id,
                enabled: clients[i].pet.enabled
            },
            i: clients[i].i,
            j: clients[i].j,
            id: clients[i].id
        };
    },
    request_captcha: function(id, callback) {
        "undefined" == typeof callback && (callback = !1);
        if ("boolean" != typeof iamserver) return !1;
        var item = clients[id];
        if ("undefined" == typeof item || !callback && (clients[id].temp.last_captcha > timestamp() - 6e5 || clients[id].backup || Math.random() > .005 + .005 * Math.max(0, item.params.penalty) || item.params.enough_points)) return !1;
        item.params.penalty++;
        item.temp.penalty = !0;
        clients[id].temp.last_captcha = timestamp();
        Timers.set("captcha" + id, function() {
            item.temp.penalty = !1;
            5 <= item.params.penalty && (item.i = 0, item.j = 0, item.map = 0, Player.send_message(item.id, "You have been sentenced to jail for getting -5 penalty points", COLOR.TEAL), 
            AREA.all("chat", {
                action: "message",
                data: {
                    message: item.name.sanitize() + " has just been sentenced to jail for getting -5 penalty points!",
                    color: COLOR.TEAL,
                    type: "chat"
                }
            }), Player.send_data(item.id));
        }, 19e4);
        clients[id].params.numcaptcha ? (Private.set(id, "captcha", parseInt(9e4 * Math.random() + 1e4)), 
        SSocket.send(sockets[id], {
            action: "captcha",
            img: numcaptcha.generate(Private.get(id, "captcha"))
        })) : SSocket.send(sockets[id], {
            action: "captcha"
        });
    },
    close_captcha: function() {
        Popup.prompt("Are you sure? Closing this captcha window will give you a -1 captcha point. -5 captcha points = jail", function() {
            captcha = !1;
            document.getElementById("captcha_menu").style.display = "none";
            showCaptchaBonus();
        }, null_function);
    },
    request_more_info: function(a) {
        Player.ignore_more_info_dialog = !1;
        Socket.send("player_info_request", {});
    },
    ignore_more_info_dialog: !0,
    age: 0,
    more_info_dialog: function(d) {
        Player.ignore_more_info_dialog || (document.getElementById("player_more_info_form").style.display = "block");
        for (var colors = [], i = 1920; 2015 > i; i++) colors.push(i);
        for (var args = [ {
            name: "January",
            "short": "1"
        }, {
            name: "February",
            "short": "2"
        }, {
            name: "March",
            "short": "3"
        }, {
            name: "April",
            "short": "4"
        }, {
            name: "May",
            "short": "5"
        }, {
            name: "June",
            "short": "6"
        }, {
            name: "July",
            "short": "7"
        }, {
            name: "August",
            "short": "8"
        }, {
            name: "September",
            "short": "9"
        }, {
            name: "October",
            "short": "10"
        }, {
            name: "November",
            "short": "11"
        }, {
            name: "December",
            "short": "12"
        } ], color = [], i = 1; 32 > i; i++) color.push(i);
        d = d || {};
        d.year = d.year || colors[colors.length - 1];
        d.month = d.month || args[0]["short"];
        d.day = d.day || color[0];
        d = JSON.merge({
            countries: countries,
            country: players[0].temp.country || "",
            first_name: "",
            last_name: "",
            email: "",
            newsletter: !0,
            days: color,
            months: args,
            years: colors
        }, d);
        document.getElementById("player_more_info_content").innerHTML = HandlebarTemplate.player_more_info()(d);
        document.getElementById("country").value = d.country;
        document.getElementById("year").value = d.year;
        document.getElementById("month").value = d.month;
        document.getElementById("day").value = d.day;
        Player.age = Player.get_age(d.month + "-" + d.day + "-" + d.year);
    },
    get_age: function(date) {
        var today = new Date();
        date = new Date(date);
        var db = today.getFullYear() - date.getFullYear(), e = today.getMonth() - date.getMonth();
        (0 > e || 0 === e && today.getDate() < date.getDate()) && db--;
        return db;
    },
    save_more_info: function() {
        var a = {
            country: document.getElementById("country").value,
            first_name: document.getElementById("first_name").value,
            last_name: document.getElementById("last_name").value,
            email: document.getElementById("email").value,
            newsletter: document.getElementById("newsletter").checked,
            day: document.getElementById("day").value,
            month: document.getElementById("month").value,
            year: document.getElementById("year").value
        };
        Socket.send("player_info_update", {
            data: a
        });
        document.getElementById("player_more_info_form").style.display = "none";
        Player.ignore_more_info_dialog = !0;
        Socket.send("player_info_request", {});
    },
    sync_duel_dialog: function(details) {
        var e = clients[details.attacker], target = clients[details.defender];
        "undefined" == typeof e || "undefined" == typeof target || target.temp.duel_with != e.name || e.temp.duel_with != target.name || target.temp.busy || e.temp.busy || (SSocket.send(sockets[details.attacker], {
            action: "duel_dialog",
            settings: details
        }), SSocket.send(sockets[details.defender], {
            action: "duel_dialog",
            settings: details
        }));
    },
    duel_dialog: function(data) {
        document.getElementById("duelling_form").style.display = "block";
        document.getElementById("duelling_no_running").checked = data.running_not_allowed;
        document.getElementById("duelling_no_magic").checked = data.magic_not_allowed;
        for (var i = 0; 4 > i; i++) {
            var elem = document.getElementById("duel_my_" + i);
            elem.style.background = "";
            elem = document.getElementById("duel_other_" + i);
            elem.style.background = "";
        }
        duelling_options = data;
        var binary = Player.duel_hash(data);
        duel_inventory = [];
        for (i = 0; 24 > i; i++) if (elem = document.getElementById("duel_inv_" + i), removeClass(elem, "selected"), 
        "undefined" != typeof players[0].temp.inventory[i]) {
            duel_inventory[i] = players[0].temp.inventory[i];
            var shape = item_base[players[0].temp.inventory[i].id], backgroundLayer = IMAGE_SHEET[shape.img.sheet];
            elem.style.background = 'url("' + backgroundLayer.url + '") no-repeat scroll ' + -shape.img.x * backgroundLayer.tile_width + "px " + -shape.img.y * backgroundLayer.tile_height + "px transparent";
        } else elem.style.background = "";
        my_stake = [];
        other_stake = [];
        document.getElementById("duelling_accept").innerHTML = "Accept";
        data.attacker == players[0].id ? (my_stake = data.first_stake, other_stake = data.second_stake, 
        duelling_options.first_accept == binary && (document.getElementById("duelling_accept").innerHTML = "Duel!", 
        duelling_options.first_confirm == binary && (document.getElementById("duelling_accept").innerHTML = "Waiting for other player..."))) : (my_stake = data.second_stake, 
        other_stake = data.first_stake, duelling_options.second_accept == binary && (document.getElementById("duelling_accept").innerHTML = "Duel!", 
        duelling_options.second_confirm == binary && (document.getElementById("duelling_accept").innerHTML = "Waiting for other player...")));
        for (i = 0; i < my_stake.length; i++) elem = document.getElementById("duel_my_" + i), 
        removeClass(elem, "selected"), "undefined" != typeof my_stake[i] ? (shape = item_base[my_stake[i]], 
        backgroundLayer = IMAGE_SHEET[shape.img.sheet], elem.style.background = 'url("' + backgroundLayer.url + '") no-repeat scroll ' + -shape.img.x * backgroundLayer.tile_width + "px " + -shape.img.y * backgroundLayer.tile_height + "px transparent") : elem.style.background = "";
        for (i = 0; i < other_stake.length; i++) elem = document.getElementById("duel_other_" + i), 
        removeClass(elem, "selected"), "undefined" != typeof other_stake[i] ? (shape = item_base[other_stake[i]], 
        backgroundLayer = IMAGE_SHEET[shape.img.sheet], elem.style.background = 'url("' + backgroundLayer.url + '") no-repeat scroll ' + -shape.img.x * backgroundLayer.tile_width + "px " + -shape.img.y * backgroundLayer.tile_height + "px transparent") : elem.style.background = "";
    },
    duel_stake: function(i) {
        "undefined" != typeof players[0].temp.inventory[i] && Socket.send("duel_stake", {
            inventory_slot: i
        });
    },
    duel_stake_remove: function(a) {
        "undefined" != typeof my_stake[a] && Socket.send("duel_stake_remove", {
            slot: a
        });
    },
    duel_settings: function() {
        Socket.send("duel_settings", {
            running_not_allowed: document.getElementById("duelling_no_running").checked,
            magic_not_allowed: document.getElementById("duelling_no_magic").checked
        });
    },
    duel_button: function() {
        var request = Player.duel_hash(duelling_options), err = !1;
        duelling_options.attacker == players[0].id ? duelling_options.first_accept == request && (err = !0) : duelling_options.second_accept == request && (err = !0);
        err ? Socket.send("duel_confirm", {
            hash: request
        }) : Socket.send("duel_accept", {
            hash: request
        });
    },
    duel_hash: function(validation) {
        var code = validation.magic_not_allowed ? "t" : "f", code = code + (validation.running_not_allowed ? "t" : "f"), code = code + ("f" + validation.first_stake.join("!"));
        return code += "s" + validation.second_stake.join("?");
    },
    add_players_datalist: function(name, stat) {
        if (supports.datalist && name.filterChat("EN") == name) {
            var pane = document.getElementById("player_datalist");
            if (!document.getElementById("player_datalist_" + name)) {
                var o = new Option(name, name);
                o.id = "player_datalist_" + name;
                pane.appendChild(o);
            }
        }
    },
    danger_level: function(val) {
        if (16 != val.map && 24 != val.map) return 0;
        val = Math.round((val.i + val.j) / 2 - 20);
        return 0 < val ? val : 0;
    },
    fix_inventory: function(id) {
        for (var client = clients[id], i = client.temp.inventory.length - 1; 0 <= i; i--) if (client.temp.inventory[i] && "undefined" == typeof client.temp.inventory[i].id) return clients[id].temp.inventory.splice(i, 1), 
        Player.send_inventory(id), !0;
    },
    captcha_xp_per_point: function(calculateScaleFromInputParamsFn, inputParams) {
        var scale = 100 + Math.max(0, 50 * Math.ceil((inputParams - 29) / 10));
        "carpentry" == calculateScaleFromInputParamsFn ? scale *= .5 : "breeding" == calculateScaleFromInputParamsFn && (scale *= .25);
        return scale;
    },
    update_captcha_points: function() {
        var a = document.getElementById("captcha_green"), b = document.getElementById("penalty_bonus_skill").value, b = Player.captcha_xp_per_point(b, skills[0][b].level), d = Math.max(0, parseInt(document.getElementById("penalty_bonus_points").value));
        a.innerHTML = "* Receive " + b * d + " experience";
    },
    open_treasure_chest: function(a) {
        Socket.send("open_treasure_chest", {
            target: a
        });
    },
    send_active_party: function(i, elem) {
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "active_party",
            data: activeParties[elem]
        });
    },
    leave_party: function(i, elem) {
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "leave_party",
            data: activeParties[elem]
        });
    },
    remove_skill_level: function() {
        var value = document.getElementById("remove_skill_value").value, card = Inventory.get_item_count(players[0], 1081);
        BigMenu.hide_remove_skill_dialog();
        1 > card && addChatText("You need a " + item_base[1081].name, void 0, COLOR.PINK);
        Socket.send("remove_skill_level", {
            skill: value
        });
    },
    send_cabinet_items: function(i, object) {
        "undefined" == typeof sockets[i] && "undefined" == typeof player_map[clients[i].name] || AREA.publish(clients[i], {
            action: "cabinet_items",
            cabinet: {
                i: object.i + 10,
                j: object.j + 10
            },
            items: player_maps[clients[i].name].data.on_map[object.i][object.j].it
        }, !0);
    },
    show_referrals: function() {
        Socket.send("get_referrals", {
            something: !0
        });
    },
    show_kongregate_invite_box: function(a) {
        kongregate.api.services.showInvitationBox({
            content: "OMG! Come try out this awesome game!",
            filter: "not_played",
            kv_params: {
                kv_ref: players[0].name
            }
        });
    },
    show_mocospace_invite_box: function(a) {
        MocoSpace.inviteFriends("Come play RPG MO with me!", "OMG! Come try out this awesome game!", "Play now!", "ref=" + players[0].name, function(elem) {
            elem.hadError() && alert("Error sending invites: " + elem.getErrorMessage());
        });
    },
    referral_dialog: function(tabs) {
        document.getElementById("payment_form").style.display = "none";
        tabs[0].total_earned = tabs[0].total_earned || 0;
        tabs[0].player = encodeURIComponent(players[0].name);
        tabs[0].url = encodeURIComponent("http://rpg-de.mo.ee/?ref=" + tabs[0].player);
        tabs[0].title = encodeURIComponent("Free MMORPG - RPG MO - Web Browser Game");
        var template = FormHelper.get_form("referrals");
        "undefined" != typeof kongregate && kongregate.api ? template.content.innerHTML = HandlebarTemplate.referral_dialog_kongregate()(tabs[0]) : "undefined" != typeof MocoSpace ? template.content.innerHTML = HandlebarTemplate.referral_dialog_mocospace()(tabs[0]) : "steam" == getParameterByName("inapp") ? (template.content.innerHTML = HandlebarTemplate.referral_dialog()(tabs[0]), 
        useExternalBrowserLinks(template.content)) : template.content.innerHTML = HandlebarTemplate.referral_dialog()(tabs[0]);
    },
    handle_consecutive_logins: function(id) {
        var socket = clients[id];
        if (!socket || !socket.temp) return !1;
        var d = timestamp() - socket.temp.consecutive_login;
        1728e5 < d ? (Player.has_premium(clients[id].temp.premium_until) || (clients[id].temp.consecutive_logins = 0), 
        clients[id].temp.consecutive_login = timestamp()) : 72e6 < d && (clients[id].temp.consecutive_logins++, 
        clients[id].temp.consecutive_login = timestamp(), Player.report_consecutive_reward(id), 
        Player.is_mod(socket.name) && Player.give_consecutive_moderator_reward(id, {
            type: "mos",
            amount: 10
        }));
    },
    report_consecutive_reward: function(id) {
        for (var c = clients[id].temp.consecutive_logins, start = 0, e = Math.floor(c / 226), i = 0; i < server_daily_rewards.length; i++) {
            if (server_daily_rewards[i].day == c % 226) {
                Player.give_consecutive_reward(id, server_daily_rewards[i].reward);
                start = i;
                break;
            }
            if (server_daily_rewards[i].day > c % 226 && 1 < c % 226) {
                start = i - 1;
                break;
            }
        }
        for (var d = [], a = {
            sheet: "12",
            x: 2,
            y: 1
        }, b = {
            sheet: "12",
            x: 3,
            y: 31
        }, s = {
            sheet: "12",
            x: 4,
            y: 31
        }, i = 0; 3 > i; i++) {
            var result = server_daily_rewards[start + i], data = {
                day: result.day + 226 * e,
                message: "",
                reward: {}
            };
            0 == i && c % 226 == result.day && (data.message = "TODAY");
            if (1 == i) {
                var diff = result.day - c % 226;
                data.message = diff + " day" + sOrNoS(diff) + " remaining";
            }
            switch (result.reward.type) {
              case "item":
                data.reward.item_id = result.reward.item_id;
                break;

              case "coins":
                data.reward = JSON.merge(a, {
                    desc: thousandSeperate(result.reward.amount) + " coins"
                });
                break;

              case "exp":
                data.reward = JSON.merge(s, {
                    desc: thousandSeperate(result.reward.amount) + " combat experience"
                });
                break;

              case "mos":
                data.reward = JSON.merge(b, {
                    desc: thousandSeperate(result.reward.amount) + " MOS"
                });
            }
            2 == i && (data.reward = {
                item_id: 1326
            });
            d.push(data);
        }
        SSocket.send(sockets[id], {
            action: "consecutive_logins_dialog",
            data: {
                day: c,
                days: d
            }
        });
    },
    give_consecutive_reward: function(i, data) {
        var c = clients[i], h = "";
        switch (data.type) {
          case "item":
            Items.force_give_to_player(i, data.item_id);
            h = item_base[data.item_id].name;
            break;

          case "coins":
            clients[i].temp.coins += data.amount;
            Player.send_data(i);
            h = thousandSeperate(data.amount) + " coins";
            break;

          case "exp":
            Player.inc_xp(clients[i], "combat", data.amount);
            h = thousandSeperate(data.amount) + " combat experience";
            break;

          case "mos":
            AREA.sql(clients[i], {
                action: "add_mos",
                player_name: clients[i].name,
                amount: data.amount
            }), Timers.set("update_" + i, function() {
                clients[i] && AREA.sql(clients[i], {
                    action: "mos_balance"
                });
            }, 1e3), h = thousandSeperate(data.amount) + " MOS";
        }
        Player.send_message(c.id, "Your daily log-in reward: " + h, COLOR.GREEN);
    },
    give_consecutive_moderator_reward: function(id, data) {
        var client = clients[id], message = "";
        switch (data.type) {
          case "mos":
            AREA.sql(clients[id], {
                action: "add_mos",
                player_name: clients[id].name,
                amount: data.amount
            }), Timers.set("update_" + id, function() {
                clients[id] && AREA.sql(clients[id], {
                    action: "mos_balance"
                });
            }, 1e3), message = thousandSeperate(data.amount) + " MOS";
        }
        Player.send_message(client.id, "Your daily moderator log-in reward: " + message, COLOR.GREEN);
    },
    consecutive_logins_dialog: function(forDatabase) {
        var template = FormHelper.get_form("consecutive_login");
        forDatabase.days[0].bgcolor = "rgb(51, 73, 48)";
        forDatabase.days[0].margin_right = 16;
        forDatabase.days[1].margin_right = 16;
        forDatabase.days[1].bgcolor = "rgb(70, 70, 70)";
        forDatabase.days[2].margin_right = 0;
        forDatabase.days[2].bgcolor = "rgb(70, 70, 70)";
        template.content.innerHTML = HandlebarTemplate.consecutive_login_dialog()(forDatabase);
    },
    spend_mos: function(client, value) {
        if (Private.get(client.id, "balance") < value) return !1;
        Private.set(client.id, "balance", Private.get(client.id, "balance") - value);
        AREA.sql(clients[client.id], {
            action: "add_mos",
            player_name: client.name,
            amount: -value
        });
        Timers.set("update_" + client.id, function() {
            clients[client.id] && AREA.sql(clients[client.id], {
                action: "mos_balance"
            });
        }, 1e3);
        return !0;
    },
    show_rules: function() {
        var e = FormHelper.get_form("chat_rules", {
            fullscreen: !0
        });
        e.content.style.height = "92%";
        e.content.style.minHeight = "92%";
        e.content.innerHTML = "\r\n    <iframe src='rules_in_game.html' style='width: 100%;background:white;min-height:92%;max-height:92%;overflow:auto' class='scrolling_allowed'/>\r\n    ";
    },
    location_name: function(p) {
        return p.map == Cathedral.map ? "Cathedral (" + p.temp.cathedral_level + ")" : p.map < maps ? map_names[p.map] : 300 == p.map ? p.params.island + "'s Island" : 120 <= p.map && p.map <= 120 + Guild.max_allowed ? "Guild" : "Party Dungeon";
    },
    idle_time: function(post) {
        return beautifulTime(timestamp() - post.temp.idle_time, 3, !0);
    },
    action: function(id) {
        clients[id] && (clients[id].temp.idle_time = timestamp());
    },
    report_spectator_key: function(details, initialClass) {
        SSocket.send(sockets[details.id], {
            action: "spectate",
            sub: "key",
            key: initialClass
        });
    },
    teleport_book_form: function() {
        var a = [], b;
        for (b in teleport_locations) teleport_locations[b].no_book || a.push(b);
        FormHelper.get_form("teleport_book").content.innerHTML = HandlebarTemplate.teleport_book_form()(a);
    },
    teleport_book_call: function() {
        FormHelper.hide_form("teleport_book");
        Socket.send("teleport_book", {
            name: document.getElementById("teleport_book_location").value
        });
    },
    secret_boss_scroll_form: function() {
        var a = [], b;
        for (b in secret_boss_scroll_locations) a.push(b);
        FormHelper.get_form("secret_boss_scroll").content.innerHTML = HandlebarTemplate.secret_boss_scroll_form()(a);
    },
    secret_boss_scroll_call: function() {
        FormHelper.hide_form("secret_boss_scroll");
        Socket.send("secret_boss_scroll", {
            name: document.getElementById("secret_boss_scroll_location").value
        });
    },
    has_premium: function(key) {
        return 0 > minutesPastDelta(key);
    },
    client_logout: function() {
        socket.disconnect();
        Music.stop();
        auto_connect = !1;
        setTimeout(function() {
            socket.socket.reconnect();
        }, 1e3);
        "android" == getParameterByName("inapp") && Fullscreen.exit();
    },
    illusion_guild_timer: function() {
        23 == players[0].map && MapTimer.init(function() {
            return !1;
        }, players[0].temp.poseidon_until, 23, !0);
    },
    poseidon_timeout: function(item) {
        var settings = {
            i: 75,
            j: 32,
            map: 14
        };
        users_list[item] && (item = clients[users_list[item]], 23 == item.map && (Client.teleport_position(item, settings), 
        item.temp.busy = !1));
    },
    send_achievement: function(i, id) {
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "achievement",
            name: id
        });
    },
    achievement_monster: function(url, id) {
        if (Private.get(url, "steam")) switch (id) {
          case 155:
            Player.send_achievement(url, "DIABLO");
            break;

          case 154:
            Player.send_achievement(url, "ACID_DRAGON_LORD");
            break;

          case 153:
            Player.send_achievement(url, "ANCIENT_HYDRA");
            break;

          case 255:
            Player.send_achievement(url, "PHARAOH");
            break;

          case 257:
            Player.send_achievement(url, "NEPHILIM_WARRIOR");
            break;

          case 278:
            Player.send_achievement(url, "WORLD_TREE");
        }
    }
};

function getEmptyPlayer() {
    return {
        name: "Name",
        b_i: -1,
        b_t: BASE_TYPE.PLAYER,
        me: !1,
        permissions: PERMISSIONS.NONE,
        params: {
            speed: 150,
            health: 10,
            penalty: 0,
            chest_pages: 1,
            market_offers: 5,
            head: 0,
            facial_hair: 0,
            body: 0,
            pants: 0,
            cape: 0,
            left_hand: 0,
            right_hand: 0,
            shield: 0,
            helmet: 0,
            boots: 0,
            weapon: 0,
            hash: "0 0 0 0 0 0 0 0 0 0 0",
            magic_slots: 0,
            magics: [],
            cooldown: 0,
            enough_points: !1,
            d_head: 0,
            d_facial_hair: 0,
            d_body: 0,
            d_pants: 0,
            combat_level: 3,
            pvp: !1
        },
        i: 14,
        j: 14,
        img: {
            sheet: IMAGE_SHEET.MONSTER1,
            x: 3,
            y: 0
        },
        temp: {
            animate_until: 0,
            to: {
                i: 14,
                j: 14
            },
            dest: {
                i: 14,
                j: 14
            },
            aim: 0,
            power: 0,
            magic: 0,
            armor: 0,
            busy: !1,
            health: 10,
            target_id: -1,
            total_defense: 0,
            total_strength: 0,
            total_accuracy: 0,
            total_magic_block: 0,
            inventory: [],
            combat_style: COMBAT_STYLE.CONTROLLED,
            fight_id: -1,
            coins: 0,
            healthbar: !0,
            active_offers: 100,
            chest_size: 60,
            duel_with: "",
            duel_id: -1,
            last_map: 0,
            run: !1,
            quest_cooldown: 0,
            quest_diff: 0,
            guild: !1,
            consecutive_logins: 0,
            consecutive_login: timestamp(),
            minigame: "-",
            island: !1,
            allow_spectators: !0,
            idle_time: timestamp(),
            cathedral_level: 0,
            cathedral_time: 0,
            premium_until: 0,
            poseiden_until: 0
        },
        path: [],
        pet: {
            id: 0,
            enabled: !1,
            chest: [],
            xp: 0
        },
        mx: 0,
        my: 0,
        map: 0,
        quests: {}
    };
}

function getPlayersPet(args) {
    return {
        name: args.name + "'s pet",
        b_i: -1,
        b_t: BASE_TYPE.PET,
        me: !1,
        id: args.pet.id,
        params: {
            owner: args.id,
            speed: args.params.speed
        },
        i: args.i,
        j: args.j,
        img: args.pet && pets[args.pet.id].img,
        temp: {
            animate_until: 0,
            to: {
                i: args.i,
                j: args.j
            },
            dest: {
                i: args.i,
                j: args.j
            }
        },
        path: [],
        mx: 0,
        my: 0,
        map: args.map
    };
}

function getEmptySkills() {
    return {
        accuracy: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        strength: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        defense: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        health: {
            xp: Level.xp_for_level(10),
            level: 10,
            current: 10,
            multiplier: 1
        },
        magic: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        alchemy: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        woodcutting: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        farming: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        fishing: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        cooking: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        jewelry: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        carpentry: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        forging: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        mining: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        },
        breeding: {
            xp: 0,
            level: 1,
            current: 1,
            multiplier: 1
        }
    };
}

function getEmptyInventory() {
    return [];
}

function preloadPlayer() {
    players[0] = JSON.merge(getEmptyPlayer(), {
        img: IMAGES.EMPTY,
        me: !0
    });
    players[0].temp.inventory = getEmptyInventory();
    skills[0] = getEmptySkills();
}

var starting_inventory = [ {
    id: 3,
    selected: !1
} ], monster_count = 0, monster_grid = [];

function initMonsters() {
    for (var currentStep = 0; currentStep < maps; currentStep++) {
        monster_grid[currentStep] = my_map_array();
        for (var index = 0; index < map_size_x; index++) for (var playbackFrameCount = 0; playbackFrameCount < map_size_y; playbackFrameCount++) {
            var e = obj_g(on_map[currentStep][index][playbackFrameCount]);
            e && e.b_t == BASE_TYPE.NPC && e.type == OBJECT_TYPE.ENEMY && (e.init.mon_id = monster_count, 
            e.temp.broadcast = !0, e.temp.respawn_time = timestamp(), e.temp.last_attacked = 0, 
            e.params.combat_level = FIGHT.calculate_monster_level(e), monster_count++, markMonsterArea(e, e, !0, e, !1));
        }
    }
}

function initMonstersMap(currentStep) {
    monster_grid[currentStep] = my_map_array();
    for (var index = 0; index < map_size_x; index++) for (var playbackFrameCount = 0; playbackFrameCount < map_size_y; playbackFrameCount++) {
        var e = obj_g(on_map[currentStep][index][playbackFrameCount]);
        e && e.b_t == BASE_TYPE.NPC && e.type == OBJECT_TYPE.ENEMY && (e.init.mon_id = monster_count, 
        e.temp.broadcast = !0, e.temp.respawn_time = timestamp(), e.temp.last_attacked = 0, 
        e.params.radius = 9, monster_count++, markMonsterArea(e, e, !0, e, !1));
    }
}

function markMonsterArea(layer, b, hasOwnProperty, pos, cb) {
    var rect = function(x, y, w, h, col) {
        if (!(0 > x || x > map_size_x - 1 || 0 > y || y > map_size_y - 1 || !map_walkable(layer.map, x, y) && !col)) {
            if (h) {
                "undefined" == typeof monster_grid[layer.map][x][y] && (monster_grid[layer.map][x][y] = {});
                if ("boolean" == typeof monster_grid[layer.map][x][y][layer.id]) return;
                monster_grid[layer.map][x][y][layer.id] = !0;
            } else if ("undefined" != typeof monster_grid[layer.map][x][y] && "boolean" == typeof monster_grid[layer.map][x][y][layer.id]) delete monster_grid[layer.map][x][y][layer.id]; else return;
            w--;
            0 < w && (rect(x + 1, y, w, h, !1), rect(x - 1, y, w, h, !1), rect(x, y + 1, w, h, !1), 
            rect(x, y - 1, w, h, !1));
        }
    };
    cb && rect(pos.i, pos.j, layer.params.radius, !1, !0);
    hasOwnProperty && rect(b.i, b.j, layer.params.radius, !0, !0);
}

function notifyMonsters(data) {
    players[data.data.id] = data.data;
    for (var $1 in monster_grid[data.data.map][data.i][data.j]) {
        var p = objects_data[$1];
        if (!p.temp.busy && p.temp.respawn_time < timestamp() && (p.params.aggressive && data.data.params.combat_level < p.params.combat_level + 20 || data.data.temp.target_id == $1 || 100 <= data.map || 16 == data.map)) if (inDistance(data.i, data.j, p.i, p.j)) monsterAttacksPlayer(p, data); else if (!p.params.aggressive && 100 > data.map) continue;
        p.temp.broadcast && (p.temp.respawn_time < timestamp() ? AREA.publish(data, {
            action: "monster_visible",
            target_id: p.id,
            i: p.i,
            j: p.j,
            health: p.temp.health
        }, !0) : AREA.publish(data, {
            action: "monster_invisible",
            target_id: p.id,
            i: p.i,
            j: p.j,
            duration: p.temp.respawn_time - timestamp()
        }, !0), p.temp.broadcast = !1, enableMonsterBroadcast(5e3, p.id));
    }
}

function enableMonsterBroadcast(val, id) {
    Timers.set("reset_monster_broadcast" + id, function() {
        objects_data[id] && (objects_data[id].temp.broadcast = !0);
    }, val);
}

function attackMonster(b, s) {
    var e = objects_data[b];
    !e.temp.busy && inDistance(s.i, s.j, e.i, e.j) && e.temp.respawn_time < timestamp() && monsterAttacksPlayer(e, s);
}

function monsterAttacksPlayer(client, item) {
    if (!(1e3 > timestamp() - objects_data[client.id].temp.last_attacked)) {
        var id = item.data.temp.target_id && item.data.temp.target_id == client.id ? item.data.id : client.id;
        objects_data[client.id].temp.busy = !0;
        objects_data[client.id].temp.target_id = item.data.id;
        objects_data[client.id].temp.last_attacked = timestamp();
        AREA.channel(item.from_channel, {
            action: "monster_attacks",
            position: {
                i: item.i,
                j: item.j
            },
            player: item.data.id,
            monster: client,
            attacker: id
        });
    }
}

function monsterDeath(d) {
    Timers.clear("reset_monster" + d.id);
    var item = objects_data[d.id];
    item && (item.temp.busy = !0, item.temp.respawn_time = timestamp() + Monster.respawn_time(d.id), 
    item.temp.target_id = -1, map_settings[d.map] && !map_settings[d.map].respawn ? (item.temp.respawn_time = timestamp() + 54e5, 
    map_settings[d.map].monsters--, markMonsterArea(d, {}, !1, d, !0)) : setTimeout(function() {
        monsterRespawn(d.id);
    }, Monster.respawn_time(d.id)));
}

function monsterWin(post, tsid) {
    if (objects_data[post.id]) {
        if (objects_data[post.id].temp.target_id != tsid) return !1;
        objects_data[post.id].temp.busy = !1;
        objects_data[post.id].temp.health = post.temp.health;
        objects_data[post.id].temp.target_id = -1;
        objects_data[post.id].temp.last_attacked = timestamp();
        Timers.clear("reset_monster" + post.id);
    }
}

function monsterRespawn(me) {
    objects_data[me] && (Monster.respawn(me), me = objects_data[me], me.temp.broadcast = !0, 
    markMonsterArea(me, me, !0, {}, !1), AREA.publish(me, {
        action: "monster_spawn",
        target: me
    }));
}

var Monster = {
    respawn: function(data, position, offset, success) {
        data = objects_data[data];
        data.i = position || data.init.i;
        data.j = offset || data.init.j;
        data.temp.busy = !1;
        data.temp.health = success || data.params.health;
    },
    respawn_time: function(specs) {
        specs = objects_data[specs];
        return specs.params.respawn_time ? Math.max(5e3, 1e3 * specs.params.respawn_time) : 3e4 + 1e3 * specs.params.health;
    },
    display: function(data) {
        data = objects_data[data.id];
        Monster.respawn(data.id, data.i, data.j, data.params.health);
        on_map[data.map][data.i][data.j] || (on_map[data.map][data.i][data.j] = obj_s(data), 
        current_map == data.map && map_visible(data.i, data.j) && updateBase(), node_graphs[data.map].nodes[data.i][data.j].type = 0);
    },
    hide: function(data) {
        data && (data = objects_data[data.id]) && on_map[data.map][data.i][data.j] && (on_map[data.map][data.i][data.j] = !1, 
        current_map == data.map && map_visible(data.i, data.j) && updateBase(), node_graphs[data.map].nodes[data.i][data.j].type = 1);
    },
    drops_item: function(name, cb) {
        var data = cb.params.drops, j;
        for (j in data) {
            var key = Math.random();
            if (data[j].chance > key) return Items.drop(name, cb, data[j].id);
        }
    },
    use_magic: function(a, msg) {
        if ("undefined" == typeof fights[a]) return !1;
        if ("undefined" != typeof msg.temp.magics && "undefined" != typeof msg.temp.magic) {
            var value = timestamp(), j;
            for (j in msg.temp.magics) if (msg.temp.magics[j].cooldown_until < value || !msg.temp.magics[j].cooldown_until) {
                var r = msg.temp.magics[j].id, row = Magic[r], h = FIGHT.enemy_coords(a, msg);
                AREA.publish(h, {
                    action: "magic_animation",
                    id: r,
                    i: h.i,
                    j: h.j,
                    map: h.map
                }, !0);
                FIGHT.add_magic_damage(a, r, msg);
                msg.temp.magics[j].cooldown_until = value + row.params.cooldown * (1 - (msg.temp.cooldown || 0));
            }
        }
    }
};

npc_base[0] = createObject({
    b_i: 0,
    b_t: BASE_TYPE.NPC,
    name: "Gray Wizard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 0,
        y: 0
    },
    params: {
        health: 10,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 0,
            chance: .05
        }, {
            id: 1,
            chance: .01
        }, {
            id: 271,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 993,
            chance: .0025
        }, {
            id: 992,
            chance: .0025
        }, {
            id: 452,
            chance: .01
        }, {
            id: 448,
            chance: .01
        }, {
            id: 8,
            chance: .01
        } ]
    },
    temp: {
        busy: !1,
        health: 10,
        magics: [ {
            id: 2
        } ],
        magic: 1,
        total_defense: 3,
        total_strength: 3,
        total_accuracy: 2
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[1] = createObject({
    b_i: 1,
    b_t: BASE_TYPE.NPC,
    name: "White Rat",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 0,
        y: 4
    },
    params: {
        health: 5,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 3,
            chance: .25
        }, {
            id: 0,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 490,
            chance: .25
        }, {
            id: 204,
            chance: .01
        } ]
    },
    temp: {
        health: 5,
        busy: !1,
        total_defense: 0,
        total_strength: 0,
        total_accuracy: 0
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[3] = createObject({
    b_i: 3,
    b_t: BASE_TYPE.NPC,
    name: "Green Wizard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 4,
        y: 0
    },
    params: {
        health: 17,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 0,
            chance: .1
        }, {
            id: 1,
            chance: .05
        }, {
            id: 40,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 271,
            chance: .01
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 992,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 20,
            chance: .02
        }, {
            id: 452,
            chance: .01
        }, {
            id: 448,
            chance: .01
        }, {
            id: 220,
            chance: .01
        } ]
    },
    temp: {
        health: 17,
        busy: !1,
        magics: [ {
            id: 2
        } ],
        magic: 1,
        total_defense: 10,
        total_strength: 10,
        total_accuracy: 10
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[4] = createObject({
    b_i: 4,
    b_t: BASE_TYPE.NPC,
    name: "Orc Warrior",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 3,
        y: 10
    },
    params: {
        health: 25,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1,
            chance: .1
        }, {
            id: 40,
            chance: .05
        }, {
            id: 5,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 25,
            chance: .0025
        }, {
            id: 37,
            chance: .0035
        }, {
            id: 479,
            chance: .0025
        }, {
            id: 4,
            chance: .01
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 19,
            chance: .01
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 230,
            chance: .005
        }, {
            id: 264,
            chance: .01
        } ]
    },
    temp: {
        health: 25,
        busy: !1,
        total_defense: 5,
        total_strength: 30,
        total_accuracy: 25
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[2] = createObject({
    b_i: 2,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 25 26 72 0 0 0 0 52 1 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 3,
            count: 50,
            spawn: !0
        }, {
            id: 491,
            count: 10,
            spawn: !0
        }, {
            id: 493,
            count: 10,
            spawn: !0
        }, {
            id: 6,
            count: 10,
            spawn: !0
        }, {
            id: 5,
            count: 0
        }, {
            id: 19,
            count: 0
        }, {
            id: 47,
            count: 0
        }, {
            id: 20,
            count: 0
        }, {
            id: 21,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[5] = createObject({
    b_i: 5,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Fishing Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 43 25 72 2 0 0 80 48 1 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 7,
            count: 5,
            spawn: !0
        }, {
            id: 124,
            count: 5,
            spawn: !0
        }, {
            id: 68,
            count: 0
        }, {
            id: 8,
            count: 10,
            spawn: !0
        }, {
            id: 9,
            count: 0
        }, {
            id: 10,
            count: 8,
            spawn: !0
        }, {
            id: 11,
            count: 0
        }, {
            id: 72,
            count: 5,
            spawn: !0
        }, {
            id: 73,
            count: 0
        }, {
            id: 12,
            count: 5,
            spawn: !0
        }, {
            id: 13,
            count: 0
        }, {
            id: 74,
            count: 5,
            spawn: !0
        }, {
            id: 75,
            count: 0
        }, {
            id: 14,
            count: 5,
            spawn: !0
        }, {
            id: 15,
            count: 0
        }, {
            id: 16,
            count: 0
        }, {
            id: 17,
            count: 0
        }, {
            id: 70,
            count: 0
        }, {
            id: 71,
            count: 0
        }, {
            id: 76,
            count: 0
        }, {
            id: 77,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[6] = createObject({
    b_i: 6,
    b_t: BASE_TYPE.NPC,
    name: "Minotaur",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 4,
        y: 3
    },
    params: {
        health: 60,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 6,
            chance: .2
        }, {
            id: 18,
            chance: .02
        }, {
            id: 303,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 864,
            chance: .0025
        }, {
            id: 1071,
            chance: .0025
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 2,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 4,
            chance: .1
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 272,
            chance: .05
        } ]
    },
    temp: {
        health: 60,
        busy: !1,
        total_defense: 45,
        total_strength: 45,
        total_accuracy: 45
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[7] = createObject({
    b_i: 7,
    b_t: BASE_TYPE.NPC,
    name: "Dwarf Mage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 0,
        y: 3
    },
    params: {
        health: 14,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 21,
            chance: .05
        }, {
            id: 20,
            chance: .05
        }, {
            id: 448,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 479,
            chance: .0025
        }, {
            id: 273,
            chance: .05
        }, {
            id: 444,
            chance: .005
        } ]
    },
    temp: {
        health: 14,
        busy: !1,
        magics: [ {
            id: 3
        } ],
        magic: 1,
        total_defense: 14,
        total_strength: 10,
        total_accuracy: 14
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[8] = createObject({
    b_i: 8,
    b_t: BASE_TYPE.NPC,
    name: "Black Rat",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 1,
        y: 4
    },
    params: {
        health: 23,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 14,
            chance: .05
        }, {
            id: 15,
            chance: .1
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 22,
            chance: .03
        }, {
            id: 23,
            chance: .03
        } ]
    },
    temp: {
        health: 23,
        busy: !1,
        total_defense: 20,
        total_strength: 20,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[9] = createObject({
    b_i: 9,
    b_t: BASE_TYPE.NPC,
    name: "Ghost",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 1,
        y: 3
    },
    params: {
        health: 31,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 17,
            chance: .1
        }, {
            id: 24,
            chance: .015
        }, {
            id: 54,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 38,
            chance: .0025
        }, {
            id: 25,
            chance: .05
        }, {
            id: 1359,
            chance: .0015
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 31,
        busy: !1,
        total_defense: 32,
        total_strength: 28,
        total_accuracy: 32
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[10] = createObject({
    b_i: 10,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 5
    },
    params: {
        health: 38,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 24,
            chance: .025
        }, {
            id: 26,
            chance: .035
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1269,
            chance: .0015
        }, {
            id: 1359,
            chance: .0015
        }, {
            id: 294,
            chance: .0025
        }, {
            id: 27,
            chance: .05
        }, {
            id: 274,
            chance: .05
        } ]
    },
    temp: {
        health: 38,
        busy: !1,
        total_defense: 18,
        total_strength: 48,
        total_accuracy: 43
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[11] = createObject({
    b_i: 11,
    b_t: BASE_TYPE.NPC,
    name: "Vampire",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 1,
        y: 7
    },
    params: {
        health: 44,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 25,
            chance: .07
        }, {
            id: 24,
            chance: .03
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 213,
            chance: .02
        }, {
            id: 28,
            chance: .01
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 860,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 1071,
            chance: .0025
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 215,
            chance: .05
        } ]
    },
    temp: {
        health: 44,
        busy: !1,
        total_defense: 70,
        total_strength: 30,
        total_accuracy: 35
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[12] = createObject({
    b_i: 12,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Outpost Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 15 16 72 2 1 33 133 17 6 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 22,
            count: 1,
            spawn: !0
        }, {
            id: 23,
            count: 1,
            spawn: !0
        }, {
            id: 36,
            count: 1,
            spawn: !0
        }, {
            id: 286,
            count: 5,
            spawn: !0
        }, {
            id: 4,
            count: 0
        }, {
            id: 29,
            count: 0
        }, {
            id: 491,
            count: 10,
            spawn: !0
        }, {
            id: 493,
            count: 10,
            spawn: !0
        }, {
            id: 6,
            count: 10,
            spawn: !0
        }, {
            id: 3,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[13] = createObject({
    b_i: 13,
    b_t: BASE_TYPE.NPC,
    name: "Orc Mage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 4,
        y: 10
    },
    params: {
        health: 30,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1,
            chance: .1
        }, {
            id: 40,
            chance: .05
        }, {
            id: 5,
            chance: .05
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 4,
            chance: .01
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 435,
            chance: .0025
        }, {
            id: 295,
            chance: .0025
        }, {
            id: 424,
            chance: .0025
        }, {
            id: 230,
            chance: .005
        }, {
            id: 19,
            chance: .01
        }, {
            id: 64,
            chance: .005
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 264,
            chance: .05
        } ]
    },
    temp: {
        health: 30,
        busy: !1,
        total_defense: 17,
        total_strength: 30,
        total_accuracy: 25
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[14] = createObject({
    b_i: 14,
    b_t: BASE_TYPE.NPC,
    name: "Sapphire Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 1
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 25,
            chance: .025
        }, {
            id: 26,
            chance: .0025
        }, {
            id: 28,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 216,
            chance: .0035
        }, {
            id: 250,
            chance: .0025
        }, {
            id: 362,
            chance: .0015
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 80,
        total_strength: 85,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[15] = createObject({
    b_i: 15,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 17 61 72 0 1 33 0 17 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 2,
            spawn: !0
        }, {
            id: 23,
            count: 2,
            spawn: !0
        }, {
            id: 32,
            count: 20,
            spawn: !0
        }, {
            id: 33,
            count: 20,
            spawn: !0
        }, {
            id: 34,
            count: 0
        }, {
            id: 64,
            count: 0
        }, {
            id: 176,
            count: 0
        }, {
            id: 1303,
            count: 0
        }, {
            id: 1125,
            count: 0
        }, {
            id: 0,
            count: 5,
            spawn: !0
        }, {
            id: 37,
            count: 5,
            spawn: !0
        }, {
            id: 38,
            count: 5,
            spawn: !0
        }, {
            id: 27,
            count: 5,
            spawn: !0
        }, {
            id: 1,
            count: 5,
            spawn: !0
        }, {
            id: 39,
            count: 2,
            spawn: !0
        }, {
            id: 40,
            count: 2,
            spawn: !0
        }, {
            id: 41,
            count: 2,
            spawn: !0
        }, {
            id: 42,
            count: 2,
            spawn: !0
        }, {
            id: 43,
            count: 2,
            spawn: !0
        }, {
            id: 976,
            count: 0
        }, {
            id: 473,
            count: 5,
            spawn: !0
        }, {
            id: 366,
            count: 5,
            spawn: !0
        }, {
            id: 1686,
            count: 5,
            spawn: !0
        }, {
            id: 368,
            count: 5,
            spawn: !0
        }, {
            id: 801,
            count: 5,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[16] = createObject({
    b_i: 16,
    b_t: BASE_TYPE.NPC,
    name: "Gnoll Warrior",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 4,
        y: 12
    },
    params: {
        health: 54,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 6,
            chance: .2
        }, {
            id: 44,
            chance: .01
        }, {
            id: 42,
            chance: .02
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 45,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 62,
            chance: .0025
        }, {
            id: 43,
            chance: .0025
        }, {
            id: 58,
            chance: .0025
        }, {
            id: 295,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 64,
            chance: .005
        }, {
            id: 272,
            chance: .05
        } ]
    },
    temp: {
        health: 54,
        busy: !1,
        total_defense: 60,
        total_strength: 50,
        total_accuracy: 54
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[17] = createObject({
    b_i: 17,
    b_t: BASE_TYPE.NPC,
    name: "Hydra",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 1,
        y: 6
    },
    params: {
        health: 61,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 47,
            chance: .05
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 189,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 213,
            chance: .02
        }, {
            id: 339,
            chance: .0025
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 142,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 26,
            chance: .02
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 61,
        busy: !1,
        total_defense: 80,
        total_strength: 65,
        total_accuracy: 43
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[18] = createObject({
    b_i: 18,
    b_t: BASE_TYPE.NPC,
    name: "Archangel",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 0,
        y: 9
    },
    params: {
        health: 69,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 48,
            chance: .0025
        }, {
            id: 17,
            chance: .05
        }, {
            id: 56,
            chance: .0025
        }, {
            id: 855,
            chance: .0015
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 300,
            chance: .001
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 49,
            chance: .0025
        }, {
            id: 369,
            chance: .01
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 69,
        busy: !1,
        total_defense: 70,
        total_strength: 71,
        total_accuracy: 73
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[19] = createObject({
    b_i: 19,
    b_t: BASE_TYPE.NPC,
    name: "Archdevil",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 3,
        y: 1
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 82,
            chance: .01
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 128,
            chance: .0015
        }, {
            id: 225,
            chance: .005
        }, {
            id: 475,
            chance: .0025
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 141,
            chance: .0025
        }, {
            id: 144,
            chance: .0015
        }, {
            id: 370,
            chance: .01
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 130,
        total_strength: 75,
        total_accuracy: 75
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[20] = createObject({
    b_i: 20,
    b_t: BASE_TYPE.NPC,
    name: "Behemoth",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 3,
        y: 5
    },
    params: {
        health: 88,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 59,
            chance: .008
        }, {
            id: 89,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 64,
            chance: .005
        }, {
            id: 858,
            chance: .0025
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 276,
            chance: .005
        }, {
            id: 135,
            chance: .0025
        } ]
    },
    temp: {
        health: 88,
        busy: !1,
        total_defense: 122,
        total_strength: 78,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[21] = createObject({
    b_i: 21,
    b_t: BASE_TYPE.NPC,
    name: "Ettin King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 5,
        y: 4
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 67,
            chance: .002
        }, {
            id: 93,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 128,
            chance: .005
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 80,
        total_strength: 100,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[22] = createObject({
    b_i: 22,
    b_t: BASE_TYPE.NPC,
    name: "Efreet",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 6,
        y: 3
    },
    params: {
        health: 112,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 129,
            chance: .0025
        }, {
            id: 96,
            chance: .03
        }, {
            id: 428,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 895,
            chance: .0025
        }, {
            id: 130,
            chance: .003
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 112,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[23] = createObject({
    b_i: 23,
    b_t: BASE_TYPE.NPC,
    name: "Ghost Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 6
    },
    params: {
        health: 98,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 131,
            chance: .0025
        }, {
            id: 35,
            chance: .0035
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 99,
            chance: .01
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 98,
        busy: !1,
        total_defense: 100,
        total_strength: 100,
        total_accuracy: 170
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[24] = createObject({
    b_i: 24,
    b_t: BASE_TYPE.NPC,
    name: "King Ruby Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 4
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 132,
            chance: 1e-4
        }, {
            id: 99,
            chance: .05
        }, {
            id: 224,
            chance: .008
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 363,
            chance: .0025
        }, {
            id: 669,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 396,
            chance: .0015
        }, {
            id: 252,
            chance: .005
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 200,
        total_strength: 100,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[25] = createObject({
    b_i: 25,
    b_t: BASE_TYPE.NPC,
    name: "Paladin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 7,
        y: 1
    },
    params: {
        health: 73,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 133,
            chance: .005
        }, {
            id: 49,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1348,
            chance: .0025
        }, {
            id: 271,
            chance: .01
        }, {
            id: 93,
            chance: .003
        } ]
    },
    temp: {
        health: 73,
        busy: !1,
        total_defense: 100,
        total_strength: 63,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[26] = createObject({
    b_i: 26,
    b_t: BASE_TYPE.NPC,
    name: "Cursed Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 6,
        y: 5
    },
    params: {
        health: 168,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 153,
            chance: .0025
        }, {
            id: 155,
            chance: .0025
        }, {
            id: 655,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 855,
            chance: .002
        }, {
            id: 398,
            chance: .0025
        }, {
            id: 156,
            chance: .003
        } ]
    },
    temp: {
        health: 168,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[27] = createObject({
    b_i: 27,
    b_t: BASE_TYPE.NPC,
    name: "Ruby Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 1
    },
    params: {
        health: 110,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 99,
            chance: .01
        }, {
            id: 150,
            chance: .0025
        }, {
            id: 252,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 224,
            chance: .0035
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 148,
            chance: .003
        }, {
            id: 173,
            chance: .005
        }, {
            id: 152,
            chance: .01
        } ]
    },
    temp: {
        health: 110,
        busy: !1,
        total_defense: 90,
        total_strength: 90,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[28] = createObject({
    b_i: 28,
    b_t: BASE_TYPE.NPC,
    name: "Vampire Lord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 4,
        y: 7
    },
    params: {
        health: 106,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 134,
            chance: .001
        }, {
            id: 93,
            chance: .1
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 133,
            chance: .0025
        }, {
            id: 855,
            chance: .002
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        }, {
            id: 215,
            chance: .05
        } ]
    },
    temp: {
        health: 106,
        busy: !1,
        total_defense: 150,
        total_strength: 50,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[29] = createObject({
    b_i: 29,
    b_t: BASE_TYPE.NPC,
    name: "Dark Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 2
    },
    params: {
        health: 83,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 133,
            chance: .005
        }, {
            id: 49,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 271,
            chance: .01
        }, {
            id: 93,
            chance: .03
        } ]
    },
    temp: {
        health: 83,
        busy: !1,
        total_defense: 100,
        total_strength: 53,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[30] = createObject({
    b_i: 30,
    b_t: BASE_TYPE.NPC,
    name: "Holy Warrior",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 5,
        y: 0
    },
    params: {
        health: 83,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 133,
            chance: .005
        }, {
            id: 149,
            chance: .005
        }, {
            id: 93,
            chance: .03
        }, {
            id: 271,
            chance: .01
        }, {
            id: 154,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 83,
        busy: !1,
        total_defense: 120,
        total_strength: 63,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[31] = createObject({
    b_i: 31,
    b_t: BASE_TYPE.NPC,
    name: "Russula",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 4
    },
    params: {
        health: 6,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 227,
            chance: .2
        } ]
    },
    temp: {
        health: 6,
        busy: !1,
        total_defense: 6,
        total_strength: 4,
        total_accuracy: 6
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[32] = createObject({
    b_i: 32,
    b_t: BASE_TYPE.NPC,
    name: "Dark Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 4
    },
    params: {
        health: 14,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 235,
            chance: .8
        } ]
    },
    temp: {
        health: 14,
        busy: !1,
        total_defense: 20,
        total_strength: 10,
        total_accuracy: 16
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[33] = createObject({
    b_i: 33,
    b_t: BASE_TYPE.NPC,
    name: "Blue Magic Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 4
    },
    params: {
        health: 20,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 236,
            chance: .8
        } ]
    },
    temp: {
        health: 20,
        busy: !1,
        total_defense: 30,
        total_strength: 20,
        total_accuracy: 30
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[34] = createObject({
    b_i: 34,
    b_t: BASE_TYPE.NPC,
    name: "Boletus",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 5
    },
    params: {
        health: 35,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 237,
            chance: .8
        } ]
    },
    temp: {
        health: 35,
        busy: !1,
        total_defense: 35,
        total_strength: 30,
        total_accuracy: 40
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[35] = createObject({
    b_i: 35,
    b_t: BASE_TYPE.NPC,
    name: "Silver Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 5
    },
    params: {
        health: 50,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 239,
            chance: .7
        } ]
    },
    temp: {
        health: 50,
        busy: !1,
        total_defense: 50,
        total_strength: 30,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[36] = createObject({
    b_i: 36,
    b_t: BASE_TYPE.NPC,
    name: "Golden Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 4
    },
    params: {
        health: 55,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 238,
            chance: .7
        } ]
    },
    temp: {
        health: 55,
        busy: !1,
        total_defense: 65,
        total_strength: 40,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[37] = createObject({
    b_i: 37,
    b_t: BASE_TYPE.NPC,
    name: "Dry-Rotted Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 5
    },
    params: {
        health: 60,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 240,
            chance: .6
        } ]
    },
    temp: {
        health: 60,
        busy: !1,
        total_defense: 70,
        total_strength: 50,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[38] = createObject({
    b_i: 38,
    b_t: BASE_TYPE.NPC,
    name: "Avatar's Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 4
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 241,
            chance: .6
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 120,
        total_strength: 40,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[39] = createObject({
    b_i: 39,
    b_t: BASE_TYPE.NPC,
    name: "Poisoned Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 5
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 243,
            chance: .6
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 80,
        total_strength: 60,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[40] = createObject({
    b_i: 40,
    b_t: BASE_TYPE.NPC,
    name: "Fire Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 4,
        y: 14
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 245,
            chance: .5
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 60,
        total_strength: 80,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[41] = createObject({
    b_i: 41,
    b_t: BASE_TYPE.NPC,
    name: "Lava Shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 5,
        y: 14
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 244,
            chance: .5
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 100,
        total_strength: 100,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[42] = createObject({
    b_i: 42,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Jeweler",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 69 22 72 0 0 0 0 32 12 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 297,
            count: 5,
            spawn: !0
        }, {
            id: 582,
            count: 10,
            spawn: !0
        }, {
            id: 292,
            count: 0
        }, {
            id: 293,
            count: 0
        }, {
            id: 30,
            count: 20,
            spawn: !0
        }, {
            id: 185,
            count: 0
        }, {
            id: 203,
            count: 0
        }, {
            id: 200,
            count: 0
        }, {
            id: 201,
            count: 0
        }, {
            id: 198,
            count: 0
        }, {
            id: 199,
            count: 0
        }, {
            id: 196,
            count: 0
        }, {
            id: 197,
            count: 0
        }, {
            id: 194,
            count: 0
        }, {
            id: 195,
            count: 0
        }, {
            id: 385,
            count: 0
        }, {
            id: 386,
            count: 0
        }, {
            id: 387,
            count: 0
        }, {
            id: 388,
            count: 0
        }, {
            id: 389,
            count: 0
        }, {
            id: 390,
            count: 0
        }, {
            id: 294,
            count: 1,
            spawn: !0
        }, {
            id: 295,
            count: 1,
            spawn: !0
        }, {
            id: 302,
            count: 1,
            spawn: !0
        }, {
            id: 303,
            count: 1,
            spawn: !0
        }, {
            id: 48,
            count: 2,
            spawn: !0
        }, {
            id: 803,
            count: 0
        }, {
            id: 804,
            count: 0
        }, {
            id: 300,
            count: 0
        }, {
            id: 49,
            count: 2,
            spawn: !0
        }, {
            id: 299,
            count: 1,
            spawn: !0
        }, {
            id: 813,
            count: 0
        }, {
            id: 814,
            count: 0
        }, {
            id: 1085,
            count: 0
        }, {
            id: 1086,
            count: 0
        }, {
            id: 1087,
            count: 0
        }, {
            id: 1088,
            count: 0
        }, {
            id: 1105,
            count: 0
        }, {
            id: 1106,
            count: 0
        }, {
            id: 1107,
            count: 0
        }, {
            id: 1108,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[43] = createObject({
    b_i: 43,
    b_t: BASE_TYPE.NPC,
    name: "Cyclops Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 4,
        y: 13
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 221,
            chance: .02
        }, {
            id: 49,
            chance: .025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 228,
            chance: .1
        }, {
            id: 75,
            chance: .08
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 108,
        total_strength: 60,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[44] = createObject({
    b_i: 44,
    b_t: BASE_TYPE.NPC,
    name: "Desert Runner",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 5,
        y: 9
    },
    params: {
        health: 28,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 249,
            chance: .05
        }, {
            id: 270,
            chance: .1
        }, {
            id: 41,
            chance: .05
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 274,
            chance: .1
        }, {
            id: 19,
            chance: .05
        } ]
    },
    temp: {
        health: 28,
        busy: !1,
        total_defense: 30,
        total_strength: 20,
        total_accuracy: 42
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[45] = createObject({
    b_i: 45,
    b_t: BASE_TYPE.NPC,
    name: "Desert Orc",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 2,
        y: 2
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 200,
            chance: .005
        }, {
            id: 270,
            chance: .1
        }, {
            id: 264,
            chance: .1
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 230,
            chance: .05
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 146,
            chance: .0025
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 130,
        total_strength: 70,
        total_accuracy: 132
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[46] = createObject({
    b_i: 46,
    b_t: BASE_TYPE.NPC,
    name: "Orc King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 0,
        y: 3
    },
    params: {
        health: 110,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 161,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        }, {
            id: 264,
            chance: .1
        }, {
            id: 858,
            chance: .0025
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 268,
            chance: .05
        }, {
            id: 230,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 285,
            chance: .03
        } ]
    },
    temp: {
        health: 110,
        busy: !1,
        total_defense: 100,
        total_strength: 80,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[47] = createObject({
    b_i: 47,
    b_t: BASE_TYPE.NPC,
    name: "Fire Imp",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 1,
        y: 10
    },
    params: {
        health: 38,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 274,
            chance: .1
        }, {
            id: 760,
            chance: .05
        }, {
            id: 856,
            chance: .0025
        }, {
            id: 292,
            chance: .05
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 268,
            chance: .01
        }, {
            id: 249,
            chance: .05
        }, {
            id: 42,
            chance: .05
        } ]
    },
    temp: {
        health: 38,
        busy: !1,
        total_defense: 40,
        total_strength: 30,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[48] = createObject({
    b_i: 48,
    b_t: BASE_TYPE.NPC,
    name: "King Cobra",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 4
    },
    params: {
        health: 72,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 62,
            chance: .01
        }, {
            id: 275,
            chance: .05
        }, {
            id: 284,
            chance: .05
        }, {
            id: 286,
            chance: .05
        }, {
            id: 249,
            chance: .05
        }, {
            id: 61,
            chance: .05
        } ]
    },
    temp: {
        health: 72,
        busy: !1,
        total_defense: 66,
        total_strength: 60,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[49] = createObject({
    b_i: 49,
    b_t: BASE_TYPE.NPC,
    name: "Fire Viper",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 5,
        y: 4
    },
    params: {
        health: 48,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 44,
            chance: .01
        }, {
            id: 206,
            chance: .1
        }, {
            id: 212,
            chance: .05
        }, {
            id: 260,
            chance: .02
        }, {
            id: 249,
            chance: .05
        }, {
            id: 42,
            chance: .02
        } ]
    },
    temp: {
        health: 48,
        busy: !1,
        total_defense: 72,
        total_strength: 50,
        total_accuracy: 62
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[50] = createObject({
    b_i: 50,
    b_t: BASE_TYPE.NPC,
    name: "Fire Ant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 7,
        y: 0
    },
    params: {
        health: 72,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 44,
            chance: .0025
        }, {
            id: 205,
            chance: .1
        }, {
            id: 210,
            chance: .05
        }, {
            id: 260,
            chance: .02
        }, {
            id: 247,
            chance: .02
        }, {
            id: 303,
            chance: .01
        } ]
    },
    temp: {
        health: 72,
        busy: !1,
        total_defense: 120,
        total_strength: 60,
        total_accuracy: 92
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[51] = createObject({
    b_i: 51,
    b_t: BASE_TYPE.NPC,
    name: "Wind Elemental",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 7,
        y: 4
    },
    params: {
        health: 66,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 81,
            chance: .04
        }, {
            id: 205,
            chance: .1
        }, {
            id: 212,
            chance: .05
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 285,
            chance: .005
        }, {
            id: 249,
            chance: .05
        }, {
            id: 48,
            chance: .005
        }, {
            id: 418,
            chance: .001
        } ]
    },
    temp: {
        health: 66,
        busy: !1,
        total_defense: 70,
        total_strength: 54,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[52] = createObject({
    b_i: 52,
    b_t: BASE_TYPE.NPC,
    name: "Ice Troglodyte",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 0,
        y: 5
    },
    params: {
        health: 82,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 81,
            chance: .04
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 212,
            chance: .05
        }, {
            id: 285,
            chance: .005
        }, {
            id: 225,
            chance: .005
        }, {
            id: 247,
            chance: .05
        }, {
            id: 146,
            chance: .0025
        } ]
    },
    temp: {
        health: 82,
        busy: !1,
        total_defense: 108,
        total_strength: 70,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[53] = createObject({
    b_i: 53,
    b_t: BASE_TYPE.NPC,
    name: "Frozen Bat",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 0
    },
    params: {
        health: 76,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 83,
            chance: .02
        }, {
            id: 204,
            chance: .05
        }, {
            id: 221,
            chance: .005
        }, {
            id: 61,
            chance: .01
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 293,
            chance: .005
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 76,
        busy: !1,
        total_defense: 80,
        total_strength: 76,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[54] = createObject({
    b_i: 54,
    b_t: BASE_TYPE.NPC,
    name: "Ice Giant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 5,
        y: 1
    },
    params: {
        health: 110,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 83,
            chance: .02
        }, {
            id: 207,
            chance: .05
        }, {
            id: 222,
            chance: .003
        }, {
            id: 259,
            chance: .1
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 163,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 110,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[55] = createObject({
    b_i: 55,
    b_t: BASE_TYPE.NPC,
    name: "Ice Lizard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 3,
        y: 10
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 98,
            chance: .02
        }, {
            id: 261,
            chance: .05
        }, {
            id: 267,
            chance: .08
        }, {
            id: 862,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 144,
            chance: .0025
        }, {
            id: 855,
            chance: .002
        }, {
            id: 201,
            chance: .01
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 150,
        total_strength: 90,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[56] = createObject({
    b_i: 56,
    b_t: BASE_TYPE.NPC,
    name: "Ice Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 0,
        y: 1
    },
    params: {
        health: 150,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .02
        }, {
            id: 298,
            chance: .05
        }, {
            id: 299,
            chance: .05
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 180,
            chance: .0025
        }, {
            id: 217,
            chance: .05
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        }, {
            id: 363,
            chance: .0025
        } ]
    },
    temp: {
        health: 150,
        busy: !1,
        total_defense: 150,
        total_strength: 150,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[57] = createObject({
    b_i: 57,
    b_t: BASE_TYPE.NPC,
    name: "Frozen Spirit",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 4,
        y: 10
    },
    params: {
        health: 280,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 109,
            chance: .02
        }, {
            id: 301,
            chance: .0025
        }, {
            id: 258,
            chance: .05
        }, {
            id: 169,
            chance: .0025
        }, {
            id: 378,
            chance: .0025
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 363,
            chance: .0025
        }, {
            id: 467,
            chance: .0025
        }, {
            id: 248,
            chance: .05
        }, {
            id: 194,
            chance: .01
        } ]
    },
    temp: {
        health: 280,
        busy: !1,
        total_defense: 300,
        total_strength: 120,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[58] = createObject({
    b_i: 58,
    b_t: BASE_TYPE.NPC,
    name: "Wind Protector",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 6,
        y: 5
    },
    params: {
        health: 66,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .02
        }, {
            id: 205,
            chance: .05
        }, {
            id: 861,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 220,
            chance: .05
        }, {
            id: 58,
            chance: .01
        }, {
            id: 18,
            chance: .03
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 66,
        busy: !1,
        total_defense: 100,
        total_strength: 40,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[59] = createObject({
    b_i: 59,
    b_t: BASE_TYPE.NPC,
    name: "Azure Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 2,
        y: 6
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 383,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 384,
            chance: .005
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 108,
        total_strength: 85,
        total_accuracy: 115
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[60] = createObject({
    b_i: 60,
    b_t: BASE_TYPE.NPC,
    name: "Bronze Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 4,
        y: 6
    },
    params: {
        health: 34,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 33,
            chance: .05
        }, {
            id: 32,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 34,
            chance: .05
        } ]
    },
    temp: {
        health: 34,
        busy: !1,
        total_defense: 20,
        total_strength: 30,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[61] = createObject({
    b_i: 61,
    b_t: BASE_TYPE.NPC,
    name: "Coal Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 5,
        y: 8
    },
    params: {
        health: 52,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 31,
            chance: .05
        }, {
            id: 186,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 194,
            chance: .0015
        } ]
    },
    temp: {
        health: 52,
        busy: !1,
        total_defense: 100,
        total_strength: 50,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[62] = createObject({
    b_i: 62,
    b_t: BASE_TYPE.NPC,
    name: "Iron Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 3,
        y: 8
    },
    params: {
        health: 52,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 23,
            chance: .03
        }, {
            id: 31,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 860,
            chance: .0025
        }, {
            id: 1071,
            chance: .0025
        }, {
            id: 50,
            chance: .03
        } ]
    },
    temp: {
        health: 52,
        busy: !1,
        total_defense: 50,
        total_strength: 30,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[63] = createObject({
    b_i: 63,
    b_t: BASE_TYPE.NPC,
    name: "Steel Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 2,
        y: 8
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 31,
            chance: .04
        }, {
            id: 186,
            chance: .03
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 291,
            chance: .01
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 80,
        total_strength: 40,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[64] = createObject({
    b_i: 64,
    b_t: BASE_TYPE.NPC,
    name: "Rock Spirit",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 4,
        y: 6
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .02
        }, {
            id: 205,
            chance: .05
        }, {
            id: 283,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 150,
            chance: .0025
        }, {
            id: 289,
            chance: .025
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        }, {
            id: 419,
            chance: .005
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 100,
        total_strength: 66,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[65] = createObject({
    b_i: 65,
    b_t: BASE_TYPE.NPC,
    name: "Mutated Hydra",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 2,
        y: 6
    },
    params: {
        health: 86,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 85,
            chance: .02
        }, {
            id: 142,
            chance: .01
        }, {
            id: 228,
            chance: .1
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 259,
            chance: .05
        }, {
            id: 247,
            chance: .03
        }, {
            id: 52,
            chance: .01
        } ]
    },
    temp: {
        health: 86,
        busy: !1,
        total_defense: 90,
        total_strength: 50,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[66] = createObject({
    b_i: 66,
    b_t: BASE_TYPE.NPC,
    name: "Dark Orc",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 5,
        y: 4
    },
    params: {
        health: 38,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 77,
            chance: .02
        }, {
            id: 205,
            chance: .05
        }, {
            id: 220,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 57,
            chance: .01
        }, {
            id: 856,
            chance: .0025
        }, {
            id: 230,
            chance: .01
        }, {
            id: 264,
            chance: .05
        } ]
    },
    temp: {
        health: 38,
        busy: !1,
        total_defense: 40,
        total_strength: 50,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[67] = createObject({
    b_i: 67,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 3,
        y: 6
    },
    params: {
        health: 33,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .02
        }, {
            id: 270,
            chance: .05
        }, {
            id: 269,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 860,
            chance: .0025
        }, {
            id: 1269,
            chance: .0015
        }, {
            id: 1071,
            chance: .0025
        }, {
            id: 1359,
            chance: .0015
        }, {
            id: 51,
            chance: .01
        }, {
            id: 24,
            chance: .02
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 33,
        busy: !1,
        total_defense: 39,
        total_strength: 40,
        total_accuracy: 40
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[68] = createObject({
    b_i: 68,
    b_t: BASE_TYPE.NPC,
    name: "Baby Minotaur Skeleton",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 3,
        y: 8
    },
    params: {
        health: 18,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 11,
            chance: .02
        }, {
            id: 4,
            chance: .03
        }, {
            id: 220,
            chance: .05
        }, {
            id: 274,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 269,
            chance: .005
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 30,
        total_strength: 22,
        total_accuracy: 30
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[69] = createObject({
    b_i: 69,
    b_t: BASE_TYPE.NPC,
    name: "Snow Troll Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 5,
        y: 2
    },
    params: {
        health: 125,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .02
        }, {
            id: 152,
            chance: .03
        }, {
            id: 198,
            chance: .01
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 207,
            chance: .1
        }, {
            id: 261,
            chance: .02
        }, {
            id: 216,
            chance: .01
        } ]
    },
    temp: {
        health: 125,
        busy: !1,
        total_defense: 175,
        total_strength: 100,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[70] = createObject({
    b_i: 70,
    b_t: BASE_TYPE.NPC,
    name: "Snow Troll Assassin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 6,
        y: 6
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 97,
            chance: .02
        }, {
            id: 207,
            chance: .08
        }, {
            id: 222,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 862,
            chance: .0025
        }, {
            id: 259,
            chance: .01
        }, {
            id: 268,
            chance: .05
        }, {
            id: 155,
            chance: .0025
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 180
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[71] = createObject({
    b_i: 71,
    b_t: BASE_TYPE.NPC,
    name: "Snow Troll Defender",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 3,
        y: 6
    },
    params: {
        health: 76,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 87,
            chance: .02
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 272,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 259,
            chance: .01
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 865,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 284,
            chance: .05
        }, {
            id: 302,
            chance: .01
        } ]
    },
    temp: {
        health: 76,
        busy: !1,
        total_defense: 84,
        total_strength: 60,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[72] = createObject({
    b_i: 72,
    b_t: BASE_TYPE.NPC,
    name: "Snow Gungan Priest",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 3,
        y: 8
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 83,
            chance: .02
        }, {
            id: 275,
            chance: .05
        }, {
            id: 188,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 274,
            chance: .01
        }, {
            id: 48,
            chance: .005
        }, {
            id: 445,
            chance: .0025
        }, {
            id: 449,
            chance: .005
        }, {
            id: 453,
            chance: .004
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 110,
        total_strength: 50,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[73] = createObject({
    b_i: 73,
    b_t: BASE_TYPE.NPC,
    name: "Snow Gungan Lord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 0,
        y: 8
    },
    params: {
        health: 120,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 99,
            chance: .02
        }, {
            id: 143,
            chance: .05
        }, {
            id: 275,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 228,
            chance: .05
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 176,
            chance: .005
        } ]
    },
    temp: {
        health: 120,
        busy: !1,
        total_defense: 150,
        total_strength: 90,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[74] = createObject({
    b_i: 74,
    b_t: BASE_TYPE.NPC,
    name: "Baby Elemental Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 0
    },
    params: {
        health: 120,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .02
        }, {
            id: 255,
            chance: .01
        }, {
            id: 229,
            chance: .0025
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 262,
            chance: .001
        }, {
            id: 301,
            chance: .01
        } ]
    },
    temp: {
        health: 120,
        busy: !1,
        total_defense: 120,
        total_strength: 100,
        total_accuracy: 180
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[75] = createObject({
    b_i: 75,
    b_t: BASE_TYPE.NPC,
    name: "Adult Elemental Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 2
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .05
        }, {
            id: 255,
            chance: .02
        }, {
            id: 229,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 983,
            chance: .003
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 262,
            chance: .01
        }, {
            id: 397,
            chance: .0025
        }, {
            id: 267,
            chance: .05
        }, {
            id: 151,
            chance: .01
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 250,
        total_strength: 100,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[76] = createObject({
    b_i: 76,
    b_t: BASE_TYPE.NPC,
    name: "King Elemental Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 3
    },
    params: {
        health: 350,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .02
        }, {
            id: 256,
            chance: .03
        }, {
            id: 229,
            chance: .07
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1015,
            chance: .07
        }, {
            id: 262,
            chance: .01
        }, {
            id: 399,
            chance: .0025
        }, {
            id: 436,
            chance: .0025
        }, {
            id: 1643,
            chance: .0015
        }, {
            id: 1661,
            chance: .0015
        }, {
            id: 267,
            chance: .08
        }, {
            id: 616,
            chance: .0025
        }, {
            id: 905,
            chance: .0025
        }, {
            id: 183,
            chance: .0025
        }, {
            id: 128,
            chance: .0025
        } ]
    },
    temp: {
        health: 350,
        busy: !1,
        total_defense: 330,
        total_strength: 170,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[77] = createObject({
    b_i: 77,
    b_t: BASE_TYPE.NPC,
    name: "Reval Alchemist",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 65 39 72 2 0 50 162 43 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1016,
            count: 10,
            spawn: !0
        }, {
            id: 204,
            count: 10,
            spawn: !0
        }, {
            id: 274,
            count: 5,
            spawn: !0
        }, {
            id: 220,
            count: 5,
            spawn: !0
        }, {
            id: 264,
            count: 0
        }, {
            id: 215,
            count: 0
        }, {
            id: 271,
            count: 0
        }, {
            id: 1421,
            count: 0
        }, {
            id: 1422,
            count: 0
        }, {
            id: 1423,
            count: 0
        }, {
            id: 1424,
            count: 0
        }, {
            id: 230,
            count: 0
        }, {
            id: 228,
            count: 0
        }, {
            id: 283,
            count: 0
        }, {
            id: 249,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[78] = createObject({
    b_i: 78,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Mushroom Fanatic",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 0 0 0 0 44 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 227,
            count: 40,
            spawn: !0
        }, {
            id: 235,
            count: 40,
            spawn: !0
        }, {
            id: 236,
            count: 0
        }, {
            id: 237,
            count: 0
        }, {
            id: 238,
            count: 0
        }, {
            id: 239,
            count: 0
        }, {
            id: 240,
            count: 0
        }, {
            id: 241,
            count: 0
        }, {
            id: 242,
            count: 0
        }, {
            id: 243,
            count: 0
        }, {
            id: 245,
            count: 0
        }, {
            id: 244,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[79] = createObject({
    b_i: 79,
    b_t: BASE_TYPE.NPC,
    name: "Reval Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 65 39 72 2 0 0 102 46 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 5,
            count: 2,
            spawn: !0
        }, {
            id: 21,
            count: 2,
            spawn: !0
        }, {
            id: 286,
            count: 2,
            spawn: !0
        }, {
            id: 47,
            count: 0
        }, {
            id: 20,
            count: 0
        }, {
            id: 187,
            count: 0
        }, {
            id: 314,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[80] = createObject({
    b_i: 80,
    b_t: BASE_TYPE.NPC,
    name: "Reval Potion Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 63 37 72 0 1 39 0 46 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 304,
            count: 2,
            spawn: !0
        }, {
            id: 305,
            count: 2,
            spawn: !0
        }, {
            id: 306,
            count: 2,
            spawn: !0
        }, {
            id: 307,
            count: 0
        }, {
            id: 308,
            count: 0
        }, {
            id: 309,
            count: 0
        }, {
            id: 310,
            count: 0
        }, {
            id: 311,
            count: 0
        }, {
            id: 795,
            count: 0
        }, {
            id: 312,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[81] = createObject({
    b_i: 81,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Fishing Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 15 28 72 2 0 0 80 39 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 125,
            count: 0
        }, {
            id: 946,
            count: 10,
            spawn: !0
        }, {
            id: 1036,
            count: 10,
            spawn: !0
        }, {
            id: 76,
            count: 5,
            spawn: !0
        }, {
            id: 77,
            count: 5,
            spawn: !0
        }, {
            id: 78,
            count: 5,
            spawn: !0
        }, {
            id: 79,
            count: 0
        }, {
            id: 80,
            count: 5,
            spawn: !0
        }, {
            id: 81,
            count: 0
        }, {
            id: 82,
            count: 5,
            spawn: !0
        }, {
            id: 83,
            count: 0
        }, {
            id: 84,
            count: 0
        }, {
            id: 85,
            count: 0
        }, {
            id: 86,
            count: 0
        }, {
            id: 87,
            count: 0
        }, {
            id: 88,
            count: 0
        }, {
            id: 89,
            count: 0
        }, {
            id: 90,
            count: 0
        }, {
            id: 91,
            count: 0
        }, {
            id: 92,
            count: 0
        }, {
            id: 93,
            count: 0
        }, {
            id: 94,
            count: 0
        }, {
            id: 95,
            count: 0
        }, {
            id: 96,
            count: 0
        }, {
            id: 97,
            count: 0
        }, {
            id: 98,
            count: 0
        }, {
            id: 99,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[82] = createObject({
    b_i: 82,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 32 33 72 1 0 49 66 20 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 348,
            count: 5,
            spawn: !0
        }, {
            id: 993,
            count: 0
        }, {
            id: 992,
            count: 0
        }, {
            id: 994,
            count: 0
        }, {
            id: 995,
            count: 0
        }, {
            id: 996,
            count: 0
        }, {
            id: 452,
            count: 5,
            spawn: !0
        }, {
            id: 448,
            count: 5,
            spawn: !0
        }, {
            id: 479,
            count: 5,
            spawn: !0
        }, {
            id: 444,
            count: 10,
            spawn: !0
        }, {
            id: 434,
            count: 5,
            spawn: !0
        }, {
            id: 422,
            count: 5,
            spawn: !0
        }, {
            id: 402,
            count: 10,
            spawn: !0
        }, {
            id: 403,
            count: 10,
            spawn: !0
        }, {
            id: 404,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[83] = createObject({
    b_i: 83,
    b_t: BASE_TYPE.NPC,
    name: "Reval Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 63 37 72 1 0 50 165 46 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 349,
            count: 5,
            spawn: !0
        }, {
            id: 452,
            count: 0
        }, {
            id: 448,
            count: 0
        }, {
            id: 479,
            count: 5,
            spawn: !0
        }, {
            id: 434,
            count: 5,
            spawn: !0
        }, {
            id: 435,
            count: 5,
            spawn: !0
        }, {
            id: 423,
            count: 5,
            spawn: !0
        }, {
            id: 405,
            count: 10,
            spawn: !0
        }, {
            id: 406,
            count: 10,
            spawn: !0
        }, {
            id: 407,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[84] = createObject({
    b_i: 84,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 1 0 50 166 39 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 350,
            count: 5,
            spawn: !0
        }, {
            id: 453,
            count: 0
        }, {
            id: 449,
            count: 0
        }, {
            id: 480,
            count: 0
        }, {
            id: 424,
            count: 5,
            spawn: !0
        }, {
            id: 425,
            count: 0
        }, {
            id: 428,
            count: 0
        }, {
            id: 429,
            count: 0
        }, {
            id: 407,
            count: 10,
            spawn: !0
        }, {
            id: 408,
            count: 10,
            spawn: !0
        }, {
            id: 409,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[85] = createObject({
    b_i: 85,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 64 38 72 2 0 50 72 17 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 351,
            count: 5,
            spawn: !0
        }, {
            id: 453,
            count: 5,
            spawn: !0
        }, {
            id: 449,
            count: 5,
            spawn: !0
        }, {
            id: 480,
            count: 5,
            spawn: !0
        }, {
            id: 424,
            count: 5,
            spawn: !0
        }, {
            id: 425,
            count: 0
        }, {
            id: 407,
            count: 10,
            spawn: !0
        }, {
            id: 408,
            count: 10,
            spawn: !0
        }, {
            id: 409,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[86] = createObject({
    b_i: 86,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 1 0 54 166 51 6 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 352,
            count: 5,
            spawn: !0
        }, {
            id: 455,
            count: 0
        }, {
            id: 457,
            count: 0
        }, {
            id: 481,
            count: 0
        }, {
            id: 426,
            count: 5,
            spawn: !0
        }, {
            id: 427,
            count: 0
        }, {
            id: 428,
            count: 0
        }, {
            id: 429,
            count: 0
        }, {
            id: 430,
            count: 0
        }, {
            id: 431,
            count: 0
        }, {
            id: 436,
            count: 0
        }, {
            id: 437,
            count: 0
        }, {
            id: 438,
            count: 0
        }, {
            id: 439,
            count: 0
        }, {
            id: 410,
            count: 10,
            spawn: !0
        }, {
            id: 411,
            count: 10,
            spawn: !0
        }, {
            id: 412,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[87] = createObject({
    b_i: 87,
    b_t: BASE_TYPE.NPC,
    name: "Flame Phoenix",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 5
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 157,
            chance: .0025
        }, {
            id: 371,
            chance: .01
        }, {
            id: 165,
            chance: .0025
        }, {
            id: 855,
            chance: .002
        }, {
            id: 652,
            chance: .0025
        }, {
            id: 421,
            chance: .01
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 200,
        total_strength: 100,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[88] = createObject({
    b_i: 88,
    b_t: BASE_TYPE.NPC,
    name: "Fire Behemoth",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 3,
        y: 1
    },
    params: {
        health: 136,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 401,
            chance: .01
        }, {
            id: 89,
            chance: .01
        }, {
            id: 173,
            chance: .005
        }, {
            id: 866,
            chance: .0025
        }, {
            id: 340,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 276,
            chance: .005
        }, {
            id: 135,
            chance: .0035
        } ]
    },
    temp: {
        health: 136,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[89] = createObject({
    b_i: 89,
    b_t: BASE_TYPE.NPC,
    name: "Flaming Giant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 0,
        y: 2
    },
    params: {
        health: 110,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 83,
            chance: .02
        }, {
            id: 207,
            chance: .05
        }, {
            id: 222,
            chance: .003
        }, {
            id: 259,
            chance: .1
        }, {
            id: 129,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 110,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[90] = createObject({
    b_i: 90,
    b_t: BASE_TYPE.NPC,
    name: "Blood Lizard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 5,
        y: 1
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 103,
            chance: .02
        }, {
            id: 207,
            chance: .05
        }, {
            id: 147,
            chance: .01
        }, {
            id: 259,
            chance: .1
        }, {
            id: 342,
            chance: .0025
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[91] = createObject({
    b_i: 91,
    b_t: BASE_TYPE.NPC,
    name: "Hell Angel",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 2,
        y: 6
    },
    params: {
        health: 156,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 369,
            chance: .02
        }, {
            id: 180,
            chance: .005
        }, {
            id: 163,
            chance: .0025
        }, {
            id: 103,
            chance: .05
        }, {
            id: 221,
            chance: .01
        } ]
    },
    temp: {
        health: 156,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[92] = createObject({
    b_i: 92,
    b_t: BASE_TYPE.NPC,
    name: "Hell Keeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 16 72 2 1 33 133 51 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 346,
            count: 2,
            spawn: !0
        }, {
            id: 35,
            count: 0
        }, {
            id: 133,
            count: 2,
            spawn: !0
        }, {
            id: 163,
            count: 2,
            spawn: !0
        }, {
            id: 173,
            count: 0
        }, {
            id: 177,
            count: 0
        }, {
            id: 1304,
            count: 0
        }, {
            id: 365,
            count: 0
        }, {
            id: 366,
            count: 5,
            spawn: !0
        }, {
            id: 368,
            count: 5,
            spawn: !0
        }, {
            id: 370,
            count: 0
        }, {
            id: 371,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[93] = createObject({
    b_i: 93,
    b_t: BASE_TYPE.NPC,
    name: "Battlemage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 2,
        y: 2
    },
    params: {
        health: 86,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 457,
            chance: .0025
        }, {
            id: 455,
            chance: .0025
        }, {
            id: 438,
            chance: .0025
        }, {
            id: 79,
            chance: .05
        }, {
            id: 412,
            chance: .01
        } ]
    },
    temp: {
        health: 86,
        busy: !1,
        total_defense: 100,
        total_strength: 50,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[94] = createObject({
    b_i: 94,
    b_t: BASE_TYPE.NPC,
    name: "Dwarf Battlemage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 1,
        y: 5
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 457,
            chance: .0025
        }, {
            id: 455,
            chance: .0025
        }, {
            id: 273,
            chance: .05
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 100,
        total_strength: 60,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[95] = createObject({
    b_i: 95,
    b_t: BASE_TYPE.NPC,
    name: "Confused Merlin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 1,
        y: 2
    },
    params: {
        health: 126,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 450,
            chance: .0025
        }, {
            id: 456,
            chance: .0025
        }, {
            id: 413,
            chance: .01
        }, {
            id: 855,
            chance: .002
        }, {
            id: 414,
            chance: .01
        }, {
            id: 430,
            chance: .0025
        } ]
    },
    temp: {
        health: 126,
        busy: !1,
        total_defense: 50,
        total_strength: 150,
        total_accuracy: 130
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[96] = createObject({
    b_i: 96,
    b_t: BASE_TYPE.NPC,
    name: "Merlin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 6,
        y: 3
    },
    params: {
        health: 136,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 450,
            chance: .0025
        }, {
            id: 456,
            chance: .0025
        }, {
            id: 415,
            chance: .01
        }, {
            id: 1598,
            chance: .01
        }, {
            id: 414,
            chance: .01
        }, {
            id: 1598,
            chance: .0025
        }, {
            id: 445,
            chance: .0025
        } ]
    },
    temp: {
        health: 136,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[97] = createObject({
    b_i: 97,
    b_t: BASE_TYPE.NPC,
    name: "Young Grendalf",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 2,
        y: 1
    },
    params: {
        health: 186,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 451,
            chance: .0025
        }, {
            id: 432,
            chance: .0025
        }, {
            id: 1598,
            chance: .0025
        }, {
            id: 416,
            chance: .01
        }, {
            id: 417,
            chance: .01
        }, {
            id: 445,
            chance: .0025
        } ]
    },
    temp: {
        health: 186,
        busy: !1,
        total_defense: 150,
        total_strength: 130,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[98] = createObject({
    b_i: 98,
    b_t: BASE_TYPE.NPC,
    name: "Grendalf The Grey",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 1,
        y: 2
    },
    params: {
        health: 186,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 451,
            chance: .0025
        }, {
            id: 454,
            chance: .0025
        }, {
            id: 418,
            chance: .01
        }, {
            id: 1598,
            chance: .0025
        }, {
            id: 983,
            chance: .003
        }, {
            id: 420,
            chance: .005
        }, {
            id: 445,
            chance: .0025
        } ]
    },
    temp: {
        health: 186,
        busy: !1,
        total_defense: 200,
        total_strength: 150,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[99] = createObject({
    b_i: 99,
    b_t: BASE_TYPE.NPC,
    name: "Zeus",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 4,
        y: 11
    },
    params: {
        health: 200,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 463,
            chance: .0025
        }, {
            id: 454,
            chance: .0025
        }, {
            id: 981,
            chance: .003
        }, {
            id: 52,
            chance: .0025
        }, {
            id: 458,
            chance: .005
        }, {
            id: 1012,
            chance: .01
        }, {
            id: 855,
            chance: .0025
        }, {
            id: 460,
            chance: .0025
        }, {
            id: 1599,
            chance: .0025
        }, {
            id: 446,
            chance: .0025
        } ]
    },
    temp: {
        health: 200,
        busy: !1,
        total_defense: 250,
        total_strength: 100,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[100] = createObject({
    b_i: 100,
    b_t: BASE_TYPE.NPC,
    name: "Chicken",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 1,
        y: 0
    },
    params: {
        health: 2,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 3,
            chance: .25
        }, {
            id: 1302,
            chance: .005
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 492,
            chance: .25
        } ]
    },
    temp: {
        health: 2,
        busy: !1,
        total_defense: 1,
        total_strength: 1,
        total_accuracy: 1
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[101] = createObject({
    b_i: 101,
    b_t: BASE_TYPE.NPC,
    name: "Hen",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 2,
        y: 0
    },
    params: {
        health: 5,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 3,
            chance: .25
        }, {
            id: 7,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1302,
            chance: .005
        }, {
            id: 492,
            chance: .25
        } ]
    },
    temp: {
        health: 5,
        busy: !1,
        total_defense: 1,
        total_strength: 1,
        total_accuracy: 1
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[102] = createObject({
    b_i: 102,
    b_t: BASE_TYPE.NPC,
    name: "Cow",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 3,
        y: 0
    },
    params: {
        health: 8,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 494,
            chance: .15
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 5,
            chance: .01
        } ]
    },
    temp: {
        health: 8,
        busy: !1,
        total_defense: 5,
        total_strength: 5,
        total_accuracy: 10
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[103] = createObject({
    b_i: 103,
    b_t: BASE_TYPE.NPC,
    name: "Deer",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 0,
        y: 0
    },
    params: {
        health: 18,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 494,
            chance: .1
        }, {
            id: 204,
            chance: .02
        }, {
            id: 1423,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 424,
            chance: .0025
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 17,
        total_strength: 17,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[104] = createObject({
    b_i: 104,
    b_t: BASE_TYPE.NPC,
    name: "Bear",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 4,
        y: 0
    },
    params: {
        health: 38,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 270,
            chance: .1
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1423,
            chance: .0025
        }, {
            id: 41,
            chance: .01
        } ]
    },
    temp: {
        health: 38,
        busy: !1,
        total_defense: 30,
        total_strength: 38,
        total_accuracy: 30
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[105] = createObject({
    b_i: 105,
    b_t: BASE_TYPE.NPC,
    name: "Death Angel",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 3,
        y: 6
    },
    params: {
        health: 220,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 369,
            chance: .05
        }, {
            id: 347,
            chance: .0025
        }, {
            id: 661,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 855,
            chance: .002
        }, {
            id: 983,
            chance: .003
        }, {
            id: 440,
            chance: .0025
        }, {
            id: 415,
            chance: .01
        }, {
            id: 376,
            chance: .0025
        } ]
    },
    temp: {
        health: 220,
        busy: !1,
        total_defense: 170,
        total_strength: 130,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[106] = createObject({
    b_i: 106,
    b_t: BASE_TYPE.NPC,
    name: "Griffin Baby",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 5,
        y: 9
    },
    params: {
        health: 28,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 423,
            chance: .01
        }, {
            id: 234,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 13,
            chance: .01
        } ]
    },
    temp: {
        health: 28,
        busy: !1,
        total_defense: 30,
        total_strength: 10,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[107] = createObject({
    b_i: 107,
    b_t: BASE_TYPE.NPC,
    name: "Griffin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 4,
        y: 1
    },
    params: {
        health: 54,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 27,
            chance: .01
        }, {
            id: 234,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 55,
            chance: .0025
        } ]
    },
    temp: {
        health: 54,
        busy: !1,
        total_defense: 45,
        total_strength: 40,
        total_accuracy: 45
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[108] = createObject({
    b_i: 108,
    b_t: BASE_TYPE.NPC,
    name: "King Black Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 5
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 169,
            chance: .0025
        }, {
            id: 181,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 702,
            chance: .0025
        }, {
            id: 257,
            chance: .0025
        }, {
            id: 364,
            chance: .0025
        } ]
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 150,
        total_strength: 150,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[109] = createObject({
    b_i: 109,
    b_t: BASE_TYPE.NPC,
    name: "Naga",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 6,
        y: 0
    },
    params: {
        health: 58,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 61,
            chance: .0025
        }, {
            id: 275,
            chance: .05
        }, {
            id: 1257,
            chance: .002
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 299,
            chance: .003
        } ]
    },
    temp: {
        health: 58,
        busy: !1,
        total_defense: 50,
        total_strength: 50,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[110] = createObject({
    b_i: 110,
    b_t: BASE_TYPE.NPC,
    name: "Royal Griffin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 1
    },
    params: {
        health: 74,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 219,
            chance: .0025
        }, {
            id: 54,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 695,
            chance: .0025
        }, {
            id: 79,
            chance: .01
        } ]
    },
    temp: {
        health: 74,
        busy: !1,
        total_defense: 70,
        total_strength: 70,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[111] = createObject({
    b_i: 111,
    b_t: BASE_TYPE.NPC,
    name: "Adult Sapphire Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 3
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 95,
            chance: .05
        }, {
            id: 250,
            chance: .005
        }, {
            id: 216,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 263,
            chance: .01
        }, {
            id: 35,
            chance: .0025
        }, {
            id: 397,
            chance: .0025
        }, {
            id: 267,
            chance: .05
        }, {
            id: 163,
            chance: .0025
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 110,
        total_strength: 80,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[112] = createObject({
    b_i: 112,
    b_t: BASE_TYPE.NPC,
    name: "King Sapphire Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 1,
        y: 4
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 95,
            chance: .05
        }, {
            id: 250,
            chance: .01
        }, {
            id: 216,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 263,
            chance: .01
        }, {
            id: 397,
            chance: .0025
        }, {
            id: 267,
            chance: .05
        }, {
            id: 165,
            chance: .0025
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 160,
        total_strength: 100,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[113] = createObject({
    b_i: 113,
    b_t: BASE_TYPE.NPC,
    name: "Beholder King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 2
    },
    params: {
        health: 66,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 45,
            chance: .0025
        }, {
            id: 53,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 682,
            chance: .0025
        }, {
            id: 59,
            chance: .008
        } ]
    },
    temp: {
        health: 66,
        busy: !1,
        total_defense: 70,
        total_strength: 120,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[114] = createObject({
    b_i: 114,
    b_t: BASE_TYPE.NPC,
    name: "Beholder",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 5,
        y: 1
    },
    params: {
        health: 54,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 65,
            chance: .0025
        }, {
            id: 77,
            chance: .05
        }, {
            id: 861,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 64,
            chance: .005
        } ]
    },
    temp: {
        health: 54,
        busy: !1,
        total_defense: 82,
        total_strength: 80,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[115] = createObject({
    b_i: 115,
    b_t: BASE_TYPE.NPC,
    name: "Ettin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 4,
        y: 4
    },
    params: {
        health: 82,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 366,
            chance: .0025
        }, {
            id: 368,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 225,
            chance: .005
        }, {
            id: 426,
            chance: .0025
        } ]
    },
    temp: {
        health: 82,
        busy: !1,
        total_defense: 75,
        total_strength: 100,
        total_accuracy: 75
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[116] = createObject({
    b_i: 116,
    b_t: BASE_TYPE.NPC,
    name: "Blood Battlemage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER1,
        x: 2,
        y: 2
    },
    params: {
        health: 106,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 457,
            chance: .0025
        }, {
            id: 455,
            chance: .0025
        }, {
            id: 438,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 79,
            chance: .05
        }, {
            id: 412,
            chance: .01
        } ]
    },
    temp: {
        health: 106,
        busy: !1,
        total_defense: 100,
        total_strength: 50,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[117] = createObject({
    b_i: 117,
    b_t: BASE_TYPE.NPC,
    name: "Makeover Guy",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "4 0 37 24 72 0 0 0 0 24 6 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.MAKEOVER, ACTIVITIES.INSPECT ]
}, 1);

npc_base[118] = createObject({
    b_i: 118,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Lumberjack",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "4 0 43 25 72 2 1 7 35 0 1 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 29,
            count: 10,
            spawn: !0
        }, {
            id: 313,
            count: 5,
            spawn: !0
        }, {
            id: 22,
            count: 5,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[119] = createObject({
    b_i: 119,
    b_t: BASE_TYPE.NPC,
    name: "Apeman",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 1,
        y: 2
    },
    params: {
        health: 24,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 47,
            chance: .001
        }, {
            id: 37,
            chance: .001
        }, {
            id: 20,
            chance: .001
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 124,
            chance: .0025
        }, {
            id: 473,
            chance: .0025
        }, {
            id: 9,
            chance: .005
        } ]
    },
    temp: {
        health: 24,
        busy: !1,
        total_defense: 20,
        total_strength: 20,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[120] = createObject({
    b_i: 120,
    b_t: BASE_TYPE.NPC,
    name: "Dragonfly",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 1,
        y: 7
    },
    params: {
        health: 20,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 5,
            chance: .003
        }, {
            id: 21,
            chance: .004
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1421,
            chance: .0025
        }, {
            id: 0,
            chance: .007
        }, {
            id: 38,
            chance: .005
        } ]
    },
    temp: {
        health: 20,
        busy: !1,
        total_defense: 20,
        total_strength: 20,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[121] = createObject({
    b_i: 121,
    b_t: BASE_TYPE.NPC,
    name: "Holy Guardian",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 82 50 72 2 0 0 133 39 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 367,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[122] = createObject({
    b_i: 122,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 17 25 72 2 0 0 125 43 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 505,
            count: 0
        }, {
            id: 506,
            count: 0
        }, {
            id: 509,
            count: 0
        }, {
            id: 510,
            count: 0
        }, {
            id: 798,
            count: 0
        }, {
            id: 800,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[123] = createObject({
    b_i: 123,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 44 26 72 0 1 39 0 1 6 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 555,
            count: 0
        }, {
            id: 560,
            count: 0
        }, {
            id: 562,
            count: 0
        }, {
            id: 571,
            count: 0
        }, {
            id: 572,
            count: 0
        }, {
            id: 802,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[124] = createObject({
    b_i: 124,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Orc Overlord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 7,
        y: 0
    },
    params: {
        health: 1200,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1425,
            chance: .05
        }, {
            id: 363,
            chance: .05
        }, {
            id: 982,
            chance: .05
        }, {
            id: 174,
            chance: .05
        }, {
            id: 178,
            chance: .05
        }, {
            id: 190,
            chance: .05
        }, {
            id: 194,
            chance: .04
        }, {
            id: 202,
            chance: .03
        }, {
            id: 203,
            chance: .03
        }, {
            id: 258,
            chance: .04
        }, {
            id: 1127,
            chance: .05
        }, {
            id: 1626,
            chance: .04
        }, {
            id: 1305,
            chance: .05
        }, {
            id: 167,
            chance: .05
        }, {
            id: 651,
            chance: .03
        }, {
            id: 481,
            chance: .06
        }, {
            id: 497,
            chance: .07
        }, {
            id: 710,
            chance: .02
        }, {
            id: 593,
            chance: .02
        }, {
            id: 476,
            chance: .05
        } ]
    },
    temp: {
        health: 1200,
        busy: !1,
        total_defense: 250,
        total_strength: 80,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[125] = createObject({
    b_i: 125,
    b_t: BASE_TYPE.NPC,
    name: "Baby Emerald Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 0
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 91,
            chance: .05
        }, {
            id: 254,
            chance: .0025
        }, {
            id: 64,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 231,
            chance: .0025
        }, {
            id: 198,
            chance: .005
        }, {
            id: 141,
            chance: .01
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 80,
        total_strength: 60,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[126] = createObject({
    b_i: 126,
    b_t: BASE_TYPE.NPC,
    name: "Emerald Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 1
    },
    params: {
        health: 120,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 93,
            chance: .05
        }, {
            id: 254,
            chance: .0035
        }, {
            id: 176,
            chance: .005
        }, {
            id: 231,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 198,
            chance: .008
        }, {
            id: 67,
            chance: .0025
        } ]
    },
    temp: {
        health: 120,
        busy: !1,
        total_defense: 100,
        total_strength: 60,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[127] = createObject({
    b_i: 127,
    b_t: BASE_TYPE.NPC,
    name: "Adult Emerald Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 3
    },
    params: {
        health: 145,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 93,
            chance: .05
        }, {
            id: 254,
            chance: .005
        }, {
            id: 177,
            chance: .005
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 231,
            chance: .0075
        }, {
            id: 198,
            chance: .01
        }, {
            id: 149,
            chance: .0025
        } ]
    },
    temp: {
        health: 145,
        busy: !1,
        total_defense: 115,
        total_strength: 70,
        total_accuracy: 130
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[128] = createObject({
    b_i: 128,
    b_t: BASE_TYPE.NPC,
    name: "King Emerald Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 4
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 99,
            chance: .05
        }, {
            id: 254,
            chance: .008
        }, {
            id: 177,
            chance: .005
        }, {
            id: 231,
            chance: .01
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 198,
            chance: .015
        }, {
            id: 706,
            chance: .0025
        }, {
            id: 139,
            chance: .0025
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 140,
        total_strength: 100,
        total_accuracy: 180
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[129] = createObject({
    b_i: 129,
    b_t: BASE_TYPE.NPC,
    name: "Moss Wyvern",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 10
    },
    params: {
        health: 220,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 364,
            chance: .0025
        }, {
            id: 1,
            chance: .005
        }, {
            id: 37,
            chance: .005
        }, {
            id: 462,
            chance: .0025
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 2,
            chance: .0025
        }, {
            id: 18,
            chance: .0025
        }, {
            id: 19,
            chance: .0025
        }, {
            id: 698,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 248,
            chance: .05
        }, {
            id: 199,
            chance: .03
        }, {
            id: 173,
            chance: .005
        }, {
            id: 139,
            chance: .0025
        } ]
    },
    temp: {
        health: 220,
        busy: !1,
        total_defense: 200,
        total_strength: 140,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[130] = createObject({
    b_i: 130,
    b_t: BASE_TYPE.NPC,
    name: "Grass Snake",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 4
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 406,
            chance: .05
        }, {
            id: 60,
            chance: .0025
        }, {
            id: 127,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1358,
            chance: .0025
        }, {
            id: 307,
            chance: .03
        }, {
            id: 64,
            chance: .005
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 659,
            chance: .0025
        }, {
            id: 75,
            chance: .05
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 100,
        total_strength: 60,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[131] = createObject({
    b_i: 131,
    b_t: BASE_TYPE.NPC,
    name: "Barbarian Ghost",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 3,
        y: 9
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 374,
            chance: .001
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 686,
            chance: .0025
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 319,
            chance: .05
        }, {
            id: 475,
            chance: .0025
        }, {
            id: 177,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 87,
            chance: .05
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 140,
        total_strength: 60,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[132] = createObject({
    b_i: 132,
    b_t: BASE_TYPE.NPC,
    name: "Barbarian Shaman",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 0,
        y: 8
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 449,
            chance: .05
        }, {
            id: 453,
            chance: .04
        }, {
            id: 166,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 475,
            chance: .0025
        }, {
            id: 1434,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 177,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 87,
            chance: .05
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 120,
        total_strength: 60,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[133] = createObject({
    b_i: 133,
    b_t: BASE_TYPE.NPC,
    name: "Barbarian Berserker",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 0,
        y: 9
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 45,
            chance: .0025
        }, {
            id: 143,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 28,
            chance: .0025
        }, {
            id: 307,
            chance: .01
        }, {
            id: 176,
            chance: .005
        }, {
            id: 87,
            chance: .05
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 120,
        total_strength: 60,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[134] = createObject({
    b_i: 134,
    b_t: BASE_TYPE.NPC,
    name: "Shadow Ghost",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 2
    },
    params: {
        health: 45,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 17,
            chance: .1
        }, {
            id: 402,
            chance: .04
        }, {
            id: 25,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 45,
        busy: !1,
        total_defense: 40,
        total_strength: 40,
        total_accuracy: 55
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[135] = createObject({
    b_i: 135,
    b_t: BASE_TYPE.NPC,
    name: "Spirit",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 1
    },
    params: {
        health: 45,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 17,
            chance: .1
        }, {
            id: 303,
            chance: .025
        }, {
            id: 51,
            chance: .03
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 864,
            chance: .0025
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 45,
        busy: !1,
        total_defense: 60,
        total_strength: 45,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[136] = createObject({
    b_i: 136,
    b_t: BASE_TYPE.NPC,
    name: "Poltergeist",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 4,
        y: 2
    },
    params: {
        health: 31,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 17,
            chance: .1
        }, {
            id: 24,
            chance: .015
        }, {
            id: 59,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 31,
        busy: !1,
        total_defense: 32,
        total_strength: 28,
        total_accuracy: 32
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[137] = createObject({
    b_i: 137,
    b_t: BASE_TYPE.NPC,
    name: "Energy Ghost",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 4,
        y: 0
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 17,
            chance: .1
        }, {
            id: 48,
            chance: .025
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 855,
            chance: .002
        }, {
            id: 173,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 75,
        total_strength: 75,
        total_accuracy: 130
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[138] = createObject({
    b_i: 138,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton Assassin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 4,
        y: 6
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .05
        }, {
            id: 154,
            chance: .0025
        }, {
            id: 60,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 177,
            chance: .005
        }, {
            id: 1359,
            chance: .0025
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 233,
            chance: .05
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 100,
        total_strength: 70,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[139] = createObject({
    b_i: 139,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 47 57 72 2 1 41 135 39 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 2,
            spawn: !0
        }, {
            id: 23,
            count: 2,
            spawn: !0
        }, {
            id: 581,
            count: 10,
            spawn: !0
        }, {
            id: 186,
            count: 0
        }, {
            id: 383,
            count: 0
        }, {
            id: 384,
            count: 0
        }, {
            id: 174,
            count: 0
        }, {
            id: 178,
            count: 0
        }, {
            id: 35,
            count: 0
        }, {
            id: 340,
            count: 0
        }, {
            id: 362,
            count: 0
        }, {
            id: 498,
            count: 0
        }, {
            id: 476,
            count: 0
        }, {
            id: 163,
            count: 0
        }, {
            id: 161,
            count: 0
        }, {
            id: 165,
            count: 0
        }, {
            id: 138,
            count: 0
        }, {
            id: 393,
            count: 0
        }, {
            id: 394,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[140] = createObject({
    b_i: 140,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Fishing Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 47 27 72 2 0 0 80 42 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 125,
            count: 0
        }, {
            id: 124,
            count: 10,
            spawn: !0
        }, {
            id: 127,
            count: 10,
            spawn: !0
        }, {
            id: 100,
            count: 0
        }, {
            id: 101,
            count: 0
        }, {
            id: 102,
            count: 0
        }, {
            id: 103,
            count: 0
        }, {
            id: 104,
            count: 0
        }, {
            id: 105,
            count: 0
        }, {
            id: 106,
            count: 0
        }, {
            id: 107,
            count: 0
        }, {
            id: 108,
            count: 0
        }, {
            id: 109,
            count: 0
        }, {
            id: 110,
            count: 0
        }, {
            id: 111,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[141] = createObject({
    b_i: 141,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 72 2 0 54 171 44 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 598,
            count: 5,
            spawn: !0
        }, {
            id: 455,
            count: 0
        }, {
            id: 457,
            count: 0
        }, {
            id: 481,
            count: 0
        }, {
            id: 426,
            count: 5,
            spawn: !0
        }, {
            id: 427,
            count: 0
        }, {
            id: 438,
            count: 0
        }, {
            id: 429,
            count: 0
        }, {
            id: 413,
            count: 10,
            spawn: !0
        }, {
            id: 414,
            count: 10,
            spawn: !0
        }, {
            id: 412,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[142] = createObject({
    b_i: 142,
    b_t: BASE_TYPE.NPC,
    name: "Walco Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 60 34 72 1 0 50 61 44 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 599,
            count: 5,
            spawn: !0
        }, {
            id: 453,
            count: 0
        }, {
            id: 449,
            count: 0
        }, {
            id: 480,
            count: 0
        }, {
            id: 424,
            count: 5,
            spawn: !0
        }, {
            id: 425,
            count: 0
        }, {
            id: 407,
            count: 10,
            spawn: !0
        }, {
            id: 408,
            count: 10,
            spawn: !0
        }, {
            id: 409,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[143] = createObject({
    b_i: 143,
    b_t: BASE_TYPE.NPC,
    name: "Tutorial Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 60 72 0 1 36 0 39 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("Welcome to the world of RPG MO!", function() {
                Popup.dialog("If you follow all the steps you should get the basic items and knowledge to play.", function() {
                    Popup.dialog("<font color=" + COLOR.TEAL + '>Inventory</font> can be accessed from an icon that looks like a bag of gold and is located on top right of screen. Open it by clicking on it.<img src="/img/help/inventory.gif" style="margin:0px 40px -13px 40px;" /> ', function() {
                        Popup.dialog("You can equip and use items by clicking on them. <font color=" + COLOR.TEAL + '>Skills</font> are found under the top right warrior icon. <img src="/img/help/skills.gif" style="margin:0px 40px -13px 40px;" />', function() {
                            interactiveArrow("makeover", function() {
                                var error = "block" == document.getElementById("makeover_form").style.display || 1 < players[0].quests[1].step;
                                error && setTimeout(function() {
                                    interactiveArrow("gate", function() {
                                        return 1 < players[0].quests[1].step;
                                    }, PlayerQuests[1].positions.gate_1, "down", 6e4);
                                }, 5e3);
                                return error;
                            }, PlayerQuests[1].positions.makeover, "down", 3e4);
                            Popup.dialog('Now move on to the next npc(<font color="' + COLOR.YELLOW + '">Makeover Guy</font>)<img src="/img/help/makeover.jpg" style="margin:0px 80px 0px 80px;" />, he can change your appearance . After that just go through the <font color="' + COLOR.YELLOW + '">Gate</font> to continue with the tutorial.', function() {});
                        });
                        var SPLoc = Popup.active_popup_text;
                        interactiveArrow("skills", function() {
                            return !hasClass(document.getElementById("skills_menu"), "hidden") || Popup.active_popup_text != SPLoc;
                        }, {
                            menu: "skills"
                        }, "up", 15e3);
                    });
                    var buf = Popup.active_popup_text;
                    interactiveArrow("inventory", function() {
                        return !hasClass(document.getElementById("inventory"), "hidden") || Popup.active_popup_text != buf;
                    }, {
                        menu: "inventory"
                    }, "up", 15e3);
                });
            });
        }
    }
}, 1);

npc_base[144] = createObject({
    b_i: 144,
    b_t: BASE_TYPE.NPC,
    name: "Cooking Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "14 0 44 40 72 0 0 0 0 0 12 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("I'm here to teach you how to do <font color=" + COLOR.TEAL + ">Cooking</font>.", function() {
                Popup.dialog("First you need to catch some fish, <font color=" + COLOR.YELLOW + ">Fishing Instructor</font> can guide you with that.", function() {
                    Popup.dialog('After you have some raw fish in inventory, you can equip the fish by clicking on it. Equipped items have a yellow outline. <img src="/img/help/efish.jpg" style="margin:0px 40px -15px 40px;" />', function() {
                        Popup.dialog("To cook the fish, simply stand next to <font color=" + COLOR.YELLOW + ">Campfire</font> and click on it while the fish is equipped.", function() {
                            Popup.dialog("Eating cooked fish restores <font color=" + COLOR.TEAL + ">health</font>, very useful after a heavy battle.", function() {
                                Popup.dialog("You can sell raw and cooked fish to the <font color=" + COLOR.YELLOW + ">Fishing Master</font>.", function() {});
                                if (12 == current_map) {
                                    var SPLoc = Popup.active_popup_text;
                                    interactiveArrow("fishing_shop", function() {
                                        return Popup.active_popup_text != SPLoc;
                                    }, PlayerQuests[1].positions.fishing_shop, "down", 6e4);
                                }
                            });
                        });
                        if (12 == current_map) {
                            var SPLoc = Popup.active_popup_text;
                            interactiveArrow("campfire", function() {
                                return Popup.active_popup_text != SPLoc;
                            }, PlayerQuests[1].positions.campfire, "down", 6e4);
                        }
                    });
                });
            });
        }
    }
}, 1);

npc_base[145] = createObject({
    b_i: 145,
    b_t: BASE_TYPE.NPC,
    name: "Fishing Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "13 0 43 25 72 1 0 0 81 0 1 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("I'm here to teach you about <font color=" + COLOR.TEAL + ">Fishing</font>.", function() {
                Socket.send("interact", {
                    target_id: a.id
                });
                Popup.dialog("First you need to equip a <b>Fishing rod</b> by clicking on it inside inventory.", function() {
                    Popup.dialog('After you have equipped the <b>Fishing rod</b> you have to stand on the beach line and click the water.<img src="/img/help/beach.jpg" style="vertical-align:bottom;margin: 0px 30px -10px 30px;" />', function() {
                        Popup.dialog("You can only fish in places where a yellow text - <font color=" + COLOR.YELLOW + '>Fish</font> is visible. To fish with a fishing rod, find a tile named Fish - Fishing Rod.<img src="/img/help/fish.jpg" style="vertical-align:bottom;margin: -5px 30px -13px 30px;" />', function() {
                            Popup.dialog("Talk to <font color=" + COLOR.YELLOW + ">Cooking Instructor</font> to find out how to cook the fish.", function() {});
                            12 == current_map && interactiveArrow("cooking_instructor", function() {
                                return selected_object && selected_object.id == PlayerQuests[1].positions.cooking_instructor.id;
                            }, PlayerQuests[1].positions.cooking_instructor, "down", 6e4);
                        });
                        if (12 == current_map) {
                            var SPLoc = Popup.active_popup_text;
                            interactiveArrow("fishing_spot", function() {
                                return Popup.active_popup_text != SPLoc;
                            }, PlayerQuests[1].positions.fishing_spot, "down", 6e4);
                        }
                    });
                });
            });
        },
        interact: function(skiplock, item) {
            12 == item.map && 0 == Inventory.get_item_count(item, 7) && Items.give_to_player(item, 7);
        }
    }
}, 1);

npc_base[146] = createObject({
    b_i: 146,
    b_t: BASE_TYPE.NPC,
    name: "Combat Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 92 60 72 2 1 39 148 51 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("To fight <font color=" + COLOR.TEAL + ">enemies</font> you need to click on them.", function() {
                Popup.dialog('There are 4 different fighting modes. Each trains different skills. To change fighting mode click on the top left icon and fighting mode from there.<img src="/img/help/options.gif" style="vertical-align:bottom;margin: 0px 65px -12px 70px;" />', function() {
                    Popup.dialog("<font color=" + COLOR.TEAL + ">Controlled</font> mode trains equally accuracy(ACC), strength(STR), defense(DEF) and health(HP). <font color=" + COLOR.TEAL + ">Accurate</font> trains 3xACC, HP. <font color=" + COLOR.TEAL + ">Aggressive</font> trains 3xSTR, HP. <font color=" + COLOR.TEAL + ">Defensive</font> trains 3xDEF, HP", function() {
                        Popup.dialog("Monitor your <font color=" + COLOR.TEAL + ">health bar</font> while fighting, if it gets very low you can die. When you die you only keep 2 most expensive items!", function() {
                            Popup.dialog("You can run away from the fight after <font color=" + COLOR.TEAL + ">3 hits</font> by clicking on a nearby free spot.", function() {
                                Popup.dialog("Monsters also drop <font color=" + COLOR.TEAL + ">loot</font> that you can use or sell to merchants or players.", function() {
                                    12 == current_map && (Socket.send("interact", {
                                        target_id: a.id
                                    }), Popup.dialog("Equip your <font color=" + COLOR.YELLOW + ">Bronze Dagger</font> from inventory and go fight some enemies.<div style='" + Items.get_background_image(0) + "width:32px;height:32px;margin-left:42%;'></div>", function() {}));
                                });
                            });
                        });
                        var SPLoc = Popup.active_popup_text;
                        interactiveArrow("healthbar", function() {
                            return Popup.active_popup_text != SPLoc;
                        }, {
                            id: "player_healthbar"
                        }, "down", 6e4);
                    });
                });
                var size = Popup.active_popup_text;
                interactiveArrow("settings", function() {
                    return !hasClass(document.getElementById("settings"), "hidden") || Popup.active_popup_text != size;
                }, {
                    menu: "settings"
                }, "up", 15e3);
            });
        },
        interact: function(skiplock, item) {
            if (12 == item.map) {
                var n = Inventory.get_item_count(item, 9);
                if (3 > n) for (;3 > n; n++) Items.give_to_player(item, 9);
                0 == Inventory.get_item_count(item, 0) && Items.give_to_player(item, 0);
            }
        }
    }
}, 1);

npc_base[147] = createObject({
    b_i: 147,
    b_t: BASE_TYPE.NPC,
    name: "Jewelry Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 60 72 0 0 0 0 15 12 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("With <font color=" + COLOR.TEAL + ">jewelry</font> you can make <b>moulds</b>, <b>rings</b> and <b>amulets</b>.", function() {
                Popup.dialog("To do jewelry you need to mine materials. First you have to start with mining <b>clay</b> to make <b>ring moulds</b>. Equip <b>clay</b> and click on a <font color=" + COLOR.YELLOW + ">furnace</font> to smelt it into a <b>ring mould</b>.", function() {
                    Popup.dialog("You need 3 clay to make 1 ring mould. You can later combine a ring mould with iron, silver and other minerals and gems to produce valuable items.", function() {
                        Popup.dialog("As you get higher jewelry levels you can make better things and use more materials.", function() {});
                    });
                });
                12 == current_map && interactiveArrow("furnace", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.furnace.id;
                }, PlayerQuests[1].positions.furnace, "down", 6e4);
            });
        }
    }
}, 1);

npc_base[148] = createObject({
    b_i: 148,
    b_t: BASE_TYPE.NPC,
    name: "Mining Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 57 72 2 0 0 46 43 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("With <font color=" + COLOR.TEAL + ">mining</font> you can get many different materials that can be used with various skills such as <font color=" + COLOR.TEAL + ">jewelry</font> and <font color=" + COLOR.TEAL + ">forging</font>.", function() {
                Socket.send("interact", {
                    target_id: a.id
                });
                Popup.dialog("To start mining you need to equip the <b>pickaxe</b> first. At level 1 you can mine <b>clay</b>. You can also mine <b>tin</b> and <b>copper</b> at that level.", function() {
                    Popup.dialog("As you get higher mining levels you can mine better things like iron.", function() {});
                    12 == current_map && interactiveArrow("clay", function() {
                        return selected_object && selected_object.id == PlayerQuests[1].positions.clay.id;
                    }, PlayerQuests[1].positions.clay, "down", 6e4);
                });
            });
        },
        interact: function(skiplock, item) {
            if (12 != item.map) return !1;
            0 == Inventory.get_item_count(item, 23) && Items.give_to_player(item, 23);
        }
    }
}, 1);

npc_base[149] = createObject({
    b_i: 149,
    b_t: BASE_TYPE.NPC,
    name: "Forging Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 60 72 2 1 36 173 32 12 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("With <font color=" + COLOR.TEAL + ">forging</font> you can make many different items.", function() {
                Popup.dialog("To start forging you need to equip the <b>forging hammer</b> first and then click on the <font color=" + COLOR.YELLOW + ">anvil</font>. At level 1 you can make a <b>bronze dagger</b>. To make it you need 2 bronze bars and 1 fir log.", function() {
                    Popup.dialog("You can create 1 bronze bar by equipping a tin ore and a copper ore and then clicking on the <font color=" + COLOR.YELLOW + ">furnace</font>", function() {
                        Popup.dialog('<img src="/img/help/dagger.jpg" style="float:right;" /> Each item has its own formula. Formula for bronze dagger is 2 bronze bars on top and a wood on bottom.', function() {
                            Popup.dialog('After that, click on <b>Make</b> to produce that item! <img src="/img/help/make.jpg" style="vertical-align:bottom;margin: 0px 30px 0px 30px;" />', function() {
                                Socket.send("interact", {
                                    target_id: a.id
                                });
                            });
                            12 == current_map && interactiveArrow("anvil", function() {
                                return selected_object && selected_object.id == PlayerQuests[1].positions.anvil.id;
                            }, PlayerQuests[1].positions.anvil, "down", 6e4);
                        });
                    });
                });
            });
        },
        interact: function(skiplock, item) {
            if (12 == item.map) if (0 == Inventory.get_item_count(item, 36) && Items.give_to_player(item, 36), 
            100 > skills[item.id].forging.xp) {
                var n = Inventory.get_item_count(item, 34);
                if (2 > n) for (;2 > n; n++) Items.give_to_player(item, 34);
                0 == Inventory.get_item_count(item, 29) && Items.give_to_player(item, 29);
            } else Player.send_message(item.id, "Move to the next room", COLOR.TEAL);
        }
    }
}, 1);

npc_base[150] = createObject({
    b_i: 150,
    b_t: BASE_TYPE.NPC,
    name: "Woodcutting Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 60 72 2 0 0 47 32 1 2"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("With <font color=" + COLOR.TEAL + ">woodcutting</font> you can cut trees and get different woods that can be used to create items.", function() {
                Popup.dialog("To cut a tree you need to equip a <b>woodcutter's axe</b> first and then click on the <font color=" + COLOR.YELLOW + ">Fir Tree</font>.", function() {
                    Socket.send("interact", {
                        target_id: a.id
                    });
                });
            });
        },
        interact: function(skiplock, item) {
            12 == item.map && 0 == Inventory.get_item_count(item, 22) && Items.give_to_player(item, 22);
        }
    }
}, 1);

npc_base[151] = createObject({
    b_i: 151,
    b_t: BASE_TYPE.NPC,
    name: "Chest Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 25 25 72 0 0 0 0 0 12 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("<font color=" + COLOR.TEAL + ">Inventory</font> has a limited amount of slots, so you can store your items in a <font color=" + COLOR.YELLOW + '>chest</font>.<img src="/img/help/chest.gif" style="vertical-align:bottom;margin: 0px 70px -12px 70px;" />', function() {
                Popup.dialog("When you die, then all the items in the chest will be <font color=" + COLOR.TEAL + ">safe</font>.", function() {
                    Popup.dialog("From the chest you can also access the <font color=" + COLOR.TEAL + ">market</font>. It is used to trade with other players.", function() {
                        Popup.dialog("Try putting all your items into <font color=" + COLOR.YELLOW + ">chest</font>.", function() {
                            12 == current_map && interactiveArrow("chest", function() {
                                return selected_object && selected_object.id == PlayerQuests[1].positions.chest.id;
                            }, PlayerQuests[1].positions.chest, "down", 6e4);
                        });
                    });
                });
            });
        }
    }
}, 1);

npc_base[152] = createObject({
    b_i: 152,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] The Reaper",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 7,
        y: 0
    },
    params: {
        health: 1600,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1426,
            chance: .06
        }, {
            id: 451,
            chance: .07
        }, {
            id: 361,
            chance: .05
        }, {
            id: 144,
            chance: .07
        }, {
            id: 174,
            chance: .06
        }, {
            id: 265,
            chance: .04
        }, {
            id: 305,
            chance: .05
        }, {
            id: 178,
            chance: .06
        }, {
            id: 368,
            chance: .05
        }, {
            id: 370,
            chance: .05
        }, {
            id: 1626,
            chance: .06
        }, {
            id: 1127,
            chance: .06
        }, {
            id: 1305,
            chance: .06
        }, {
            id: 982,
            chance: .05
        }, {
            id: 432,
            chance: .05
        }, {
            id: 182,
            chance: .04
        }, {
            id: 710,
            chance: .03
        }, {
            id: 169,
            chance: .04
        }, {
            id: 593,
            chance: .03
        } ]
    },
    temp: {
        health: 1600,
        busy: !1,
        total_defense: 300,
        total_strength: 150,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[153] = createObject({
    b_i: 153,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Ancient Hydra",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 0,
        y: 0
    },
    params: {
        health: 3250,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 174,
            chance: .06
        }, {
            id: 178,
            chance: .06
        }, {
            id: 1127,
            chance: .06
        }, {
            id: 1305,
            chance: .06
        }, {
            id: 342,
            chance: .03
        }, {
            id: 622,
            chance: .03
        }, {
            id: 465,
            chance: .03
        }, {
            id: 260,
            chance: .05
        }, {
            id: 258,
            chance: .05
        }, {
            id: 982,
            chance: .05
        }, {
            id: 1626,
            chance: .06
        }, {
            id: 710,
            chance: .02
        }, {
            id: 138,
            chance: .08
        }, {
            id: 134,
            chance: .08
        }, {
            id: 664,
            chance: .03
        }, {
            id: 454,
            chance: .07
        }, {
            id: 593,
            chance: .03
        }, {
            id: 1341,
            chance: .005
        } ]
    },
    temp: {
        health: 3250,
        busy: !1,
        total_defense: 300,
        total_strength: 100,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[154] = createObject({
    b_i: 154,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Acid Dragon Lord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 1,
        y: 0
    },
    params: {
        health: 14900,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 175,
            chance: .06
        }, {
            id: 179,
            chance: .06
        }, {
            id: 1128,
            chance: .06
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 1687,
            chance: .02
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 964,
            chance: .02
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 1306,
            chance: .06
        }, {
            id: 183,
            chance: .03
        }, {
            id: 478,
            chance: .05
        }, {
            id: 1682,
            chance: .05
        }, {
            id: 982,
            chance: .05
        }, {
            id: 710,
            chance: .03
        }, {
            id: 584,
            chance: .03
        }, {
            id: 624,
            chance: .02
        }, {
            id: 649,
            chance: .03
        }, {
            id: 593,
            chance: .05
        } ]
    },
    temp: {
        health: 14900,
        busy: !1,
        total_defense: 430,
        total_strength: 170,
        total_accuracy: 450
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[155] = createObject({
    b_i: 155,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Diablo",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 1,
        y: 0
    },
    params: {
        health: 2400,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1427,
            chance: .06
        }, {
            id: 160,
            chance: .05
        }, {
            id: 982,
            chance: .05
        }, {
            id: 169,
            chance: .04
        }, {
            id: 475,
            chance: .04
        }, {
            id: 174,
            chance: .06
        }, {
            id: 154,
            chance: .03
        }, {
            id: 1687,
            chance: .02
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 130,
            chance: .04
        }, {
            id: 131,
            chance: .04
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 146,
            chance: .03
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 138,
            chance: .03
        }, {
            id: 964,
            chance: .02
        }, {
            id: 150,
            chance: .035
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 155,
            chance: .04
        }, {
            id: 143,
            chance: .04
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 1271,
            chance: .05
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 178,
            chance: .06
        }, {
            id: 1127,
            chance: .06
        }, {
            id: 1305,
            chance: .06
        }, {
            id: 710,
            chance: .02
        }, {
            id: 145,
            chance: .08
        }, {
            id: 1641,
            chance: .01
        }, {
            id: 1659,
            chance: .01
        }, {
            id: 133,
            chance: .08
        }, {
            id: 364,
            chance: .04
        }, {
            id: 363,
            chance: .03
        }, {
            id: 593,
            chance: .03
        } ]
    },
    temp: {
        health: 2400,
        busy: !1,
        total_defense: 300,
        total_strength: 100,
        total_accuracy: 400
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[156] = createObject({
    b_i: 156,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Demon Portal",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 6,
        y: 0
    },
    params: {
        health: 5e3,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1428,
            chance: .06
        }, {
            id: 489,
            chance: .03
        }, {
            id: 361,
            chance: .02
        }, {
            id: 190,
            chance: .08
        }, {
            id: 175,
            chance: .04
        }, {
            id: 179,
            chance: .04
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 130,
            chance: .04
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 129,
            chance: .04
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 664,
            chance: .04
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 764,
            chance: .04
        }, {
            id: 964,
            chance: .02
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 808,
            chance: .04
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 1128,
            chance: .04
        }, {
            id: 1306,
            chance: .04
        }, {
            id: 391,
            chance: .03
        }, {
            id: 340,
            chance: .05
        }, {
            id: 475,
            chance: .06
        }, {
            id: 710,
            chance: .03
        }, {
            id: 1692,
            chance: .02
        }, {
            id: 618,
            chance: .05
        }, {
            id: 593,
            chance: .03
        } ]
    },
    temp: {
        health: 5e3,
        busy: !1,
        total_defense: 400,
        total_strength: 170,
        total_accuracy: 430
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[157] = createObject({
    b_i: 157,
    b_t: BASE_TYPE.NPC,
    name: "Sand Centipede",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 4
    },
    params: {
        health: 75,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 140,
            chance: .0015
        }, {
            id: 152,
            chance: .0025
        }, {
            id: 406,
            chance: .01
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 339,
            chance: .0015
        } ]
    },
    temp: {
        health: 75,
        busy: !1,
        total_defense: 80,
        total_strength: 45,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[158] = createObject({
    b_i: 158,
    b_t: BASE_TYPE.NPC,
    name: "Rock Centipede",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 0,
        y: 4
    },
    params: {
        health: 85,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 90,
            chance: .05
        }, {
            id: 64,
            chance: .005
        }, {
            id: 294,
            chance: .0025
        }, {
            id: 865,
            chance: .0025
        }, {
            id: 52,
            chance: .0025
        }, {
            id: 53,
            chance: .0025
        }, {
            id: 150,
            chance: .0015
        }, {
            id: 294,
            chance: .0025
        }, {
            id: 141,
            chance: .01
        } ]
    },
    temp: {
        health: 85,
        busy: !1,
        total_defense: 90,
        total_strength: 55,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[159] = createObject({
    b_i: 159,
    b_t: BASE_TYPE.NPC,
    name: "Fire Centipede",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 4,
        y: 4
    },
    params: {
        health: 95,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 442,
            chance: .0015
        }, {
            id: 410,
            chance: .01
        }, {
            id: 86,
            chance: .04
        }, {
            id: 298,
            chance: .0025
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 144,
            chance: .0025
        } ]
    },
    temp: {
        health: 95,
        busy: !1,
        total_defense: 100,
        total_strength: 65,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[160] = createObject({
    b_i: 160,
    b_t: BASE_TYPE.NPC,
    name: "Skeletal dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 6
    },
    params: {
        health: 152,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 363,
            chance: .0025
        }, {
            id: 58,
            chance: .0025
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 94,
            chance: .05
        }, {
            id: 153,
            chance: .0025
        } ]
    },
    temp: {
        health: 152,
        busy: !1,
        total_defense: 160,
        total_strength: 80,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[161] = createObject({
    b_i: 161,
    b_t: BASE_TYPE.NPC,
    name: "DarkElf Mage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 3,
        y: 3
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 497,
            chance: .0025
        }, {
            id: 82,
            chance: .05
        }, {
            id: 616,
            chance: .0015
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 120,
        total_strength: 40,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[162] = createObject({
    b_i: 162,
    b_t: BASE_TYPE.NPC,
    name: "Sand Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 0,
        y: 0
    },
    params: {
        health: 50,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 187,
            chance: .04
        }, {
            id: 24,
            chance: .0025
        }, {
            id: 147,
            chance: .0025
        }, {
            id: 339,
            chance: .0025
        }, {
            id: 76,
            chance: .03
        } ]
    },
    temp: {
        health: 50,
        busy: !1,
        total_defense: 80,
        total_strength: 40,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[163] = createObject({
    b_i: 163,
    b_t: BASE_TYPE.NPC,
    name: "Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 7,
        y: 6
    },
    params: {
        health: 40,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 426,
            chance: .0025
        }, {
            id: 408,
            chance: .02
        }, {
            id: 368,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 78,
            chance: .02
        }, {
            id: 438,
            chance: .0015
        } ]
    },
    temp: {
        health: 40,
        busy: !1,
        total_defense: 60,
        total_strength: 30,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[164] = createObject({
    b_i: 164,
    b_t: BASE_TYPE.NPC,
    name: "Rotting Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 0,
        y: 6
    },
    params: {
        health: 50,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 426,
            chance: .0025
        }, {
            id: 408,
            chance: .02
        }, {
            id: 128,
            chance: .0025
        }, {
            id: 368,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 78,
            chance: .02
        }, {
            id: 438,
            chance: .0015
        } ]
    },
    temp: {
        health: 50,
        busy: !1,
        total_defense: 70,
        total_strength: 40,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[165] = createObject({
    b_i: 165,
    b_t: BASE_TYPE.NPC,
    name: "Ice Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 6
    },
    params: {
        health: 70,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 49,
            chance: .0025
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 430,
            chance: .0025
        }, {
            id: 146,
            chance: .0025
        }, {
            id: 84,
            chance: .04
        } ]
    },
    temp: {
        health: 70,
        busy: !1,
        total_defense: 70,
        total_strength: 70,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[166] = createObject({
    b_i: 166,
    b_t: BASE_TYPE.NPC,
    name: "Emerald Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 2,
        y: 6
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 87,
            chance: .02
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 272,
            chance: .05
        }, {
            id: 130,
            chance: .0025
        }, {
            id: 131,
            chance: .0025
        }, {
            id: 259,
            chance: .01
        }, {
            id: 284,
            chance: .05
        }, {
            id: 302,
            chance: .01
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 100,
        total_strength: 30,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[167] = createObject({
    b_i: 167,
    b_t: BASE_TYPE.NPC,
    name: "Gilded Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 3,
        y: 6
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 442,
            chance: .0015
        }, {
            id: 410,
            chance: .01
        }, {
            id: 86,
            chance: .04
        }, {
            id: 298,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 144,
            chance: .0025
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 100,
        total_strength: 50,
        total_accuracy: 110
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[168] = createObject({
    b_i: 168,
    b_t: BASE_TYPE.NPC,
    name: "Amethyst Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 4,
        y: 6
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 190,
            chance: .0015
        }, {
            id: 92,
            chance: .04
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 385,
            chance: .0015
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 156,
            chance: .0015
        }, {
            id: 163,
            chance: .0015
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 120,
        total_strength: 60,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[169] = createObject({
    b_i: 169,
    b_t: BASE_TYPE.NPC,
    name: "Diamond Mummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 1,
        y: 6
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 108,
            chance: .03
        }, {
            id: 350,
            chance: .0015
        }, {
            id: 149,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 616,
            chance: .0015
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 150,
        total_strength: 70,
        total_accuracy: 130
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[170] = createObject({
    b_i: 170,
    b_t: BASE_TYPE.NPC,
    name: "Phantom Skull",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 2,
        y: 5
    },
    params: {
        health: 200,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 393,
            chance: .0025
        }, {
            id: 112,
            chance: .04
        }, {
            id: 498,
            chance: .0015
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 482,
            chance: .0025
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 342,
            chance: .0025
        }, {
            id: 440,
            chance: .0025
        } ]
    },
    temp: {
        health: 200,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[171] = createObject({
    b_i: 171,
    b_t: BASE_TYPE.NPC,
    name: "Deathstalker Scorpion",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 2,
        y: 12
    },
    params: {
        health: 115,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 138,
            chance: .0025
        }, {
            id: 86,
            chance: .04
        }, {
            id: 299,
            chance: .0015
        }, {
            id: 191,
            chance: .0025
        }, {
            id: 1176,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 128,
            chance: .0025
        }, {
            id: 150,
            chance: .0025
        } ]
    },
    temp: {
        health: 115,
        busy: !1,
        total_defense: 70,
        total_strength: 115,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[172] = createObject({
    b_i: 172,
    b_t: BASE_TYPE.NPC,
    name: "Emperor Scorpion",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 1,
        y: 12
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 165,
            chance: .0015
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 140,
            chance: .0025
        }, {
            id: 1176,
            chance: .0025
        }, {
            id: 866,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 462,
            chance: .0015
        }, {
            id: 190,
            chance: .0025
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 50,
        total_strength: 150,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[173] = createObject({
    b_i: 173,
    b_t: BASE_TYPE.NPC,
    name: "War Elephant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 7,
        y: 7
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 189,
            chance: .0025
        }, {
            id: 131,
            chance: .0015
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 140,
            chance: .0025
        }, {
            id: 193,
            chance: .0015
        }, {
            id: 96,
            chance: .03
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 110,
        total_strength: 50,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[174] = createObject({
    b_i: 174,
    b_t: BASE_TYPE.NPC,
    name: "Chaos Vortex",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 2,
        y: 7
    },
    params: {
        health: 300,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 177,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 110,
            chance: .04
        }, {
            id: 378,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 482,
            chance: .0025
        }, {
            id: 618,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 300,
        busy: !1,
        total_defense: 100,
        total_strength: 100,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[175] = createObject({
    b_i: 175,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 7
    },
    params: {
        health: 148,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 177,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 90,
            chance: .03
        }, {
            id: 163,
            chance: .0025
        }, {
            id: 145,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 692,
            chance: .0025
        }, {
            id: 467,
            chance: .0015
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 148,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[176] = createObject({
    b_i: 176,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton Lord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 2,
        y: 6
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 497,
            chance: .0025
        }, {
            id: 102,
            chance: .05
        }, {
            id: 154,
            chance: .0025
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 1359,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 67,
            chance: .0025
        }, {
            id: 140,
            chance: .0025
        }, {
            id: 475,
            chance: .0025
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[177] = createObject({
    b_i: 177,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton Mage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 7
    },
    params: {
        health: 45,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 78,
            chance: .005
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 56,
            chance: .0025
        }, {
            id: 864,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 18,
            chance: .0025
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 480,
            chance: .0025
        }, {
            id: 295,
            chance: .001
        } ]
    },
    temp: {
        health: 45,
        busy: !1,
        total_defense: 55,
        total_strength: 50,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[178] = createObject({
    b_i: 178,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Pet Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "13 0 63 37 72 0 0 0 0 44 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 670,
            count: 10,
            spawn: !0
        }, {
            id: 674,
            count: 0
        }, {
            id: 887,
            count: 10,
            spawn: !0
        }, {
            id: 1257,
            count: 0
        }, {
            id: 676,
            count: 0
        }, {
            id: 675,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[179] = createObject({
    b_i: 179,
    b_t: BASE_TYPE.NPC,
    name: "White Wall",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 14,
        y: 9
    },
    params: {
        health: 75,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 31,
            chance: .005
        }, {
            id: 50,
            chance: .001
        } ]
    },
    temp: {
        health: 75,
        busy: !1,
        total_defense: 90,
        total_strength: 60,
        total_accuracy: 90
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[180] = createObject({
    b_i: 180,
    b_t: BASE_TYPE.NPC,
    name: "White Hard Wall",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.NEWWORLD,
        x: 14,
        y: 9
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 31,
            chance: .005
        }, {
            id: 50,
            chance: .01
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 150,
        total_strength: 100,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[181] = createObject({
    b_i: 181,
    b_t: BASE_TYPE.NPC,
    name: "Flame Wyvern",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 11
    },
    params: {
        health: 220,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 364,
            chance: .0025
        }, {
            id: 462,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 700,
            chance: .0025
        }, {
            id: 248,
            chance: .05
        }, {
            id: 199,
            chance: .03
        }, {
            id: 173,
            chance: .005
        }, {
            id: 139,
            chance: .0025
        } ]
    },
    temp: {
        health: 220,
        busy: !1,
        total_defense: 250,
        total_strength: 130,
        total_accuracy: 240
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[182] = createObject({
    b_i: 182,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Farmer",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 25 50 72 2 1 39 160 39 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 779,
            count: 3,
            spawn: !0
        }, {
            id: 767,
            count: 10,
            spawn: !0
        }, {
            id: 1016,
            count: 10,
            spawn: !0
        }, {
            id: 754,
            count: 40,
            spawn: !0
        }, {
            id: 756,
            count: 40,
            spawn: !0
        }, {
            id: 759,
            count: 40,
            spawn: !0
        }, {
            id: 1034,
            count: 40,
            spawn: !0
        }, {
            id: 755,
            count: 40,
            spawn: !0
        }, {
            id: 777,
            count: 40,
            spawn: !0
        }, {
            id: 761,
            count: 40,
            spawn: !0
        }, {
            id: 763,
            count: 30,
            spawn: !0
        }, {
            id: 757,
            count: 0
        }, {
            id: 758,
            count: 0
        }, {
            id: 760,
            count: 0
        }, {
            id: 762,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[183] = createObject({
    b_i: 183,
    b_t: BASE_TYPE.NPC,
    name: "Santa",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 1,
        y: 6
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 751,
            count: 10,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[184] = createObject({
    b_i: 184,
    b_t: BASE_TYPE.NPC,
    name: "Adult Ruby Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 3
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 252,
            chance: .0035
        }, {
            id: 258,
            chance: .0025
        }, {
            id: 396,
            chance: .0015
        }, {
            id: 224,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 95,
            chance: .05
        }, {
            id: 300,
            chance: .0025
        }, {
            id: 166,
            chance: .0025
        }, {
            id: 612,
            chance: .0015
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 120,
        total_strength: 80,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[185] = createObject({
    b_i: 185,
    b_t: BASE_TYPE.NPC,
    name: "Thief",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 9,
        y: 3
    },
    params: {
        health: 22,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 37,
            chance: .0025
        }, {
            id: 43,
            chance: .0025
        }, {
            id: 47,
            chance: .0025
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 16,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 41,
            chance: .0025
        }, {
            id: 762,
            chance: .02
        }, {
            id: 403,
            chance: .02
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 7,
            chance: .01
        } ]
    },
    temp: {
        health: 22,
        busy: !1,
        total_defense: 30,
        total_strength: 18,
        total_accuracy: 30
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[186] = createObject({
    b_i: 186,
    b_t: BASE_TYPE.NPC,
    name: "Assassin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 3
    },
    params: {
        health: 26,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 473,
            chance: .0025
        }, {
            id: 479,
            chance: .0025
        }, {
            id: 304,
            chance: .02
        }, {
            id: 28,
            chance: .0025
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 22,
            chance: .0025
        }, {
            id: 0,
            chance: .0025
        } ]
    },
    temp: {
        health: 26,
        busy: !1,
        total_defense: 40,
        total_strength: 18,
        total_accuracy: 40
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[187] = createObject({
    b_i: 187,
    b_t: BASE_TYPE.NPC,
    name: "Explorer",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 3,
        y: 4
    },
    params: {
        health: 38,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 473,
            chance: .0025
        }, {
            id: 2,
            chance: .0025
        }, {
            id: 21,
            chance: .0025
        }, {
            id: 856,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 996,
            chance: .0025
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 20,
            chance: .0025
        }, {
            id: 26,
            chance: .0025
        }, {
            id: 72,
            chance: .02
        } ]
    },
    temp: {
        health: 38,
        busy: !1,
        total_defense: 45,
        total_strength: 24,
        total_accuracy: 45
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[188] = createObject({
    b_i: 188,
    b_t: BASE_TYPE.NPC,
    name: "Grizzly Bear",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 5,
        y: 0
    },
    params: {
        health: 50,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 14,
            chance: .02
        }, {
            id: 260,
            chance: .01
        }, {
            id: 227,
            chance: .01
        }, {
            id: 27,
            chance: .0025
        }, {
            id: 39,
            chance: .0025
        }, {
            id: 54,
            chance: .0025
        }, {
            id: 38,
            chance: .0025
        } ]
    },
    temp: {
        health: 50,
        busy: !1,
        total_defense: 50,
        total_strength: 30,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[189] = createObject({
    b_i: 189,
    b_t: BASE_TYPE.NPC,
    name: "Polar Bear",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 7,
        y: 0
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 14,
            chance: .02
        }, {
            id: 260,
            chance: .01
        }, {
            id: 67,
            chance: .0025
        }, {
            id: 141,
            chance: .0025
        }, {
            id: 1433,
            chance: .0025
        }, {
            id: 408,
            chance: .01
        }, {
            id: 128,
            chance: .0025
        }, {
            id: 38,
            chance: .0025
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 100,
        total_strength: 38,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[190] = createObject({
    b_i: 190,
    b_t: BASE_TYPE.NPC,
    name: "Lion",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 6,
        y: 0
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 133,
            chance: .0025
        }, {
            id: 481,
            chance: .0025
        }, {
            id: 375,
            chance: .0025
        }, {
            id: 12,
            chance: .03
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1175,
            chance: .0025
        }, {
            id: 187,
            chance: .01
        }, {
            id: 125,
            chance: .0025
        }, {
            id: 60,
            chance: .0045
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 100,
        total_strength: 56,
        total_accuracy: 130
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[191] = createObject({
    b_i: 191,
    b_t: BASE_TYPE.NPC,
    name: "Fire Spirit",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 3,
        y: 4
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 129,
            chance: .0025
        }, {
            id: 421,
            chance: .01
        }, {
            id: 467,
            chance: .0025
        }, {
            id: 177,
            chance: .005
        }, {
            id: 1304,
            chance: .005
        }, {
            id: 983,
            chance: .003
        }, {
            id: 377,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 481,
            chance: .0025
        }, {
            id: 167,
            chance: .0025
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 100,
        total_strength: 168,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[192] = createObject({
    b_i: 192,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Furniture Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 43 25 72 0 0 0 0 15 1 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 730,
            count: 0
        }, {
            id: 732,
            count: 0
        }, {
            id: 733,
            count: 0
        }, {
            id: 745,
            count: 0
        }, {
            id: 734,
            count: 0
        }, {
            id: 746,
            count: 0
        }, {
            id: 735,
            count: 0
        }, {
            id: 747,
            count: 0
        }, {
            id: 736,
            count: 0
        }, {
            id: 748,
            count: 0
        }, {
            id: 737,
            count: 0
        }, {
            id: 749,
            count: 0
        }, {
            id: 738,
            count: 0
        }, {
            id: 750,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[193] = createObject({
    b_i: 193,
    b_t: BASE_TYPE.NPC,
    name: "Poisonous Behemoth",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 5,
        y: 5
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 656,
            chance: .0025
        }, {
            id: 135,
            chance: .0025
        }, {
            id: 145,
            chance: .0025
        }, {
            id: 983,
            chance: .003
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 818,
            chance: .0025
        }, {
            id: 813,
            chance: .0025
        }, {
            id: 481,
            chance: .0025
        }, {
            id: 167,
            chance: .0025
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 200,
        total_strength: 50,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[194] = createObject({
    b_i: 194,
    b_t: BASE_TYPE.NPC,
    name: "Emerald Plant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 6,
        y: 3
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 342,
            chance: .0025
        }, {
            id: 46,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 480,
            chance: .0025
        }, {
            id: 86,
            chance: .03
        }, {
            id: 198,
            chance: .0025
        }, {
            id: 790,
            chance: .01
        }, {
            id: 787,
            chance: .01
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 200,
        total_strength: 88,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[195] = createObject({
    b_i: 195,
    b_t: BASE_TYPE.NPC,
    name: "Grass Killer",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 3,
        y: 15
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 787,
            chance: .01
        }, {
            id: 777,
            chance: .03
        }, {
            id: 286,
            chance: .0025
        }, {
            id: 225,
            chance: .005
        }, {
            id: 1358,
            chance: .0025
        }, {
            id: 86,
            chance: .03
        }, {
            id: 198,
            chance: .0025
        }, {
            id: 301,
            chance: .0025
        }, {
            id: 794,
            chance: .01
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 120,
        total_strength: 60,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[196] = createObject({
    b_i: 196,
    b_t: BASE_TYPE.NPC,
    name: "Cave Bat",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 0
    },
    params: {
        health: 5,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 220,
            chance: .05
        }, {
            id: 5,
            chance: .0025
        }, {
            id: 1281,
            chance: .0015
        }, {
            id: 3,
            chance: .1
        }, {
            id: 0,
            chance: .0025
        }, {
            id: 1,
            chance: .0025
        }, {
            id: 21,
            chance: .0025
        } ]
    },
    temp: {
        health: 5,
        busy: !1,
        total_defense: 2,
        total_strength: 2,
        total_accuracy: 3
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[197] = createObject({
    b_i: 197,
    b_t: BASE_TYPE.NPC,
    name: "Cave Worm",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 7,
        y: 2
    },
    params: {
        health: 12,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 204,
            chance: .05
        }, {
            id: 5,
            chance: .0025
        }, {
            id: 37,
            chance: .0025
        }, {
            id: 39,
            chance: .0025
        }, {
            id: 187,
            chance: .09
        } ]
    },
    temp: {
        health: 12,
        busy: !1,
        total_defense: 8,
        total_strength: 6,
        total_accuracy: 10
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[198] = createObject({
    b_i: 198,
    b_t: BASE_TYPE.NPC,
    name: "Skeleton Fighter",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 5,
        y: 5
    },
    params: {
        health: 44,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 10,
            chance: .05
        }, {
            id: 5,
            chance: .0025
        }, {
            id: 37,
            chance: .0025
        }, {
            id: 44,
            chance: .0025
        }, {
            id: 1269,
            chance: .0015
        }, {
            id: 1359,
            chance: .0015
        }, {
            id: 27,
            chance: .0025
        }, {
            id: 19,
            chance: .0025
        }, {
            id: 1125,
            chance: .005
        }, {
            id: 4,
            chance: .01
        }, {
            id: 176,
            chance: .005
        }, {
            id: 1303,
            chance: .005
        }, {
            id: 274,
            chance: .09
        } ]
    },
    temp: {
        health: 44,
        busy: !1,
        total_defense: 50,
        total_strength: 20,
        total_accuracy: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[199] = createObject({
    b_i: 199,
    b_t: BASE_TYPE.NPC,
    name: "Gnoll Mage",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 1,
        y: 12
    },
    params: {
        health: 62,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 448,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 479,
            chance: .0025
        }, {
            id: 424,
            chance: .0025
        }, {
            id: 435,
            chance: .0025
        }, {
            id: 404,
            chance: .04
        } ]
    },
    temp: {
        health: 62,
        busy: !1,
        magics: [ {
            id: 2
        } ],
        magic: 8,
        total_defense: 50,
        total_strength: 54,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[200] = createObject({
    b_i: 200,
    b_t: BASE_TYPE.NPC,
    name: "Crusader",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 2,
        y: 6
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 271,
            chance: .05
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 52,
            chance: .0025
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 805,
            chance: .0025
        }, {
            id: 815,
            chance: .0025
        }, {
            id: 141,
            chance: .0025
        }, {
            id: 74,
            chance: .04
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 70,
        total_strength: 70,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[201] = createObject({
    b_i: 201,
    b_t: BASE_TYPE.NPC,
    name: "Ridder",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 3,
        y: 6
    },
    params: {
        health: 76,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 271,
            chance: .05
        }, {
            id: 804,
            chance: .0025
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 142,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 74,
            chance: .04
        } ]
    },
    temp: {
        health: 76,
        busy: !1,
        total_defense: 70,
        total_strength: 60,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[202] = createObject({
    b_i: 202,
    b_t: BASE_TYPE.NPC,
    name: "Scholar",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 4,
        y: 6
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 271,
            chance: .05
        }, {
            id: 440,
            chance: .0015
        }, {
            id: 453,
            chance: .0025
        }, {
            id: 449,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 480,
            chance: .0025
        }, {
            id: 430,
            chance: .0015
        }, {
            id: 411,
            chance: .04
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 84,
        total_strength: 100,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[203] = createObject({
    b_i: 203,
    b_t: BASE_TYPE.NPC,
    name: "Reval Jeweler",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 90 54 72 2 0 0 108 39 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 297,
            count: 5,
            spawn: !0
        }, {
            id: 582,
            count: 10,
            spawn: !0
        }, {
            id: 292,
            count: 0
        }, {
            id: 293,
            count: 0
        }, {
            id: 30,
            count: 25,
            spawn: !0
        }, {
            id: 202,
            count: 0
        }, {
            id: 184,
            count: 0
        }, {
            id: 1300,
            count: 0
        }, {
            id: 200,
            count: 0
        }, {
            id: 201,
            count: 0
        }, {
            id: 198,
            count: 0
        }, {
            id: 199,
            count: 0
        }, {
            id: 196,
            count: 0
        }, {
            id: 197,
            count: 0
        }, {
            id: 194,
            count: 0
        }, {
            id: 195,
            count: 0
        }, {
            id: 385,
            count: 0
        }, {
            id: 386,
            count: 0
        }, {
            id: 387,
            count: 0
        }, {
            id: 388,
            count: 0
        }, {
            id: 389,
            count: 0
        }, {
            id: 390,
            count: 0
        }, {
            id: 24,
            count: 0
        }, {
            id: 28,
            count: 0
        }, {
            id: 805,
            count: 0
        }, {
            id: 298,
            count: 0
        }, {
            id: 131,
            count: 0
        }, {
            id: 806,
            count: 0
        }, {
            id: 815,
            count: 0
        }, {
            id: 816,
            count: 0
        }, {
            id: 130,
            count: 0
        }, {
            id: 301,
            count: 0
        }, {
            id: 1089,
            count: 0
        }, {
            id: 1090,
            count: 0
        }, {
            id: 1091,
            count: 0
        }, {
            id: 1092,
            count: 0
        }, {
            id: 1109,
            count: 0
        }, {
            id: 1110,
            count: 0
        }, {
            id: 1111,
            count: 0
        }, {
            id: 1112,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[204] = createObject({
    b_i: 204,
    b_t: BASE_TYPE.NPC,
    name: "Enchanter",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 5,
        y: 6
    },
    params: {
        health: 122,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 271,
            chance: .05
        }, {
            id: 432,
            chance: .0015
        }, {
            id: 442,
            chance: .0025
        }, {
            id: 455,
            chance: .0025
        }, {
            id: 457,
            chance: .0025
        }, {
            id: 1001,
            chance: .0025
        }, {
            id: 481,
            chance: .0015
        }, {
            id: 416,
            chance: .03
        } ]
    },
    temp: {
        health: 122,
        busy: !1,
        total_defense: 90,
        total_strength: 80,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[205] = createObject({
    b_i: 205,
    b_t: BASE_TYPE.NPC,
    name: "Reval Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 57 72 0 0 0 137 51 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 2,
            spawn: !0
        }, {
            id: 23,
            count: 2,
            spawn: !0
        }, {
            id: 31,
            count: 25,
            spawn: !0
        }, {
            id: 186,
            count: 0
        }, {
            id: 50,
            count: 0
        }, {
            id: 173,
            count: 0
        }, {
            id: 177,
            count: 0
        }, {
            id: 25,
            count: 5,
            spawn: !0
        }, {
            id: 2,
            count: 5,
            spawn: !0
        }, {
            id: 52,
            count: 0
        }, {
            id: 58,
            count: 5,
            spawn: !0
        }, {
            id: 53,
            count: 5,
            spawn: !0
        }, {
            id: 51,
            count: 5,
            spawn: !0
        }, {
            id: 61,
            count: 0
        }, {
            id: 65,
            count: 0
        }, {
            id: 66,
            count: 0
        }, {
            id: 474,
            count: 0
        }, {
            id: 44,
            count: 0
        }, {
            id: 18,
            count: 0
        }, {
            id: 54,
            count: 5,
            spawn: !0
        }, {
            id: 55,
            count: 5,
            spawn: !0
        }, {
            id: 56,
            count: 5,
            spawn: !0
        }, {
            id: 57,
            count: 0
        }, {
            id: 59,
            count: 0
        }, {
            id: 60,
            count: 0
        }, {
            id: 62,
            count: 0
        }, {
            id: 67,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[206] = createObject({
    b_i: 206,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Alchemist",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 64 38 72 1 0 0 166 0 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1016,
            count: 10,
            spawn: !0
        }, {
            id: 205,
            count: 0
        }, {
            id: 207,
            count: 10,
            spawn: !0
        }, {
            id: 212,
            count: 0
        }, {
            id: 259,
            count: 0
        }, {
            id: 276,
            count: 0
        }, {
            id: 369,
            count: 0
        }, {
            id: 247,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[207] = createObject({
    b_i: 207,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Jeweler",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 46 28 72 0 1 33 0 17 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 297,
            count: 5,
            spawn: !0
        }, {
            id: 582,
            count: 10,
            spawn: !0
        }, {
            id: 30,
            count: 30,
            spawn: !0
        }, {
            id: 484,
            count: 0
        }, {
            id: 485,
            count: 0
        }, {
            id: 200,
            count: 0
        }, {
            id: 201,
            count: 0
        }, {
            id: 198,
            count: 0
        }, {
            id: 199,
            count: 0
        }, {
            id: 196,
            count: 0
        }, {
            id: 197,
            count: 0
        }, {
            id: 194,
            count: 0
        }, {
            id: 195,
            count: 0
        }, {
            id: 385,
            count: 0
        }, {
            id: 386,
            count: 0
        }, {
            id: 387,
            count: 0
        }, {
            id: 388,
            count: 0
        }, {
            id: 389,
            count: 0
        }, {
            id: 390,
            count: 0
        }, {
            id: 487,
            count: 0
        }, {
            id: 488,
            count: 0
        }, {
            id: 807,
            count: 0
        }, {
            id: 808,
            count: 0
        }, {
            id: 809,
            count: 0
        }, {
            id: 810,
            count: 0
        }, {
            id: 486,
            count: 0
        }, {
            id: 818,
            count: 0
        }, {
            id: 819,
            count: 0
        }, {
            id: 820,
            count: 0
        }, {
            id: 821,
            count: 0
        }, {
            id: 489,
            count: 0
        }, {
            id: 1093,
            count: 0
        }, {
            id: 1094,
            count: 0
        }, {
            id: 1095,
            count: 0
        }, {
            id: 1096,
            count: 0
        }, {
            id: 1097,
            count: 0
        }, {
            id: 1113,
            count: 0
        }, {
            id: 1114,
            count: 0
        }, {
            id: 1115,
            count: 0
        }, {
            id: 1116,
            count: 0
        }, {
            id: 1117,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[208] = createObject({
    b_i: 208,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Potion Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 60 34 72 0 0 0 0 54 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 315,
            count: 0
        }, {
            id: 316,
            count: 0
        }, {
            id: 317,
            count: 0
        }, {
            id: 318,
            count: 0
        }, {
            id: 319,
            count: 0
        }, {
            id: 320,
            count: 0
        }, {
            id: 321,
            count: 0
        }, {
            id: 322,
            count: 0
        }, {
            id: 401,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[209] = createObject({
    b_i: 209,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 15 28 72 0 0 0 0 39 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 5,
            count: 2,
            spawn: !0
        }, {
            id: 21,
            count: 2,
            spawn: !0
        }, {
            id: 286,
            count: 2,
            spawn: !0
        }, {
            id: 612,
            count: 0
        }, {
            id: 46,
            count: 0
        }, {
            id: 32,
            count: 0
        }, {
            id: 33,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[210] = createObject({
    b_i: 210,
    b_t: BASE_TYPE.NPC,
    name: "Rakblood Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 92 28 72 0 0 0 113 51 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 2,
            spawn: !0
        }, {
            id: 23,
            count: 2,
            spawn: !0
        }, {
            id: 31,
            count: 30,
            spawn: !0
        }, {
            id: 186,
            count: 0
        }, {
            id: 291,
            count: 0
        }, {
            id: 173,
            count: 0
        }, {
            id: 177,
            count: 0
        }, {
            id: 188,
            count: 5,
            spawn: !0
        }, {
            id: 26,
            count: 5,
            spawn: !0
        }, {
            id: 191,
            count: 5,
            spawn: !0
        }, {
            id: 339,
            count: 0
        }, {
            id: 497,
            count: 5,
            spawn: !0
        }, {
            id: 166,
            count: 5,
            spawn: !0
        }, {
            id: 189,
            count: 0
        }, {
            id: 193,
            count: 0
        }, {
            id: 190,
            count: 0
        }, {
            id: 475,
            count: 0
        }, {
            id: 139,
            count: 0
        }, {
            id: 142,
            count: 5,
            spawn: !0
        }, {
            id: 143,
            count: 5,
            spawn: !0
        }, {
            id: 141,
            count: 5,
            spawn: !0
        }, {
            id: 140,
            count: 0
        }, {
            id: 144,
            count: 0
        }, {
            id: 145,
            count: 0
        }, {
            id: 146,
            count: 0
        }, {
            id: 147,
            count: 0
        }, {
            id: 148,
            count: 0
        }, {
            id: 149,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[211] = createObject({
    b_i: 211,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Alchemist",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 64 38 72 1 0 0 61 0 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1016,
            count: 10,
            spawn: !0
        }, {
            id: 260,
            count: 0
        }, {
            id: 206,
            count: 0
        }, {
            id: 233,
            count: 0
        }, {
            id: 261,
            count: 0
        }, {
            id: 269,
            count: 0
        }, {
            id: 275,
            count: 0
        }, {
            id: 1433,
            count: 0
        }, {
            id: 1434,
            count: 0
        }, {
            id: 1435,
            count: 0
        }, {
            id: 246,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[212] = createObject({
    b_i: 212,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 52 72 0 0 0 122 42 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 511,
            count: 0
        }, {
            id: 512,
            count: 0
        }, {
            id: 513,
            count: 0
        }, {
            id: 508,
            count: 0
        }, {
            id: 514,
            count: 0
        }, {
            id: 515,
            count: 0
        }, {
            id: 516,
            count: 0
        }, {
            id: 517,
            count: 0
        }, {
            id: 518,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[213] = createObject({
    b_i: 213,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 92 50 72 0 1 41 0 39 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 556,
            count: 0
        }, {
            id: 561,
            count: 0
        }, {
            id: 563,
            count: 0
        }, {
            id: 573,
            count: 0
        }, {
            id: 574,
            count: 0
        }, {
            id: 559,
            count: 0
        }, {
            id: 162,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[214] = createObject({
    b_i: 214,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Lumberjack",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 38 72 2 0 0 35 17 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 296,
            count: 0
        }, {
            id: 594,
            count: 0
        }, {
            id: 596,
            count: 0
        }, {
            id: 597,
            count: 0
        }, {
            id: 22,
            count: 5,
            spawn: !0
        }, {
            id: 152,
            count: 5,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[215] = createObject({
    b_i: 215,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Pet Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 52 72 0 0 0 0 42 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 669,
            count: 0
        }, {
            id: 671,
            count: 0
        }, {
            id: 672,
            count: 0
        }, {
            id: 673,
            count: 0
        }, {
            id: 698,
            count: 0
        }, {
            id: 699,
            count: 0
        }, {
            id: 702,
            count: 0
        }, {
            id: 703,
            count: 0
        }, {
            id: 704,
            count: 0
        }, {
            id: 705,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[216] = createObject({
    b_i: 216,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 90 54 72 0 0 0 0 44 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 5,
            count: 2,
            spawn: !0
        }, {
            id: 21,
            count: 2,
            spawn: !0
        }, {
            id: 612,
            count: 0
        }, {
            id: 46,
            count: 0
        }, {
            id: 493,
            count: 20,
            spawn: !0
        }, {
            id: 491,
            count: 20,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[217] = createObject({
    b_i: 217,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Furniture Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 60 34 72 2 0 0 47 44 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 730,
            count: 0
        }, {
            id: 731,
            count: 0
        }, {
            id: 732,
            count: 0
        }, {
            id: 825,
            count: 0
        }, {
            id: 830,
            count: 0
        }, {
            id: 733,
            count: 0
        }, {
            id: 739,
            count: 0
        }, {
            id: 745,
            count: 0
        }, {
            id: 768,
            count: 0
        }, {
            id: 769,
            count: 0
        }, {
            id: 734,
            count: 0
        }, {
            id: 740,
            count: 0
        }, {
            id: 746,
            count: 0
        }, {
            id: 824,
            count: 0
        }, {
            id: 829,
            count: 0
        }, {
            id: 735,
            count: 0
        }, {
            id: 741,
            count: 0
        }, {
            id: 747,
            count: 0
        }, {
            id: 826,
            count: 0
        }, {
            id: 831,
            count: 0
        }, {
            id: 736,
            count: 0
        }, {
            id: 742,
            count: 0
        }, {
            id: 748,
            count: 0
        }, {
            id: 827,
            count: 0
        }, {
            id: 832,
            count: 0
        }, {
            id: 737,
            count: 0
        }, {
            id: 743,
            count: 0
        }, {
            id: 749,
            count: 0
        }, {
            id: 828,
            count: 0
        }, {
            id: 833,
            count: 0
        }, {
            id: 738,
            count: 0
        }, {
            id: 744,
            count: 0
        }, {
            id: 750,
            count: 0
        }, {
            id: 853,
            count: 0
        }, {
            id: 834,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[218] = createObject({
    b_i: 218,
    b_t: BASE_TYPE.NPC,
    name: "Walco Alchemist",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 64 38 72 1 1 33 61 42 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1016,
            count: 10,
            spawn: !0
        }, {
            id: 285,
            count: 0
        }, {
            id: 221,
            count: 0
        }, {
            id: 284,
            count: 0
        }, {
            id: 222,
            count: 0
        }, {
            id: 267,
            count: 0
        }, {
            id: 229,
            count: 0
        }, {
            id: 248,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[219] = createObject({
    b_i: 219,
    b_t: BASE_TYPE.NPC,
    name: "Walco Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 46 30 72 0 0 0 0 17 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 556,
            count: 0
        }, {
            id: 192,
            count: 0
        }, {
            id: 563,
            count: 0
        }, {
            id: 575,
            count: 0
        }, {
            id: 165,
            count: 0
        }, {
            id: 168,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[220] = createObject({
    b_i: 220,
    b_t: BASE_TYPE.NPC,
    name: "Walco Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 90 50 72 2 1 37 125 39 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 522,
            count: 0
        }, {
            id: 523,
            count: 0
        }, {
            id: 524,
            count: 0
        }, {
            id: 525,
            count: 0
        }, {
            id: 526,
            count: 0
        }, {
            id: 527,
            count: 0
        }, {
            id: 528,
            count: 0
        }, {
            id: 529,
            count: 0
        }, {
            id: 530,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[221] = createObject({
    b_i: 221,
    b_t: BASE_TYPE.NPC,
    name: "Walco Lumberjack",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 92 52 72 2 1 36 47 39 6 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 595,
            count: 0
        }, {
            id: 152,
            count: 5,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[222] = createObject({
    b_i: 222,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 16 72 2 1 39 111 17 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 535,
            count: 0
        }, {
            id: 536,
            count: 0
        }, {
            id: 538,
            count: 0
        }, {
            id: 520,
            count: 0
        }, {
            id: 519,
            count: 0
        }, {
            id: 521,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[223] = createObject({
    b_i: 223,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 52 72 0 1 37 0 51 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 132,
            count: 0
        }, {
            id: 341,
            count: 0
        }, {
            id: 565,
            count: 0
        }, {
            id: 589,
            count: 0
        }, {
            id: 590,
            count: 0
        }, {
            id: 591,
            count: 0
        }, {
            id: 592,
            count: 0
        }, {
            id: 656,
            count: 0
        }, {
            id: 170,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[224] = createObject({
    b_i: 224,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 52 72 0 1 33 0 39 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 5,
            count: 2,
            spawn: !0
        }, {
            id: 21,
            count: 2,
            spawn: !0
        }, {
            id: 47,
            count: 0
        }, {
            id: 20,
            count: 0
        }, {
            id: 260,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[225] = createObject({
    b_i: 225,
    b_t: BASE_TYPE.NPC,
    name: "Clouds Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 82 50 72 0 0 0 0 39 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 172,
            count: 0
        }, {
            id: 180,
            count: 0
        }, {
            id: 181,
            count: 0
        }, {
            id: 182,
            count: 0
        }, {
            id: 343,
            count: 0
        }, {
            id: 472,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[226] = createObject({
    b_i: 226,
    b_t: BASE_TYPE.NPC,
    name: "Clouds Pet Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 15 16 72 0 0 0 188 17 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 677,
            count: 0
        }, {
            id: 678,
            count: 0
        }, {
            id: 679,
            count: 0
        }, {
            id: 680,
            count: 0
        }, {
            id: 681,
            count: 0
        }, {
            id: 886,
            count: 0
        }, {
            id: 695,
            count: 0
        }, {
            id: 696,
            count: 0
        }, {
            id: 697,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[227] = createObject({
    b_i: 227,
    b_t: BASE_TYPE.NPC,
    name: "Heaven Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 50 72 2 1 36 133 39 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 532,
            count: 0
        }, {
            id: 533,
            count: 0
        }, {
            id: 534,
            count: 0
        }, {
            id: 517,
            count: 0
        }, {
            id: 619,
            count: 0
        }, {
            id: 621,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[228] = createObject({
    b_i: 228,
    b_t: BASE_TYPE.NPC,
    name: "Heaven Jeweler",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 76 50 72 2 1 33 111 17 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 297,
            count: 5,
            spawn: !0
        }, {
            id: 582,
            count: 10,
            spawn: !0
        }, {
            id: 30,
            count: 30,
            spawn: !0
        }, {
            id: 372,
            count: 0
        }, {
            id: 373,
            count: 0
        }, {
            id: 200,
            count: 0
        }, {
            id: 201,
            count: 0
        }, {
            id: 198,
            count: 0
        }, {
            id: 199,
            count: 0
        }, {
            id: 196,
            count: 0
        }, {
            id: 197,
            count: 0
        }, {
            id: 194,
            count: 0
        }, {
            id: 195,
            count: 0
        }, {
            id: 385,
            count: 0
        }, {
            id: 386,
            count: 0
        }, {
            id: 387,
            count: 0
        }, {
            id: 388,
            count: 0
        }, {
            id: 389,
            count: 0
        }, {
            id: 390,
            count: 0
        }, {
            id: 374,
            count: 0
        }, {
            id: 379,
            count: 0
        }, {
            id: 375,
            count: 0
        }, {
            id: 376,
            count: 0
        }, {
            id: 377,
            count: 0
        }, {
            id: 378,
            count: 0
        }, {
            id: 391,
            count: 0
        }, {
            id: 812,
            count: 0
        }, {
            id: 380,
            count: 0
        }, {
            id: 382,
            count: 0
        }, {
            id: 381,
            count: 0
        }, {
            id: 395,
            count: 0
        }, {
            id: 822,
            count: 0
        }, {
            id: 823,
            count: 0
        }, {
            id: 392,
            count: 0
        }, {
            id: 1098,
            count: 0
        }, {
            id: 1099,
            count: 0
        }, {
            id: 1100,
            count: 0
        }, {
            id: 1101,
            count: 0
        }, {
            id: 1102,
            count: 0
        }, {
            id: 1103,
            count: 0
        }, {
            id: 1104,
            count: 0
        }, {
            id: 1118,
            count: 0
        }, {
            id: 1119,
            count: 0
        }, {
            id: 1120,
            count: 0
        }, {
            id: 1121,
            count: 0
        }, {
            id: 1122,
            count: 0
        }, {
            id: 1123,
            count: 0
        }, {
            id: 1124,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[229] = createObject({
    b_i: 229,
    b_t: BASE_TYPE.NPC,
    name: "Heaven Potion Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 52 72 1 0 0 166 44 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 323,
            count: 0
        }, {
            id: 324,
            count: 0
        }, {
            id: 325,
            count: 0
        }, {
            id: 326,
            count: 0
        }, {
            id: 327,
            count: 0
        }, {
            id: 328,
            count: 0
        }, {
            id: 329,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[230] = createObject({
    b_i: 230,
    b_t: BASE_TYPE.NPC,
    name: "Blood River Pet Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 33 50 72 0 0 0 0 32 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 682,
            count: 0
        }, {
            id: 683,
            count: 0
        }, {
            id: 684,
            count: 0
        }, {
            id: 685,
            count: 0
        }, {
            id: 686,
            count: 0
        }, {
            id: 687,
            count: 0
        }, {
            id: 692,
            count: 0
        }, {
            id: 693,
            count: 0
        }, {
            id: 694,
            count: 0
        }, {
            id: 711,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[231] = createObject({
    b_i: 231,
    b_t: BASE_TYPE.NPC,
    name: "Blood River Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 0 36 72 0 0 0 0 39 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 366,
            count: 10,
            spawn: !0
        }, {
            id: 39,
            count: 5,
            spawn: !0
        }, {
            id: 661,
            count: 0
        }, {
            id: 659,
            count: 0
        }, {
            id: 281,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[232] = createObject({
    b_i: 232,
    b_t: BASE_TYPE.NPC,
    name: "Hell Potion Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 92 36 72 1 0 0 166 17 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 330,
            count: 0
        }, {
            id: 331,
            count: 0
        }, {
            id: 332,
            count: 0
        }, {
            id: 333,
            count: 0
        }, {
            id: 334,
            count: 0
        }, {
            id: 335,
            count: 0
        }, {
            id: 336,
            count: 0
        }, {
            id: 337,
            count: 0
        }, {
            id: 338,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[233] = createObject({
    b_i: 233,
    b_t: BASE_TYPE.NPC,
    name: "Hell Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 78 50 72 0 0 0 188 44 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 2,
            spawn: !0
        }, {
            id: 23,
            count: 2,
            spawn: !0
        }, {
            id: 581,
            count: 10,
            spawn: !0
        }, {
            id: 657,
            count: 0
        }, {
            id: 658,
            count: 0
        }, {
            id: 174,
            count: 0
        }, {
            id: 178,
            count: 0
        }, {
            id: 666,
            count: 0
        }, {
            id: 668,
            count: 0
        }, {
            id: 618,
            count: 0
        }, {
            id: 616,
            count: 0
        }, {
            id: 620,
            count: 0
        }, {
            id: 622,
            count: 0
        }, {
            id: 624,
            count: 0
        }, {
            id: 159,
            count: 0
        }, {
            id: 477,
            count: 0
        }, {
            id: 344,
            count: 0
        }, {
            id: 500,
            count: 0
        }, {
            id: 664,
            count: 0
        }, {
            id: 665,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[234] = createObject({
    b_i: 234,
    b_t: BASE_TYPE.NPC,
    name: "Hell Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 2 1 33 111 32 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 566,
            count: 0
        }, {
            id: 583,
            count: 0
        }, {
            id: 584,
            count: 0
        }, {
            id: 585,
            count: 0
        }, {
            id: 499,
            count: 0
        }, {
            id: 647,
            count: 0
        }, {
            id: 652,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[235] = createObject({
    b_i: 235,
    b_t: BASE_TYPE.NPC,
    name: "Hell Pet Trader",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 0 0 0 0 17 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 700,
            count: 0
        }, {
            id: 701,
            count: 0
        }, {
            id: 688,
            count: 0
        }, {
            id: 689,
            count: 0
        }, {
            id: 690,
            count: 0
        }, {
            id: 691,
            count: 0
        }, {
            id: 888,
            count: 0
        }, {
            id: 889,
            count: 0
        }, {
            id: 890,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[236] = createObject({
    b_i: 236,
    b_t: BASE_TYPE.NPC,
    name: "Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "6 0 47 52 9 1 0 0 60 0 0 7 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 463,
            count: 0
        }, {
            id: 465,
            count: 0
        }, {
            id: 151,
            count: 0
        }, {
            id: 363,
            count: 0
        }, {
            id: 160,
            count: 0
        }, {
            id: 158,
            count: 0
        }, {
            id: 157,
            count: 0
        }, {
            id: 489,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[237] = createObject({
    b_i: 237,
    b_t: BASE_TYPE.NPC,
    name: "Tutorial Fishing Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 44 26 72 2 0 0 80 0 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 7,
            count: 5,
            spawn: !0
        }, {
            id: 124,
            count: 5,
            spawn: !0
        }, {
            id: 68,
            count: 0
        }, {
            id: 8,
            count: 10,
            spawn: !0
        }, {
            id: 9,
            count: 0
        }, {
            id: 10,
            count: 8,
            spawn: !0
        }, {
            id: 11,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[238] = createObject({
    b_i: 238,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Weapon Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 50 72 2 0 0 133 51 6 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 129,
            count: 0
        }, {
            id: 150,
            count: 0
        }, {
            id: 363,
            count: 0
        }, {
            id: 531,
            count: 0
        }, {
            id: 537,
            count: 0
        }, {
            id: 615,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[239] = createObject({
    b_i: 239,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Armor Merchant",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 25 52 72 0 1 33 0 39 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 133,
            count: 0
        }, {
            id: 153,
            count: 0
        }, {
            id: 154,
            count: 0
        }, {
            id: 155,
            count: 0
        }, {
            id: 156,
            count: 0
        }, {
            id: 165,
            count: 0
        }, {
            id: 472,
            count: 0
        }, {
            id: 558,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[240] = createObject({
    b_i: 240,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 62 36 72 1 0 0 61 17 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 6,
            count: 35,
            spawn: !0
        }, {
            id: 366,
            count: 10,
            spawn: !0
        }, {
            id: 39,
            count: 5,
            spawn: !0
        }, {
            id: 661,
            count: 0
        }, {
            id: 659,
            count: 0
        }, {
            id: 261,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[241] = createObject({
    b_i: 241,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Jeweler",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 72 2 1 36 125 44 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 297,
            count: 5,
            spawn: !0
        }, {
            id: 582,
            count: 10,
            spawn: !0
        }, {
            id: 292,
            count: 0
        }, {
            id: 293,
            count: 0
        }, {
            id: 30,
            count: 25,
            spawn: !0
        }, {
            id: 184,
            count: 0
        }, {
            id: 202,
            count: 0
        }, {
            id: 200,
            count: 0
        }, {
            id: 201,
            count: 0
        }, {
            id: 198,
            count: 0
        }, {
            id: 199,
            count: 0
        }, {
            id: 196,
            count: 0
        }, {
            id: 197,
            count: 0
        }, {
            id: 194,
            count: 0
        }, {
            id: 195,
            count: 0
        }, {
            id: 385,
            count: 0
        }, {
            id: 386,
            count: 0
        }, {
            id: 387,
            count: 0
        }, {
            id: 388,
            count: 0
        }, {
            id: 389,
            count: 0
        }, {
            id: 390,
            count: 0
        }, {
            id: 24,
            count: 0
        }, {
            id: 28,
            count: 0
        }, {
            id: 805,
            count: 0
        }, {
            id: 298,
            count: 0
        }, {
            id: 131,
            count: 0
        }, {
            id: 806,
            count: 0
        }, {
            id: 815,
            count: 0
        }, {
            id: 816,
            count: 0
        }, {
            id: 130,
            count: 0
        }, {
            id: 301,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[242] = createObject({
    b_i: 242,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Farmer",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 72 2 0 0 160 0 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 779,
            count: 3,
            spawn: !0
        }, {
            id: 767,
            count: 10,
            spawn: !0
        }, {
            id: 778,
            count: 40,
            spawn: !0
        }, {
            id: 776,
            count: 40,
            spawn: !0
        }, {
            id: 794,
            count: 40,
            spawn: !0
        }, {
            id: 773,
            count: 40,
            spawn: !0
        }, {
            id: 787,
            count: 40,
            spawn: !0
        }, {
            id: 788,
            count: 40,
            spawn: !0
        }, {
            id: 789,
            count: 40,
            spawn: !0
        }, {
            id: 790,
            count: 30,
            spawn: !0
        }, {
            id: 780,
            count: 0
        }, {
            id: 781,
            count: 0
        }, {
            id: 782,
            count: 0
        }, {
            id: 783,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[243] = createObject({
    b_i: 243,
    b_t: BASE_TYPE.NPC,
    name: "Wandering Farmer",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 16 72 2 1 39 125 17 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 779,
            count: 3,
            spawn: !0
        }, {
            id: 767,
            count: 10,
            spawn: !0
        }, {
            id: 774,
            count: 40,
            spawn: !0
        }, {
            id: 1035,
            count: 40,
            spawn: !0
        }, {
            id: 854,
            count: 40,
            spawn: !0
        }, {
            id: 775,
            count: 40,
            spawn: !0
        }, {
            id: 791,
            count: 40,
            spawn: !0
        }, {
            id: 792,
            count: 40,
            spawn: !0
        }, {
            id: 793,
            count: 30,
            spawn: !0
        }, {
            id: 1364,
            count: 20,
            spawn: !0
        }, {
            id: 1358,
            count: 3,
            spawn: !0
        }, {
            id: 1359,
            count: 1,
            spawn: !0
        }, {
            id: 784,
            count: 0
        }, {
            id: 785,
            count: 0
        }, {
            id: 786,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[244] = createObject({
    b_i: 244,
    b_t: BASE_TYPE.NPC,
    name: "King Gilded Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 4
    },
    params: {
        health: 220,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .02
        }, {
            id: 253,
            chance: .03
        }, {
            id: 616,
            chance: .025
        }, {
            id: 459,
            chance: .005
        }, {
            id: 153,
            chance: .0025
        }, {
            id: 155,
            chance: .0025
        }, {
            id: 1359,
            chance: .005
        }, {
            id: 399,
            chance: .0015
        }, {
            id: 267,
            chance: .05
        }, {
            id: 381,
            chance: .0025
        }, {
            id: 182,
            chance: .0025
        } ]
    },
    temp: {
        health: 220,
        busy: !1,
        total_defense: 200,
        total_strength: 150,
        total_accuracy: 310
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[245] = createObject({
    b_i: 245,
    b_t: BASE_TYPE.NPC,
    name: "Unicorn",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 1
    },
    params: {
        health: 180,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 911,
            chance: .025
        }, {
            id: 114,
            chance: .05
        }, {
            id: 173,
            chance: .005
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 160,
            chance: .0015
        }, {
            id: 821,
            chance: .0025
        }, {
            id: 866,
            chance: .0025
        } ]
    },
    temp: {
        health: 180,
        busy: !1,
        total_defense: 200,
        total_strength: 96,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[246] = createObject({
    b_i: 246,
    b_t: BASE_TYPE.NPC,
    name: "Whiland Blacksmith",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 15 52 72 0 0 0 181 17 6 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 36,
            count: 5,
            spawn: !0
        }, {
            id: 23,
            count: 5,
            spawn: !0
        }, {
            id: 31,
            count: 25,
            spawn: !0
        }, {
            id: 50,
            count: 0
        }, {
            id: 254,
            count: 0
        }, {
            id: 173,
            count: 0
        }, {
            id: 177,
            count: 0
        }, {
            id: 932,
            count: 5,
            spawn: !0
        }, {
            id: 933,
            count: 0
        }, {
            id: 934,
            count: 0
        }, {
            id: 935,
            count: 0
        }, {
            id: 936,
            count: 0
        }, {
            id: 937,
            count: 0
        }, {
            id: 938,
            count: 5,
            spawn: !0
        }, {
            id: 939,
            count: 0
        }, {
            id: 940,
            count: 0
        }, {
            id: 941,
            count: 0
        }, {
            id: 942,
            count: 0
        }, {
            id: 943,
            count: 0
        }, {
            id: 944,
            count: 0
        }, {
            id: 945,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[247] = createObject({
    b_i: 247,
    b_t: BASE_TYPE.NPC,
    name: "Cupid",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 6,
        y: 6
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 897,
            count: 20,
            spawn: !0
        }, {
            id: 899,
            count: 20,
            spawn: !0
        }, {
            id: 901,
            count: 20,
            spawn: !0
        }, {
            id: 902,
            count: 20,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[248] = createObject({
    b_i: 248,
    b_t: BASE_TYPE.NPC,
    name: "Gilded Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 6,
        y: 2
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 99,
            chance: .01
        }, {
            id: 190,
            chance: .0025
        }, {
            id: 61,
            chance: .0035
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        }, {
            id: 253,
            chance: .01
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 150,
        total_strength: 90,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[249] = createObject({
    b_i: 249,
    b_t: BASE_TYPE.NPC,
    name: "Adult Black Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 3
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 99,
            chance: .01
        }, {
            id: 190,
            chance: .0025
        }, {
            id: 61,
            chance: .0035
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 165,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 120,
        total_strength: 90,
        total_accuracy: 120
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[250] = createObject({
    b_i: 250,
    b_t: BASE_TYPE.NPC,
    name: "Adult Gilded Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 6,
        y: 3
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 102,
            chance: .01
        }, {
            id: 173,
            chance: .005
        }, {
            id: 398,
            chance: .0025
        }, {
            id: 394,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 430,
            chance: .0025
        }, {
            id: 379,
            chance: .0025
        }, {
            id: 487,
            chance: .0025
        }, {
            id: 154,
            chance: .0025
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 253,
            chance: .01
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 150,
        total_strength: 120,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[251] = createObject({
    b_i: 251,
    b_t: BASE_TYPE.NPC,
    name: "Earth Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 5
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 116,
            chance: .02
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 158,
            chance: .0025
        }, {
            id: 181,
            chance: .0025
        }, {
            id: 618,
            chance: .0025
        }, {
            id: 468,
            chance: .0025
        }, {
            id: 257,
            chance: .0025
        }, {
            id: 866,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 613,
            chance: .0025
        }, {
            id: 500,
            chance: .0025
        } ]
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 300,
        total_strength: 110,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[252] = createObject({
    b_i: 252,
    b_t: BASE_TYPE.NPC,
    name: "Metal Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 1,
        y: 5
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 120,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 613,
            chance: .0025
        }, {
            id: 5,
            chance: .0025
        }, {
            id: 622,
            chance: .0025
        }, {
            id: 395,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 477,
            chance: .0025
        }, {
            id: 475,
            chance: .005
        }, {
            id: 189,
            chance: .005
        }, {
            id: 2,
            chance: .0025
        }, {
            id: 501,
            chance: .0025
        }, {
            id: 469,
            chance: .0025
        }, {
            id: 384,
            chance: .01
        }, {
            id: 173,
            chance: .005
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 320,
        total_strength: 110,
        total_accuracy: 320
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[253] = createObject({
    b_i: 253,
    b_t: BASE_TYPE.NPC,
    name: "Fire Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 5
    },
    params: {
        health: 260,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 120,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 169,
            chance: .0025
        }, {
            id: 180,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 440,
            chance: .0025
        }, {
            id: 668,
            chance: .0025
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 159,
            chance: .0025
        }, {
            id: 664,
            chance: .0025
        }, {
            id: 665,
            chance: .0025
        }, {
            id: 177,
            chance: .005
        } ]
    },
    temp: {
        health: 260,
        busy: !1,
        total_defense: 320,
        total_strength: 130,
        total_accuracy: 320
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[254] = createObject({
    b_i: 254,
    b_t: BASE_TYPE.NPC,
    name: "Void Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 6
    },
    params: {
        health: 300,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 122,
            chance: .04
        }, {
            id: 169,
            chance: .0025
        }, {
            id: 666,
            chance: .0025
        }, {
            id: 380,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 158,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 193,
            chance: .005
        }, {
            id: 66,
            chance: .005
        }, {
            id: 183,
            chance: .0025
        }, {
            id: 821,
            chance: .0025
        }, {
            id: 944,
            chance: .0025
        }, {
            id: 470,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        } ]
    },
    temp: {
        health: 300,
        busy: !1,
        total_defense: 350,
        total_strength: 140,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[255] = createObject({
    b_i: 255,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Pharaoh",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 11,
        y: 0
    },
    params: {
        health: 4240,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1429,
            chance: .05
        }, {
            id: 863,
            chance: .03
        }, {
            id: 1077,
            chance: .03
        }, {
            id: 859,
            chance: .03
        }, {
            id: 175,
            chance: .05
        }, {
            id: 156,
            chance: .04
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 436,
            chance: .04
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 1641,
            chance: .015
        }, {
            id: 1659,
            chance: .015
        }, {
            id: 155,
            chance: .04
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 158,
            chance: .03
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 964,
            chance: .02
        }, {
            id: 163,
            chance: .03
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 856,
            chance: .04
        }, {
            id: 864,
            chance: .04
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 391,
            chance: .02
        }, {
            id: 1354,
            chance: .02
        }, {
            id: 666,
            chance: .05
        }, {
            id: 934,
            chance: .05
        }, {
            id: 905,
            chance: .04
        }, {
            id: 820,
            chance: .05
        }, {
            id: 593,
            chance: .04
        }, {
            id: 1692,
            chance: .02
        }, {
            id: 477,
            chance: .05
        } ]
    },
    temp: {
        health: 4240,
        busy: !1,
        total_defense: 400,
        total_strength: 160,
        total_accuracy: 400
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[256] = createObject({
    b_i: 256,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Chaotic Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 2,
        y: 0
    },
    params: {
        health: 7350,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1430,
            chance: .05
        }, {
            id: 465,
            chance: .04
        }, {
            id: 620,
            chance: .04
        }, {
            id: 1684,
            chance: .04
        }, {
            id: 867,
            chance: .03
        }, {
            id: 1077,
            chance: .03
        }, {
            id: 175,
            chance: .05
        }, {
            id: 807,
            chance: .04
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 809,
            chance: .04
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 1641,
            chance: .015
        }, {
            id: 1659,
            chance: .015
        }, {
            id: 669,
            chance: .03
        }, {
            id: 1269,
            chance: .04
        }, {
            id: 813,
            chance: .04
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 1284,
            chance: .04
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 706,
            chance: .03
        }, {
            id: 372,
            chance: .05
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 374,
            chance: .05
        }, {
            id: 964,
            chance: .02
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 426,
            chance: .04
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 339,
            chance: .06
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 340,
            chance: .04
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 665,
            chance: .04
        }, {
            id: 710,
            chance: .03
        }, {
            id: 1354,
            chance: .02
        }, {
            id: 146,
            chance: .05
        }, {
            id: 1692,
            chance: .02
        }, {
            id: 450,
            chance: .05
        }, {
            id: 653,
            chance: .04
        }, {
            id: 593,
            chance: .04
        }, {
            id: 378,
            chance: .05
        }, {
            id: 477,
            chance: .05
        } ]
    },
    temp: {
        health: 7350,
        busy: !1,
        total_defense: 440,
        total_strength: 160,
        total_accuracy: 450
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[257] = createObject({
    b_i: 257,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Nephilim Warrior",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 0,
        y: 0
    },
    params: {
        health: 10920,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1431,
            chance: .06
        }, {
            id: 171,
            chance: .03
        }, {
            id: 347,
            chance: .04
        }, {
            id: 1354,
            chance: .02
        }, {
            id: 175,
            chance: .06
        }, {
            id: 179,
            chance: .06
        }, {
            id: 1626,
            chance: .01
        }, {
            id: 1602,
            chance: .03
        }, {
            id: 1606,
            chance: .03
        }, {
            id: 1610,
            chance: .03
        }, {
            id: 1614,
            chance: .03
        }, {
            id: 964,
            chance: .03
        }, {
            id: 1455,
            chance: .03
        }, {
            id: 1467,
            chance: .03
        }, {
            id: 1487,
            chance: .03
        }, {
            id: 1502,
            chance: .03
        }, {
            id: 1639,
            chance: .03
        }, {
            id: 1128,
            chance: .06
        }, {
            id: 1306,
            chance: .06
        }, {
            id: 947,
            chance: .1
        }, {
            id: 710,
            chance: .03
        }, {
            id: 593,
            chance: .04
        }, {
            id: 501,
            chance: .05
        }, {
            id: 1682,
            chance: .05
        }, {
            id: 262,
            chance: .1
        }, {
            id: 478,
            chance: .05
        }, {
            id: 1340,
            chance: .005
        } ]
    },
    temp: {
        health: 10920,
        busy: !1,
        total_defense: 450,
        total_strength: 180,
        total_accuracy: 450
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[258] = createObject({
    b_i: 258,
    b_t: BASE_TYPE.NPC,
    name: "Thunder Bird",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 7,
        y: 1
    },
    params: {
        health: 150,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 219,
            chance: .0025
        }, {
            id: 950,
            chance: .0025
        }, {
            id: 340,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 379,
            chance: .0025
        }, {
            id: 138,
            chance: .0025
        }, {
            id: 104,
            chance: .01
        } ]
    },
    temp: {
        health: 150,
        busy: !1,
        total_defense: 200,
        total_strength: 104,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[259] = createObject({
    b_i: 259,
    b_t: BASE_TYPE.NPC,
    name: "Ice Wyvern",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 12
    },
    params: {
        health: 110,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 161,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 949,
            chance: .0025
        }, {
            id: 858,
            chance: .0025
        }, {
            id: 1075,
            chance: .0025
        }, {
            id: 1126,
            chance: .005
        }, {
            id: 268,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 285,
            chance: .03
        } ]
    },
    temp: {
        health: 110,
        busy: !1,
        total_defense: 100,
        total_strength: 80,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[260] = createObject({
    b_i: 260,
    b_t: BASE_TYPE.NPC,
    name: "Sailor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 72 0 0 0 0 0 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 948,
            count: 50,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[261] = createObject({
    b_i: 261,
    b_t: BASE_TYPE.NPC,
    name: "Road Sign",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 13
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("Road To <font color=" + COLOR.TEAL + ">Reval</font> and <font color=" + COLOR.TEAL + ">Minotaur Maze</font> ahead", function() {
                Popup.dialog("<font color=" + COLOR.TEAL + ">Dorpat Outpost</font> and <font color=" + COLOR.TEAL + ">Whiland</font> on the right", function() {});
            });
        }
    }
}, 1);

npc_base[262] = createObject({
    b_i: 262,
    b_t: BASE_TYPE.NPC,
    name: "Road Sign",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 13
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("<font color=" + COLOR.TEAL + ">Reval</font> on the left, <font color=" + COLOR.TEAL + ">Minotaur Maze</font> ahead", function() {
                Popup.dialog("<font color=" + COLOR.TEAL + ">Heaven Gateway</font> on the right", function() {});
            });
        }
    }
}, 1);

npc_base[263] = createObject({
    b_i: 263,
    b_t: BASE_TYPE.NPC,
    name: "Road Sign",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 13
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("<font color=" + COLOR.RED + ">Dorpat Outpost</font>, <font color=" + COLOR.TEAL + ">Walco</font> ahead", function() {
                Popup.dialog("<font color=" + COLOR.TEAL + ">Whiland</font> road is south", function() {});
            });
        }
    }
}, 1);

npc_base[264] = createObject({
    b_i: 264,
    b_t: BASE_TYPE.NPC,
    name: "Road Sign",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 8,
        y: 13
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("<font color=" + COLOR.TEAL + ">Walco</font> ahead", function() {
                Popup.dialog("<font color=" + COLOR.TEAL + ">Behemoth Pit</font> on the left", function() {});
            });
        }
    }
}, 1);

npc_base[265] = createObject({
    b_i: 265,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Magic Crafter",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 32 33 72 2 0 49 53 15 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 265,
            count: 20,
            spawn: !0
        }, {
            id: 988,
            count: 10,
            spawn: !0
        }, {
            id: 1084,
            count: 10,
            spawn: !0
        }, {
            id: 989,
            count: 10,
            spawn: !0
        }, {
            id: 991,
            count: 10,
            spawn: !0
        }, {
            id: 1159,
            count: 10,
            spawn: !0
        }, {
            id: 990,
            count: 30,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[266] = createObject({
    b_i: 266,
    b_t: BASE_TYPE.NPC,
    name: "Reval Magic Crafter",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 66 40 72 0 0 0 0 51 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 266,
            count: 20,
            spawn: !0
        }, {
            id: 988,
            count: 10,
            spawn: !0
        }, {
            id: 1084,
            count: 10,
            spawn: !0
        }, {
            id: 989,
            count: 10,
            spawn: !0
        }, {
            id: 991,
            count: 10,
            spawn: !0
        }, {
            id: 1159,
            count: 10,
            spawn: !0
        }, {
            id: 990,
            count: 30,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[267] = createObject({
    b_i: 267,
    b_t: BASE_TYPE.NPC,
    name: "Blood River Magic Crafter",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 50 72 1 0 0 166 51 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1012,
            count: 0
        }, {
            id: 988,
            count: 10,
            spawn: !0
        }, {
            id: 1084,
            count: 10,
            spawn: !0
        }, {
            id: 989,
            count: 10,
            spawn: !0
        }, {
            id: 991,
            count: 10,
            spawn: !0
        }, {
            id: 1159,
            count: 10,
            spawn: !0
        }, {
            id: 990,
            count: 30,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[268] = createObject({
    b_i: 268,
    b_t: BASE_TYPE.NPC,
    name: "Heaven Magic Crafter",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 54 72 1 0 54 166 51 0 4"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1013,
            count: 0
        }, {
            id: 1014,
            count: 0
        }, {
            id: 988,
            count: 10,
            spawn: !0
        }, {
            id: 1084,
            count: 10,
            spawn: !0
        }, {
            id: 989,
            count: 10,
            spawn: !0
        }, {
            id: 991,
            count: 10,
            spawn: !0
        }, {
            id: 1159,
            count: 10,
            spawn: !0
        }, {
            id: 990,
            count: 30,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[269] = createObject({
    b_i: 269,
    b_t: BASE_TYPE.NPC,
    name: "Thunder Angel",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 3,
        y: 9
    },
    params: {
        health: 172,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 369,
            chance: .0025
        }, {
            id: 950,
            chance: .0025
        }, {
            id: 340,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 379,
            chance: .0025
        }, {
            id: 661,
            chance: .0025
        }, {
            id: 138,
            chance: .0025
        }, {
            id: 104,
            chance: .01
        } ]
    },
    temp: {
        health: 172,
        busy: !1,
        total_defense: 230,
        total_strength: 70,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[270] = createObject({
    b_i: 270,
    b_t: BASE_TYPE.NPC,
    name: "Quest Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 60 72 0 0 0 0 32 12 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("Finishing <font color=" + COLOR.TEAL + ">Quests</font>, can be very rewarding.", function() {
                Popup.dialog("Click on Quests tab to see the ongoing quests.", function() {
                    Popup.dialog("Clicking on a quest shows a possible location where it can be completed. Map name is visible when you hover or click the minimap on top left corner.", function() {
                        Popup.dialog("You can reset a completed quest to get a new reward with a <font color=" + COLOR.YELLOW + ">Repeat Quest Permission</font><div style='" + Items.get_background_image(1031) + "width:32px;height:32px;margin-left:42%;'></div>", function() {
                            12 == current_map && (Socket.send("interact", {
                                target_id: a.id
                            }), interactiveArrow("combat_instructor", function() {
                                return selected_object && selected_object.id == PlayerQuests[1].positions.combat_instructor.id;
                            }, PlayerQuests[1].positions.combat_instructor, "down", 6e4));
                        });
                    });
                });
                var size = Popup.active_popup_text;
                interactiveArrow("quests", function() {
                    return "block" == document.getElementById("quests_form").style.display || Popup.active_popup_text != size;
                }, {
                    id: "gui_quests"
                }, "down", 6e4);
            });
        },
        interact: function(skiplock, item) {
            12 != item.map || 0 < Inventory.get_item_count(item, 1031) || Items.give_to_player(item, 1031);
        }
    }
}, 1);

npc_base[271] = createObject({
    b_i: 271,
    b_t: BASE_TYPE.NPC,
    name: "Novice Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 27 10 3 2 1 22 140 48 11 6"
    },
    params: {
        health: 40,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 976,
            chance: .0025
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 3,
            chance: .05
        }, {
            id: 43,
            chance: .025
        }, {
            id: 799,
            chance: .025
        } ]
    },
    temp: {
        health: 40,
        busy: !1,
        total_defense: 30,
        total_strength: 20,
        total_accuracy: 30
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[272] = createObject({
    b_i: 272,
    b_t: BASE_TYPE.NPC,
    name: "Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 44 26 3 3 1 22 101 13 0 6"
    },
    params: {
        health: 65,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 426,
            chance: .0025
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 474,
            chance: .0025
        }, {
            id: 65,
            chance: .0025
        }, {
            id: 78,
            chance: .02
        }, {
            id: 438,
            chance: .0015
        } ]
    },
    temp: {
        health: 65,
        busy: !1,
        total_defense: 60,
        total_strength: 30,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[273] = createObject({
    b_i: 273,
    b_t: BASE_TYPE.NPC,
    name: "Baron",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 68 46 13 1 0 54 69 22 0 6"
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 764,
            chance: .0015
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 442,
            chance: .0025
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 301,
            chance: .01
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 100,
        total_strength: 45,
        total_accuracy: 100
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[274] = createObject({
    b_i: 274,
    b_t: BASE_TYPE.NPC,
    name: "Earl",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 88 52 30 2 1 33 125 17 11 6"
    },
    params: {
        health: 150,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 97,
            chance: .02
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 1006,
            chance: .0025
        }, {
            id: 764,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 862,
            chance: .0025
        }, {
            id: 259,
            chance: .01
        }, {
            id: 268,
            chance: .05
        }, {
            id: 155,
            chance: .0025
        } ]
    },
    temp: {
        health: 150,
        busy: !1,
        total_defense: 150,
        total_strength: 60,
        total_accuracy: 150
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[275] = createObject({
    b_i: 275,
    b_t: BASE_TYPE.NPC,
    name: "Marquis",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 15 28 44 2 1 25 108 46 0 6"
    },
    params: {
        health: 190,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 89,
            chance: .02
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 298,
            chance: .05
        }, {
            id: 299,
            chance: .05
        }, {
            id: 764,
            chance: .0025
        }, {
            id: 180,
            chance: .0025
        }, {
            id: 217,
            chance: .05
        }, {
            id: 177,
            chance: .005
        }, {
            id: 363,
            chance: .0025
        } ]
    },
    temp: {
        health: 190,
        busy: !1,
        total_defense: 190,
        total_strength: 70,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[276] = createObject({
    b_i: 276,
    b_t: BASE_TYPE.NPC,
    name: "Prince",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 87 57 36 2 1 33 148 43 11 6"
    },
    params: {
        health: 210,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 145,
            chance: .0025
        }, {
            id: 764,
            chance: .0025
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 983,
            chance: .003
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 818,
            chance: .0025
        }, {
            id: 813,
            chance: .0025
        }, {
            id: 481,
            chance: .0025
        }, {
            id: 167,
            chance: .0025
        } ]
    },
    temp: {
        health: 210,
        busy: !1,
        total_defense: 200,
        total_strength: 110,
        total_accuracy: 200
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[277] = createObject({
    b_i: 277,
    b_t: BASE_TYPE.NPC,
    name: "King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        hash: "18 0 92 61 28 2 1 33 173 51 11 6"
    },
    params: {
        health: 290,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 183,
            chance: .0025
        }, {
            id: 1435,
            chance: .0025
        }, {
            id: 477,
            chance: .0025
        }, {
            id: 6,
            chance: .05
        }, {
            id: 169,
            chance: .0025
        }, {
            id: 378,
            chance: .0025
        }, {
            id: 363,
            chance: .0025
        }, {
            id: 467,
            chance: .0025
        }, {
            id: 248,
            chance: .05
        }, {
            id: 907,
            chance: .0015
        } ]
    },
    temp: {
        health: 290,
        busy: !1,
        total_defense: 350,
        total_strength: 110,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[278] = createObject({
    b_i: 278,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] World Tree",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 0,
        y: 0
    },
    params: {
        health: 14e3,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1432,
            chance: .06
        }, {
            id: 171,
            chance: .03
        }, {
            id: 587,
            chance: .05
        }, {
            id: 347,
            chance: .04
        }, {
            id: 175,
            chance: .06
        }, {
            id: 179,
            chance: .06
        }, {
            id: 1626,
            chance: .01
        }, {
            id: 1602,
            chance: .03
        }, {
            id: 1606,
            chance: .03
        }, {
            id: 1610,
            chance: .03
        }, {
            id: 1614,
            chance: .03
        }, {
            id: 964,
            chance: .03
        }, {
            id: 1455,
            chance: .03
        }, {
            id: 1467,
            chance: .03
        }, {
            id: 1487,
            chance: .03
        }, {
            id: 1502,
            chance: .03
        }, {
            id: 1639,
            chance: .03
        }, {
            id: 907,
            chance: .06
        }, {
            id: 710,
            chance: .03
        }, {
            id: 1354,
            chance: .04
        }, {
            id: 593,
            chance: .05
        }, {
            id: 501,
            chance: .05
        }, {
            id: 262,
            chance: .1
        }, {
            id: 478,
            chance: .05
        }, {
            id: 1343,
            chance: .005
        } ]
    },
    temp: {
        health: 14e3,
        busy: !1,
        total_defense: 150,
        total_strength: 50,
        total_accuracy: 900
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[279] = createObject({
    b_i: 279,
    b_t: BASE_TYPE.NPC,
    name: "Loot Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "17 0 85 59 72 2 1 12 148 40 14 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.LOOT, ACTIVITIES.INSPECT ]
}, 1);

npc_base[280] = createObject({
    b_i: 280,
    b_t: BASE_TYPE.NPC,
    name: "Moth",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 0,
        y: 7
    },
    params: {
        health: 5,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 3,
            chance: .25
        }, {
            id: 0,
            chance: .05
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 21,
            chance: .05
        }, {
            id: 5,
            chance: .05
        } ]
    },
    temp: {
        health: 5,
        busy: !1,
        total_defense: 0,
        total_strength: 1,
        total_accuracy: 1
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[281] = createObject({
    b_i: 281,
    b_t: BASE_TYPE.NPC,
    name: "Blood Spirit",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 2,
        y: 5
    },
    params: {
        health: 160,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 128,
            chance: .0025
        }, {
            id: 145,
            chance: .0025
        }, {
            id: 983,
            chance: .003
        }, {
            id: 818,
            chance: .0025
        }, {
            id: 813,
            chance: .0025
        }, {
            id: 481,
            chance: .0025
        }, {
            id: 167,
            chance: .0025
        } ]
    },
    temp: {
        health: 160,
        busy: !1,
        total_defense: 230,
        total_strength: 70,
        total_accuracy: 220
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[282] = createObject({
    b_i: 282,
    b_t: BASE_TYPE.NPC,
    name: "Queen Lizard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 9,
        y: 7
    },
    params: {
        health: 165,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 102,
            chance: .01
        }, {
            id: 173,
            chance: .005
        }, {
            id: 394,
            chance: .0025
        }, {
            id: 430,
            chance: .0025
        }, {
            id: 339,
            chance: .0025
        }, {
            id: 487,
            chance: .0025
        }, {
            id: 154,
            chance: .0025
        }, {
            id: 61,
            chance: .0025
        }, {
            id: 1012,
            chance: .006
        } ]
    },
    temp: {
        health: 165,
        busy: !1,
        total_defense: 220,
        total_strength: 80,
        total_accuracy: 235
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[283] = createObject({
    b_i: 283,
    b_t: BASE_TYPE.NPC,
    name: "Pyrohydra",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 5,
        y: 6
    },
    params: {
        health: 190,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 364,
            chance: .0025
        }, {
            id: 157,
            chance: .0025
        }, {
            id: 981,
            chance: .003
        }, {
            id: 52,
            chance: .0025
        }, {
            id: 152,
            chance: .0025
        }, {
            id: 1012,
            chance: .01
        }, {
            id: 327,
            chance: .0025
        }, {
            id: 324,
            chance: .0025
        }, {
            id: 1599,
            chance: .0025
        }, {
            id: 446,
            chance: .0025
        } ]
    },
    temp: {
        health: 190,
        busy: !1,
        total_defense: 250,
        total_strength: 150,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[284] = createObject({
    b_i: 284,
    b_t: BASE_TYPE.NPC,
    name: "Earthstorm",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 5,
        y: 3
    },
    params: {
        health: 220,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 116,
            chance: .02
        }, {
            id: 189,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 158,
            chance: .0025
        }, {
            id: 181,
            chance: .0025
        }, {
            id: 618,
            chance: .0025
        }, {
            id: 468,
            chance: .0025
        }, {
            id: 1013,
            chance: .0025
        }, {
            id: 866,
            chance: .0025
        }, {
            id: 19,
            chance: .0025
        }, {
            id: 156,
            chance: .0025
        } ]
    },
    temp: {
        health: 220,
        busy: !1,
        total_defense: 300,
        total_strength: 140,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[285] = createObject({
    b_i: 285,
    b_t: BASE_TYPE.NPC,
    name: "Diamond Plant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 3
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 52,
            chance: .0025
        }, {
            id: 659,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 480,
            chance: .0025
        }, {
            id: 86,
            chance: .03
        }, {
            id: 194,
            chance: .004
        }, {
            id: 195,
            chance: .0025
        }, {
            id: 1014,
            chance: .0025
        }, {
            id: 1015,
            chance: .01
        }, {
            id: 787,
            chance: .01
        } ]
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 350,
        total_strength: 130,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[286] = createObject({
    b_i: 286,
    b_t: BASE_TYPE.NPC,
    name: "Hydra Dragon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 3
    },
    params: {
        health: 290,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 101,
            chance: .02
        }, {
            id: 702,
            chance: .0025
        }, {
            id: 229,
            chance: .05
        }, {
            id: 1015,
            chance: .05
        }, {
            id: 436,
            chance: .0025
        }, {
            id: 267,
            chance: .05
        }, {
            id: 981,
            chance: .003
        }, {
            id: 1014,
            chance: .0025
        }, {
            id: 616,
            chance: .0025
        }, {
            id: 905,
            chance: .0025
        }, {
            id: 183,
            chance: .0025
        }, {
            id: 669,
            chance: .0025
        } ]
    },
    temp: {
        health: 290,
        busy: !1,
        total_defense: 382,
        total_strength: 170,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[287] = createObject({
    b_i: 287,
    b_t: BASE_TYPE.NPC,
    name: "Ancient Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 72 1 0 54 168 17 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 348,
            count: 5,
            spawn: !0
        }, {
            id: 349,
            count: 5,
            spawn: !0
        }, {
            id: 350,
            count: 5,
            spawn: !0
        }, {
            id: 351,
            count: 5,
            spawn: !0
        }, {
            id: 352,
            count: 5,
            spawn: !0
        }, {
            id: 866,
            count: 0
        }, {
            id: 858,
            count: 0
        }, {
            id: 862,
            count: 0
        }, {
            id: 1075,
            count: 0
        }, {
            id: 454,
            count: 0
        }, {
            id: 483,
            count: 0
        }, {
            id: 451,
            count: 0
        }, {
            id: 867,
            count: 0
        }, {
            id: 859,
            count: 0
        }, {
            id: 863,
            count: 0
        }, {
            id: 985,
            count: 0
        }, {
            id: 987,
            count: 0
        }, {
            id: 980,
            count: 0
        }, {
            id: 986,
            count: 0
        }, {
            id: 979,
            count: 0
        }, {
            id: 984,
            count: 0
        }, {
            id: 467,
            count: 0
        }, {
            id: 468,
            count: 0
        }, {
            id: 469,
            count: 0
        }, {
            id: 470,
            count: 0
        }, {
            id: 465,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[288] = createObject({
    b_i: 288,
    b_t: BASE_TYPE.NPC,
    name: "Beholder Overseer",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 1,
        y: 7
    },
    params: {
        health: 230,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 153,
            chance: .0025
        }, {
            id: 268,
            chance: .1
        }, {
            id: 983,
            chance: .003
        }, {
            id: 981,
            chance: .003
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 376,
            chance: .0025
        }, {
            id: 682,
            chance: .0025
        }, {
            id: 266,
            chance: .0025
        }, {
            id: 173,
            chance: .005
        }, {
            id: 59,
            chance: .008
        } ]
    },
    temp: {
        health: 230,
        busy: !1,
        total_defense: 250,
        total_strength: 90,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[289] = createObject({
    b_i: 289,
    b_t: BASE_TYPE.NPC,
    name: "Ancient Furniture Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 79 50 72 0 0 0 0 51 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 836,
            count: 0
        }, {
            id: 842,
            count: 0
        }, {
            id: 848,
            count: 0
        }, {
            id: 770,
            count: 0
        }, {
            id: 771,
            count: 0
        }, {
            id: 772,
            count: 0
        }, {
            id: 835,
            count: 0
        }, {
            id: 841,
            count: 0
        }, {
            id: 847,
            count: 0
        }, {
            id: 837,
            count: 0
        }, {
            id: 843,
            count: 0
        }, {
            id: 849,
            count: 0
        }, {
            id: 838,
            count: 0
        }, {
            id: 844,
            count: 0
        }, {
            id: 850,
            count: 0
        }, {
            id: 839,
            count: 0
        }, {
            id: 845,
            count: 0
        }, {
            id: 851,
            count: 0
        }, {
            id: 840,
            count: 0
        }, {
            id: 846,
            count: 0
        }, {
            id: 852,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[290] = createObject({
    b_i: 290,
    b_t: BASE_TYPE.NPC,
    name: "Guild Shopkeeper Level",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.MONSTER332,
        x: 4,
        y: 10
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 63,
            count: 0
        }, {
            id: 173,
            count: 0
        }, {
            id: 174,
            count: 0
        }, {
            id: 175,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[291] = createObject({
    b_i: 291,
    b_t: BASE_TYPE.NPC,
    name: "Rudolph",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 8,
        y: 0
    },
    params: {
        health: 18,
        radius: 9,
        no_dungeon: !0,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 494,
            chance: .1
        }, {
            id: 204,
            chance: .02
        }, {
            id: 200,
            chance: .02
        }, {
            id: 198,
            chance: .02
        }, {
            id: 196,
            chance: .02
        }, {
            id: 1144,
            chance: .0025
        }, {
            id: 384,
            chance: .025
        }, {
            id: 383,
            chance: .025
        }, {
            id: 1146,
            chance: .0025
        }, {
            id: 424,
            chance: .0025
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 17,
        total_strength: 17,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[292] = createObject({
    b_i: 292,
    b_t: BASE_TYPE.NPC,
    name: "Snowman",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 9,
        y: 0
    },
    params: {
        health: 18,
        radius: 9,
        no_dungeon: !0,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 494,
            chance: .1
        }, {
            id: 784,
            chance: .02
        }, {
            id: 200,
            chance: .02
        }, {
            id: 198,
            chance: .02
        }, {
            id: 196,
            chance: .02
        }, {
            id: 384,
            chance: .025
        }, {
            id: 383,
            chance: .025
        }, {
            id: 1145,
            chance: .0025
        }, {
            id: 1146,
            chance: .0025
        }, {
            id: 424,
            chance: .0025
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 17,
        total_strength: 17,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[293] = createObject({
    b_i: 293,
    b_t: BASE_TYPE.NPC,
    name: "Unhappy Cupid",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 6,
        y: 6
    },
    params: {
        health: 18,
        radius: 9,
        no_dungeon: !0,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 1158,
            chance: .025
        }, {
            id: 320,
            chance: .05
        }, {
            id: 200,
            chance: .02
        }, {
            id: 198,
            chance: .02
        }, {
            id: 196,
            chance: .02
        }, {
            id: 384,
            chance: .025
        }, {
            id: 383,
            chance: .025
        }, {
            id: 1154,
            chance: .0055
        }, {
            id: 1156,
            chance: .0025
        }, {
            id: 424,
            chance: .0025
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 17,
        total_strength: 17,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[294] = createObject({
    b_i: 294,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Cannibal Plant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 3,
        y: 0
    },
    params: {
        health: 7350,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 175,
            chance: .05
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1128,
            chance: .06
        }, {
            id: 1306,
            chance: .06
        }, {
            id: 664,
            chance: .04
        }, {
            id: 320,
            chance: .05
        }, {
            id: 200,
            chance: .02
        }, {
            id: 198,
            chance: .02
        }, {
            id: 1626,
            chance: .05
        }, {
            id: 981,
            chance: .003
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 161,
            chance: .0025
        }, {
            id: 376,
            chance: .0025
        }, {
            id: 1602,
            chance: .02
        }, {
            id: 188,
            chance: .0025
        }, {
            id: 52,
            chance: .0025
        }, {
            id: 66,
            chance: .0025
        }, {
            id: 805,
            chance: .0025
        }, {
            id: 815,
            chance: .0025
        }, {
            id: 141,
            chance: .0025
        }, {
            id: 1606,
            chance: .02
        }, {
            id: 1610,
            chance: .02
        }, {
            id: 1614,
            chance: .02
        }, {
            id: 964,
            chance: .02
        }, {
            id: 1455,
            chance: .02
        }, {
            id: 1467,
            chance: .02
        }, {
            id: 1487,
            chance: .02
        }, {
            id: 1502,
            chance: .02
        }, {
            id: 1641,
            chance: .015
        }, {
            id: 1659,
            chance: .015
        }, {
            id: 1639,
            chance: .02
        }, {
            id: 710,
            chance: .03
        }, {
            id: 147,
            chance: .07
        }, {
            id: 143,
            chance: .04
        }, {
            id: 450,
            chance: .05
        }, {
            id: 465,
            chance: .04
        }, {
            id: 620,
            chance: .04
        }, {
            id: 867,
            chance: .03
        }, {
            id: 1077,
            chance: .03
        }, {
            id: 653,
            chance: .04
        }, {
            id: 593,
            chance: .03
        }, {
            id: 378,
            chance: .05
        }, {
            id: 477,
            chance: .05
        } ]
    },
    temp: {
        health: 7350,
        busy: !1,
        total_defense: 400,
        total_strength: 180,
        total_accuracy: 470
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[295] = createObject({
    b_i: 295,
    b_t: BASE_TYPE.NPC,
    name: "Leprechaun",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 10,
        y: 2
    },
    params: {
        health: 18,
        radius: 9,
        no_dungeon: !0,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 1172,
            chance: .025
        }, {
            id: 1173,
            chance: .005
        }, {
            id: 1024,
            chance: .03
        }, {
            id: 200,
            chance: .0025
        }, {
            id: 247,
            chance: .1
        }, {
            id: 20,
            chance: .15
        }, {
            id: 27,
            chance: .05
        }, {
            id: 198,
            chance: .0025
        }, {
            id: 196,
            chance: .0025
        }, {
            id: 185,
            chance: .03
        }, {
            id: 184,
            chance: .01
        } ]
    },
    temp: {
        health: 18,
        busy: !1,
        total_defense: 17,
        total_strength: 17,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[296] = createObject({
    b_i: 296,
    b_t: BASE_TYPE.NPC,
    name: "Dorpat Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 25 60 72 0 1 36 0 15 12 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1166,
            count: 0
        }, {
            id: 1179,
            count: 0
        }, {
            id: 1230,
            count: 0
        }, {
            id: 1168,
            count: 0
        }, {
            id: 1167,
            count: 0
        }, {
            id: 1245,
            count: 0
        }, {
            id: 1229,
            count: 0
        }, {
            id: 1247,
            count: 0
        }, {
            id: 1246,
            count: 0
        }, {
            id: 1249,
            count: 0
        }, {
            id: 1216,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[297] = createObject({
    b_i: 297,
    b_t: BASE_TYPE.NPC,
    name: "Reval Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 87 57 72 0 1 37 0 46 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1244,
            count: 0
        }, {
            id: 1169,
            count: 0
        }, {
            id: 1236,
            count: 0
        }, {
            id: 1234,
            count: 0
        }, {
            id: 1235,
            count: 0
        }, {
            id: 1206,
            count: 0
        }, {
            id: 1207,
            count: 0
        }, {
            id: 1205,
            count: 0
        }, {
            id: 1199,
            count: 0
        }, {
            id: 1255,
            count: 0
        }, {
            id: 1184,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[298] = createObject({
    b_i: 298,
    b_t: BASE_TYPE.NPC,
    name: "Cesis Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 47 30 72 0 0 0 0 51 0 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1252,
            count: 0
        }, {
            id: 1209,
            count: 0
        }, {
            id: 1180,
            count: 0
        }, {
            id: 1217,
            count: 0
        }, {
            id: 1251,
            count: 0
        }, {
            id: 1250,
            count: 0
        }, {
            id: 1196,
            count: 0
        }, {
            id: 1256,
            count: 0
        }, {
            id: 1211,
            count: 0
        }, {
            id: 1233,
            count: 0
        }, {
            id: 1198,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[299] = createObject({
    b_i: 299,
    b_t: BASE_TYPE.NPC,
    name: "Narwa Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 81 36 72 0 1 33 0 39 0 6"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1227,
            count: 0
        }, {
            id: 1226,
            count: 0
        }, {
            id: 1204,
            count: 0
        }, {
            id: 1194,
            count: 0
        }, {
            id: 1195,
            count: 0
        }, {
            id: 1253,
            count: 0
        }, {
            id: 1200,
            count: 0
        }, {
            id: 1208,
            count: 0
        }, {
            id: 1192,
            count: 0
        }, {
            id: 1191,
            count: 0
        }, {
            id: 1190,
            count: 0
        }, {
            id: 1238,
            count: 0
        }, {
            id: 1192,
            count: 0
        }, {
            id: 1191,
            count: 0
        }, {
            id: 1185,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[300] = createObject({
    b_i: 300,
    b_t: BASE_TYPE.NPC,
    name: "Legendary Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "17 0 37 25 20 2 0 0 153 31 5 0 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1242,
            count: 0
        }, {
            id: 1241,
            count: 0
        }, {
            id: 1218,
            count: 0
        }, {
            id: 1219,
            count: 0
        }, {
            id: 1181,
            count: 0
        }, {
            id: 1237,
            count: 0
        }, {
            id: 1182,
            count: 0
        }, {
            id: 1215,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[301] = createObject({
    b_i: 301,
    b_t: BASE_TYPE.NPC,
    name: "Legendary Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "17 0 37 25 20 2 0 0 176 49 5 0 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1254,
            count: 0
        }, {
            id: 1183,
            count: 0
        }, {
            id: 1186,
            count: 0
        }, {
            id: 1189,
            count: 0
        }, {
            id: 1239,
            count: 0
        }, {
            id: 1201,
            count: 0
        }, {
            id: 1202,
            count: 0
        }, {
            id: 1223,
            count: 0
        }, {
            id: 1212,
            count: 0
        }, {
            id: 1203,
            count: 0
        }, {
            id: 1193,
            count: 0
        }, {
            id: 1232,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[302] = createObject({
    b_i: 302,
    b_t: BASE_TYPE.NPC,
    name: "Dragons Breeding Master",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "17 0 37 25 20 2 0 0 50 9 5 0 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 1225,
            count: 0
        }, {
            id: 1187,
            count: 0
        }, {
            id: 1188,
            count: 0
        }, {
            id: 1224,
            count: 0
        }, {
            id: 1221,
            count: 0
        }, {
            id: 1213,
            count: 0
        }, {
            id: 1220,
            count: 0
        }, {
            id: 1214,
            count: 0
        }, {
            id: 1222,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[303] = createObject({
    b_i: 303,
    b_t: BASE_TYPE.NPC,
    name: "Giant Troll",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 4,
        y: 2
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 200,
            chance: .005
        }, {
            id: 270,
            chance: .1
        }, {
            id: 264,
            chance: .1
        }, {
            id: 230,
            chance: .05
        }, {
            id: 1424,
            chance: .0025
        }, {
            id: 1197,
            chance: .002
        }, {
            id: 283,
            chance: .05
        }, {
            id: 0,
            chance: .02
        }, {
            id: 185,
            chance: .01
        }, {
            id: 184,
            chance: .005
        }, {
            id: 247,
            chance: .05
        }, {
            id: 146,
            chance: .0025
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 130,
        total_strength: 70,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[304] = createObject({
    b_i: 304,
    b_t: BASE_TYPE.NPC,
    name: "Kobalos",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 2
    },
    params: {
        health: 23,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 14,
            chance: .05
        }, {
            id: 15,
            chance: .1
        }, {
            id: 213,
            chance: .02
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 1422,
            chance: .0025
        }, {
            id: 1170,
            chance: .0025
        }, {
            id: 19,
            chance: .01
        } ]
    },
    temp: {
        health: 23,
        busy: !1,
        total_defense: 20,
        total_strength: 20,
        total_accuracy: 20
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[305] = createObject({
    b_i: 305,
    b_t: BASE_TYPE.NPC,
    name: "Training Dummy",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HUMANS,
        x: 4,
        y: 7
    },
    params: {
        health: 4,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: []
    },
    temp: {
        health: 4,
        busy: !1,
        total_defense: 0,
        total_strength: 0,
        total_accuracy: 0
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[306] = createObject({
    b_i: 306,
    b_t: BASE_TYPE.NPC,
    name: "Magic Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 90 54 72 1 0 54 166 46 12 5"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("To use <font color=" + COLOR.TEAL + ">magic</font> you need to equip a magic pouch.", function() {
                Popup.dialog("Also you need to put some spells into the magic pouch by clicking on them while the pouch is equipped. Each spell has a short cooldown after use.", function() {
                    Socket.send("interact", {
                        target_id: a.id
                    });
                    Popup.dialog("To do magic damage, you need to click on the spell icon while in combat. Alternatively you can press numbers on your keyboard.", function() {});
                });
            });
        },
        interact: function(skiplock, item) {
            12 == item.map && (0 == Inventory.get_item_count(item, 444) && Items.give_to_player(item, 444), 
            100 > skills[item.id].magic.xp ? 0 != Inventory.get_item_count(item, 402) || "undefined" != typeof item.params.magics[0] && 0 != item.params.magics[0].count || Items.give_to_player(item, 402) : Player.send_message(item.id, "Move to the next room", COLOR.TEAL));
        }
    }
}, 1);

npc_base[307] = createObject({
    b_i: 307,
    b_t: BASE_TYPE.NPC,
    name: "Alchemy Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "17 0 42 26 72 2 0 0 160 0 9 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("With <font color=" + COLOR.TEAL + ">Alchemy</font> you can make <b>Vials</b> and <b>potions</b>.", function() {
                Popup.dialog("To do alchemy you need to dig sand with a spade for vials. First you have to start with digging <b>sand</b> to make <b>small vials</b>. Equip <b>sand</b> and click on a <font color=" + COLOR.YELLOW + ">furnace</font> to smelt it into a <b>vial</b>.", function() {
                    Popup.dialog("As you get higher alchemy levels you can make better vials and potions.", function() {
                        Socket.send("interact", {
                            target_id: a.id
                        });
                    });
                });
            });
        },
        interact: function(skiplock, item) {
            12 == item.map && 0 == Inventory.get_item_count(item, 286) && Items.give_to_player(item, 286);
        }
    }
}, 1);

npc_base[308] = createObject({
    b_i: 308,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Giant Cyclops",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 2,
        y: 0
    },
    params: {
        health: 1100,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 174,
            chance: .05
        }, {
            id: 178,
            chance: .05
        }, {
            id: 1127,
            chance: .05
        }, {
            id: 1305,
            chance: .05
        }, {
            id: 363,
            chance: .06
        }, {
            id: 982,
            chance: .05
        }, {
            id: 167,
            chance: .06
        }, {
            id: 651,
            chance: .04
        }, {
            id: 481,
            chance: .06
        }, {
            id: 497,
            chance: .07
        }, {
            id: 710,
            chance: .02
        }, {
            id: 593,
            chance: .02
        }, {
            id: 476,
            chance: .05
        } ]
    },
    temp: {
        health: 1100,
        busy: !1,
        total_defense: 250,
        total_strength: 100,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[309] = createObject({
    b_i: 309,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Cave Crawler",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 0,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 174,
            chance: .05
        }, {
            id: 178,
            chance: .05
        }, {
            id: 1127,
            chance: .05
        }, {
            id: 1305,
            chance: .05
        }, {
            id: 138,
            chance: .07
        }, {
            id: 982,
            chance: .05
        }, {
            id: 167,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 455,
            chance: .05
        }, {
            id: 497,
            chance: .07
        }, {
            id: 339,
            chance: .08
        }, {
            id: 710,
            chance: .02
        }, {
            id: 593,
            chance: .02
        }, {
            id: 476,
            chance: .05
        } ]
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 260,
        total_strength: 120,
        total_accuracy: 360
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[310] = createObject({
    b_i: 310,
    b_t: BASE_TYPE.NPC,
    name: "[BOSS] Venus Flytrap",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 1,
        y: 1
    },
    params: {
        health: 1400,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 174,
            chance: .05
        }, {
            id: 178,
            chance: .05
        }, {
            id: 1127,
            chance: .05
        }, {
            id: 1305,
            chance: .05
        }, {
            id: 138,
            chance: .08
        }, {
            id: 982,
            chance: .05
        }, {
            id: 167,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 130,
            chance: .08
        }, {
            id: 806,
            chance: .05
        }, {
            id: 803,
            chance: .07
        }, {
            id: 1070,
            chance: .06
        }, {
            id: 710,
            chance: .02
        }, {
            id: 593,
            chance: .02
        }, {
            id: 476,
            chance: .05
        } ]
    },
    temp: {
        health: 1400,
        busy: !1,
        total_defense: 280,
        total_strength: 120,
        total_accuracy: 380
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[311] = createObject({
    b_i: 311,
    b_t: BASE_TYPE.NPC,
    name: "Party Quest Instructor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 18 17 72 0 0 0 0 14 9 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("This chest is a place to use your spare keys from party search dungeons.", function() {
                Popup.dialog("Party dungeons can be accessed under Quests - Party at the bottom.", function() {
                    Popup.dialog("Party dungeons are best played with four players, but they can be started with less.  All party dungeons are timed, so the more players, the better.", function() {
                        Popup.dialog("There are two types - Kill All Monsters and Search. Kill All Monsters have a kill counter under the timer.", function() {
                            Popup.dialog("Search dungeons require ALL players in the party to get a red, yellow, and blue key from the three small chest randomly placed in the dungeon.", function() {
                                Popup.dialog("When a player has all three keys, use it on a big treasure chest in that dungeon (like the one here) to win the dungeon and get an item prize.", function() {
                                    Popup.dialog("In a Kill All Monsters dungeon players are awarded coins, experience or MOS points once they have slain all monsters.", function() {});
                                });
                            });
                        });
                    });
                });
            });
        }
    }
}, 1);

npc_base[312] = createObject({
    b_i: 312,
    b_t: BASE_TYPE.NPC,
    name: "PVP Shopkeeper",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "19 0 63 7 72 0 0 0 0 0 0 0"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [],
        general: !0
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[313] = createObject({
    b_i: 313,
    b_t: BASE_TYPE.NPC,
    name: "Traitor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "18 0 88 52 70 0 0 0 123 51 6 7 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.INSPECT ],
    fn: {
        inspect: function(a, b) {
            needsProximity(b, a, 1, !0) && Popup.dialog("Somewhere near <font color=" + COLOR.TEAL + ">Skeletons</font> you should find an Illusion gate", function() {
                Popup.dialog("<font color=" + COLOR.YELLOW + ">Beware</font> it's full of traps", function() {});
            });
        }
    }
}, 1);

npc_base[314] = createObject({
    b_i: 314,
    b_t: BASE_TYPE.NPC,
    name: "Earth Elemental",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 5,
        y: 3
    },
    params: {
        health: 45,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 200,
            chance: .005
        }, {
            id: 30,
            chance: .1
        }, {
            id: 31,
            chance: .05
        }, {
            id: 205,
            chance: .1
        }, {
            id: 212,
            chance: .05
        }, {
            id: 419,
            chance: .0025
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 457,
            chance: .0025
        }, {
            id: 285,
            chance: .005
        }, {
            id: 249,
            chance: .05
        }, {
            id: 48,
            chance: .005
        }, {
            id: 146,
            chance: .0025
        } ]
    },
    temp: {
        health: 45,
        busy: !1,
        total_defense: 55,
        total_strength: 20,
        total_accuracy: 80
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[315] = createObject({
    b_i: 315,
    b_t: BASE_TYPE.NPC,
    name: "Water Elemental",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 6,
        y: 3
    },
    params: {
        health: 55,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 200,
            chance: .005
        }, {
            id: 30,
            chance: .1
        }, {
            id: 31,
            chance: .05
        }, {
            id: 205,
            chance: .1
        }, {
            id: 212,
            chance: .05
        }, {
            id: 420,
            chance: .0025
        }, {
            id: 856,
            chance: .0025
        }, {
            id: 857,
            chance: .0025
        }, {
            id: 285,
            chance: .005
        }, {
            id: 249,
            chance: .05
        }, {
            id: 48,
            chance: .005
        }, {
            id: 426,
            chance: .0025
        } ]
    },
    temp: {
        health: 55,
        busy: !1,
        total_defense: 80,
        total_strength: 45,
        total_accuracy: 160
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[316] = createObject({
    b_i: 316,
    b_t: BASE_TYPE.NPC,
    name: "Ice Elemental",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 7,
        y: 3
    },
    params: {
        health: 75,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 196,
            chance: .005
        }, {
            id: 30,
            chance: .1
        }, {
            id: 31,
            chance: .05
        }, {
            id: 205,
            chance: .1
        }, {
            id: 212,
            chance: .05
        }, {
            id: 420,
            chance: .0025
        }, {
            id: 450,
            chance: .0015
        }, {
            id: 455,
            chance: .0025
        }, {
            id: 285,
            chance: .005
        }, {
            id: 249,
            chance: .05
        }, {
            id: 48,
            chance: .005
        }, {
            id: 436,
            chance: .0025
        } ]
    },
    temp: {
        health: 75,
        busy: !1,
        total_defense: 120,
        total_strength: 25,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[317] = createObject({
    b_i: 317,
    b_t: BASE_TYPE.NPC,
    name: "Rock Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 8,
        y: 3
    },
    params: {
        health: 120,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 153,
            chance: .0025
        }, {
            id: 862,
            chance: .0015
        }, {
            id: 655,
            chance: .0025
        }, {
            id: 194,
            chance: .0025
        }, {
            id: 193,
            chance: .0025
        }, {
            id: 430,
            chance: .0025
        }, {
            id: 1351,
            chance: .0025
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 855,
            chance: .002
        }, {
            id: 440,
            chance: .0025
        }, {
            id: 156,
            chance: .003
        } ]
    },
    temp: {
        health: 120,
        busy: !1,
        total_defense: 450,
        total_strength: 60,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[318] = createObject({
    b_i: 318,
    b_t: BASE_TYPE.NPC,
    name: "Draman",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 2,
        y: 3
    },
    params: {
        health: 60,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 198,
            chance: .005
        }, {
            id: 200,
            chance: .005
        }, {
            id: 202,
            chance: .005
        }, {
            id: 265,
            chance: .005
        }, {
            id: 1072,
            chance: .0025
        }, {
            id: 993,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 60,
        busy: !1,
        total_defense: 0,
        total_strength: 40,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[319] = createObject({
    b_i: 319,
    b_t: BASE_TYPE.NPC,
    name: "Raaz",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 3,
        y: 3
    },
    params: {
        health: 88,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 198,
            chance: .005
        }, {
            id: 200,
            chance: .005
        }, {
            id: 202,
            chance: .005
        }, {
            id: 266,
            chance: .005
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 992,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 88,
        busy: !1,
        total_defense: 0,
        total_strength: 50,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[320] = createObject({
    b_i: 320,
    b_t: BASE_TYPE.NPC,
    name: "Gor-gin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 4,
        y: 3
    },
    params: {
        health: 90,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 198,
            chance: .005
        }, {
            id: 196,
            chance: .005
        }, {
            id: 202,
            chance: .005
        }, {
            id: 266,
            chance: .005
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 90,
        busy: !1,
        total_defense: 0,
        total_strength: 40,
        total_accuracy: 390
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[321] = createObject({
    b_i: 321,
    b_t: BASE_TYPE.NPC,
    name: "Verme",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 8,
        y: 1
    },
    params: {
        health: 60,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 198,
            chance: .005
        }, {
            id: 202,
            chance: .005
        }, {
            id: 203,
            chance: .005
        }, {
            id: 266,
            chance: .005
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 60,
        busy: !1,
        total_defense: 0,
        total_strength: 40,
        total_accuracy: 400
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[322] = createObject({
    b_i: 322,
    b_t: BASE_TYPE.NPC,
    name: "Iphar",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 8,
        y: 2
    },
    params: {
        health: 72,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 202,
            chance: .005
        }, {
            id: 203,
            chance: .005
        }, {
            id: 266,
            chance: .005
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 72,
        busy: !1,
        total_defense: 0,
        total_strength: 30,
        total_accuracy: 400
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[323] = createObject({
    b_i: 323,
    b_t: BASE_TYPE.NPC,
    name: "Ent",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 0,
        y: 0
    },
    params: {
        health: 130,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 202,
            chance: .005
        }, {
            id: 203,
            chance: .005
        }, {
            id: 266,
            chance: .005
        }, {
            id: 595,
            chance: .005
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 1073,
            chance: .0025
        }, {
            id: 996,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 130,
        busy: !1,
        total_defense: 300,
        total_strength: 70,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[324] = createObject({
    b_i: 324,
    b_t: BASE_TYPE.NPC,
    name: "Summoned Skull",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 4,
        y: 0
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 202,
            chance: .005
        }, {
            id: 657,
            chance: .0015
        }, {
            id: 266,
            chance: .005
        }, {
            id: 497,
            chance: .0025
        }, {
            id: 664,
            chance: .0015
        }, {
            id: 996,
            chance: .0025
        }, {
            id: 452,
            chance: .0025
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 300,
        total_strength: 50,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[325] = createObject({
    b_i: 325,
    b_t: BASE_TYPE.NPC,
    name: "Ancient Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 5,
        y: 0
    },
    params: {
        health: 140,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 202,
            chance: .005
        }, {
            id: 657,
            chance: .0015
        }, {
            id: 266,
            chance: .005
        }, {
            id: 498,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 465,
            chance: .0015
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 140,
        busy: !1,
        total_defense: 450,
        total_strength: 60,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[326] = createObject({
    b_i: 326,
    b_t: BASE_TYPE.NPC,
    name: "Alligator",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 3,
        y: 0
    },
    params: {
        health: 60,
        radius: 9,
        move_radius: 10,
        aggressive: !0,
        speed: 100,
        drops: [ {
            id: 93,
            chance: .05
        }, {
            id: 994,
            chance: .0035
        }, {
            id: 176,
            chance: .005
        }, {
            id: 231,
            chance: .005
        }, {
            id: 1031,
            chance: .0015
        }, {
            id: 198,
            chance: .008
        }, {
            id: 188,
            chance: .0025
        } ]
    },
    temp: {
        health: 60,
        busy: !1,
        total_defense: 120,
        total_strength: 20,
        total_accuracy: 180
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[327] = createObject({
    b_i: 327,
    b_t: BASE_TYPE.NPC,
    name: "Necromancer",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 1,
        y: 0
    },
    params: {
        health: 80,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 291,
            chance: .005
        }, {
            id: 657,
            chance: .0015
        }, {
            id: 1013,
            chance: .0025
        }, {
            id: 498,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 432,
            chance: .0015
        }, {
            id: 283,
            chance: .05
        }, {
            id: 247,
            chance: .05
        }, {
            id: 435,
            chance: .0025
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 230,
        total_strength: 50,
        total_accuracy: 300
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[328] = createObject({
    b_i: 328,
    b_t: BASE_TYPE.NPC,
    name: "Gravekeeper",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 2,
        y: 0
    },
    params: {
        health: 92,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .0025
        }, {
            id: 291,
            chance: .005
        }, {
            id: 186,
            chance: .0035
        }, {
            id: 1013,
            chance: .0025
        }, {
            id: 498,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 432,
            chance: .0015
        }, {
            id: 692,
            chance: .0025
        }, {
            id: 247,
            chance: .05
        }, {
            id: 467,
            chance: .0025
        } ]
    },
    temp: {
        health: 92,
        busy: !1,
        total_defense: 130,
        total_strength: 70,
        total_accuracy: 140
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[329] = createObject({
    b_i: 329,
    b_t: BASE_TYPE.NPC,
    name: "Undead Paladin",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER732,
        x: 6,
        y: 0
    },
    params: {
        health: 100,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 194,
            chance: .008
        }, {
            id: 291,
            chance: .005
        }, {
            id: 186,
            chance: .0035
        }, {
            id: 133,
            chance: .0025
        }, {
            id: 39,
            chance: .0025
        }, {
            id: 994,
            chance: .0025
        }, {
            id: 995,
            chance: .0025
        }, {
            id: 163,
            chance: .0015
        }, {
            id: 692,
            chance: .0025
        }, {
            id: 247,
            chance: .05
        }, {
            id: 40,
            chance: .0025
        } ]
    },
    temp: {
        health: 100,
        busy: !1,
        total_defense: 250,
        total_strength: 50,
        total_accuracy: 400
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[330] = createObject({
    b_i: 330,
    b_t: BASE_TYPE.NPC,
    name: "Broceliande Forest Magician",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 90 54 68 0 0 0 0 44 14 3 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 482,
            count: 5,
            spawn: !0
        }, {
            id: 450,
            count: 5,
            spawn: !0
        }, {
            id: 456,
            count: 5,
            spawn: !0
        }, {
            id: 612,
            count: 0
        }, {
            id: 1074,
            count: 0
        }, {
            id: 858,
            count: 0
        }, {
            id: 862,
            count: 0
        }, {
            id: 866,
            count: 0
        }, {
            id: 1075,
            count: 0
        }, {
            id: 856,
            count: 0
        }, {
            id: 860,
            count: 0
        }, {
            id: 864,
            count: 0
        }, {
            id: 1071,
            count: 0
        }, {
            id: 483,
            count: 0
        }, {
            id: 451,
            count: 0
        }, {
            id: 454,
            count: 0
        }, {
            id: 1076,
            count: 0
        }, {
            id: 859,
            count: 0
        }, {
            id: 863,
            count: 0
        }, {
            id: 867,
            count: 0
        }, {
            id: 1077,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[331] = createObject({
    b_i: 331,
    b_t: BASE_TYPE.NPC,
    name: "Broceliande Forest Spellcaster",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 88 54 71 2 0 0 172 44 14 3 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 413,
            count: 5,
            spawn: !0
        }, {
            id: 412,
            count: 15,
            spawn: !0
        }, {
            id: 414,
            count: 0
        }, {
            id: 415,
            count: 0
        }, {
            id: 416,
            count: 0
        }, {
            id: 417,
            count: 0
        }, {
            id: 418,
            count: 0
        }, {
            id: 419,
            count: 0
        }, {
            id: 420,
            count: 0
        }, {
            id: 421,
            count: 0
        }, {
            id: 459,
            count: 0
        }, {
            id: 458,
            count: 0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[332] = createObject({
    b_i: 332,
    b_t: BASE_TYPE.NPC,
    name: "Traitor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 88 52 70 0 1 33 0 51 14 3 1"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            !needsProximity(b, a, 1, !0) || map_change_in_progress || 1500 > timestamp() - Player.last_teleport || ("undefined" == typeof map[11] ? (map_change_in_progress = !0, 
            LazyLoad.js(cdn_url + "maps/map11.js?" + map_hashes[11], function() {
                LOAD(11);
                map_change_in_progress = !1;
                Socket.send("interact", {
                    target_id: a.id
                });
            })) : Socket.send("interact", {
                target_id: a.id
            }));
        },
        interact: function(am_regUpdateAlarmEnableState, handler) {
            21 == handler.map && Client.teleport_position(handler, {
                map: 11,
                i: 85,
                j: 85
            });
        }
    }
}, 1);

npc_base[333] = createObject({
    b_i: 333,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Air Priest",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 0
    },
    params: {
        health: 650,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 15,
        no_dungeon: !0,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 190,
            chance: .1
        }, {
            id: 173,
            chance: .1
        }, {
            id: 177,
            chance: .1
        }, {
            id: 193,
            chance: .1
        }, {
            id: 1304,
            chance: .1
        }, {
            id: 1126,
            chance: .1
        }, {
            id: 387,
            chance: .05
        }, {
            id: 437,
            chance: .05
        }, {
            id: 764,
            chance: .07
        }, {
            id: 18,
            chance: .05
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ],
        next_cathedral_npc_id: 352,
        respawn_time: 5
    },
    temp: {
        health: 650,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 8
        } ],
        magic: 70,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 65
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[334] = createObject({
    b_i: 334,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Earth Priestess",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 0
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 360,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 190,
            chance: .1
        }, {
            id: 173,
            chance: .1
        }, {
            id: 177,
            chance: .1
        }, {
            id: 193,
            chance: .1
        }, {
            id: 1304,
            chance: .1
        }, {
            id: 1126,
            chance: .1
        }, {
            id: 387,
            chance: .05
        }, {
            id: 437,
            chance: .05
        }, {
            id: 764,
            chance: .07
        }, {
            id: 18,
            chance: .05
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 10
        } ],
        magic: 66,
        cooldown: .6,
        total_strength: 1,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[335] = createObject({
    b_i: 335,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Water Priest",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 0
    },
    params: {
        health: 1050,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        no_dungeon: !0,
        next_cathedral_npc_id: 369,
        speed: 100,
        magic_block: 25,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 342,
            chance: .05
        }, {
            id: 426,
            chance: .05
        }, {
            id: 455,
            chance: .05
        }, {
            id: 424,
            chance: .05
        }, {
            id: 457,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 1298,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 387,
            chance: .05
        }, {
            id: 441,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 1050,
        busy: !1,
        total_defense: 222,
        magics: [ {
            id: 9
        } ],
        magic: 84,
        cooldown: .6,
        total_strength: 1,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[336] = createObject({
    b_i: 336,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Fire Priestess",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 0
    },
    params: {
        health: 1300,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 378,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 342,
            chance: .05
        }, {
            id: 426,
            chance: .05
        }, {
            id: 455,
            chance: .05
        }, {
            id: 424,
            chance: .05
        }, {
            id: 457,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 1298,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 387,
            chance: .05
        }, {
            id: 441,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 1300,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 11
        } ],
        magic: 94,
        cooldown: .6,
        total_strength: 1,
        total_accuracy: 70
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[337] = createObject({
    b_i: 337,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Cathedral Guardian",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 4,
        y: 0
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 387,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 154,
            chance: .05
        }, {
            id: 155,
            chance: .05
        }, {
            id: 302,
            chance: .05
        }, {
            id: 143,
            chance: .05
        }, {
            id: 144,
            chance: .05
        }, {
            id: 303,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 200,
        total_strength: 60,
        total_accuracy: 369
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[338] = createObject({
    b_i: 338,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] God's Eye",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 0
    },
    params: {
        health: 1800,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        magic_block: 30,
        next_cathedral_npc_id: 396,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 154,
            chance: .05
        }, {
            id: 155,
            chance: .05
        }, {
            id: 302,
            chance: .05
        }, {
            id: 143,
            chance: .05
        }, {
            id: 144,
            chance: .05
        }, {
            id: 303,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1800,
        busy: !1,
        total_defense: 300,
        magics: [ {
            id: 17
        } ],
        magic: 80,
        cooldown: .6,
        total_strength: 1,
        total_accuracy: 270
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[339] = createObject({
    b_i: 339,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Zombie Lord",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 0
    },
    params: {
        health: 2e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        magic_block: 30,
        next_cathedral_npc_id: 405,
        respawn_time: 5,
        drops: [ {
            id: 363,
            chance: .05
        }, {
            id: 932,
            chance: .05
        }, {
            id: 936,
            chance: .05
        }, {
            id: 1271,
            chance: .05
        }, {
            id: 200,
            chance: .05
        }, {
            id: 198,
            chance: .05
        }, {
            id: 450,
            chance: .05
        }, {
            id: 456,
            chance: .05
        }, {
            id: 482,
            chance: .05
        }, {
            id: 175,
            chance: .05
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 1066,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 962,
            chance: .05
        }, {
            id: 969,
            chance: .05
        }, {
            id: 977,
            chance: .05
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 454,
            chance: .05
        }, {
            id: 1080,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 2e3,
        busy: !1,
        total_defense: 325,
        total_strength: 40,
        total_accuracy: 405
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[340] = createObject({
    b_i: 340,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Holy Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 7,
        y: 0
    },
    params: {
        health: 2e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 30,
        no_dungeon: !0,
        next_cathedral_npc_id: 414,
        respawn_time: 5,
        drops: [ {
            id: 363,
            chance: .05
        }, {
            id: 932,
            chance: .05
        }, {
            id: 936,
            chance: .05
        }, {
            id: 1271,
            chance: .05
        }, {
            id: 200,
            chance: .05
        }, {
            id: 198,
            chance: .05
        }, {
            id: 450,
            chance: .05
        }, {
            id: 456,
            chance: .05
        }, {
            id: 482,
            chance: .05
        }, {
            id: 175,
            chance: .05
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 765,
            chance: .05
        }, {
            id: 1663,
            chance: .03
        }, {
            id: 1645,
            chance: .03
        }, {
            id: 1647,
            chance: .02
        }, {
            id: 1665,
            chance: .02
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 1066,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 962,
            chance: .05
        }, {
            id: 969,
            chance: .05
        }, {
            id: 977,
            chance: .05
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 454,
            chance: .05
        }, {
            id: 1080,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 2e3,
        busy: !1,
        total_defense: 320,
        magics: [ {
            id: 17
        } ],
        magic: 94,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 290
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[341] = createObject({
    b_i: 341,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] Saint Richard",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 0
    },
    params: {
        health: 3e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        magic_block: 35,
        next_cathedral_npc_id: 423,
        respawn_time: 5,
        drops: [ {
            id: 483,
            chance: .05
        }, {
            id: 451,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 462,
            chance: .05
        }, {
            id: 664,
            chance: .05
        }, {
            id: 661,
            chance: .05
        }, {
            id: 379,
            chance: .08
        }, {
            id: 440,
            chance: .05
        }, {
            id: 394,
            chance: .05
        }, {
            id: 430,
            chance: .05
        }, {
            id: 375,
            chance: .08
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 1663,
            chance: .03
        }, {
            id: 1645,
            chance: .03
        }, {
            id: 1647,
            chance: .02
        }, {
            id: 1665,
            chance: .02
        }, {
            id: 618,
            chance: .05
        }, {
            id: 666,
            chance: .05
        }, {
            id: 968,
            chance: .05
        }, {
            id: 175,
            chance: .08
        }, {
            id: 179,
            chance: .08
        }, {
            id: 1306,
            chance: .08
        }, {
            id: 1128,
            chance: .08
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 364,
            chance: .05
        }, {
            id: 974,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 1032,
            chance: .1
        }, {
            id: 392,
            chance: .05
        }, {
            id: 808,
            chance: .08
        }, {
            id: 812,
            chance: .05
        }, {
            id: 500,
            chance: .08
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 1080,
            chance: .08
        }, {
            id: 972,
            chance: .1
        } ]
    },
    temp: {
        health: 3e3,
        busy: !1,
        total_defense: 550,
        total_strength: 70,
        total_accuracy: 480
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[342] = createObject({
    b_i: 342,
    b_t: BASE_TYPE.NPC,
    name: "[Boss] High Priest",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 0
    },
    params: {
        health: 3e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        magic_block: 35,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 434,
        respawn_time: 5,
        drops: [ {
            id: 483,
            chance: .05
        }, {
            id: 451,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 462,
            chance: .05
        }, {
            id: 664,
            chance: .05
        }, {
            id: 661,
            chance: .05
        }, {
            id: 379,
            chance: .08
        }, {
            id: 440,
            chance: .05
        }, {
            id: 394,
            chance: .05
        }, {
            id: 430,
            chance: .05
        }, {
            id: 375,
            chance: .08
        }, {
            id: 618,
            chance: .05
        }, {
            id: 666,
            chance: .05
        }, {
            id: 968,
            chance: .05
        }, {
            id: 175,
            chance: .08
        }, {
            id: 179,
            chance: .08
        }, {
            id: 1306,
            chance: .08
        }, {
            id: 1128,
            chance: .08
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 364,
            chance: .05
        }, {
            id: 974,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 1032,
            chance: .1
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 1663,
            chance: .03
        }, {
            id: 1645,
            chance: .03
        }, {
            id: 1647,
            chance: .02
        }, {
            id: 1665,
            chance: .02
        }, {
            id: 392,
            chance: .05
        }, {
            id: 808,
            chance: .08
        }, {
            id: 812,
            chance: .05
        }, {
            id: 500,
            chance: .08
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 1080,
            chance: .08
        }, {
            id: 972,
            chance: .1
        } ]
    },
    temp: {
        health: 3e3,
        busy: !1,
        total_defense: 508,
        magics: [ {
            id: 24
        }, {
            id: 22
        } ],
        magic: 78,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 492
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[343] = createObject({
    b_i: 343,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 344,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 160,
        total_strength: 20,
        total_accuracy: 200,
        magic_block: 50
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[344] = createObject({
    b_i: 344,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 345,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 162,
        total_strength: 20,
        total_accuracy: 203
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[345] = createObject({
    b_i: 345,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 346,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 165,
        total_strength: 20,
        total_accuracy: 205
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[346] = createObject({
    b_i: 346,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 347,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 175,
        total_strength: 20,
        total_accuracy: 209
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[347] = createObject({
    b_i: 347,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Lion Turtle",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 1
    },
    params: {
        health: 450,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 15,
        no_dungeon: !0,
        next_cathedral_npc_id: 348,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 190,
            chance: .1
        }, {
            id: 173,
            chance: .1
        }, {
            id: 177,
            chance: .1
        }, {
            id: 193,
            chance: .1
        }, {
            id: 1304,
            chance: .1
        }, {
            id: 1126,
            chance: .1
        }, {
            id: 387,
            chance: .05
        }, {
            id: 437,
            chance: .05
        }, {
            id: 764,
            chance: .07
        }, {
            id: 18,
            chance: .05
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 450,
        busy: !1,
        total_defense: 205,
        total_strength: 10,
        total_accuracy: 220
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[348] = createObject({
    b_i: 348,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 349,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 2
        } ],
        magic: 80,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[349] = createObject({
    b_i: 349,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 350,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 2
        } ],
        magic: 85,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 58
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[350] = createObject({
    b_i: 350,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 351,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 2
        } ],
        magic: 88,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 55
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[351] = createObject({
    b_i: 351,
    b_t: BASE_TYPE.NPC,
    name: "Harpy 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 1
    },
    params: {
        health: 250,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 333,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 250,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 2
        } ],
        magic: 89,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[352] = createObject({
    b_i: 352,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 353,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 3
        } ],
        magic: 74,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[353] = createObject({
    b_i: 353,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 354,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 3
        } ],
        magic: 77,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 60
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[354] = createObject({
    b_i: 354,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 355,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 3
        } ],
        magic: 78,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 62
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[355] = createObject({
    b_i: 355,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 356,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 3
        } ],
        magic: 78,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 65
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[356] = createObject({
    b_i: 356,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Capricorn",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 7,
        y: 1
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 15,
        no_dungeon: !0,
        next_cathedral_npc_id: 357,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 190,
            chance: .1
        }, {
            id: 173,
            chance: .1
        }, {
            id: 177,
            chance: .1
        }, {
            id: 193,
            chance: .1
        }, {
            id: 1304,
            chance: .1
        }, {
            id: 1126,
            chance: .1
        }, {
            id: 387,
            chance: .05
        }, {
            id: 437,
            chance: .05
        }, {
            id: 764,
            chance: .07
        }, {
            id: 18,
            chance: .05
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 5
        } ],
        magic: 78,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 65
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[357] = createObject({
    b_i: 357,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 358,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 185,
        total_strength: 18,
        total_accuracy: 220
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[358] = createObject({
    b_i: 358,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 359,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 188,
        total_strength: 20,
        total_accuracy: 223
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[359] = createObject({
    b_i: 359,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 432,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 192,
        total_strength: 20,
        total_accuracy: 226
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[360] = createObject({
    b_i: 360,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 361,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 222,
        total_strength: 22,
        total_accuracy: 241
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[361] = createObject({
    b_i: 361,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 362,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 228,
        total_strength: 22,
        total_accuracy: 247
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[362] = createObject({
    b_i: 362,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 363,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 235,
        total_strength: 22,
        total_accuracy: 255
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[363] = createObject({
    b_i: 363,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 364,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 239,
        total_strength: 22,
        total_accuracy: 260
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[364] = createObject({
    b_i: 364,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Giant",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 4,
        y: 1
    },
    params: {
        health: 750,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 365,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 342,
            chance: .05
        }, {
            id: 426,
            chance: .05
        }, {
            id: 455,
            chance: .05
        }, {
            id: 424,
            chance: .05
        }, {
            id: 457,
            chance: .05
        }, {
            id: 1298,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 387,
            chance: .05
        }, {
            id: 441,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 750,
        busy: !1,
        total_defense: 242,
        total_strength: 22,
        total_accuracy: 268
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[365] = createObject({
    b_i: 365,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 366,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 192,
        magics: [ {
            id: 4
        } ],
        magic: 90,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 65
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[366] = createObject({
    b_i: 366,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 367,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 212,
        magics: [ {
            id: 4
        } ],
        magic: 90,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 74
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[367] = createObject({
    b_i: 367,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 368,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 222,
        magics: [ {
            id: 4
        } ],
        magic: 93,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 74
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[368] = createObject({
    b_i: 368,
    b_t: BASE_TYPE.NPC,
    name: "Ogre 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 2,
        y: 2
    },
    params: {
        health: 410,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 335,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 410,
        busy: !1,
        total_defense: 229,
        magics: [ {
            id: 4
        } ],
        magic: 94,
        cooldown: .5,
        total_strength: 1,
        total_accuracy: 74
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[369] = createObject({
    b_i: 369,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 370,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 269,
        magics: [ {
            id: 7
        } ],
        magic: 90,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 172
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[370] = createObject({
    b_i: 370,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 371,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 269,
        magics: [ {
            id: 7
        } ],
        magic: 95,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 172
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[371] = createObject({
    b_i: 371,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 372,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 269,
        magics: [ {
            id: 7
        } ],
        magic: 100,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 172
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[372] = createObject({
    b_i: 372,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 373,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 272,
        magics: [ {
            id: 7
        } ],
        magic: 100,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 186
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[373] = createObject({
    b_i: 373,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Spider Queen",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 4,
        y: 2
    },
    params: {
        health: 900,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 374,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 342,
            chance: .05
        }, {
            id: 426,
            chance: .05
        }, {
            id: 455,
            chance: .05
        }, {
            id: 424,
            chance: .05
        }, {
            id: 457,
            chance: .05
        }, {
            id: 1298,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 387,
            chance: .05
        }, {
            id: 441,
            chance: .05
        }, {
            id: 764,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 497,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 139,
            chance: .05
        }, {
            id: 138,
            chance: .15
        } ]
    },
    temp: {
        health: 900,
        busy: !1,
        total_defense: 250,
        magics: [ {
            id: 8
        } ],
        magic: 90,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 186
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[374] = createObject({
    b_i: 374,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 375,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 272,
        magics: [ {
            id: 7
        } ],
        magic: 105,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 186
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[375] = createObject({
    b_i: 375,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 376,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 272,
        magics: [ {
            id: 7
        } ],
        magic: 108,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[376] = createObject({
    b_i: 376,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 377,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 272,
        magics: [ {
            id: 7
        } ],
        magic: 112,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[377] = createObject({
    b_i: 377,
    b_t: BASE_TYPE.NPC,
    name: "Water Elf 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 2
    },
    params: {
        health: 550,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 336,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 550,
        busy: !1,
        total_defense: 272,
        magics: [ {
            id: 7
        } ],
        magic: 115,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[378] = createObject({
    b_i: 378,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 379,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 250,
        total_strength: 50,
        total_accuracy: 320
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[379] = createObject({
    b_i: 379,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 380,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 260,
        total_strength: 50,
        total_accuracy: 330
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[380] = createObject({
    b_i: 380,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 381,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 275,
        total_strength: 50,
        total_accuracy: 350
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[381] = createObject({
    b_i: 381,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 382,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 275,
        total_strength: 50,
        total_accuracy: 360
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[382] = createObject({
    b_i: 382,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Poseidon",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 2
    },
    params: {
        health: 1100,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 35,
        no_dungeon: !0,
        next_cathedral_npc_id: 383,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 154,
            chance: .05
        }, {
            id: 155,
            chance: .05
        }, {
            id: 302,
            chance: .05
        }, {
            id: 143,
            chance: .05
        }, {
            id: 144,
            chance: .05
        }, {
            id: 303,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 764,
            chance: .05
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1100,
        busy: !1,
        total_defense: 302,
        magics: [ {
            id: 15
        } ],
        magic: 85,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 190
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[383] = createObject({
    b_i: 383,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 384,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 285,
        total_strength: 50,
        total_accuracy: 362
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[384] = createObject({
    b_i: 384,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 385,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 285,
        total_strength: 50,
        total_accuracy: 364
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[385] = createObject({
    b_i: 385,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 386,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 285,
        total_strength: 40,
        total_accuracy: 367
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[386] = createObject({
    b_i: 386,
    b_t: BASE_TYPE.NPC,
    name: "Wisp 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 1
    },
    params: {
        health: 670,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 337,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 670,
        busy: !1,
        total_defense: 289,
        total_strength: 40,
        total_accuracy: 369
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[387] = createObject({
    b_i: 387,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 388,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 50,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[388] = createObject({
    b_i: 388,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 389,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 54,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[389] = createObject({
    b_i: 389,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 390,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 58,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[390] = createObject({
    b_i: 390,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 391,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 62,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[391] = createObject({
    b_i: 391,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Headless Knight",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 2
    },
    params: {
        health: 1300,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 392,
        respawn_time: 5,
        drops: [ {
            id: 149,
            chance: .05
        }, {
            id: 154,
            chance: .05
        }, {
            id: 155,
            chance: .05
        }, {
            id: 302,
            chance: .05
        }, {
            id: 143,
            chance: .05
        }, {
            id: 144,
            chance: .05
        }, {
            id: 303,
            chance: .05
        }, {
            id: 174,
            chance: .1
        }, {
            id: 178,
            chance: .1
        }, {
            id: 1305,
            chance: .1
        }, {
            id: 1127,
            chance: .1
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1286,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 764,
            chance: .05
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 498,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1300,
        busy: !1,
        total_defense: 308,
        total_strength: 35,
        total_accuracy: 370
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[392] = createObject({
    b_i: 392,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 393,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 66,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[393] = createObject({
    b_i: 393,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 394,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 70,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[394] = createObject({
    b_i: 394,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 395,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 74,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[395] = createObject({
    b_i: 395,
    b_t: BASE_TYPE.NPC,
    name: "Swamp Monkey 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 3,
        y: 1
    },
    params: {
        health: 630,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 338,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 630,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 14
        } ],
        magic: 78,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[396] = createObject({
    b_i: 396,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 397,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 309,
        total_strength: 40,
        total_accuracy: 389
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[397] = createObject({
    b_i: 397,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 398,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 309,
        total_strength: 40,
        total_accuracy: 394
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[398] = createObject({
    b_i: 398,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 399,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 315,
        total_strength: 40,
        total_accuracy: 394
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[399] = createObject({
    b_i: 399,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 400,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 315,
        total_strength: 40,
        total_accuracy: 399
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[400] = createObject({
    b_i: 400,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Wood Elf",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 401,
        respawn_time: 5,
        drops: [ {
            id: 363,
            chance: .05
        }, {
            id: 932,
            chance: .05
        }, {
            id: 936,
            chance: .05
        }, {
            id: 1271,
            chance: .05
        }, {
            id: 200,
            chance: .05
        }, {
            id: 198,
            chance: .05
        }, {
            id: 450,
            chance: .05
        }, {
            id: 456,
            chance: .05
        }, {
            id: 482,
            chance: .05
        }, {
            id: 175,
            chance: .05
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 1066,
            chance: .05
        }, {
            id: 962,
            chance: .05
        }, {
            id: 969,
            chance: .05
        }, {
            id: 977,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 454,
            chance: .05
        }, {
            id: 1080,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 325,
        total_strength: 40,
        total_accuracy: 405
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[401] = createObject({
    b_i: 401,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 402,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 320,
        total_strength: 40,
        total_accuracy: 404
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[402] = createObject({
    b_i: 402,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 403,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 320,
        total_strength: 40,
        total_accuracy: 409
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[403] = createObject({
    b_i: 403,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 404,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 328,
        total_strength: 40,
        total_accuracy: 409
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[404] = createObject({
    b_i: 404,
    b_t: BASE_TYPE.NPC,
    name: "Basilisk 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 2
    },
    params: {
        health: 790,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 339,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 790,
        busy: !1,
        total_defense: 335,
        total_strength: 40,
        total_accuracy: 409
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[405] = createObject({
    b_i: 405,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 406,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 300,
        magics: [ {
            id: 17
        } ],
        magic: 78,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[406] = createObject({
    b_i: 406,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 407,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 304,
        magics: [ {
            id: 17
        } ],
        magic: 80,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[407] = createObject({
    b_i: 407,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 408,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 307,
        magics: [ {
            id: 17
        } ],
        magic: 83,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[408] = createObject({
    b_i: 408,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 409,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 310,
        magics: [ {
            id: 17
        } ],
        magic: 87,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[409] = createObject({
    b_i: 409,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Ice Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 7,
        y: 2
    },
    params: {
        health: 1300,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 35,
        no_dungeon: !0,
        next_cathedral_npc_id: 410,
        respawn_time: 5,
        drops: [ {
            id: 363,
            chance: .05
        }, {
            id: 932,
            chance: .05
        }, {
            id: 936,
            chance: .05
        }, {
            id: 1271,
            chance: .05
        }, {
            id: 200,
            chance: .05
        }, {
            id: 198,
            chance: .05
        }, {
            id: 450,
            chance: .05
        }, {
            id: 456,
            chance: .05
        }, {
            id: 482,
            chance: .05
        }, {
            id: 175,
            chance: .05
        }, {
            id: 179,
            chance: .05
        }, {
            id: 1306,
            chance: .05
        }, {
            id: 1128,
            chance: .05
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 129,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 558,
            chance: .1
        }, {
            id: 807,
            chance: .05
        }, {
            id: 808,
            chance: .05
        }, {
            id: 488,
            chance: .05
        }, {
            id: 500,
            chance: .05
        }, {
            id: 1066,
            chance: .05
        }, {
            id: 962,
            chance: .05
        }, {
            id: 969,
            chance: .05
        }, {
            id: 977,
            chance: .05
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 454,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 1080,
            chance: .05
        }, {
            id: 163,
            chance: .15
        } ]
    },
    temp: {
        health: 1300,
        busy: !1,
        total_defense: 275,
        magics: [ {
            id: 23
        } ],
        magic: 78,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[410] = createObject({
    b_i: 410,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 411,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 310,
        magics: [ {
            id: 17
        } ],
        magic: 89,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[411] = createObject({
    b_i: 411,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 412,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 316,
        magics: [ {
            id: 17
        } ],
        magic: 89,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[412] = createObject({
    b_i: 412,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 413,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 316,
        magics: [ {
            id: 17
        } ],
        magic: 92,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[413] = createObject({
    b_i: 413,
    b_t: BASE_TYPE.NPC,
    name: "Crusader 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 6,
        y: 1
    },
    params: {
        health: 850,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 25,
        no_dungeon: !0,
        next_cathedral_npc_id: 340,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 850,
        busy: !1,
        total_defense: 318,
        magics: [ {
            id: 17
        } ],
        magic: 94,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[414] = createObject({
    b_i: 414,
    b_t: BASE_TYPE.NPC,
    name: "Defender 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 415,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 530,
        total_strength: 40,
        total_accuracy: 430
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[415] = createObject({
    b_i: 415,
    b_t: BASE_TYPE.NPC,
    name: "Defender 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 416,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 535,
        total_strength: 40,
        total_accuracy: 435
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[416] = createObject({
    b_i: 416,
    b_t: BASE_TYPE.NPC,
    name: "Defender 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 417,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 540,
        total_strength: 40,
        total_accuracy: 440
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[417] = createObject({
    b_i: 417,
    b_t: BASE_TYPE.NPC,
    name: "Defender 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 418,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 540,
        total_strength: 40,
        total_accuracy: 455
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[418] = createObject({
    b_i: 418,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Lava Golem",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 0,
        y: 2
    },
    params: {
        health: 1700,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 20,
        no_dungeon: !0,
        next_cathedral_npc_id: 419,
        respawn_time: 5,
        drops: [ {
            id: 483,
            chance: .05
        }, {
            id: 451,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 462,
            chance: .05
        }, {
            id: 1687,
            chance: .05
        }, {
            id: 664,
            chance: .05
        }, {
            id: 661,
            chance: .05
        }, {
            id: 379,
            chance: .08
        }, {
            id: 440,
            chance: .05
        }, {
            id: 394,
            chance: .05
        }, {
            id: 430,
            chance: .05
        }, {
            id: 375,
            chance: .08
        }, {
            id: 618,
            chance: .05
        }, {
            id: 666,
            chance: .05
        }, {
            id: 968,
            chance: .05
        }, {
            id: 175,
            chance: .08
        }, {
            id: 179,
            chance: .08
        }, {
            id: 1306,
            chance: .08
        }, {
            id: 1128,
            chance: .08
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 364,
            chance: .05
        }, {
            id: 974,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 1032,
            chance: .1
        }, {
            id: 392,
            chance: .05
        }, {
            id: 808,
            chance: .08
        }, {
            id: 812,
            chance: .05
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 500,
            chance: .08
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 1080,
            chance: .08
        }, {
            id: 972,
            chance: .1
        } ]
    },
    temp: {
        health: 1700,
        busy: !1,
        total_defense: 360,
        magics: [ {
            id: 21
        } ],
        magic: 110,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[419] = createObject({
    b_i: 419,
    b_t: BASE_TYPE.NPC,
    name: "Defender 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 420,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 550,
        total_strength: 40,
        total_accuracy: 455
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[420] = createObject({
    b_i: 420,
    b_t: BASE_TYPE.NPC,
    name: "Defender 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 421,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 550,
        total_strength: 40,
        total_accuracy: 460
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[421] = createObject({
    b_i: 421,
    b_t: BASE_TYPE.NPC,
    name: "Defender 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 422,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 550,
        total_strength: 45,
        total_accuracy: 460
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[422] = createObject({
    b_i: 422,
    b_t: BASE_TYPE.NPC,
    name: "Defender 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 8,
        y: 1
    },
    params: {
        health: 1e3,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 50,
        no_dungeon: !0,
        next_cathedral_npc_id: 341,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1e3,
        busy: !1,
        total_defense: 550,
        total_strength: 50,
        total_accuracy: 460
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[423] = createObject({
    b_i: 423,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 1",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 424,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 500,
        total_strength: 60,
        total_accuracy: 620
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[424] = createObject({
    b_i: 424,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 2",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 425,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 505,
        total_strength: 62,
        total_accuracy: 630
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[425] = createObject({
    b_i: 425,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 3",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 426,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 510,
        total_strength: 64,
        total_accuracy: 636
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[426] = createObject({
    b_i: 426,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 4",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 427,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 513,
        total_strength: 64,
        total_accuracy: 640
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[427] = createObject({
    b_i: 427,
    b_t: BASE_TYPE.NPC,
    name: "[Elite] Demon Unicorn",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 9,
        y: 1
    },
    params: {
        health: 1900,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 40,
        no_dungeon: !0,
        next_cathedral_npc_id: 428,
        respawn_time: 5,
        drops: [ {
            id: 483,
            chance: .05
        }, {
            id: 451,
            chance: .05
        }, {
            id: 454,
            chance: .05
        }, {
            id: 462,
            chance: .05
        }, {
            id: 1687,
            chance: .05
        }, {
            id: 664,
            chance: .05
        }, {
            id: 661,
            chance: .05
        }, {
            id: 379,
            chance: .08
        }, {
            id: 440,
            chance: .05
        }, {
            id: 394,
            chance: .05
        }, {
            id: 430,
            chance: .05
        }, {
            id: 375,
            chance: .08
        }, {
            id: 618,
            chance: .05
        }, {
            id: 666,
            chance: .05
        }, {
            id: 968,
            chance: .05
        }, {
            id: 175,
            chance: .08
        }, {
            id: 179,
            chance: .08
        }, {
            id: 1306,
            chance: .08
        }, {
            id: 1128,
            chance: .08
        }, {
            id: 952,
            chance: .05
        }, {
            id: 1293,
            chance: .05
        }, {
            id: 389,
            chance: .05
        }, {
            id: 364,
            chance: .05
        }, {
            id: 974,
            chance: .05
        }, {
            id: 765,
            chance: .1
        }, {
            id: 1032,
            chance: .1
        }, {
            id: 392,
            chance: .05
        }, {
            id: 808,
            chance: .08
        }, {
            id: 812,
            chance: .05
        }, {
            id: 500,
            chance: .08
        }, {
            id: 1601,
            chance: .05
        }, {
            id: 1579,
            chance: .05
        }, {
            id: 182,
            chance: .08
        }, {
            id: 1074,
            chance: .08
        }, {
            id: 1080,
            chance: .08
        }, {
            id: 972,
            chance: .1
        } ]
    },
    temp: {
        health: 1900,
        busy: !1,
        total_defense: 360,
        magics: [ {
            id: 25
        } ],
        magic: 110,
        cooldown: .8,
        total_strength: 1,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[428] = createObject({
    b_i: 428,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 5",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 429,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 513,
        total_strength: 60,
        total_accuracy: 650
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[429] = createObject({
    b_i: 429,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 6",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 430,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 513,
        total_strength: 60,
        total_accuracy: 660
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[430] = createObject({
    b_i: 430,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 7",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 431,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 513,
        total_strength: 58,
        total_accuracy: 665
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[431] = createObject({
    b_i: 431,
    b_t: BASE_TYPE.NPC,
    name: "Gladiator 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 1,
        y: 2
    },
    params: {
        health: 1500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 342,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 1500,
        busy: !1,
        total_defense: 513,
        total_strength: 55,
        total_accuracy: 670
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[432] = createObject({
    b_i: 432,
    b_t: BASE_TYPE.NPC,
    name: "Dragonbat 8",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.HALLOWEEN,
        x: 5,
        y: 1
    },
    params: {
        health: 320,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        no_dungeon: !0,
        next_cathedral_npc_id: 334,
        respawn_time: 5,
        drops: []
    },
    temp: {
        health: 320,
        busy: !1,
        total_defense: 195,
        total_strength: 20,
        total_accuracy: 229
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[433] = createObject({
    b_i: 433,
    b_t: BASE_TYPE.NPC,
    name: "Survivor",
    type: OBJECT_TYPE.SHOP,
    img: {
        hash: "0 0 46 30 72 2 1 37 111 10 19 7"
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: [ {
            id: 95,
            count: 20,
            spawn: !0
        }, {
            id: 93,
            count: 20,
            spawn: !0
        } ]
    },
    activities: [ ACTIVITIES.TRADE_WITH, ACTIVITIES.INSPECT ]
}, 1);

npc_base[434] = createObject({
    b_i: 434,
    b_t: BASE_TYPE.NPC,
    name: "Gate",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.FIRST,
        x: 2,
        y: 10
    },
    params: {
        health: 500,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        magic_block: 75,
        no_dungeon: !0,
        respawn_time: 5,
        drops: [ {
            id: 1033,
            chance: 1
        } ]
    },
    temp: {
        health: 500,
        busy: !1,
        total_defense: 500,
        magics: [ {
            id: 17
        } ],
        magic: 89,
        cooldown: .8,
        total_accuracy: 999
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[435] = createObject({
    b_i: 435,
    b_t: BASE_TYPE.NPC,
    name: "Orange shroom",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 3,
        y: 2
    },
    params: {
        health: 65,
        radius: 9,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 242,
            chance: .8
        } ]
    },
    temp: {
        health: 65,
        busy: !1,
        total_defense: 70,
        total_strength: 25,
        total_accuracy: 250
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

npc_base[436] = createObject({
    b_i: 436,
    b_t: BASE_TYPE.NPC,
    name: "Cow",
    type: OBJECT_TYPE.SHOP,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 3,
        y: 0
    },
    params: {
        health: 99
    },
    temp: {
        health: 99,
        total_defense: 99,
        total_strength: 99,
        total_accuracy: 99,
        content: []
    },
    activities: [ ACTIVITIES.TALK, ACTIVITIES.INSPECT ],
    fn: {
        talk: function(a, b) {
            needsProximity(b, a, 1, !0) && !Timers.running("cow_timer") && (Timers.set("cow_timer", null_function, 1e3), 
            Popup.prompt(ArrayHelper.sample([ "Roar?", "Bark bark?", "Meow?" ]), null_function, function() {
                Popup.prompt(ArrayHelper.sample([ "Baa?", "Hee-haw?", "Oink oink?" ]), null_function, function() {
                    Popup.prompt("M00?", function() {
                        Socket.send("interact", {
                            target_id: a.id
                        });
                    }, null_function);
                });
            }));
        },
        interact: function(skiplock, res) {
            Client.teleport_position(res, {
                map: 24,
                i: 18,
                j: 15
            });
        }
    }
}, 1);

npc_base[437] = createObject({
    b_i: 437,
    b_t: BASE_TYPE.NPC,
    name: "Cow King",
    type: OBJECT_TYPE.ENEMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER132,
        x: 3,
        y: 16
    },
    params: {
        health: 80,
        radius: 9,
        no_dungeon: !0,
        move_radius: 10,
        aggressive: !1,
        speed: 100,
        drops: [ {
            id: 494,
            chance: .15
        }, {
            id: 1031,
            chance: .003
        } ]
    },
    temp: {
        health: 80,
        busy: !1,
        total_defense: 75,
        total_strength: 75,
        total_accuracy: 75
    },
    activities: [ ACTIVITIES.ATTACK, ACTIVITIES.INSPECT ]
}, 1);

var fights = [], duel_requests = {}, FIGHT = {
    ROUNDS: 5,
    add: function(y, c, d, e, i, j) {
        for (var index = 0; "undefined" != typeof fights[index]; ) index++;
        fights[index] = {
            turn: d,
            first: y,
            first_magic_dmg: 0,
            second: c,
            second_magic_dmg: 0,
            first_stake: i || [],
            second_stake: j || [],
            round: 0,
            id: index,
            cancelled: !1,
            settings: {
                running_allowed: !0,
                magic_allowed: !0,
                keep_valuables: 2,
                xp: !0,
                duel: !1,
                pvp: !1
            }
        };
        e && (fights[index].settings = JSON.merge(fights[index].settings, e));
        Timers.set("fights_" + index, function() {
            FIGHT.step(index);
        }, 100);
        return fights[index];
    },
    enemy_coords: function(type, other) {
        if ("undefined" != typeof fights[type]) return fights[type].first.id == other.id ? {
            i: fights[type].second.i,
            j: fights[type].second.j,
            map: fights[type].second.map
        } : {
            i: fights[type].first.i,
            j: fights[type].first.j,
            map: fights[type].first.map
        };
    },
    remove: function(index) {
        "undefined" != typeof fights[index] && (delete fights[index].first, delete fights[index].second, 
        delete fights[index].settings);
        delete fights[index];
    },
    add_magic_damage: function(name, scale, player) {
        if ("undefined" != typeof fights[name]) {
            var h = Magic[scale].params.basic_damage || Magic[scale].params.fire_damage || Magic[scale].params.water_damage || Magic[scale].params.earth_damage || Magic[scale].params.air_damage, p = fights[name].first.id == player.id ? fights[name].second : fights[name].first;
            scale = player.temp.magic / 1.2 + Magic[scale].params.penetration;
            player.b_t == BASE_TYPE.PLAYER && (scale += skills[player.id].magic.current);
            scale = Math.min(1, scale / p.temp.total_defense);
            h = Math.round((Math.random() / 1.333 + .25) * h * scale);
            scale = "";
            if (p.temp.magic_block) {
                var w = h, h = Math.round(h * (100 - p.temp.magic_block) / 100), w = w - h;
                0 < w && (scale = " (enemy blocked " + w + " damage)", p.b_t == BASE_TYPE.PLAYER && Player.send_message(p.id, "Blocked " + w + " magic damage", COLOR.GREEN, "magic"));
            }
            player.b_t == BASE_TYPE.PLAYER && Player.send_message(player.id, "+" + h + " magic damage" + scale, COLOR.GREEN, "magic");
            fights[name].first.id == player.id ? fights[name].second_magic_dmg += h : fights[name].first_magic_dmg += h;
        }
    },
    calculate_magic_damage: function(position, labelText, i) {},
    step: function(model) {
        var i = fights[model];
        if ("undefined" != typeof i) if (i.cancelled) i.first.b_t == BASE_TYPE.NPC ? AREA.npc(i.second, {
            action: "killed",
            data: i.first
        }) : i.second.b_t == BASE_TYPE.NPC && AREA.npc(i.first, {
            action: "killed",
            data: i.second
        }), FIGHT.remove(model); else {
            var data = i.first.id == i.turn ? i.first : i.second, p = i.first.id == i.turn ? i.second : i.first;
            i.turn = p.id;
            i.round++;
            data.b_t == BASE_TYPE.NPC && Monster.use_magic(model, data);
            if (data.id == i.first.id) {
                var list = fights[model].second_magic_dmg;
                fights[model].second_magic_dmg = 0;
            } else list = fights[model].first_magic_dmg, fights[model].first_magic_dmg = 0;
            var max = FIGHT.calculate_damage(data.temp.total_strength, data.temp.total_accuracy, p.temp.total_defense) + list;
            p.b_t == BASE_TYPE.PLAYER ? (skills[p.id].health.current -= max, p.temp.health = skills[p.id].health.current) : (max = Math.min(max, p.temp.health), 
            p.temp.health -= max);
            FIGHT.notify_hit(p, max);
            data.b_t == BASE_TYPE.PLAYER && i.settings.xp && (Player.inc_xp(data, "combat", Math.max(0, 2 * (max - list))), 
            i.round >= FIGHT.ROUNDS + 1 && clients[data.id] && clients[data.id].temp.run && 0 < p.temp.health && FIGHT.player_wishes_to_run(clients[data.id], !0));
            if (0 < p.temp.health) Timers.set("fights_" + model, function() {
                FIGHT.step(model);
            }, 1500); else {
                if (i.settings.duel) {
                    list = i.first.id == p.id ? i.first_stake : i.second_stake;
                    Player.died(p.id, i.settings.keep_valuables, list, void 0);
                    0 < list.length && AREA.sql(clients[data.id], {
                        action: "duel",
                        attacker: data.name,
                        defender: p.name,
                        stake: list
                    });
                    for (i = 0; i < list.length; i++) Items.give_to_player(data, list[i]);
                    FIGHT.notify_death(data, p, data, !0);
                    Player.finished_fight(data, p);
                    Player.finished_fight(p, data);
                } else i.settings.pvp ? (Player.died(p.id, i.settings.keep_valuables, [], data.name), 
                FIGHT.notify_death(data, p, data, !0), Player.finished_fight(data, p), Player.finished_fight(p, data)) : (list = data.b_t == BASE_TYPE.PLAYER ? data : p, 
                0 < list.temp.health ? (Player.request_captcha(list.id, !1), Monster.drops_item(list, p), 
                Quests.increase_monster_quest(list.id, p.b_i), Cathedral.killed_monster(list.id, p.b_i), 
                Player.achievement_monster(list.id, p.b_i)) : Player.died(list.id, i.settings.keep_valuables, [], 0 < Player.danger_level(list) ? "&" : void 0), 
                FIGHT.notify_death(list, p, data, !1), Player.finished_fight(list, p));
                FIGHT.remove(model);
            }
        }
    },
    calculate_damage: function(x, y, width) {
        x = x / 5 * Math.random() + 1;
        y = Math.max(0, width - y) * Math.random();
        return Math.max(Math.ceil(x - y), 0);
    },
    max_damage: function() {
        return Math.ceil(players[0].temp.total_strength / 5) + 1;
    },
    calculate_monster_level: function(m) {
        if (m.b_t == BASE_TYPE.PLAYER) return m.params.combat_level;
        m = npc_base[m.b_i];
        return Math.floor((m.temp.total_accuracy + m.temp.total_strength + m.temp.total_defense + m.params.health) / 4);
    },
    notify_hit: function(data, status) {
        var provider = {
            id: data.id,
            i: data.i,
            j: data.j,
            b_i: data.b_i,
            b_t: data.b_t,
            map: data.map,
            name: data.name,
            params: {
                health: data.params.health
            },
            temp: {
                health: data.temp.health
            }
        };
        data.b_t == BASE_TYPE.PLAYER && (provider.params.combat_level = data.params.combat_level);
        AREA.publish(data, {
            action: "hit",
            target: provider,
            hit: status
        }, !0);
    },
    notify_death: function(detail, target, currentTarget, defaultPrevented) {
        target.b_t == BASE_TYPE.PLAYER ? (AREA.publish(detail, {
            action: "death",
            target: Player.share_data(target.id)
        }, !1), SSocket.send(sockets[detail.id], {
            action: "death",
            target: Player.share_data(target.id)
        })) : AREA.publish(detail, {
            action: "death",
            target: target
        }, !0);
        defaultPrevented || (target.b_t == BASE_TYPE.NPC ? (AREA.npc(detail, {
            action: "death",
            data: target
        }), 100 <= detail.map && PartyQuests.reduce_monster_count(detail)) : AREA.npc(detail, {
            action: "killed",
            data: currentTarget
        }));
    },
    player_wishes_to_run: function(player, media) {
        if (-1 == player.temp.fight_id) return !1;
        if (fights[player.temp.fight_id] && fights[player.temp.fight_id].round >= FIGHT.ROUNDS && fights[player.temp.fight_id].settings.running_allowed) {
            var that = fights[player.temp.fight_id];
            that.cancelled = !0;
            that.settings.duel || that.settings.pvp ? (that = that.first.name == player.name ? that.second : that.first, 
            Player.finished_fight(clients[that.id]), Player.notify_skills(that.id), Player.send_message(that.id, "Enemy has fled.", COLOR.WHITE), 
            Private.set(that.id, "last_ran", timestamp()), Private.set(player.id, "last_ran", timestamp())) : (that = that.first.b_t == BASE_TYPE.PLAYER ? that.second : that.first, 
            that.temp.target_id = -1, AREA.npc(player, {
                action: "killed",
                data: that
            }));
            Player.finished_fight(player);
            Player.notify_skills(player.id);
            Player.send_message(player.id, "You ran away.", COLOR.WHITE);
            return !0;
        }
        media || Player.send_message(player.id, "Cannot do that yet.", COLOR.WHITE);
        return !1;
    },
    duel_request: function(a, b) {
        if (1 != distance(a.i, a.j, b.i, b.j)) return !1;
        var id = {
            magic_not_allowed: !1,
            running_not_allowed: !1,
            first_stake: [],
            second_stake: [],
            first_accept: "",
            second_accept: "",
            first_confirm: "",
            second_confirm: "",
            attacker: a.id,
            defender: b.id,
            pvp: !1,
            keep_valuables: 40
        };
        duel_requests[a.id] = id;
        clients[a.id].temp.duel_id = a.id;
        clients[b.id].temp.duel_id = a.id;
        Player.sync_duel_dialog(id);
    },
    start_duel: function(a, b, params) {
        if (1 != distance(a.i, a.j, b.i, b.j) || !(params.pvp || Duel.valid_stake(a.id, params.first_stake) && Duel.valid_stake(b.id, params.second_stake))) return !1;
        clients[a.id].temp.health = skills[a.id].health.current;
        clients[b.id].temp.health = skills[b.id].health.current;
        clients[a.id].params.health = skills[a.id].health.level;
        clients[b.id].params.health = skills[b.id].health.level;
        params = FIGHT.add(clients[a.id], clients[b.id], a.id, {
            xp: !0,
            duel: !params.pvp,
            pvp: params.pvp,
            magic_allowed: !params.magic_not_allowed,
            running_allowed: !params.running_not_allowed,
            keep_valuables: params.keep_valuables
        }, params.first_stake, params.second_stake);
        AREA.publish(clients[a.id], {
            action: "attack",
            defender: params.first.id == params.turn ? params.second.id : params.first.id,
            attacker: params.first.id == params.turn ? params.first.id : params.second.id,
            data: Player.share_data(a.id),
            fight: params.id
        }, !0);
        Player.in_a_fight(clients[a.id], params.id);
        Player.in_a_fight(clients[b.id], params.id);
        delete duel_requests[a.id];
    },
    toggle_run_away: function() {
        Socket.send("toggle_run", {
            run: !players[0].temp.run
        });
    }
}, COMBAT_STYLE = {
    CONTROLLED: "0",
    AGGRESSIVE: "1",
    DEFENSIVE: "2",
    ACCURATE: "3"
}, ITEM_CATEGORY = {
    ARMOR: "0",
    0: "Armors",
    FOOD: "1",
    1: "Foods",
    JEWELRY: "2",
    2: "Jewelry",
    MATERIAL: "3",
    3: "Materials",
    TOOL: "4",
    4: "Tools",
    WEAPON: "5",
    5: "Weapons",
    SPELL: "6",
    6: "Spells",
    PET: "7",
    7: "Pets",
    HOUSE: "8",
    8: "House"
}, ITEM_CATEGORY_COUNT = 9, Items = {
    drop: function(socket, where_obj, callback) {
        "undefined" != typeof socket && "undefined" != typeof sockets[socket.id] && (SSocket.send(sockets[socket.id], {
            action: "item_drop",
            data: {
                id: callback
            }
        }), Inventory.add(socket, callback));
    },
    give_to_player: function(i, e) {
        Items.drop(i, void 0, e);
    },
    force_give_to_player: function(id, data) {
        var client = clients[id];
        client && (Inventory.is_full(client) ? Chest.player_chest_full(id) ? (AREA.sql(clients[id], {
            action: "market_add_new_item",
            to_player: client.name,
            item_id: data
        }), Player.send_message(id, "New market transaction: " + item_base[data].name, COLOR.YELLOW, "loot")) : (Chest.player_add_chest(id, data), 
        Player.send_message(id, "Chest loot: " + item_base[data].name, COLOR.YELLOW, "loot"), 
        SSocket.send(sockets[id], {
            action: "chest_open",
            content: Chest.get_content(id),
            open: !1
        }), Timers.set("chest_save" + id, function() {
            Chest.save(id, clients[id].name);
        }, 3e3)) : Items.give_to_player(client, data));
    },
    use: function(p, i) {
        if ("undefined" == typeof iamserver) Music.use_item(i); else if ("undefined" != typeof p && "undefined" != typeof clients[p.id] && "undefined" != typeof skills[p.id] && "undefined" != typeof sockets[p.id]) {
            var data = item_base[i];
            if (764 == i || 765 == i || 766 == i || 1149 == i || 1160 == i) {
                for (var a = {
                    764: 2500,
                    765: 8e3,
                    766: 34999,
                    1149: 15e4,
                    1160: 0
                }, r = {
                    764: 8e4,
                    765: 17e4,
                    766: 45e4,
                    1149: 15e5,
                    1160: 1
                }, l = Math.floor(Math.random() * item_base.length); item_base[l].params.no_present || item_base[l].params.price < a[i] || item_base[l].params.price > r[i]; ) l = Math.floor(Math.random() * item_base.length);
                Items.give_to_player(clients[p.id], l);
                1160 == i && Player.send_achievement(p.id, "COLLECTOR");
            } else if (1033 == i) AREA.all(p, {
                action: "2x_exp",
                name: p.name
            }), Elog.log(p.name + " used 2x potion"); else if (779 == i && 5 > p.params.penalty && 0 == Player.danger_level(p)) canUseHouseDeed(p) ? (clients[p.id].temp.last_map = p.map, 
            clients[p.id].params.island = p.name, PlayerMap.load(p.name, !0, function(err) {
                SSocket.send(sockets[p.id], {
                    action: "player_map",
                    map: err
                });
                Client.teleport_position(clients[p.id], {
                    i: 10,
                    j: 10,
                    map: 300
                });
            })) : Player.send_message(p.id, "Need to be inside a town to use the island deed.", COLOR.ORANGE), 
            Items.give_to_player(clients[p.id], 779); else if (data && data.params && data.params.results && (Inventory.add(clients[p.id], data.b_i), 
            a = {
                type: "item",
                id: data.b_i
            }, r = Skills.can_perform(clients[p.id], a, !0), console.log(r), r.status)) return Skills.perform(p.id, a, r);
            if ("undefined" != typeof data.params.heal) skills[p.id].health.current = Math.min(skills[p.id].health.level, skills[p.id].health.current + data.params.heal), 
            Player.send_message(p.id, "You feel a bit better.", COLOR.WHITE), Player.notify_skills(p.id); else if ("undefined" != typeof data.params.to_map && 5 > p.params.penalty && 0 == Player.danger_level(p) && (0 != p.map || 0 != p.i || 0 != p.j) && 19 != p.map) {
                if (1400 == i && (clients[p.id].temp.poseidon_until = secondstamp() + 3600, Timers.set("poseidon" + p.name, function() {
                    Player.poseidon_timeout(p.name);
                }, 1e3 * (clients[p.id].temp.poseidon_until - secondstamp())), 23 == clients[p.id].map)) return Items.give_to_player(clients[p.id], 1400);
                data.params.no_magic_exp || Player.inc_xp(clients[p.id], "magic", Math.round(data.params.price / 100));
                AREA.publish(p, {
                    action: "magic_animation",
                    id: 0,
                    i: p.i,
                    j: p.j,
                    map: p.map
                }, !1);
                Client.teleport_position(clients[p.id], {
                    map: data.params.to_map,
                    i: data.params.to_i,
                    j: data.params.to_j
                });
                AREA.publish(clients[p.id], {
                    action: "magic_animation",
                    id: 1,
                    i: clients[p.id].i,
                    j: clients[p.id].j,
                    map: clients[p.id].map
                }, !0);
            } else {
                var r = a = !1, key;
                for (key in skills[p.id]) "undefined" != typeof data.params["boost_" + key] && (skills[p.id][key].current = Math.round(skills[p.id][key].level * (1 + data.params["boost_" + key])), 
                0 <= [ "accuracy", "defense", "strength", "magic" ].indexOf(key) ? r = !0 : "health" == key && 1367 == i && AREA.publish(p, {
                    action: "magic_animation",
                    id: 29,
                    i: p.i,
                    j: p.j,
                    map: p.map
                }, !0), a = !0);
                r && Player.update_combat_attributes(p);
                if (a) Player.send_message(p.id, "You feel more experienced.", COLOR.WHITE), Player.notify_skills(p.id), 
                0 <= [ 304, 305, 306, 307, 308, 309, 310, 311, 312, 795, 796, 1402 ].indexOf(parseInt(i)) ? Items.give_to_player(clients[p.id], 249) : 0 <= [ 315, 316, 317, 318, 319, 320, 321, 322, 401, 1023, 1403 ].indexOf(parseInt(i)) ? Items.give_to_player(clients[p.id], 247) : 0 <= [ 323, 324, 325, 326, 327, 328, 329, 1404 ].indexOf(parseInt(i)) ? Items.give_to_player(clients[p.id], 246) : 0 <= [ 330, 331, 332, 333, 334, 335, 336, 337, 338, 1033, 1405 ].indexOf(parseInt(i)) && Items.give_to_player(clients[p.id], 248); else if (data.params.magic) {
                    if (0 < p.params.magic_slots) {
                        key = !1;
                        for (a = 0; a < p.params.magic_slots; a++) if (p.params.magics[a] && p.params.magics[a].id == data.params.magic) {
                            if (clients[p.id].params.magics[a].count > 1e3 * p.params.magic_slots) return Player.send_message(p.id, "This pouch has a limit " + thousandSeperate(1e3 * p.params.magic_slots) + " of each spell!", COLOR.ORANGE), 
                            !1;
                            clients[p.id].params.magics[a].count += Magic[data.params.magic].params.uses;
                            key = !0;
                            break;
                        } else if ("undefined" == typeof p.params.magics[a]) {
                            clients[p.id].params.magics[a] = {
                                id: data.params.magic,
                                count: Magic[data.params.magic].params.uses,
                                ready: !1,
                                i: a
                            };
                            Player.magic_cooldown(p.id, a);
                            key = !0;
                            break;
                        }
                        if (key) return Items.take_from_player(p.id, data.b_i), Player.send_data(p.id), 
                        !0;
                        Player.send_message(p.id, "Not enough free space in magic pouch!", COLOR.ORANGE);
                        return !1;
                    }
                    Player.send_message(p.id, "You need a magic pouch!", COLOR.ORANGE);
                    return !1;
                }
            }
        }
    },
    take_from_player: function(id, component) {
        var target = clients[id];
        Inventory.remove(target, component);
        Player.send_inventory(target.id);
    },
    info: function(data) {
        data = item_base[data];
        var str = "";
        if (data.params && data.params.desc_only) return " - " + data.params.desc_only;
        data.params && data.params.heal && (str += " +" + data.params.heal + " health");
        data.params && data.params.heals && (str += " heals " + data.params.heals + " health per 2 seconds");
        for (var key in getEmptySkills()) "undefined" != typeof data.params["boost_" + key] && (str += " +" + 100 * data.params["boost_" + key] + "% " + key);
        if (data.params && data.params.wearable) {
            data.params.aim && (str += " +" + data.params.aim + " aim");
            data.params.power && (str += " +" + data.params.power + " power");
            data.params.armor && (str += " +" + data.params.armor + " armor");
            data.params.magic && 10 != data.params.slot && (str += " +" + data.params.magic + " magic");
            data.params.speed && (str += " +" + data.params.speed + " speed");
            data.params.magic_slots && (str += " +" + data.params.magic_slots + " magic slots");
            data.params.cooldown && (str += " -" + parseInt(100 * data.params.cooldown) + "% cooldown");
            data.params.stores && (str += " can store up to " + data.params.stores + " items");
            data.params.magic_block && (str += " blocks " + data.params.magic_block + "% of magical damage");
            switch (data.params.slot) {
              case 0:
                str += " (head)";
                break;

              case 1:
                str += " (back)";
                break;

              case 2:
                str += " (body)";
                break;

              case 3:
                str = 4 == data.params.disable_slot ? str + " (both hands)" : str + " (right hand)";
                break;

              case 4:
                str = 3 == data.params.disable_slot ? str + " (both hands)" : str + " (left hand)";
                break;

              case 5:
                str += " (hands)";
                break;

              case 6:
                str += " (legs)";
                break;

              case 7:
                str += " (neck)";
                break;

              case 8:
                str += " (fingers)";
                break;

              case 9:
                str += " (use only)";
                break;

              case 10:
                str += " (magic)";
                break;

              case 11:
                str += " (pants)";
                break;

              case 12:
                str += " +" + pets[data.params.pet].params.inventory_slots + " inventory slots,";
                str += " level " + pets[data.params.pet].params.level;
                str += " (pet)";
                break;

              case 14:
                str += " (preservation)";
                break;

              case 15:
                str += " (mage)";
                break;

              case 16:
              case 17:
              case 18:
                str += " (key)";
            }
            for (key in getEmptySkills()) "undefined" != typeof data.params["min_" + key] && 1 != data.params["min_" + key] && (str += " " + data.params["min_" + key] + " " + key);
        }
        data.params.desc && (str += " - " + data.params.desc);
        return str;
    },
    requirements_met: function(obj, method) {
        var m = item_base[method], elem = obj.me ? skills[0] : skills[obj.id], text = "";
        if (m && m.params) for (var props = "accuracy strength defense health magic alchemy woodcutting farming fishing cooking jewelry carpentry forging mining breeding".split(" "), i = 0; i < props.length; i++) "undefined" != typeof m.params["min_" + props[i]] && m.params["min_" + props[i]] > elem[props[i]].level && (text += " " + m.params["min_" + props[i]] + " " + props[i]);
        text = text.trim();
        return 0 < text.length ? ("undefined" == typeof iamserver && addChatText("You need " + text + " to use " + m.name, void 0, COLOR.PINK), 
        !1) : !0;
    },
    get_info: function(item) {
        addChatText(item_base[item].name + Items.info(item), void 0, COLOR.TEAL);
    },
    get_background_image: function(data) {
        data = item_base[data];
        if (!data) return "";
        var q1 = IMAGE_SHEET[data.img.sheet];
        return 'background:url("' + q1.url + '") no-repeat scroll ' + -data.img.x * q1.tile_width + "px " + -data.img.y * q1.tile_height + "px transparent;";
    }
};

item_base[0] = createObject({
    b_i: 0,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bronze Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 1
        },
        slot: 4,
        aim: 6,
        power: 4,
        min_accuracy: 1,
        price: 132,
        enchant_id: 505
    }
}, 1);

item_base[1] = createObject({
    b_i: 1,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 6
        },
        slot: 3,
        armor: 14,
        min_defense: 1,
        price: 262,
        enchant_id: 571
    }
}, 1);

item_base[2] = createObject({
    b_i: 2,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Chainmail",
    img: {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            body: 10
        },
        slot: 2,
        armor: 17,
        min_defense: 20,
        price: 5444,
        enchant_id: 556
    }
}, 1);

item_base[3] = createObject({
    b_i: 3,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Tomato",
    img: {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 2,
        y: 1
    },
    params: {
        wearable: !1,
        price: 3,
        heal: 2
    }
}, 1);

item_base[4] = createObject({
    b_i: 4,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Blunt Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 34
        },
        slot: 4,
        aim: 6,
        power: 12,
        min_accuracy: 1,
        price: 168,
        enchant_id: 506
    }
}, 1);

item_base[5] = createObject({
    b_i: 5,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Leather Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 4
        },
        slot: 0,
        armor: 5,
        min_defense: 1,
        price: 172
    }
}, 1);

item_base[6] = createObject({
    b_i: 6,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Ham",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 0
    },
    params: {
        wearable: !1,
        price: 15,
        heal: 3
    }
}, 1);

item_base[7] = createObject({
    b_i: 7,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fishing Rod",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 80
        },
        slot: 4,
        min_fishing: 1,
        price: 40
    }
}, 1);

item_base[8] = createObject({
    b_i: 8,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Perch",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 1,
        price: 10
    }
}, 1);

item_base[9] = createObject({
    b_i: 9,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Perch",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 3,
        price: 15
    }
}, 1);

item_base[10] = createObject({
    b_i: 10,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Trout",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 10,
        price: 30
    }
}, 1);

item_base[11] = createObject({
    b_i: 11,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Trout",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 4,
        price: 45
    }
}, 1);

item_base[12] = createObject({
    b_i: 12,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Pike",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 20,
        price: 50
    }
}, 1);

item_base[13] = createObject({
    b_i: 13,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Pike",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 6,
        price: 75
    }
}, 1);

item_base[14] = createObject({
    b_i: 14,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Salmon",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 30,
        price: 70
    }
}, 1);

item_base[15] = createObject({
    b_i: 15,
    name: "Salmon",
    b_t: ITEM_CATEGORY.FOOD,
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 8,
        price: 105
    }
}, 1);

item_base[16] = createObject({
    b_i: 16,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Bass",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 40,
        price: 100
    }
}, 1);

item_base[17] = createObject({
    b_i: 17,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Bass",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 10,
        price: 150
    }
}, 1);

item_base[18] = createObject({
    b_i: 18,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 19
        },
        slot: 4,
        aim: 21,
        power: 51,
        min_accuracy: 20,
        price: 5644,
        enchant_id: 507
    }
}, 1);

item_base[19] = createObject({
    b_i: 19,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Red Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 1
        },
        slot: 1,
        armor: 5,
        min_defense: 1,
        price: 320
    }
}, 1);

item_base[20] = createObject({
    b_i: 20,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Leather Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 1
        },
        slot: 6,
        armor: 5,
        min_defense: 1,
        speed: 5,
        price: 75
    }
}, 1);

item_base[21] = createObject({
    b_i: 21,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Leather Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 1
        },
        slot: 5,
        armor: 5,
        min_defense: 1,
        price: 65
    }
}, 1);

item_base[22] = createObject({
    b_i: 22,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Woodcutter's Axe",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 35
        },
        slot: 4,
        min_woodcutting: 1,
        price: 120
    }
}, 1);

item_base[23] = createObject({
    b_i: 23,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Iron Pickaxe",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 45
        },
        slot: 4,
        min_mining: 1,
        price: 200
    }
}, 1);

item_base[24] = createObject({
    b_i: 24,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 8,
        price: 1800,
        armor: 4,
        aim: 4
    }
}, 1);

item_base[25] = createObject({
    b_i: 25,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 3
        },
        slot: 0,
        armor: 19,
        min_defense: 20,
        price: 4148
    }
}, 1);

item_base[26] = createObject({
    b_i: 26,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 38
        },
        slot: 4,
        aim: 15,
        power: 15,
        min_accuracy: 40,
        price: 5180,
        enchant_id: 508
    }
}, 1);

item_base[27] = createObject({
    b_i: 27,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 1
        },
        slot: 6,
        armor: 12,
        speed: 5,
        min_defense: 1,
        enchant_id: 1588,
        price: 260
    }
}, 1);

item_base[28] = createObject({
    b_i: 28,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 3800,
        armor: 4,
        aim: 4
    }
}, 1);

item_base[29] = createObject({
    b_i: 29,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fir Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpenty: 1,
        price: 10
    }
}, 1);

item_base[30] = createObject({
    b_i: 30,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Clay",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 12
    }
}, 1);

item_base[31] = createObject({
    b_i: 31,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Iron Ore",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 20,
        price: 180
    }
}, 1);

item_base[32] = createObject({
    b_i: 32,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Copper",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 1,
        price: 35
    }
}, 1);

item_base[33] = createObject({
    b_i: 33,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Tin",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 1,
        price: 35
    }
}, 1);

item_base[34] = createObject({
    b_i: 34,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bronze Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 4,
        price: 65
    }
}, 1);

item_base[35] = createObject({
    b_i: 35,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            body: 14
        },
        slot: 2,
        armor: 66,
        min_defense: 50,
        price: 68850,
        enchant_id: 132
    }
}, 1);

item_base[36] = createObject({
    b_i: 36,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Forging Hammer",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 142
        },
        slot: 4,
        min_forging: 1,
        price: 404
    }
}, 1);

item_base[37] = createObject({
    b_i: 37,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 4
        },
        slot: 0,
        armor: 13,
        min_defense: 1,
        price: 260
    }
}, 1);

item_base[38] = createObject({
    b_i: 38,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bronze Short Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 36
        },
        slot: 4,
        aim: 11,
        power: 6,
        min_accuracy: 1,
        price: 198,
        enchant_id: 509
    }
}, 1);

item_base[39] = createObject({
    b_i: 39,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 1
        },
        slot: 5,
        armor: 8,
        min_defense: 1,
        price: 130
    }
}, 1);

item_base[40] = createObject({
    b_i: 40,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 21
        },
        slot: 2,
        armor: 9,
        min_defense: 1,
        price: 390,
        enchant_id: 555
    }
}, 1);

item_base[41] = createObject({
    b_i: 41,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bronze Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 7
        },
        slot: 4,
        aim: 16,
        power: 21,
        min_accuracy: 1,
        price: 394,
        enchant_id: 510
    }
}, 1);

item_base[42] = createObject({
    b_i: 42,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Bronze Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 1
        },
        slot: 3,
        armor: 32,
        min_defense: 1,
        price: 358,
        enchant_id: 572
    }
}, 1);

item_base[43] = createObject({
    b_i: 43,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            body: 27
        },
        slot: 2,
        armor: 24,
        min_defense: 1,
        price: 644,
        enchant_id: 560
    }
}, 1);

item_base[44] = createObject({
    b_i: 44,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Rapier",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 3
        },
        slot: 4,
        aim: 25,
        power: 10,
        min_accuracy: 20,
        price: 3142,
        enchant_id: 511
    }
}, 1);

item_base[45] = createObject({
    b_i: 45,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Berserker Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            body: 24
        },
        slot: 2,
        armor: 30,
        power: 10,
        min_defense: 20,
        price: 11492,
        enchant_id: 559
    }
}, 1);

item_base[46] = createObject({
    b_i: 46,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Agility Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 3
        },
        slot: 6,
        armor: 5,
        aim: 10,
        speed: 30,
        min_defense: 5,
        price: 3800
    }
}, 1);

item_base[47] = createObject({
    b_i: 47,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Blue Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 2
        },
        slot: 1,
        armor: 5,
        min_defense: 1,
        price: 320
    }
}, 1);

item_base[48] = createObject({
    b_i: 48,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 4500,
        armor: 9,
        enchant_id: 1085
    }
}, 1);

item_base[49] = createObject({
    b_i: 49,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        price: 5500,
        armor: 10,
        enchant_id: 1105
    }
}, 1);

item_base[50] = createObject({
    b_i: 50,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Iron Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 20,
        price: 540
    }
}, 1);

item_base[51] = createObject({
    b_i: 51,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 4
        },
        slot: 4,
        aim: 8,
        power: 8,
        min_accuracy: 20,
        price: 1916,
        enchant_id: 512
    }
}, 1);

item_base[52] = createObject({
    b_i: 52,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 4
        },
        slot: 6,
        armor: 16,
        min_defense: 20,
        enchant_id: 1589,
        speed: 10,
        price: 4148
    }
}, 1);

item_base[53] = createObject({
    b_i: 53,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Small Iron Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 19
        },
        slot: 3,
        armor: 19,
        min_defense: 20,
        price: 4262,
        enchant_id: 573
    }
}, 1);

item_base[54] = createObject({
    b_i: 54,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 8
        },
        slot: 4,
        aim: 16,
        power: 21,
        min_accuracy: 20,
        price: 3024,
        enchant_id: 513
    }
}, 1);

item_base[55] = createObject({
    b_i: 55,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Mace",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 9
        },
        slot: 4,
        aim: 21,
        power: 16,
        min_accuracy: 20,
        price: 3830,
        enchant_id: 514
    }
}, 1);

item_base[56] = createObject({
    b_i: 56,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Scimitar",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 2
        },
        slot: 4,
        aim: 19,
        power: 19,
        min_accuracy: 20,
        price: 3024,
        enchant_id: 515
    }
}, 1);

item_base[57] = createObject({
    b_i: 57,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Broad Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 5
        },
        slot: 4,
        aim: 6,
        power: 31,
        min_accuracy: 20,
        price: 3830,
        enchant_id: 537
    }
}, 1);

item_base[58] = createObject({
    b_i: 58,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 11,
        power: 5,
        aim: 5,
        min_defense: 20,
        price: 2722
    }
}, 1);

item_base[59] = createObject({
    b_i: 59,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Flail",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 10
        },
        slot: 4,
        aim: 27,
        power: 20,
        min_accuracy: 20,
        price: 3226,
        enchant_id: 516
    }
}, 1);

item_base[60] = createObject({
    b_i: 60,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 11
        },
        slot: 4,
        disable_slot: 3,
        aim: 29,
        power: 30,
        min_accuracy: 20,
        price: 3528,
        enchant_id: 63
    }
}, 1);

item_base[61] = createObject({
    b_i: 61,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Full Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 1
        },
        slot: 0,
        armor: 30,
        min_defense: 20,
        price: 4536
    }
}, 1);

item_base[62] = createObject({
    b_i: 62,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Battle Hammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 12
        },
        slot: 4,
        disable_slot: 3,
        aim: 6,
        power: 68,
        min_accuracy: 20,
        price: 7460,
        enchant_id: 517
    }
}, 1);

item_base[63] = createObject({
    b_i: 63,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 20
        },
        slot: 4,
        disable_slot: 3,
        aim: 42,
        power: 37,
        min_accuracy: 20,
        price: 6526
    }
}, 1);

item_base[64] = createObject({
    b_i: 64,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Low Weapon Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e3
    }
}, 1);

item_base[65] = createObject({
    b_i: 65,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Iron Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 7
        },
        slot: 3,
        armor: 40,
        min_defense: 20,
        price: 7660,
        enchant_id: 574
    }
}, 1);

item_base[66] = createObject({
    b_i: 66,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            body: 12
        },
        slot: 2,
        armor: 33,
        min_defense: 20,
        price: 9850,
        enchant_id: 561
    }
}, 1);

item_base[67] = createObject({
    b_i: 67,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Excalibur",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 95
        },
        slot: 4,
        disable_slot: 3,
        aim: 17,
        power: 87,
        min_accuracy: 20,
        price: 15322,
        enchant_id: 518
    }
}, 1);

item_base[68] = createObject({
    b_i: 68,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Pearl Clam",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 30,
        price: 4e3
    }
}, 1);

item_base[69] = createObject({
    b_i: 69,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Pearl Clam",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 13
    },
    params: {
        wearable: !1,
        heal: 10,
        price: 8e3
    }
}, 1);

item_base[70] = createObject({
    b_i: 70,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Baby Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 5,
        price: 20
    }
}, 1);

item_base[71] = createObject({
    b_i: 71,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Baby Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 4,
        price: 32
    }
}, 1);

item_base[72] = createObject({
    b_i: 72,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Sardine",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 15,
        price: 40
    }
}, 1);

item_base[73] = createObject({
    b_i: 73,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sardine",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 5,
        price: 58
    }
}, 1);

item_base[74] = createObject({
    b_i: 74,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Blue Marine Fish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 23,
        price: 54
    }
}, 1);

item_base[75] = createObject({
    b_i: 75,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Blue Marine Fish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 7,
        price: 82
    }
}, 1);

item_base[76] = createObject({
    b_i: 76,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Jellyfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 25,
        price: 62
    }
}, 1);

item_base[77] = createObject({
    b_i: 77,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Jellyfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 5,
        price: 92
    }
}, 1);

item_base[78] = createObject({
    b_i: 78,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Lion Fish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 35,
        price: 82
    }
}, 1);

item_base[79] = createObject({
    b_i: 79,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Lion Fish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 3
    },
    params: {
        wearable: !1,
        heal: 9,
        price: 124
    }
}, 1);

item_base[80] = createObject({
    b_i: 80,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Sand Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 36,
        price: 92
    }
}, 1);

item_base[81] = createObject({
    b_i: 81,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sand Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 8,
        price: 136
    }
}, 1);

item_base[82] = createObject({
    b_i: 82,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Seahorse",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 41,
        price: 110
    }
}, 1);

item_base[83] = createObject({
    b_i: 83,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Seahorse",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 11
    },
    params: {
        wearable: !1,
        heal: 10,
        price: 164
    }
}, 1);

item_base[84] = createObject({
    b_i: 84,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Mud Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 43,
        price: 120
    }
}, 1);

item_base[85] = createObject({
    b_i: 85,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Mud Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 9,
        price: 178
    }
}, 1);

item_base[86] = createObject({
    b_i: 86,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Angelfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 45,
        price: 126
    }
}, 1);

item_base[87] = createObject({
    b_i: 87,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Angelfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 3
    },
    params: {
        wearable: !1,
        heal: 11,
        price: 186
    }
}, 1);

item_base[88] = createObject({
    b_i: 88,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Common Starfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 44,
        price: 132
    }
}, 1);

item_base[89] = createObject({
    b_i: 89,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Common Starfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 13
    },
    params: {
        wearable: !1,
        heal: 11,
        price: 200
    }
}, 1);

item_base[90] = createObject({
    b_i: 90,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Red Star",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 48,
        price: 138
    }
}, 1);

item_base[91] = createObject({
    b_i: 91,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Red Star",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 11
    },
    params: {
        wearable: !1,
        heal: 12,
        price: 206
    }
}, 1);

item_base[92] = createObject({
    b_i: 92,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Lobster",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 48,
        price: 158
    }
}, 1);

item_base[93] = createObject({
    b_i: 93,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Lobster",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 11
    },
    params: {
        wearable: !1,
        heal: 12,
        price: 238
    }
}, 1);

item_base[94] = createObject({
    b_i: 94,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Swordfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 50,
        price: 170
    }
}, 1);

item_base[95] = createObject({
    b_i: 95,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Swordfish",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 3
    },
    params: {
        wearable: !1,
        heal: 13,
        price: 256
    }
}, 1);

item_base[96] = createObject({
    b_i: 96,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Squalidae",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 55,
        price: 192
    }
}, 1);

item_base[97] = createObject({
    b_i: 97,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Squalidae",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 14,
        price: 286
    }
}, 1);

item_base[98] = createObject({
    b_i: 98,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Manta Ray",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 58,
        price: 198
    }
}, 1);

item_base[99] = createObject({
    b_i: 99,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Manta Ray",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 15,
        price: 298
    }
}, 1);

item_base[100] = createObject({
    b_i: 100,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw White Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 60,
        price: 210
    }
}, 1);

item_base[101] = createObject({
    b_i: 101,
    b_t: ITEM_CATEGORY.FOOD,
    name: "White Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 3
    },
    params: {
        wearable: !1,
        heal: 16,
        price: 316
    }
}, 1);

item_base[102] = createObject({
    b_i: 102,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Dolphin",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 63,
        price: 220
    }
}, 1);

item_base[103] = createObject({
    b_i: 103,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Dolphin",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 11
    },
    params: {
        wearable: !1,
        heal: 15,
        price: 328
    }
}, 1);

item_base[104] = createObject({
    b_i: 104,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Rock Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 65,
        price: 226
    }
}, 1);

item_base[105] = createObject({
    b_i: 105,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Rock Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 14,
        price: 338
    }
}, 1);

item_base[106] = createObject({
    b_i: 106,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw King Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 64,
        price: 326
    }
}, 1);

item_base[107] = createObject({
    b_i: 107,
    b_t: ITEM_CATEGORY.FOOD,
    name: "King Crab",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 16,
        price: 488
    }
}, 1);

item_base[108] = createObject({
    b_i: 108,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Giant Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 68,
        price: 234
    }
}, 1);

item_base[109] = createObject({
    b_i: 109,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Giant Squid",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 16,
        price: 352
    }
}, 1);

item_base[110] = createObject({
    b_i: 110,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Hammer Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 70,
        price: 240
    }
}, 1);

item_base[111] = createObject({
    b_i: 111,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Hammer Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 17,
        price: 360
    }
}, 1);

item_base[112] = createObject({
    b_i: 112,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Reef Manta Ray",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 73,
        price: 250
    }
}, 1);

item_base[113] = createObject({
    b_i: 113,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Reef Manta Ray",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 18,
        price: 374
    }
}, 1);

item_base[114] = createObject({
    b_i: 114,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Gray Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 75,
        price: 256
    }
}, 1);

item_base[115] = createObject({
    b_i: 115,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Gray Shark",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 2,
        y: 3
    },
    params: {
        wearable: !1,
        heal: 19,
        price: 382
    }
}, 1);

item_base[116] = createObject({
    b_i: 116,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Deep Sea Octopus",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 80,
        price: 280
    }
}, 1);

item_base[117] = createObject({
    b_i: 117,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Deep Sea Octopus",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 19,
        price: 420
    }
}, 1);

item_base[118] = createObject({
    b_i: 118,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Spiny Sea Star",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 82,
        price: 322
    }
}, 1);

item_base[119] = createObject({
    b_i: 119,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Spiny Sea Star",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 1,
        y: 13
    },
    params: {
        wearable: !1,
        heal: 20,
        price: 484
    }
}, 1);

item_base[120] = createObject({
    b_i: 120,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw King Seahorse",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 85,
        price: 386
    }
}, 1);

item_base[121] = createObject({
    b_i: 121,
    b_t: ITEM_CATEGORY.FOOD,
    name: "King Seahorse",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 3,
        y: 11
    },
    params: {
        wearable: !1,
        heal: 22,
        price: 578
    }
}, 1);

item_base[122] = createObject({
    b_i: 122,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Baby Whale",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 95,
        price: 456
    }
}, 1);

item_base[123] = createObject({
    b_i: 123,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Baby Whale",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 4,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 24,
        price: 682
    }
}, 1);

item_base[124] = createObject({
    b_i: 124,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fishing Net",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 4,
        min_fishing: 5,
        price: 100
    }
}, 1);

item_base[125] = createObject({
    b_i: 125,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Wooden Harpoon",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 81
        },
        slot: 4,
        min_fishing: 50,
        price: 1800
    }
}, 1);

item_base[126] = createObject({
    b_i: 126,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Steel Harpoon",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 82
        },
        slot: 4,
        min_fishing: 63,
        price: 1e5
    }
}, 1);

item_base[127] = createObject({
    b_i: 127,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Cage",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 4,
        min_fishing: 35,
        price: 160
    }
}, 1);

item_base[128] = createObject({
    b_i: 128,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Viking Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 5
        },
        slot: 0,
        armor: 35,
        min_defense: 50,
        price: 15428
    }
}, 1);

item_base[129] = createObject({
    b_i: 129,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flamberge",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 21
        },
        slot: 4,
        aim: 48,
        power: 60,
        min_accuracy: 60,
        price: 38828,
        enchant_id: 519
    }
}, 1);

item_base[130] = createObject({
    b_i: 130,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 24,
        price: 17600,
        aim: 14,
        power: 14,
        enchant_id: 1111
    }
}, 1);

item_base[131] = createObject({
    b_i: 131,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 24,
        price: 13600,
        aim: 13,
        power: 13,
        enchant_id: 1091
    }
}, 1);

item_base[132] = createObject({
    b_i: 132,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Sapphire Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 15
        },
        slot: 2,
        armor: 82,
        min_defense: 50,
        price: 127372
    }
}, 1);

item_base[133] = createObject({
    b_i: 133,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Paladin Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 6
        },
        slot: 0,
        armor: 42,
        min_defense: 50,
        price: 23810
    }
}, 1);

item_base[134] = createObject({
    b_i: 134,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dracula Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 14
        },
        slot: 4,
        aim: 35,
        power: 58,
        min_accuracy: 45,
        price: 27918,
        enchant_id: 520
    }
}, 1);

item_base[135] = createObject({
    b_i: 135,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Behemoth Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 22
        },
        slot: 4,
        aim: 55,
        power: 55,
        min_accuracy: 50,
        price: 57828,
        enchant_id: 521
    }
}, 1);

item_base[136] = createObject({
    b_i: 136,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 37
        },
        slot: 4,
        disable_slot: 3,
        aim: 102,
        power: 34,
        min_accuracy: 40,
        price: 13286
    }
}, 1);

item_base[137] = createObject({
    b_i: 137,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel War Pike",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 17
        },
        slot: 4,
        aim: 58,
        power: 46,
        min_accuracy: 40,
        price: 11748
    }
}, 1);

item_base[138] = createObject({
    b_i: 138,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Sapphire Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 15
        },
        slot: 4,
        aim: 25,
        power: 61,
        min_accuracy: 50,
        price: 43200,
        enchant_id: 538
    }
}, 1);

item_base[139] = createObject({
    b_i: 139,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Battle Hammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 23
        },
        slot: 4,
        disable_slot: 3,
        aim: 20,
        power: 92,
        min_accuracy: 40,
        price: 14062,
        enchant_id: 522
    }
}, 1);

item_base[140] = createObject({
    b_i: 140,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 24
        },
        slot: 4,
        disable_slot: 3,
        aim: 35,
        power: 59,
        min_accuracy: 40,
        price: 10584,
        enchant_id: 523
    }
}, 1);

item_base[141] = createObject({
    b_i: 141,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Broad Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 25
        },
        slot: 4,
        aim: 15,
        power: 41,
        min_accuracy: 40,
        price: 7938,
        enchant_id: 524
    }
}, 1);

item_base[142] = createObject({
    b_i: 142,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 26
        },
        slot: 4,
        aim: 20,
        power: 29,
        min_accuracy: 40,
        price: 6124,
        enchant_id: 525
    }
}, 1);

item_base[143] = createObject({
    b_i: 143,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Scimitar",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 27
        },
        slot: 4,
        aim: 23,
        power: 43,
        min_accuracy: 40,
        price: 11794,
        enchant_id: 526
    }
}, 1);

item_base[144] = createObject({
    b_i: 144,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 28
        },
        slot: 4,
        disable_slot: 3,
        aim: 70,
        power: 27,
        min_accuracy: 40,
        price: 7182,
        enchant_id: 136
    }
}, 1);

item_base[145] = createObject({
    b_i: 145,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Lance",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 29
        },
        slot: 4,
        aim: 20,
        power: 52,
        min_accuracy: 40,
        price: 20428,
        enchant_id: 527
    }
}, 1);

item_base[146] = createObject({
    b_i: 146,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel War Pike",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 16
        },
        slot: 4,
        aim: 40,
        power: 37,
        min_accuracy: 40,
        price: 6350,
        enchant_id: 137
    }
}, 1);

item_base[147] = createObject({
    b_i: 147,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Saw Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 30
        },
        slot: 4,
        aim: 30,
        power: 18,
        min_accuracy: 40,
        price: 6700,
        enchant_id: 528
    }
}, 1);

item_base[148] = createObject({
    b_i: 148,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Halberd",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 18
        },
        slot: 4,
        disable_slot: 3,
        aim: 50,
        power: 55,
        min_accuracy: 40,
        price: 13306,
        enchant_id: 529
    }
}, 1);

item_base[149] = createObject({
    b_i: 149,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Steel Giant Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 31
        },
        slot: 4,
        disable_slot: 3,
        aim: 5,
        power: 105,
        min_accuracy: 40,
        price: 21772,
        enchant_id: 530
    }
}, 1);

item_base[150] = createObject({
    b_i: 150,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Blood Giant Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 32
        },
        slot: 4,
        disable_slot: 3,
        aim: 30,
        power: 66,
        min_accuracy: 40,
        price: 23382,
        enchant_id: 531
    }
}, 1);

item_base[151] = createObject({
    b_i: 151,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Overlord Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 33
        },
        slot: 4,
        aim: 30,
        power: 75,
        min_accuracy: 60,
        price: 68720
    }
}, 1);

item_base[152] = createObject({
    b_i: 152,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Steel Woodcutter's Axe",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 47
        },
        slot: 4,
        min_woodcutting: 40,
        price: 10822
    }
}, 1);

item_base[153] = createObject({
    b_i: 153,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            body: 25
        },
        slot: 2,
        armor: 72,
        min_defense: 55,
        price: 73820
    }
}, 1);

item_base[154] = createObject({
    b_i: 154,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            body: 22
        },
        slot: 2,
        armor: 50,
        min_defense: 55,
        price: 32882,
        enchant_id: 558
    }
}, 1);

item_base[155] = createObject({
    b_i: 155,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            boots: 5
        },
        slot: 6,
        armor: 30,
        min_defense: 55,
        speed: 20,
        aim: 20,
        price: 126324
    }
}, 1);

item_base[156] = createObject({
    b_i: 156,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 32,
        aim: 25,
        min_defense: 55,
        price: 88e3
    }
}, 1);

item_base[157] = createObject({
    b_i: 157,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Flame Phoenix Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 16
        },
        slot: 2,
        armor: 80,
        min_defense: 60,
        price: 132920,
        enchant_id: 644
    }
}, 1);

item_base[158] = createObject({
    b_i: 158,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            body: 20
        },
        slot: 2,
        armor: 115,
        min_defense: 80,
        price: 382712,
        enchant_id: 646
    }
}, 1);

item_base[159] = createObject({
    b_i: 159,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Dragon Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 18
        },
        slot: 2,
        armor: 93,
        min_defense: 70,
        price: 150796,
        enchant_id: 647
    }
}, 1);

item_base[160] = createObject({
    b_i: 160,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Amethyst Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 19
        },
        slot: 2,
        armor: 105,
        min_defense: 70,
        price: 236828,
        enchant_id: 645
    }
}, 1);

item_base[161] = createObject({
    b_i: 161,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Viking Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 8
        },
        slot: 3,
        armor: 64,
        min_defense: 50,
        price: 41820,
        enchant_id: 162
    }
}, 1);

item_base[162] = createObject({
    b_i: 162,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Viking Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 9
        },
        slot: 3,
        armor: 80,
        min_defense: 50,
        price: 77368
    }
}, 1);

item_base[163] = createObject({
    b_i: 163,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Paladin Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 10
        },
        slot: 3,
        armor: 78,
        min_defense: 60,
        price: 62810,
        enchant_id: 164
    }
}, 1);

item_base[164] = createObject({
    b_i: 164,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Paladin Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 11
        },
        slot: 3,
        armor: 97,
        min_defense: 60,
        price: 116198
    }
}, 1);

item_base[165] = createObject({
    b_i: 165,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 12
        },
        slot: 3,
        armor: 95,
        min_defense: 55,
        price: 104926
    }
}, 1);

item_base[166] = createObject({
    b_i: 166,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Corrupted Steel Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 2
        },
        slot: 3,
        armor: 52,
        min_defense: 40,
        price: 14200
    }
}, 1);

item_base[167] = createObject({
    b_i: 167,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Royal Defender",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 13
        },
        slot: 3,
        armor: 110,
        min_defense: 70,
        price: 127302,
        enchant_id: 168
    }
}, 1);

item_base[168] = createObject({
    b_i: 168,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Royal Defender",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 5
        },
        slot: 3,
        armor: 137,
        min_defense: 70,
        price: 235508
    }
}, 1);

item_base[169] = createObject({
    b_i: 169,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Anti Dragon Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 14
        },
        slot: 3,
        armor: 130,
        min_defense: 80,
        price: 382016,
        enchant_id: 170
    }
}, 1);

item_base[170] = createObject({
    b_i: 170,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Anti Dragon Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 15
        },
        slot: 3,
        armor: 162,
        min_defense: 80,
        price: 706730
    }
}, 1);

item_base[171] = createObject({
    b_i: 171,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragon Soul Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 16
        },
        slot: 3,
        armor: 150,
        min_defense: 90,
        price: 493826,
        enchant_id: 172
    }
}, 1);

item_base[172] = createObject({
    b_i: 172,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragon Soul Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 17
        },
        slot: 3,
        armor: 187,
        min_defense: 90,
        price: 913578
    }
}, 1);

item_base[173] = createObject({
    b_i: 173,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Medium Weapon Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5e4
    }
}, 1);

item_base[174] = createObject({
    b_i: 174,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "High Weapon Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 15e4
    }
}, 1);

item_base[175] = createObject({
    b_i: 175,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Superior Weapon Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e5
    }
}, 1);

item_base[176] = createObject({
    b_i: 176,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Low Armor Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e3
    }
}, 1);

item_base[177] = createObject({
    b_i: 177,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Medium Armor Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5e4
    }
}, 1);

item_base[178] = createObject({
    b_i: 178,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "High Armor Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 15e4
    }
}, 1);

item_base[179] = createObject({
    b_i: 179,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Superior Armor Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e5
    }
}, 1);

item_base[180] = createObject({
    b_i: 180,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Silver Crown",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 7
        },
        slot: 0,
        armor: 50,
        min_defense: 60,
        price: 94028
    }
}, 1);

item_base[181] = createObject({
    b_i: 181,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Golden Crown",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 8
        },
        slot: 0,
        armor: 68,
        min_defense: 70,
        price: 189629
    }
}, 1);

item_base[182] = createObject({
    b_i: 182,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "King's Crown",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 9
        },
        slot: 0,
        armor: 70,
        min_defense: 80,
        price: 382930
    }
}, 1);

item_base[183] = createObject({
    b_i: 183,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Landlord Crown",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 10
        },
        slot: 0,
        armor: 80,
        min_defense: 90,
        price: 482038
    }
}, 1);

item_base[184] = createObject({
    b_i: 184,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Gold Chunk",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 25,
        price: 650
    }
}, 1);

item_base[185] = createObject({
    b_i: 185,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Silver Chunk",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 10,
        price: 350
    }
}, 1);

item_base[186] = createObject({
    b_i: 186,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Coal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 40,
        price: 500
    }
}, 1);

item_base[187] = createObject({
    b_i: 187,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sand",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 1,
        price: 30
    }
}, 1);

item_base[188] = createObject({
    b_i: 188,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 11
        },
        slot: 0,
        armor: 23,
        min_defense: 40,
        price: 6988
    }
}, 1);

item_base[189] = createObject({
    b_i: 189,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Full Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 12
        },
        slot: 0,
        armor: 35,
        min_defense: 40,
        price: 15052
    }
}, 1);

item_base[190] = createObject({
    b_i: 190,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            body: 26
        },
        slot: 2,
        armor: 55,
        min_defense: 40,
        price: 20564,
        enchant_id: 192
    }
}, 1);

item_base[191] = createObject({
    b_i: 191,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            body: 23
        },
        slot: 2,
        armor: 32,
        min_defense: 40,
        price: 13170,
        enchant_id: 557
    }
}, 1);

item_base[192] = createObject({
    b_i: 192,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Steel Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            body: 17
        },
        slot: 2,
        armor: 68,
        min_defense: 40,
        price: 38042
    }
}, 1);

item_base[193] = createObject({
    b_i: 193,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Steel Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 18
        },
        slot: 3,
        armor: 52,
        min_defense: 40,
        price: 16666,
        enchant_id: 575
    }
}, 1);

item_base[194] = createObject({
    b_i: 194,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Diamond",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 16,
        price: 1e4
    }
}, 1);

item_base[195] = createObject({
    b_i: 195,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Diamond",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 16,
        price: 8500
    }
}, 1);

item_base[196] = createObject({
    b_i: 196,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Ruby",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 14,
        price: 7e3
    }
}, 1);

item_base[197] = createObject({
    b_i: 197,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Ruby",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 14,
        price: 5e3
    }
}, 1);

item_base[198] = createObject({
    b_i: 198,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Emerald",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 12,
        price: 4e3
    }
}, 1);

item_base[199] = createObject({
    b_i: 199,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Emerald",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 12,
        price: 3e3
    }
}, 1);

item_base[200] = createObject({
    b_i: 200,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Sapphire",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 10,
        price: 2700
    }
}, 1);

item_base[201] = createObject({
    b_i: 201,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Sapphire",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 10,
        price: 1800
    }
}, 1);

item_base[202] = createObject({
    b_i: 202,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Gold Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 25,
        price: 1e3
    }
}, 1);

item_base[203] = createObject({
    b_i: 203,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Silver Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 10,
        price: 700
    }
}, 1);

item_base[204] = createObject({
    b_i: 204,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Yellow Leaf",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 2,
        price: 20
    }
}, 1);

item_base[205] = createObject({
    b_i: 205,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Liquorice",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 7,
        price: 50
    }
}, 1);

item_base[206] = createObject({
    b_i: 206,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Nori Seaweed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 52,
        price: 450
    }
}, 1);

item_base[207] = createObject({
    b_i: 207,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Fang",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 42,
        price: 350
    }
}, 1);

item_base[208] = createObject({
    b_i: 208,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bronze Horn",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 25,
        price: 4e3
    }
}, 1);

item_base[209] = createObject({
    b_i: 209,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blueberry",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 48
    }
}, 1);

item_base[210] = createObject({
    b_i: 210,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Emerald Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 60,
        price: 1400
    }
}, 1);

item_base[211] = createObject({
    b_i: 211,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Ice Beak",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 10
    }
}, 1);

item_base[212] = createObject({
    b_i: 212,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blue Leaf",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 44,
        price: 400
    }
}, 1);

item_base[213] = createObject({
    b_i: 213,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Kombu Seaweed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 80
    }
}, 1);

item_base[214] = createObject({
    b_i: 214,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dulse Seaweed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 40,
        price: 600
    }
}, 1);

item_base[215] = createObject({
    b_i: 215,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Vampire Fang",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 10,
        price: 150
    }
}, 1);

item_base[216] = createObject({
    b_i: 216,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sapphire Horn",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 5e3
    }
}, 1);

item_base[217] = createObject({
    b_i: 217,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sapphire Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 90,
        price: 2500
    }
}, 1);

item_base[218] = createObject({
    b_i: 218,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Amethyst Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 7e3
    }
}, 1);

item_base[219] = createObject({
    b_i: 219,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Beak",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 30,
        price: 1e4
    }
}, 1);

item_base[220] = createObject({
    b_i: 220,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Green Leaf",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 10
    }
}, 1);

item_base[221] = createObject({
    b_i: 221,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blood Herb",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 30,
        price: 800
    }
}, 1);

item_base[222] = createObject({
    b_i: 222,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Herb",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 2e3
    }
}, 1);

item_base[223] = createObject({
    b_i: 223,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Horn",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 40,
        price: 8800
    }
}, 1);

item_base[224] = createObject({
    b_i: 224,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Ruby Horn",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 70,
        price: 15e3
    }
}, 1);

item_base[225] = createObject({
    b_i: 225,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Yellow Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 40,
        price: 4e3
    }
}, 1);

item_base[226] = createObject({
    b_i: 226,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Ruby Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 105,
        price: 7500
    }
}, 1);

item_base[227] = createObject({
    b_i: 227,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Russula",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 10,
        price: 80
    }
}, 1);

item_base[228] = createObject({
    b_i: 228,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Old Leaf",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 20,
        price: 130
    }
}, 1);

item_base[229] = createObject({
    b_i: 229,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragon Herb",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 84,
        price: 4e3
    }
}, 1);

item_base[230] = createObject({
    b_i: 230,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Orc Fang",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 20,
        price: 300
    }
}, 1);

item_base[231] = createObject({
    b_i: 231,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Emerald Horn",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 30,
        price: 2600
    }
}, 1);

item_base[232] = createObject({
    b_i: 232,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Red Berries",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 25,
        price: 150
    }
}, 1);

item_base[233] = createObject({
    b_i: 233,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dust",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 54,
        price: 500
    }
}, 1);

item_base[234] = createObject({
    b_i: 234,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sharp Beak",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 60
    }
}, 1);

item_base[235] = createObject({
    b_i: 235,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Black Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 40
    }
}, 1);

item_base[236] = createObject({
    b_i: 236,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Magic Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 20,
        price: 200
    }
}, 1);

item_base[237] = createObject({
    b_i: 237,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Brown Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 25,
        price: 220
    }
}, 1);

item_base[238] = createObject({
    b_i: 238,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 35,
        price: 300
    }
}, 1);

item_base[239] = createObject({
    b_i: 239,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Silver Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 30,
        price: 450
    }
}, 1);

item_base[240] = createObject({
    b_i: 240,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Moldy Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 64,
        price: 350
    }
}, 1);

item_base[241] = createObject({
    b_i: 241,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Glowing Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 500
    }
}, 1);

item_base[242] = createObject({
    b_i: 242,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Orange Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 47,
        price: 600
    }
}, 1);

item_base[243] = createObject({
    b_i: 243,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Poisoned Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 55,
        price: 1e3
    }
}, 1);

item_base[244] = createObject({
    b_i: 244,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Large Fire Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 87,
        price: 2e3
    }
}, 1);

item_base[245] = createObject({
    b_i: 245,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fire Shroom",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 60,
        price: 1400
    }
}, 1);

item_base[246] = createObject({
    b_i: 246,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Empty Large Vial",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 400
    }
}, 1);

item_base[247] = createObject({
    b_i: 247,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Empty Medium Vial",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 30,
        price: 200
    }
}, 1);

item_base[248] = createObject({
    b_i: 248,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Empty Superior Vial",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 65,
        price: 750
    }
}, 1);

item_base[249] = createObject({
    b_i: 249,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Empty Small Vial",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 50
    }
}, 1);

item_base[250] = createObject({
    b_i: 250,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sapphire Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 20,
        price: 600
    }
}, 1);

item_base[251] = createObject({
    b_i: 251,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Silver Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 30,
        price: 900
    }
}, 1);

item_base[252] = createObject({
    b_i: 252,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Ruby Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 40,
        price: 4200
    }
}, 1);

item_base[253] = createObject({
    b_i: 253,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 2500
    }
}, 1);

item_base[254] = createObject({
    b_i: 254,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Emerald Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 60,
        price: 2200
    }
}, 1);

item_base[255] = createObject({
    b_i: 255,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Elemental Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 70,
        price: 8200
    }
}, 1);

item_base[256] = createObject({
    b_i: 256,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "King Elemental Dragon Scale",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 85,
        price: 9500
    }
}, 1);

item_base[257] = createObject({
    b_i: 257,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Egg",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 9e4
    }
}, 1);

item_base[258] = createObject({
    b_i: 258,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bronze Egg",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 20,
        price: 12e3
    }
}, 1);

item_base[259] = createObject({
    b_i: 259,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Leather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 450
    }
}, 1);

item_base[260] = createObject({
    b_i: 260,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Animal Leather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 50,
        price: 400
    }
}, 1);

item_base[261] = createObject({
    b_i: 261,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Frozen Leather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 450
    }
}, 1);

item_base[262] = createObject({
    b_i: 262,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Elemental Egg",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 70,
        price: 13e4
    }
}, 1);

item_base[263] = createObject({
    b_i: 263,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragon Egg",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 5,
        price: 7e3
    }
}, 1);

item_base[264] = createObject({
    b_i: 264,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Orc Leather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 5,
        price: 40
    }
}, 1);

item_base[265] = createObject({
    b_i: 265,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cotton Fabric",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 1,
        price: 300
    }
}, 1);

item_base[266] = createObject({
    b_i: 266,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bamboo Fabric",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 20,
        price: 896
    }
}, 1);

item_base[267] = createObject({
    b_i: 267,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragon Eye",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 82,
        price: 1500
    }
}, 1);

item_base[268] = createObject({
    b_i: 268,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Eye",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 400
    }
}, 1);

item_base[269] = createObject({
    b_i: 269,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Undead Eye",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 58,
        price: 550
    }
}, 1);

item_base[270] = createObject({
    b_i: 270,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bones",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 40
    }
}, 1);

item_base[271] = createObject({
    b_i: 271,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Human Bones",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 22,
        price: 80
    }
}, 1);

item_base[272] = createObject({
    b_i: 272,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Bones",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 5,
        price: 20
    }
}, 1);

item_base[273] = createObject({
    b_i: 273,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dwarf Bones",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 35,
        price: 60
    }
}, 1);

item_base[274] = createObject({
    b_i: 274,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Skull",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 7,
        price: 50
    }
}, 1);

item_base[275] = createObject({
    b_i: 275,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Reptile Eye",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 55,
        price: 700
    }
}, 1);

item_base[276] = createObject({
    b_i: 276,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Behemoth Eye",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 70,
        price: 900
    }
}, 1);

item_base[277] = createObject({
    b_i: 277,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fir Seed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 5,
        price: 20
    }
}, 1);

item_base[278] = createObject({
    b_i: 278,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Willow Seed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 80
    }
}, 1);

item_base[279] = createObject({
    b_i: 279,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Oak Chestnut",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 160
    }
}, 1);

item_base[280] = createObject({
    b_i: 280,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Palm Seed",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 55,
        price: 280
    }
}, 1);

item_base[281] = createObject({
    b_i: 281,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Grain",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 20
    }
}, 1);

item_base[282] = createObject({
    b_i: 282,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Grass",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 1,
        price: 10
    }
}, 1);

item_base[283] = createObject({
    b_i: 283,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Yarrow",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 15,
        price: 200
    }
}, 1);

item_base[284] = createObject({
    b_i: 284,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Oregano Leaf",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 25,
        price: 300
    }
}, 1);

item_base[285] = createObject({
    b_i: 285,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Aconitum",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 45,
        price: 580
    }
}, 1);

item_base[286] = createObject({
    b_i: 286,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Spade",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 160
        },
        slot: 4,
        min_mining: 1,
        price: 140
    }
}, 1);

item_base[287] = createObject({
    b_i: 287,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Small Vial Of Water",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 4,
        min_alchemy: 1,
        price: 56
    }
}, 1);

item_base[288] = createObject({
    b_i: 288,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Medium Vial Of Water",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 4,
        min_alchemy: 30,
        price: 210
    }
}, 1);

item_base[289] = createObject({
    b_i: 289,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Large Vial Of Water",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 4,
        min_alchemy: 50,
        price: 420
    }
}, 1);

item_base[290] = createObject({
    b_i: 290,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Superior Vial Of Water",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 4,
        min_alchemy: 65,
        price: 780
    }
}, 1);

item_base[291] = createObject({
    b_i: 291,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Steel Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 40,
        price: 960
    }
}, 1);

item_base[292] = createObject({
    b_i: 292,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Ring Mould",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 1,
        price: 54
    }
}, 1);

item_base[293] = createObject({
    b_i: 293,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Necklace Mould",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 5,
        price: 70
    }
}, 1);

item_base[294] = createObject({
    b_i: 294,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Iron Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 8,
        price: 150,
        armor: 2
    }
}, 1);

item_base[295] = createObject({
    b_i: 295,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Iron Amulet",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 450,
        armor: 3
    }
}, 1);

item_base[296] = createObject({
    b_i: 296,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Willow Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 30,
        price: 120
    }
}, 1);

item_base[297] = createObject({
    b_i: 297,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Chisel",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 1,
        price: 300
    }
}, 1);

item_base[298] = createObject({
    b_i: 298,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 22,
        price: 9600,
        magic: 12,
        enchant_id: 1090
    }
}, 1);

item_base[299] = createObject({
    b_i: 299,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 12,
        price: 7900,
        magic: 10,
        enchant_id: 1106
    }
}, 1);

item_base[300] = createObject({
    b_i: 300,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 16,
        price: 17900,
        magic: 12,
        armor: 12,
        aim: 12,
        power: 12,
        enchant_id: 1088
    }
}, 1);

item_base[301] = createObject({
    b_i: 301,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 26,
        price: 24600,
        magic: 16,
        armor: 16,
        aim: 16,
        power: 16,
        enchant_id: 1112
    }
}, 1);

item_base[302] = createObject({
    b_i: 302,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 8,
        price: 450,
        armor: 2,
        aim: 4
    }
}, 1);

item_base[303] = createObject({
    b_i: 303,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 950,
        aim: 3,
        power: 3
    }
}, 1);

item_base[304] = createObject({
    b_i: 304,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 8
    },
    params: {
        wearable: !1,
        boost_accuracy: .05,
        price: 234
    }
}, 1);

item_base[305] = createObject({
    b_i: 305,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Strength",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 8
    },
    params: {
        wearable: !1,
        boost_strength: .05,
        price: 274
    }
}, 1);

item_base[306] = createObject({
    b_i: 306,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Fishing",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 8
    },
    params: {
        wearable: !1,
        boost_fishing: .05,
        price: 352
    }
}, 1);

item_base[307] = createObject({
    b_i: 307,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Mining",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 8
    },
    params: {
        wearable: !1,
        boost_mining: .05,
        price: 390
    }
}, 1);

item_base[308] = createObject({
    b_i: 308,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Cooking",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 9
    },
    params: {
        wearable: !1,
        boost_cooking: .05,
        price: 508
    }
}, 1);

item_base[309] = createObject({
    b_i: 309,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Defense",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 9
    },
    params: {
        wearable: !1,
        boost_defense: .05,
        price: 352
    }
}, 1);

item_base[310] = createObject({
    b_i: 310,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Forging",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 9
    },
    params: {
        wearable: !1,
        boost_forging: .05,
        price: 1366
    }
}, 1);

item_base[311] = createObject({
    b_i: 311,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Woodcutting",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 8
    },
    params: {
        wearable: !1,
        boost_woodcutting: .05,
        price: 1032
    }
}, 1);

item_base[312] = createObject({
    b_i: 312,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Jewelry",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 9
    },
    params: {
        wearable: !1,
        boost_jewelry: .05,
        price: 748
    }
}, 1);

item_base[313] = createObject({
    b_i: 313,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Oak Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 15,
        price: 60
    }
}, 1);

item_base[314] = createObject({
    b_i: 314,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cactus Wood",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 5,
        price: 30
    }
}, 1);

item_base[315] = createObject({
    b_i: 315,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Cooking",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 6
    },
    params: {
        wearable: !1,
        boost_cooking: .1,
        price: 2374
    }
}, 1);

item_base[316] = createObject({
    b_i: 316,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Mining",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 0
    },
    params: {
        wearable: !1,
        boost_mining: .1,
        price: 2240
    }
}, 1);

item_base[317] = createObject({
    b_i: 317,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Fishing",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 1
    },
    params: {
        wearable: !1,
        boost_fishing: .1,
        price: 2576
    }
}, 1);

item_base[318] = createObject({
    b_i: 318,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Woodcutting",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 2
    },
    params: {
        wearable: !1,
        boost_woodcutting: .1,
        price: 2912
    }
}, 1);

item_base[319] = createObject({
    b_i: 319,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Defense",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 3
    },
    params: {
        wearable: !1,
        boost_defense: .1,
        price: 3248
    }
}, 1);

item_base[320] = createObject({
    b_i: 320,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Strength",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 4
    },
    params: {
        wearable: !1,
        boost_strength: .1,
        price: 3808
    }
}, 1);

item_base[321] = createObject({
    b_i: 321,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 7
    },
    params: {
        wearable: !1,
        boost_accuracy: .1,
        price: 3920
    }
}, 1);

item_base[322] = createObject({
    b_i: 322,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Berserker",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 5
    },
    params: {
        wearable: !1,
        boost_strength: .1,
        boost_accuracy: .1,
        price: 14280
    }
}, 1);

item_base[323] = createObject({
    b_i: 323,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Cooking",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 7
    },
    params: {
        wearable: !1,
        boost_cooking: .15,
        price: 6120
    }
}, 1);

item_base[324] = createObject({
    b_i: 324,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Mining",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 7
    },
    params: {
        wearable: !1,
        boost_mining: .15,
        price: 6630
    }
}, 1);

item_base[325] = createObject({
    b_i: 325,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Fishing",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 7
    },
    params: {
        wearable: !1,
        boost_fishing: .15,
        price: 7140
    }
}, 1);

item_base[326] = createObject({
    b_i: 326,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Woodcutting",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 7
    },
    params: {
        wearable: !1,
        boost_woodcutting: .15,
        price: 6630
    }
}, 1);

item_base[327] = createObject({
    b_i: 327,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Defense",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 6
    },
    params: {
        wearable: !1,
        boost_defense: .15,
        price: 7650
    }
}, 1);

item_base[328] = createObject({
    b_i: 328,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Strength",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 6
    },
    params: {
        wearable: !1,
        boost_strength: .15,
        price: 9180
    }
}, 1);

item_base[329] = createObject({
    b_i: 329,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 7
    },
    params: {
        wearable: !1,
        boost_accuracy: .15,
        price: 6630
    }
}, 1);

item_base[330] = createObject({
    b_i: 330,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Cooking",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 7
    },
    params: {
        wearable: !1,
        boost_cooking: .2,
        price: 11968
    }
}, 1);

item_base[331] = createObject({
    b_i: 331,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Mining",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 7
    },
    params: {
        wearable: !1,
        boost_mining: .2,
        price: 14960
    }
}, 1);

item_base[332] = createObject({
    b_i: 332,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Fishing",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 7
    },
    params: {
        wearable: !1,
        boost_fishing: .2,
        price: 8160
    }
}, 1);

item_base[333] = createObject({
    b_i: 333,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Woodcutting",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 7
    },
    params: {
        wearable: !1,
        boost_woodcutting: .2,
        price: 10880
    }
}, 1);

item_base[334] = createObject({
    b_i: 334,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Defense",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 8
    },
    params: {
        wearable: !1,
        boost_defense: .2,
        price: 17680
    }
}, 1);

item_base[335] = createObject({
    b_i: 335,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Strength",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 9
    },
    params: {
        wearable: !1,
        boost_strength: .2,
        price: 31280
    }
}, 1);

item_base[336] = createObject({
    b_i: 336,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 7
    },
    params: {
        wearable: !1,
        boost_accuracy: .2,
        price: 23120
    }
}, 1);

item_base[337] = createObject({
    b_i: 337,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior God Potion",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 9
    },
    params: {
        wearable: !1,
        boost_defense: .2,
        boost_accuracy: .2,
        price: 44880
    }
}, 1);

item_base[338] = createObject({
    b_i: 338,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Satan Potion",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 10
    },
    params: {
        wearable: !1,
        boost_accuracy: .2,
        boost_strength: .2,
        price: 58480
    }
}, 1);

item_base[339] = createObject({
    b_i: 339,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 23,
        speed: 12,
        enchant_id: 1590,
        min_defense: 40,
        price: 13708
    }
}, 1);

item_base[340] = createObject({
    b_i: 340,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            boots: 9
        },
        slot: 6,
        armor: 32,
        speed: 15,
        min_defense: 50,
        price: 30196,
        enchant_id: 341
    }
}, 1);

item_base[341] = createObject({
    b_i: 341,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Sapphire Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            boots: 10
        },
        slot: 6,
        armor: 40,
        aim: 10,
        speed: 17,
        min_defense: 50,
        price: 55860
    }
}, 1);

item_base[342] = createObject({
    b_i: 342,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Emerald Dragon Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 7
        },
        slot: 6,
        armor: 44,
        speed: 18,
        min_defense: 60,
        price: 84864,
        enchant_id: 343
    }
}, 1);

item_base[343] = createObject({
    b_i: 343,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Emerald Dragon Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 8
        },
        slot: 6,
        armor: 55,
        aim: 15,
        speed: 22,
        min_defense: 60,
        price: 156998
    }
}, 1);

item_base[344] = createObject({
    b_i: 344,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 52,
        speed: 24,
        min_defense: 70,
        price: 139876,
        enchant_id: 345
    }
}, 1);

item_base[345] = createObject({
    b_i: 345,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ruby Dragon Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 12
        },
        slot: 6,
        armor: 65,
        aim: 20,
        speed: 30,
        min_defense: 70,
        price: 258770
    }
}, 1);

item_base[346] = createObject({
    b_i: 346,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Devil Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            cape: 3
        },
        slot: 1,
        armor: 25,
        power: 10,
        aim: 10,
        min_defense: 10,
        enchant_id: 1283,
        price: 39200
    }
}, 1);

item_base[347] = createObject({
    b_i: 347,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dark Knight Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 13
        },
        slot: 0,
        armor: 60,
        min_defense: 65,
        price: 318270
    }
}, 1);

item_base[348] = createObject({
    b_i: 348,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dorpat Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 2
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 1e3,
        to_map: 0,
        to_i: 20,
        to_j: 20
    }
}, 1);

item_base[349] = createObject({
    b_i: 349,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Reval Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 2
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 2e3,
        to_map: 4,
        to_i: 16,
        to_j: 24
    }
}, 1);

item_base[350] = createObject({
    b_i: 350,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Whiland Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 2
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 3e3,
        to_map: 3,
        to_i: 28,
        to_j: 93
    }
}, 1);

item_base[351] = createObject({
    b_i: 351,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Rakblood Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 3
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 4e3,
        to_map: 5,
        to_i: 34,
        to_j: 68
    }
}, 1);

item_base[352] = createObject({
    b_i: 352,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Narwa Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 10
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 5e3,
        to_map: 2,
        to_i: 68,
        to_j: 37
    }
}, 1);

item_base[353] = createObject({
    b_i: 353,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Small Fire Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 20
        },
        slot: 3,
        armor: 55,
        min_defense: 10,
        no_present: !0,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 626
    }
}, 1);

item_base[354] = createObject({
    b_i: 354,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 39
        },
        slot: 4,
        aim: 25,
        power: 25,
        min_accuracy: 10,
        no_present: !0,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 539
    }
}, 1);

item_base[355] = createObject({
    b_i: 355,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 13
        },
        slot: 6,
        armor: 10,
        speed: 15,
        no_present: !0,
        min_defense: 10,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 576
    }
}, 1);

item_base[356] = createObject({
    b_i: 356,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 15
        },
        slot: 0,
        armor: 28,
        min_defense: 10,
        price: 1e4,
        no_present: !0,
        enchant_bonus: .3,
        enchant_id: 721
    }
}, 1);

item_base[357] = createObject({
    b_i: 357,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 4
        },
        slot: 1,
        armor: 25,
        min_defense: 10,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 600
    }
}, 1);

item_base[358] = createObject({
    b_i: 358,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Admin Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 16
        },
        slot: 1,
        armor: 500,
        min_defense: 10,
        price: 1,
        no_present: !0,
        no_buy: !0
    }
}, 1);

item_base[359] = createObject({
    b_i: 359,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Archangel Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            cape: 6
        },
        slot: 1,
        armor: 130,
        magic: 20,
        min_defense: 75,
        enchant_id: 1275,
        price: 184094
    }
}, 1);

item_base[360] = createObject({
    b_i: 360,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Archdevil Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            cape: 5
        },
        slot: 1,
        armor: 120,
        power: 20,
        aim: 30,
        min_strength: 80,
        enchant_id: 1265,
        price: 184094
    }
}, 1);

item_base[361] = createObject({
    b_i: 361,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Royal Knight Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 14
        },
        slot: 0,
        armor: 60,
        min_defense: 65,
        price: 318270
    }
}, 1);

item_base[362] = createObject({
    b_i: 362,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Dragon Head",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 16
        },
        slot: 0,
        armor: 48,
        min_defense: 50,
        price: 102812
    }
}, 1);

item_base[363] = createObject({
    b_i: 363,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Freezing Rapier",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 40
        },
        slot: 4,
        aim: 68,
        power: 50,
        min_accuracy: 60,
        price: 39292,
        enchant_id: 532
    }
}, 1);

item_base[364] = createObject({
    b_i: 364,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Moss Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 41
        },
        slot: 4,
        aim: 55,
        power: 94,
        min_accuracy: 70,
        price: 139230,
        enchant_id: 533
    }
}, 1);

item_base[365] = createObject({
    b_i: 365,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dragon Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 42
        },
        slot: 4,
        aim: 110,
        power: 120,
        min_accuracy: 80,
        price: 379220,
        enchant_id: 534
    }
}, 1);

item_base[366] = createObject({
    b_i: 366,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bone Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 18
        },
        slot: 0,
        armor: 17,
        min_defense: 10,
        price: 572
    }
}, 1);

item_base[367] = createObject({
    b_i: 367,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Angel Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            cape: 7
        },
        slot: 1,
        armor: 35,
        magic: 10,
        min_defense: 5,
        enchant_id: 1268,
        price: 39200
    }
}, 1);

item_base[368] = createObject({
    b_i: 368,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bone Armor",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            body: 28
        },
        slot: 2,
        armor: 29,
        min_defense: 10,
        price: 1020
    }
}, 1);

item_base[369] = createObject({
    b_i: 369,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Angel Feather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 1,
        price: 2800
    }
}, 1);

item_base[370] = createObject({
    b_i: 370,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Devil Feather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 1,
        price: 2800
    }
}, 1);

item_base[371] = createObject({
    b_i: 371,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Phoenix Feather",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 50,
        price: 25e3
    }
}, 1);

item_base[372] = createObject({
    b_i: 372,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Platinum Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 60,
        price: 1800
    }
}, 1);

item_base[373] = createObject({
    b_i: 373,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Platinum Chunk",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 60,
        price: 1e3
    }
}, 1);

item_base[374] = createObject({
    b_i: 374,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 8,
        price: 2800,
        armor: 6,
        aim: 6
    }
}, 1);

item_base[375] = createObject({
    b_i: 375,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 25600,
        armor: 30,
        enchant_id: 1098
    }
}, 1);

item_base[376] = createObject({
    b_i: 376,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 55,
        price: 35200,
        magic: 30,
        enchant_id: 1099
    }
}, 1);

item_base[377] = createObject({
    b_i: 377,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 51200,
        aim: 34,
        power: 34,
        enchant_id: 1100
    }
}, 1);

item_base[378] = createObject({
    b_i: 378,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 65,
        price: 79200,
        magic: 30,
        armor: 42,
        aim: 42,
        power: 42,
        enchant_id: 1101
    }
}, 1);

item_base[379] = createObject({
    b_i: 379,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 5800,
        armor: 6,
        aim: 6
    }
}, 1);

item_base[380] = createObject({
    b_i: 380,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        price: 44800,
        armor: 40,
        enchant_id: 1118
    }
}, 1);

item_base[381] = createObject({
    b_i: 381,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        price: 83200,
        aim: 46,
        power: 46,
        enchant_id: 1120
    }
}, 1);

item_base[382] = createObject({
    b_i: 382,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 55,
        price: 59200,
        magic: 40,
        enchant_id: 1119
    }
}, 1);

item_base[383] = createObject({
    b_i: 383,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Azure Ore",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 65,
        price: 600
    }
}, 1);

item_base[384] = createObject({
    b_i: 384,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Azurite Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 65,
        price: 3600
    }
}, 1);

item_base[385] = createObject({
    b_i: 385,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Amethyst",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 56,
        price: 16e3
    }
}, 1);

item_base[386] = createObject({
    b_i: 386,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Amethyst",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 56,
        price: 12e3
    }
}, 1);

item_base[387] = createObject({
    b_i: 387,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Black Opal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 85,
        price: 2e4
    }
}, 1);

item_base[388] = createObject({
    b_i: 388,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Black Opal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 85,
        price: 17e3
    }
}, 1);

item_base[389] = createObject({
    b_i: 389,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Jadeite",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 85,
        price: 25e3
    }
}, 1);

item_base[390] = createObject({
    b_i: 390,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Jadeite",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 90,
        price: 22e3
    }
}, 1);

item_base[391] = createObject({
    b_i: 391,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Black Opal Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 75,
        price: 212800,
        magic: 35,
        armor: 50,
        aim: 50,
        power: 50,
        enchant_id: 1103
    }
}, 1);

item_base[392] = createObject({
    b_i: 392,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Jadeite Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 585e3,
        min_health: 80,
        magic: 58,
        armor: 78,
        aim: 78,
        power: 78,
        enchant_id: 1124
    }
}, 1);

item_base[393] = createObject({
    b_i: 393,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Sapphire Halberd",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 43
        },
        slot: 4,
        disable_slot: 3,
        aim: 54,
        power: 82,
        min_accuracy: 50,
        price: 77010,
        enchant_id: 535
    }
}, 1);

item_base[394] = createObject({
    b_i: 394,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Sapphire Barbarian Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 44
        },
        slot: 4,
        disable_slot: 3,
        aim: 39,
        power: 103,
        min_accuracy: 50,
        price: 67830,
        enchant_id: 536
    }
}, 1);

item_base[395] = createObject({
    b_i: 395,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 65,
        price: 125200,
        magic: 45,
        armor: 58,
        aim: 58,
        power: 58,
        enchant_id: 1121
    }
}, 1);

item_base[396] = createObject({
    b_i: 396,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Broken Slayer Sword Piece 1",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25e4
    }
}, 1);

item_base[397] = createObject({
    b_i: 397,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Broken Slayer Sword Piece 2",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25e4
    }
}, 1);

item_base[398] = createObject({
    b_i: 398,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Broken Slayer Sword Piece 3",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25e4
    }
}, 1);

item_base[399] = createObject({
    b_i: 399,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Broken Slayer Sword Piece 4",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25e4
    }
}, 1);

item_base[400] = createObject({
    b_i: 400,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Steel Pickaxe",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 46
        },
        slot: 4,
        min_mining: 35,
        price: 11820
    }
}, 1);

item_base[401] = createObject({
    b_i: 401,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Paladin",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 6
    },
    params: {
        wearable: !1,
        boost_defense: .1,
        boost_accuracy: .1,
        price: 11662
    }
}, 1);

item_base[402] = createObject({
    b_i: 402,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Flash Bolt",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 1,
        magic: 2,
        price: 375
    }
}, 1);

item_base[403] = createObject({
    b_i: 403,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Air Bolt",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 3,
        magic: 3,
        price: 585
    }
}, 1);

item_base[404] = createObject({
    b_i: 404,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Earth Bolt",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 5,
        magic: 4,
        price: 675
    }
}, 1);

item_base[405] = createObject({
    b_i: 405,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Water Bolt",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 7,
        magic: 5,
        price: 765
    }
}, 1);

item_base[406] = createObject({
    b_i: 406,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Fire Bolt",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 9,
        magic: 6,
        price: 855
    }
}, 1);

item_base[407] = createObject({
    b_i: 407,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Flash Missile",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 10,
        magic: 7,
        price: 1120
    }
}, 1);

item_base[408] = createObject({
    b_i: 408,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Air Missile",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 13,
        magic: 8,
        price: 1932
    }
}, 1);

item_base[409] = createObject({
    b_i: 409,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Water Missile",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 16,
        magic: 9,
        price: 2184
    }
}, 1);

item_base[410] = createObject({
    b_i: 410,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Earth Missile",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 16,
        magic: 10,
        price: 2912
    }
}, 1);

item_base[411] = createObject({
    b_i: 411,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Fire Missile",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 20,
        magic: 11,
        price: 3570
    }
}, 1);

item_base[412] = createObject({
    b_i: 412,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Flash Wave",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 24,
        magic: 12,
        price: 3757
    }
}, 1);

item_base[413] = createObject({
    b_i: 413,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Air Wave",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 28,
        magic: 13,
        price: 4446
    }
}, 1);

item_base[414] = createObject({
    b_i: 414,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Earth Wave",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 32,
        magic: 14,
        price: 4914
    }
}, 1);

item_base[415] = createObject({
    b_i: 415,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Water Wave",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 36,
        magic: 15,
        price: 5980
    }
}, 1);

item_base[416] = createObject({
    b_i: 416,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Fire Wave",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 40,
        magic: 16,
        price: 6500
    }
}, 1);

item_base[417] = createObject({
    b_i: 417,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Flash Blast",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 45,
        magic: 17,
        price: 5940
    }
}, 1);

item_base[418] = createObject({
    b_i: 418,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Air Blast",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 50,
        magic: 18,
        price: 6840
    }
}, 1);

item_base[419] = createObject({
    b_i: 419,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Earth Blast",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 55,
        magic: 19,
        price: 7800
    }
}, 1);

item_base[420] = createObject({
    b_i: 420,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Water Blast",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 60,
        magic: 20,
        price: 8400
    }
}, 1);

item_base[421] = createObject({
    b_i: 421,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Fire Blast",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 62,
        magic: 21,
        price: 9072
    }
}, 1);

item_base[422] = createObject({
    b_i: 422,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bronze Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 54
        },
        slot: 4,
        aim: 4,
        power: 1,
        magic: 8,
        cooldown: .01,
        min_magic: 1,
        price: 130
    }
}, 1);

item_base[423] = createObject({
    b_i: 423,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 55
        },
        slot: 4,
        aim: 7,
        power: 1,
        magic: 13,
        cooldown: .02,
        min_magic: 10,
        price: 1080
    }
}, 1);

item_base[424] = createObject({
    b_i: 424,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Sapphire Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 52
        },
        slot: 4,
        aim: 9,
        power: 1,
        magic: 24,
        cooldown: .03,
        min_magic: 15,
        min_accuracy: 1,
        price: 2072,
        enchant_id: 425
    }
}, 1);

item_base[425] = createObject({
    b_i: 425,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Sapphire Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 53
        },
        slot: 4,
        aim: 11,
        power: 1,
        magic: 30,
        cooldown: .03,
        min_magic: 15,
        min_accuracy: 1,
        price: 3834
    }
}, 1);

item_base[426] = createObject({
    b_i: 426,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 50
        },
        slot: 4,
        aim: 16,
        power: 1,
        magic: 36,
        cooldown: .04,
        min_magic: 20,
        min_accuracy: 1,
        price: 4580,
        enchant_id: 427
    }
}, 1);

item_base[427] = createObject({
    b_i: 427,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 51
        },
        slot: 4,
        aim: 20,
        power: 1,
        magic: 45,
        cooldown: .04,
        min_magic: 20,
        min_accuracy: 1,
        price: 8472
    }
}, 1);

item_base[428] = createObject({
    b_i: 428,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ruby Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 48
        },
        slot: 4,
        aim: 29,
        power: 1,
        magic: 40,
        cooldown: .06,
        min_magic: 30,
        min_accuracy: 1,
        price: 10452,
        enchant_id: 429
    }
}, 1);

item_base[429] = createObject({
    b_i: 429,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Ruby Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 49
        },
        slot: 4,
        aim: 37,
        power: 1,
        magic: 50,
        cooldown: .06,
        min_magic: 30,
        min_accuracy: 1,
        price: 19336
    }
}, 1);

item_base[430] = createObject({
    b_i: 430,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Cleric Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 56
        },
        slot: 4,
        aim: 54,
        power: 1,
        magic: 60,
        cooldown: .07,
        min_magic: 40,
        min_accuracy: 1,
        price: 24838,
        enchant_id: 431
    }
}, 1);

item_base[431] = createObject({
    b_i: 431,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Cleric Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 57
        },
        slot: 4,
        aim: 67,
        power: 1,
        magic: 75,
        cooldown: .06,
        min_magic: 40,
        min_accuracy: 1,
        price: 45950
    }
}, 1);

item_base[432] = createObject({
    b_i: 432,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Warlord Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 58
        },
        slot: 4,
        aim: 81,
        power: 1,
        magic: 81,
        cooldown: .08,
        min_magic: 55,
        min_accuracy: 1,
        price: 58292,
        enchant_id: 433
    }
}, 1);

item_base[433] = createObject({
    b_i: 433,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Warlord Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 59
        },
        slot: 4,
        aim: 101,
        power: 1,
        magic: 84,
        cooldown: .08,
        min_magic: 55,
        min_accuracy: 1,
        price: 107840
    }
}, 1);

item_base[434] = createObject({
    b_i: 434,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Wooden Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 60
        },
        slot: 4,
        aim: 3,
        power: 1,
        magic: 6,
        cooldown: .02,
        min_magic: 1,
        price: 12
    }
}, 1);

item_base[435] = createObject({
    b_i: 435,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Iron Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 61
        },
        slot: 4,
        aim: 5,
        power: 1,
        magic: 10,
        cooldown: .04,
        min_magic: 5,
        price: 1620
    }
}, 1);

item_base[436] = createObject({
    b_i: 436,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Sapphire Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 62
        },
        slot: 4,
        aim: 7,
        power: 1,
        magic: 18,
        cooldown: .06,
        min_magic: 15,
        min_accuracy: 1,
        price: 5816,
        enchant_id: 437
    }
}, 1);

item_base[437] = createObject({
    b_i: 437,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Sapphire Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 66
        },
        slot: 4,
        aim: 9,
        power: 1,
        magic: 22,
        cooldown: .06,
        min_magic: 15,
        min_accuracy: 1,
        price: 10758
    }
}, 1);

item_base[438] = createObject({
    b_i: 438,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 63
        },
        slot: 4,
        aim: 12,
        power: 1,
        magic: 27,
        cooldown: .08,
        min_magic: 25,
        min_accuracy: 1,
        price: 12600,
        enchant_id: 439
    }
}, 1);

item_base[439] = createObject({
    b_i: 439,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 67
        },
        slot: 4,
        aim: 15,
        power: 1,
        magic: 34,
        cooldown: .08,
        min_magic: 25,
        min_accuracy: 1,
        price: 23310
    }
}, 1);

item_base[440] = createObject({
    b_i: 440,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ruby Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 64
        },
        slot: 4,
        aim: 22,
        power: 1,
        magic: 30,
        cooldown: .1,
        min_magic: 35,
        min_accuracy: 1,
        price: 23932,
        enchant_id: 441
    }
}, 1);

item_base[441] = createObject({
    b_i: 441,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Ruby Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 68
        },
        slot: 4,
        aim: 27,
        power: 1,
        magic: 38,
        cooldown: .1,
        min_magic: 35,
        min_accuracy: 1,
        price: 44276
    }
}, 1);

item_base[442] = createObject({
    b_i: 442,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Amethyst Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 65
        },
        slot: 4,
        aim: 40,
        power: 1,
        magic: 45,
        cooldown: .12,
        min_magic: 55,
        min_accuracy: 1,
        price: 64728,
        enchant_id: 443
    }
}, 1);

item_base[443] = createObject({
    b_i: 443,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Amethyst Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 69
        },
        slot: 4,
        aim: 50,
        power: 1,
        magic: 56,
        cooldown: .12,
        min_magic: 55,
        min_accuracy: 1,
        price: 119746
    }
}, 1);

item_base[444] = createObject({
    b_i: 444,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Small Magic Pouch",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 10,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 49
        },
        slot: 3,
        magic_slots: 1,
        min_magic: 1,
        price: 3e3
    }
}, 1);

item_base[445] = createObject({
    b_i: 445,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Medium Magic Pouch",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 10,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 50
        },
        slot: 3,
        magic_slots: 2,
        min_magic: 30,
        price: 3e4
    }
}, 1);

item_base[446] = createObject({
    b_i: 446,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Large Magic Pouch",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 10,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 51
        },
        slot: 3,
        magic_slots: 3,
        min_magic: 60,
        price: 9e4
    }
}, 1);

item_base[447] = createObject({
    b_i: 447,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Superior Magic Pouch",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 10,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 52
        },
        slot: 3,
        magic_slots: 4,
        min_magic: 75,
        price: 4e5
    }
}, 1);

item_base[448] = createObject({
    b_i: 448,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wizard Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 20
        },
        slot: 0,
        armor: 8,
        magic: 8,
        cooldown: .01,
        min_magic: 1,
        price: 1800
    }
}, 1);

item_base[449] = createObject({
    b_i: 449,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Witch Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 21
        },
        slot: 0,
        armor: 12,
        magic: 12,
        cooldown: .01,
        min_magic: 15,
        price: 6182
    }
}, 1);

item_base[450] = createObject({
    b_i: 450,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Merlin Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 22
        },
        slot: 0,
        armor: 28,
        magic: 24,
        cooldown: .02,
        min_magic: 55,
        price: 73488
    }
}, 1);

item_base[451] = createObject({
    b_i: 451,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Grendalf Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 23
        },
        slot: 0,
        armor: 44,
        magic: 32,
        cooldown: .03,
        min_magic: 75,
        price: 169120
    }
}, 1);

item_base[452] = createObject({
    b_i: 452,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wizard Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 32
        },
        slot: 2,
        armor: 17,
        magic: 12,
        cooldown: .01,
        min_magic: 1,
        price: 3600,
        enchant_id: 877
    }
}, 1);

item_base[453] = createObject({
    b_i: 453,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Witch Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 30
        },
        slot: 2,
        armor: 23,
        magic: 18,
        cooldown: .01,
        min_magic: 15,
        price: 12364,
        enchant_id: 878
    }
}, 1);

item_base[454] = createObject({
    b_i: 454,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Grendalf Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            body: 11
        },
        slot: 2,
        armor: 71,
        magic: 48,
        cooldown: .03,
        min_magic: 75,
        price: 260480,
        enchant_id: 884
    }
}, 1);

item_base[455] = createObject({
    b_i: 455,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Battlemage Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 29
        },
        slot: 2,
        armor: 29,
        magic: 26,
        cooldown: .02,
        min_magic: 35,
        price: 57600,
        enchant_id: 880
    }
}, 1);

item_base[456] = createObject({
    b_i: 456,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Merlin Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 31
        },
        slot: 2,
        armor: 47,
        magic: 36,
        cooldown: .02,
        min_magic: 55,
        price: 117682,
        enchant_id: 882
    }
}, 1);

item_base[457] = createObject({
    b_i: 457,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Battlemage Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 19
        },
        slot: 0,
        armor: 16,
        magic: 16,
        cooldown: .01,
        min_magic: 35,
        price: 33255
    }
}, 1);

item_base[458] = createObject({
    b_i: 458,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Poison Rain",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 65,
        magic: 22,
        price: 8625
    }
}, 1);

item_base[459] = createObject({
    b_i: 459,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Blizzard",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 69,
        magic: 23,
        price: 9875
    }
}, 1);

item_base[460] = createObject({
    b_i: 460,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Zeus Rage",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 74,
        magic: 24,
        price: 12180
    }
}, 1);

item_base[461] = createObject({
    b_i: 461,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Meteor Storm",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 80,
        magic: 25,
        price: 15750
    }
}, 1);

item_base[462] = createObject({
    b_i: 462,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Cursed Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 70
        },
        slot: 4,
        aim: 83,
        power: 1,
        magic: 81,
        cooldown: .09,
        min_magic: 65,
        price: 113842
    }
}, 1);

item_base[463] = createObject({
    b_i: 463,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Zeus Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 71
        },
        slot: 4,
        aim: 93,
        power: 1,
        magic: 90,
        cooldown: .1,
        min_magic: 70,
        min_accuracy: 1,
        price: 162930,
        enchant_id: 464
    }
}, 1);

item_base[464] = createObject({
    b_i: 464,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Zeus Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 72
        },
        slot: 4,
        aim: 116,
        power: 1,
        magic: 111,
        cooldown: .1,
        min_magic: 70,
        min_accuracy: 1,
        price: 301420
    }
}, 1);

item_base[465] = createObject({
    b_i: 465,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ancients Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 73
        },
        slot: 4,
        aim: 101,
        power: 1,
        magic: 103,
        cooldown: .11,
        min_magic: 80,
        min_accuracy: 1,
        price: 271820,
        enchant_id: 466
    }
}, 1);

item_base[466] = createObject({
    b_i: 466,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Ancients Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 74
        },
        slot: 4,
        aim: 126,
        power: 1,
        magic: 128,
        cooldown: .11,
        min_magic: 80,
        min_accuracy: 1,
        price: 502867
    }
}, 1);

item_base[467] = createObject({
    b_i: 467,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flaming Sapphire Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 75
        },
        slot: 4,
        aim: 60,
        power: 1,
        magic: 50,
        cooldown: .16,
        min_magic: 65,
        price: 127318
    }
}, 1);

item_base[468] = createObject({
    b_i: 468,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flaming Emerald Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 76
        },
        slot: 4,
        aim: 62,
        power: 1,
        magic: 60,
        cooldown: .2,
        min_magic: 70,
        price: 168292
    }
}, 1);

item_base[469] = createObject({
    b_i: 469,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flaming Ruby Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 77
        },
        slot: 4,
        aim: 69,
        power: 1,
        magic: 66,
        cooldown: .24,
        min_magic: 75,
        price: 283100
    }
}, 1);

item_base[470] = createObject({
    b_i: 470,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flaming Amethyst Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 78
        },
        slot: 4,
        aim: 75,
        power: 1,
        magic: 76,
        cooldown: .28,
        min_magic: 80,
        price: 382910
    }
}, 1);

item_base[471] = createObject({
    b_i: 471,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Reaper Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 79
        },
        slot: 4,
        aim: 20,
        power: 25,
        min_accuracy: 1,
        price: 1
    }
}, 1);

item_base[472] = createObject({
    b_i: 472,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gilded Gryffin Armor",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 25
        },
        slot: 2,
        armor: 90,
        min_defense: 60,
        price: 136568
    }
}, 1);

item_base[473] = createObject({
    b_i: 473,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            pants: 10
        },
        slot: 11,
        armor: 12,
        min_defense: 1,
        price: 390,
        enchant_id: 562
    }
}, 1);

item_base[474] = createObject({
    b_i: 474,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            pants: 11
        },
        slot: 11,
        armor: 24,
        min_defense: 20,
        price: 5444,
        enchant_id: 563
    }
}, 1);

item_base[475] = createObject({
    b_i: 475,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 12
        },
        slot: 11,
        armor: 38,
        min_defense: 40,
        price: 13306,
        enchant_id: 564
    }
}, 1);

item_base[476] = createObject({
    b_i: 476,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Dragon Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 16
        },
        slot: 11,
        armor: 50,
        min_defense: 50,
        price: 37440,
        enchant_id: 565
    }
}, 1);

item_base[477] = createObject({
    b_i: 477,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Flame Phoenix Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 17
        },
        slot: 11,
        armor: 65,
        min_defense: 60,
        price: 154650,
        enchant_id: 566
    }
}, 1);

item_base[478] = createObject({
    b_i: 478,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Amethyst Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 18
        },
        slot: 11,
        armor: 71,
        min_defense: 70,
        price: 205306,
        enchant_id: 567
    }
}, 1);

item_base[479] = createObject({
    b_i: 479,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wizard Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 13
        },
        slot: 11,
        armor: 12,
        magic: 12,
        cooldown: .01,
        min_magic: 1,
        price: 2700,
        enchant_id: 868
    }
}, 1);

item_base[480] = createObject({
    b_i: 480,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Witch Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 15
        },
        slot: 11,
        armor: 18,
        magic: 18,
        cooldown: .01,
        min_magic: 15,
        price: 8064,
        enchant_id: 869
    }
}, 1);

item_base[481] = createObject({
    b_i: 481,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Battlemage robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 14
        },
        slot: 11,
        armor: 24,
        magic: 24,
        cooldown: .02,
        min_magic: 35,
        price: 33645,
        enchant_id: 871
    }
}, 1);

item_base[482] = createObject({
    b_i: 482,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Merlin Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 19
        },
        slot: 11,
        armor: 42,
        magic: 36,
        cooldown: .02,
        min_magic: 55,
        price: 61668,
        enchant_id: 873
    }
}, 1);

item_base[483] = createObject({
    b_i: 483,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Grendalf Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            pants: 20
        },
        slot: 11,
        armor: 66,
        magic: 48,
        cooldown: .03,
        min_magic: 75,
        price: 207760,
        enchant_id: 875
    }
}, 1);

item_base[484] = createObject({
    b_i: 484,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "White Gold Chunk",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 40,
        price: 850
    }
}, 1);

item_base[485] = createObject({
    b_i: 485,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "White Gold Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 40,
        price: 1400
    }
}, 1);

item_base[486] = createObject({
    b_i: 486,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Amethyst Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 45,
        price: 56800,
        armor: 28,
        magic: 28,
        enchant_id: 1097
    }
}, 1);

item_base[487] = createObject({
    b_i: 487,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 8,
        price: 2200,
        armor: 6,
        aim: 3
    }
}, 1);

item_base[488] = createObject({
    b_i: 488,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 4400,
        armor: 6,
        aim: 3
    }
}, 1);

item_base[489] = createObject({
    b_i: 489,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Amethyst Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 45,
        price: 89600,
        armor: 38,
        magic: 38,
        enchant_id: 1117
    }
}, 1);

item_base[490] = createObject({
    b_i: 490,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Rat Meat",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 1,
        price: 2
    }
}, 1);

item_base[491] = createObject({
    b_i: 491,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Rat Meat",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 2,
        price: 4
    }
}, 1);

item_base[492] = createObject({
    b_i: 492,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Chicken Leg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 1,
        price: 3
    }
}, 1);

item_base[493] = createObject({
    b_i: 493,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Chicken Leg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 2
    },
    params: {
        wearable: !1,
        heal: 2,
        price: 6
    }
}, 1);

item_base[494] = createObject({
    b_i: 494,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Ham",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 2,
        price: 7
    }
}, 1);

item_base[495] = createObject({
    b_i: 495,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 21
        },
        slot: 11,
        armor: 30,
        min_defense: 10,
        no_present: !0,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 712
    }
}, 1);

item_base[496] = createObject({
    b_i: 496,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 30,
        min_defense: 10,
        no_present: !0,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 635
    }
}, 1);

item_base[497] = createObject({
    b_i: 497,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Steel Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 19,
        power: 10,
        aim: 15,
        min_defense: 40,
        price: 6450
    }
}, 1);

item_base[498] = createObject({
    b_i: 498,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 25,
        aim: 22,
        min_defense: 50,
        price: 10800
    }
}, 1);

item_base[499] = createObject({
    b_i: 499,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 33,
        aim: 30,
        power: 20,
        min_defense: 60,
        price: 73280
    }
}, 1);

item_base[500] = createObject({
    b_i: 500,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 33,
        aim: 30,
        min_defense: 60,
        price: 28800
    }
}, 1);

item_base[501] = createObject({
    b_i: 501,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 7
        },
        slot: 5,
        armor: 60,
        aim: 40,
        min_defense: 80,
        price: 71550
    }
}, 1);

item_base[502] = createObject({
    b_i: 502,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 7
        },
        slot: 5,
        armor: 60,
        aim: 40,
        power: 30,
        min_defense: 80,
        price: 152368
    }
}, 1);

item_base[503] = createObject({
    b_i: 503,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 35
        },
        slot: 2,
        armor: 21,
        magic: 16,
        no_present: !0,
        cooldown: .01,
        min_magic: 10,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 914
    }
}, 1);

item_base[504] = createObject({
    b_i: 504,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 22
        },
        slot: 11,
        armor: 15,
        magic: 16,
        min_magic: 10,
        no_present: !0,
        cooldown: .01,
        price: 1e4,
        enchant_bonus: .3,
        enchant_id: 923
    }
}, 1);

item_base[505] = createObject({
    b_i: 505,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bronze Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 83
        },
        slot: 4,
        aim: 9,
        power: 5,
        min_accuracy: 1,
        price: 244
    }
}, 1);

item_base[506] = createObject({
    b_i: 506,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Blunt Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 89
        },
        slot: 4,
        aim: 9,
        power: 15,
        min_accuracy: 1,
        price: 310
    }
}, 1);

item_base[507] = createObject({
    b_i: 507,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 85
        },
        slot: 4,
        aim: 39,
        power: 64,
        min_accuracy: 20,
        price: 10442
    }
}, 1);

item_base[508] = createObject({
    b_i: 508,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 86
        },
        slot: 4,
        aim: 22,
        power: 19,
        min_accuracy: 40,
        price: 9583
    }
}, 1);

item_base[509] = createObject({
    b_i: 509,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bronze Short Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 84
        },
        slot: 4,
        aim: 16,
        power: 8,
        min_accuracy: 1,
        price: 364
    }
}, 1);

item_base[510] = createObject({
    b_i: 510,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bronze Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 87
        },
        slot: 4,
        aim: 23,
        power: 26,
        min_accuracy: 1,
        price: 728
    }
}, 1);

item_base[511] = createObject({
    b_i: 511,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Rapier",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 88
        },
        slot: 4,
        aim: 36,
        power: 12,
        min_accuracy: 20,
        price: 5812
    }
}, 1);

item_base[512] = createObject({
    b_i: 512,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 84
        },
        slot: 4,
        aim: 12,
        power: 10,
        min_accuracy: 20,
        price: 3542
    }
}, 1);

item_base[513] = createObject({
    b_i: 513,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 90
        },
        slot: 4,
        aim: 23,
        power: 26,
        min_accuracy: 20,
        price: 5594
    }
}, 1);

item_base[514] = createObject({
    b_i: 514,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Mace",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 91
        },
        slot: 4,
        aim: 31,
        power: 20,
        min_accuracy: 20,
        price: 7086
    }
}, 1);

item_base[515] = createObject({
    b_i: 515,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Scimitar",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 92
        },
        slot: 4,
        aim: 27,
        power: 24,
        min_accuracy: 20,
        price: 5594
    }
}, 1);

item_base[516] = createObject({
    b_i: 516,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Flail",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 93
        },
        slot: 4,
        aim: 39,
        power: 25,
        min_accuracy: 20,
        price: 5968
    }
}, 1);

item_base[517] = createObject({
    b_i: 517,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Battle Hammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 94
        },
        slot: 4,
        disable_slot: 3,
        aim: 9,
        power: 85,
        min_accuracy: 20,
        price: 13800
    }
}, 1);

item_base[518] = createObject({
    b_i: 518,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Excalibur",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 95
        },
        slot: 4,
        disable_slot: 3,
        aim: 25,
        power: 109,
        min_accuracy: 20,
        price: 28344
    }
}, 1);

item_base[519] = createObject({
    b_i: 519,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Flamberge",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 96
        },
        slot: 4,
        aim: 70,
        power: 75,
        min_accuracy: 60,
        price: 71832
    }
}, 1);

item_base[520] = createObject({
    b_i: 520,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Dracula Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 97
        },
        slot: 4,
        aim: 51,
        power: 60,
        min_accuracy: 45,
        price: 51648
    }
}, 1);

item_base[521] = createObject({
    b_i: 521,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Behemoth Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 98
        },
        slot: 4,
        aim: 80,
        power: 69,
        min_accuracy: 50,
        price: 106982
    }
}, 1);

item_base[522] = createObject({
    b_i: 522,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Battle Hammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 99
        },
        slot: 4,
        disable_slot: 3,
        aim: 29,
        power: 115,
        min_accuracy: 40,
        price: 26014
    }
}, 1);

item_base[523] = createObject({
    b_i: 523,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 24
        },
        slot: 4,
        disable_slot: 3,
        aim: 51,
        power: 74,
        min_accuracy: 40,
        price: 19580
    }
}, 1);

item_base[524] = createObject({
    b_i: 524,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Broad Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 101
        },
        slot: 4,
        aim: 22,
        power: 51,
        min_accuracy: 40,
        price: 14686
    }
}, 1);

item_base[525] = createObject({
    b_i: 525,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 102
        },
        slot: 4,
        aim: 29,
        power: 36,
        min_accuracy: 40,
        price: 11328
    }
}, 1);

item_base[526] = createObject({
    b_i: 526,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Scimitar",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 103
        },
        slot: 4,
        aim: 33,
        power: 54,
        min_accuracy: 40,
        price: 21218
    }
}, 1);

item_base[527] = createObject({
    b_i: 527,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Lance",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 104
        },
        slot: 4,
        aim: 29,
        power: 65,
        min_accuracy: 40,
        price: 37794
    }
}, 1);

item_base[528] = createObject({
    b_i: 528,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Saw Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 105
        },
        slot: 4,
        aim: 43,
        power: 22,
        min_accuracy: 40,
        price: 12394
    }
}, 1);

item_base[529] = createObject({
    b_i: 529,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Halberd",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 106
        },
        slot: 4,
        disable_slot: 3,
        aim: 72,
        power: 69,
        min_accuracy: 40,
        price: 24616
    }
}, 1);

item_base[530] = createObject({
    b_i: 530,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Steel Giant Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 107
        },
        slot: 4,
        disable_slot: 3,
        aim: 7,
        power: 131,
        min_accuracy: 40,
        price: 40280
    }
}, 1);

item_base[531] = createObject({
    b_i: 531,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Blood Giant Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 109
        },
        slot: 4,
        disable_slot: 3,
        aim: 43,
        power: 82,
        min_accuracy: 40,
        price: 43256
    }
}, 1);

item_base[532] = createObject({
    b_i: 532,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Freezing Rapier",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 108
        },
        slot: 4,
        aim: 99,
        power: 62,
        min_accuracy: 60,
        price: 72690
    }
}, 1);

item_base[533] = createObject({
    b_i: 533,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Moss Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 110
        },
        slot: 4,
        aim: 80,
        power: 117,
        min_accuracy: 70,
        price: 257576
    }
}, 1);

item_base[534] = createObject({
    b_i: 534,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Dragon Slayer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 111
        },
        slot: 4,
        aim: 160,
        power: 150,
        min_accuracy: 80,
        price: 701558
    }
}, 1);

item_base[535] = createObject({
    b_i: 535,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Sapphire Halberd",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 112
        },
        slot: 4,
        disable_slot: 3,
        aim: 78,
        power: 102,
        min_accuracy: 50,
        price: 142468
    }
}, 1);

item_base[536] = createObject({
    b_i: 536,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Sapphire Barbarian Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 113
        },
        slot: 4,
        disable_slot: 3,
        aim: 56,
        power: 129,
        min_accuracy: 50,
        price: 125486
    }
}, 1);

item_base[537] = createObject({
    b_i: 537,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Iron Broad Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 3,
            weapon: 114
        },
        slot: 4,
        aim: 9,
        power: 39,
        min_accuracy: 20,
        price: 7086
    }
}, 1);

item_base[538] = createObject({
    b_i: 538,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Sapphire Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 115
        },
        slot: 4,
        aim: 36,
        power: 76,
        min_accuracy: 50,
        price: 79920
    }
}, 1);

item_base[539] = createObject({
    b_i: 539,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +1",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 39
        },
        slot: 4,
        aim: 35,
        power: 35,
        min_accuracy: 15,
        no_present: !0,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 540
    }
}, 1);

item_base[540] = createObject({
    b_i: 540,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +2",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 39
        },
        slot: 4,
        aim: 45,
        power: 45,
        min_accuracy: 25,
        no_present: !0,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 541
    }
}, 1);

item_base[541] = createObject({
    b_i: 541,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +3",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 116
        },
        slot: 4,
        aim: 50,
        power: 50,
        min_accuracy: 35,
        no_present: !0,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 568
    }
}, 1);

item_base[542] = createObject({
    b_i: 542,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Blood Reaper Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 117
        },
        slot: 4,
        aim: 50,
        power: 35,
        min_accuracy: 1,
        price: 1
    }
}, 1);

item_base[543] = createObject({
    b_i: 543,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Death Reaper Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 118
        },
        slot: 4,
        aim: 35,
        power: 50,
        min_accuracy: 1,
        price: 1
    }
}, 1);

item_base[544] = createObject({
    b_i: 544,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Skeleton Mask",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 26
        },
        slot: 0,
        armor: 40,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[545] = createObject({
    b_i: 545,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Pumpkin Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 27
        },
        slot: 0,
        armor: 45,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[546] = createObject({
    b_i: 546,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Reaper Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 36
        },
        slot: 2,
        armor: 38,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[547] = createObject({
    b_i: 547,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Reaper Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 23
        },
        slot: 11,
        armor: 27,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[548] = createObject({
    b_i: 548,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Link Armor",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            body: 37
        },
        slot: 2,
        armor: 50,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[549] = createObject({
    b_i: 549,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Vampire Armor",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 34
        },
        slot: 2,
        armor: 26,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[550] = createObject({
    b_i: 550,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Vampire Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 12
        },
        slot: 1,
        armor: 25,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[551] = createObject({
    b_i: 551,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Link Leggings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 24
        },
        slot: 11,
        armor: 33,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[552] = createObject({
    b_i: 552,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Alien Mask",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 24
        },
        slot: 0,
        armor: 50,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[553] = createObject({
    b_i: 553,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Vampire Mask",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 25
        },
        slot: 0,
        armor: 20,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[554] = createObject({
    b_i: 554,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Reaper Hood",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 28
        },
        slot: 0,
        armor: 25,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[555] = createObject({
    b_i: 555,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bronze Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 38
        },
        slot: 2,
        armor: 11,
        min_defense: 1,
        price: 722
    }
}, 1);

item_base[556] = createObject({
    b_i: 556,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 39
        },
        slot: 2,
        armor: 21,
        min_defense: 20,
        price: 10070
    }
}, 1);

item_base[557] = createObject({
    b_i: 557,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Steel Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 40
        },
        slot: 2,
        armor: 40,
        min_defense: 40,
        price: 24366
    }
}, 1);

item_base[558] = createObject({
    b_i: 558,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Gilded Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 41
        },
        slot: 2,
        armor: 62,
        min_defense: 60,
        price: 60832
    }
}, 1);

item_base[559] = createObject({
    b_i: 559,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Berserker Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 42
        },
        slot: 2,
        armor: 37,
        power: 25,
        min_defense: 20,
        price: 21260
    }
}, 1);

item_base[560] = createObject({
    b_i: 560,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bronze Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 43
        },
        slot: 2,
        armor: 30,
        min_defense: 1,
        price: 1190
    }
}, 1);

item_base[561] = createObject({
    b_i: 561,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            body: 44
        },
        slot: 2,
        armor: 41,
        min_defense: 20,
        price: 18222
    }
}, 1);

item_base[562] = createObject({
    b_i: 562,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bronze Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 25
        },
        slot: 11,
        armor: 20,
        min_defense: 1,
        price: 722
    }
}, 1);

item_base[563] = createObject({
    b_i: 563,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 26
        },
        slot: 11,
        armor: 32,
        min_defense: 20,
        price: 10070
    }
}, 1);

item_base[564] = createObject({
    b_i: 564,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Steel Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 27
        },
        slot: 11,
        armor: 48,
        min_defense: 40,
        price: 24616
    }
}, 1);

item_base[565] = createObject({
    b_i: 565,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Sapphire Dragon Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 28
        },
        slot: 11,
        armor: 85,
        min_defense: 50,
        price: 69264
    }
}, 1);

item_base[566] = createObject({
    b_i: 566,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Flame Phoenix Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 29
        },
        slot: 11,
        armor: 88,
        min_defense: 60,
        price: 285936
    }
}, 1);

item_base[567] = createObject({
    b_i: 567,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Amethyst Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            pants: 30
        },
        slot: 11,
        armor: 102,
        min_defense: 70,
        price: 379816
    }
}, 1);

item_base[568] = createObject({
    b_i: 568,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +4",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 116
        },
        slot: 4,
        aim: 60,
        power: 60,
        min_accuracy: 40,
        no_present: !0,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 569
    }
}, 1);

item_base[569] = createObject({
    b_i: 569,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +5",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 119
        },
        slot: 4,
        aim: 70,
        power: 75,
        min_accuracy: 45,
        no_present: !0,
        price: 7e4,
        enchant_bonus: .3,
        enchant_id: 570
    }
}, 1);

item_base[570] = createObject({
    b_i: 570,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +6",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 119
        },
        slot: 4,
        aim: 70,
        power: 85,
        min_accuracy: 50,
        no_present: !0,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 609
    }
}, 1);

item_base[571] = createObject({
    b_i: 571,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bronze Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 24
        },
        slot: 3,
        armor: 17,
        min_defense: 1,
        price: 484
    }
}, 1);

item_base[572] = createObject({
    b_i: 572,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Large Bronze Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 23
        },
        slot: 3,
        armor: 40,
        min_defense: 1,
        price: 662
    }
}, 1);

item_base[573] = createObject({
    b_i: 573,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Small Iron Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 22
        },
        slot: 3,
        armor: 23,
        min_defense: 20,
        price: 7886
    }
}, 1);

item_base[574] = createObject({
    b_i: 574,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Large Iron Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 21
        },
        slot: 3,
        armor: 50,
        min_defense: 20,
        price: 14172
    }
}, 1);

item_base[575] = createObject({
    b_i: 575,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Large Steel Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 25
        },
        slot: 3,
        armor: 65,
        min_defense: 40,
        price: 30832
    }
}, 1);

item_base[576] = createObject({
    b_i: 576,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 13
        },
        slot: 6,
        armor: 15,
        speed: 20,
        no_present: !0,
        min_defense: 15,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 577
    }
}, 1);

item_base[577] = createObject({
    b_i: 577,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 13
        },
        slot: 6,
        armor: 20,
        speed: 25,
        no_present: !0,
        min_defense: 25,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 578
    }
}, 1);

item_base[578] = createObject({
    b_i: 578,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 29,
        speed: 28,
        no_present: !0,
        min_defense: 35,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 579
    }
}, 1);

item_base[579] = createObject({
    b_i: 579,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 35,
        speed: 32,
        no_present: !0,
        min_defense: 45,
        price: 8e4,
        enchant_bonus: .3,
        enchant_id: 580
    }
}, 1);

item_base[580] = createObject({
    b_i: 580,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 40,
        speed: 34,
        min_defense: 55,
        no_present: !0,
        price: 16e4,
        enchant_bonus: .3,
        enchant_id: 1082
    }
}, 1);

item_base[581] = createObject({
    b_i: 581,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Mining Guild Permission",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        min_mining: 65,
        price: 98e3
    }
}, 1);

item_base[582] = createObject({
    b_i: 582,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Jewelry Guild Permission",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 60,
        price: 98e3
    }
}, 1);

item_base[583] = createObject({
    b_i: 583,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 33,
        aim: 30,
        magic: 20,
        min_defense: 60,
        price: 73280
    }
}, 1);

item_base[584] = createObject({
    b_i: 584,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 33,
        aim: 50,
        min_defense: 60,
        price: 73280
    }
}, 1);

item_base[585] = createObject({
    b_i: 585,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 60,
        aim: 30,
        min_defense: 60,
        price: 73280
    }
}, 1);

item_base[586] = createObject({
    b_i: 586,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 7
        },
        slot: 5,
        armor: 90,
        aim: 40,
        min_defense: 80,
        price: 152368
    }
}, 1);

item_base[587] = createObject({
    b_i: 587,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 7
        },
        slot: 5,
        armor: 60,
        aim: 70,
        min_defense: 80,
        price: 152368
    }
}, 1);

item_base[588] = createObject({
    b_i: 588,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            hands: 7
        },
        slot: 5,
        armor: 60,
        aim: 40,
        magic: 30,
        min_defense: 80,
        price: 152368
    }
}, 1);

item_base[589] = createObject({
    b_i: 589,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 25,
        aim: 22,
        power: 10,
        min_defense: 50,
        price: 19980
    }
}, 1);

item_base[590] = createObject({
    b_i: 590,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 25,
        aim: 22,
        magic: 10,
        min_defense: 50,
        price: 19980
    }
}, 1);

item_base[591] = createObject({
    b_i: 591,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 25,
        aim: 32,
        min_defense: 50,
        price: 19980
    }
}, 1);

item_base[592] = createObject({
    b_i: 592,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 35,
        aim: 22,
        min_defense: 50,
        price: 19980
    }
}, 1);

item_base[593] = createObject({
    b_i: 593,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Orb Of Luck",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 1,
        price: 4e5,
        desc: "Gives +10% to enchanting"
    }
}, 1);

item_base[594] = createObject({
    b_i: 594,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Maple Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 35,
        price: 180
    }
}, 1);

item_base[595] = createObject({
    b_i: 595,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Spirit Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 45,
        price: 260
    }
}, 1);

item_base[596] = createObject({
    b_i: 596,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blue Palm Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 55,
        price: 350
    }
}, 1);

item_base[597] = createObject({
    b_i: 597,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Magic Oak Log",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_carpentry: 65,
        price: 580
    }
}, 1);

item_base[598] = createObject({
    b_i: 598,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cesis Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 10
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 6e3,
        to_map: 10,
        to_i: 58,
        to_j: 64
    }
}, 1);

item_base[599] = createObject({
    b_i: 599,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Walco Teleport",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 10
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 3e3,
        to_map: 11,
        to_i: 22,
        to_j: 30
    }
}, 1);

item_base[600] = createObject({
    b_i: 600,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Cape +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 4
        },
        slot: 1,
        armor: 35,
        min_defense: 15,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 601
    }
}, 1);

item_base[601] = createObject({
    b_i: 601,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Cape +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 4
        },
        slot: 1,
        armor: 40,
        min_defense: 20,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 602
    }
}, 1);

item_base[602] = createObject({
    b_i: 602,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragon Wings +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 13
        },
        slot: 1,
        armor: 45,
        min_defense: 30,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 603
    }
}, 1);

item_base[603] = createObject({
    b_i: 603,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragon Wings +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 13
        },
        slot: 1,
        armor: 55,
        min_defense: 40,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 604
    }
}, 1);

item_base[604] = createObject({
    b_i: 604,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragon Wings +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 13
        },
        slot: 1,
        armor: 70,
        min_defense: 50,
        price: 9e4,
        enchant_bonus: .3,
        enchant_id: 605
    }
}, 1);

item_base[605] = createObject({
    b_i: 605,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Blaze Dragon Wings +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 14
        },
        slot: 1,
        armor: 90,
        min_defense: 60,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 606
    }
}, 1);

item_base[606] = createObject({
    b_i: 606,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Blaze Dragon Wings +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 14
        },
        slot: 1,
        armor: 100,
        min_defense: 70,
        price: 25e4,
        enchant_bonus: .3,
        enchant_id: 607
    }
}, 1);

item_base[607] = createObject({
    b_i: 607,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Blaze Dragon Wings +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            cape: 14
        },
        slot: 1,
        armor: 130,
        min_defense: 80,
        price: 4e5,
        enchant_bonus: .3,
        enchant_id: 608
    }
}, 1);

item_base[608] = createObject({
    b_i: 608,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Blaze Dragon Wings +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 15
        },
        slot: 1,
        armor: 160,
        min_defense: 90,
        price: 95e4
    }
}, 1);

item_base[609] = createObject({
    b_i: 609,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +7",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 132
        },
        slot: 4,
        aim: 85,
        power: 105,
        min_accuracy: 60,
        no_present: !0,
        price: 23e4,
        enchant_bonus: .3,
        enchant_id: 610
    }
}, 1);

item_base[610] = createObject({
    b_i: 610,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +8",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 132
        },
        slot: 4,
        aim: 100,
        power: 120,
        min_accuracy: 70,
        no_present: !0,
        price: 28e4,
        enchant_bonus: .3,
        enchant_id: 611
    }
}, 1);

item_base[611] = createObject({
    b_i: 611,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +9",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 133
        },
        slot: 4,
        aim: 120,
        power: 180,
        min_accuracy: 80,
        no_present: !0,
        price: 55e4,
        enchant_bonus: .3,
        enchant_id: 912
    }
}, 1);

item_base[612] = createObject({
    b_i: 612,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Merlin Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 9
        },
        slot: 1,
        armor: 30,
        magic: 20,
        min_magic: 40,
        price: 41924
    }
}, 1);

item_base[613] = createObject({
    b_i: 613,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Twilight Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 10
        },
        slot: 1,
        armor: 60,
        min_defense: 50,
        price: 85444
    }
}, 1);

item_base[614] = createObject({
    b_i: 614,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Carnwennan",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 128
        },
        slot: 4,
        aim: 17,
        power: 17,
        min_accuracy: 10,
        price: 420,
        enchant_id: 615
    }
}, 1);

item_base[615] = createObject({
    b_i: 615,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Carnwennan",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 129
        },
        slot: 4,
        aim: 25,
        power: 21,
        min_accuracy: 10,
        price: 778
    }
}, 1);

item_base[616] = createObject({
    b_i: 616,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Oblivion Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 126
        },
        slot: 4,
        aim: 49,
        power: 68,
        min_accuracy: 45,
        price: 39814,
        enchant_id: 617
    }
}, 1);

item_base[617] = createObject({
    b_i: 617,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Oblivion Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 127
        },
        slot: 4,
        aim: 71,
        power: 85,
        min_accuracy: 45,
        price: 73656
    }
}, 1);

item_base[618] = createObject({
    b_i: 618,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Hrunting",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 120
        },
        slot: 4,
        aim: 55,
        power: 70,
        min_accuracy: 50,
        price: 83732,
        enchant_id: 619
    }
}, 1);

item_base[619] = createObject({
    b_i: 619,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Hrunting",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 121
        },
        slot: 4,
        aim: 51,
        power: 88,
        min_accuracy: 50,
        price: 154904
    }
}, 1);

item_base[620] = createObject({
    b_i: 620,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "The Devastator",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 124
        },
        slot: 4,
        aim: 78,
        power: 84,
        min_accuracy: 60,
        price: 122842,
        enchant_id: 621
    }
}, 1);

item_base[621] = createObject({
    b_i: 621,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Devastator",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 125
        },
        slot: 4,
        aim: 113,
        power: 105,
        min_accuracy: 60,
        price: 227258
    }
}, 1);

item_base[622] = createObject({
    b_i: 622,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ridill",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 130
        },
        slot: 4,
        aim: 72,
        power: 144,
        min_accuracy: 80,
        price: 298372,
        enchant_id: 623
    }
}, 1);

item_base[623] = createObject({
    b_i: 623,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Ridill",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 131
        },
        slot: 4,
        aim: 104,
        power: 180,
        min_accuracy: 80,
        price: 551988
    }
}, 1);

item_base[624] = createObject({
    b_i: 624,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Giant Archangel Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 122
        },
        slot: 4,
        disable_slot: 3,
        aim: 150,
        power: 210,
        min_accuracy: 90,
        price: 446920,
        enchant_id: 625
    }
}, 1);

item_base[625] = createObject({
    b_i: 625,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Giant Archangel Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 123
        },
        slot: 4,
        disable_slot: 3,
        aim: 218,
        power: 262,
        min_accuracy: 90,
        price: 826802
    }
}, 1);

item_base[626] = createObject({
    b_i: 626,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Small Fire Shield +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 26
        },
        slot: 3,
        armor: 69,
        min_defense: 15,
        no_present: !0,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 627
    }
}, 1);

item_base[627] = createObject({
    b_i: 627,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Small Fire Shield +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 26
        },
        slot: 3,
        armor: 83,
        min_defense: 25,
        no_present: !0,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 628
    }
}, 1);

item_base[628] = createObject({
    b_i: 628,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Small Fire Shield +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 26
        },
        slot: 3,
        armor: 97,
        min_defense: 35,
        no_present: !0,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 629
    }
}, 1);

item_base[629] = createObject({
    b_i: 629,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Shield +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 27
        },
        slot: 3,
        armor: 111,
        min_defense: 40,
        no_present: !0,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 630
    }
}, 1);

item_base[630] = createObject({
    b_i: 630,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Shield +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 27
        },
        slot: 3,
        armor: 125,
        min_defense: 45,
        no_present: !0,
        price: 9e4,
        enchant_bonus: .3,
        enchant_id: 631
    }
}, 1);

item_base[631] = createObject({
    b_i: 631,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Shield +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 27
        },
        slot: 3,
        armor: 139,
        min_defense: 50,
        no_present: !0,
        price: 18e4,
        enchant_bonus: .3,
        enchant_id: 632
    }
}, 1);

item_base[632] = createObject({
    b_i: 632,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Fire Shield +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 28
        },
        slot: 3,
        armor: 153,
        min_defense: 60,
        no_present: !0,
        price: 32e4,
        enchant_bonus: .3,
        enchant_id: 633
    }
}, 1);

item_base[633] = createObject({
    b_i: 633,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Fire Shield +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 28
        },
        slot: 3,
        armor: 167,
        min_defense: 70,
        no_present: !0,
        price: 53e4,
        enchant_bonus: .3,
        enchant_id: 634
    }
}, 1);

item_base[634] = createObject({
    b_i: 634,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Large Fire Shield +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 28
        },
        slot: 3,
        armor: 180,
        min_defense: 80,
        no_present: !0,
        price: 792e3,
        enchant_bonus: .3,
        enchant_id: 960
    }
}, 1);

item_base[635] = createObject({
    b_i: 635,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 40,
        min_defense: 15,
        no_present: !0,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 636
    }
}, 1);

item_base[636] = createObject({
    b_i: 636,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 45,
        min_defense: 25,
        no_present: !0,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 637
    }
}, 1);

item_base[637] = createObject({
    b_i: 637,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 50,
        min_defense: 35,
        no_present: !0,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 638
    }
}, 1);

item_base[638] = createObject({
    b_i: 638,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 68,
        min_defense: 40,
        no_present: !0,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 639
    }
}, 1);

item_base[639] = createObject({
    b_i: 639,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 75,
        min_defense: 45,
        no_present: !0,
        price: 9e4,
        enchant_bonus: .3,
        enchant_id: 640
    }
}, 1);

item_base[640] = createObject({
    b_i: 640,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 82,
        min_defense: 50,
        no_present: !0,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 641
    }
}, 1);

item_base[641] = createObject({
    b_i: 641,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 100,
        min_defense: 60,
        no_present: !0,
        price: 25e4,
        enchant_bonus: .3,
        enchant_id: 642
    }
}, 1);

item_base[642] = createObject({
    b_i: 642,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 116,
        min_defense: 70,
        no_present: !0,
        price: 4e5,
        enchant_bonus: .3,
        enchant_id: 643
    }
}, 1);

item_base[643] = createObject({
    b_i: 643,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 33
        },
        slot: 2,
        armor: 143,
        min_defense: 80,
        no_present: !0,
        price: 95e4,
        enchant_bonus: .3,
        enchant_id: 956
    }
}, 1);

item_base[644] = createObject({
    b_i: 644,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Flame Phoenix Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            body: 45
        },
        slot: 2,
        armor: 100,
        min_defense: 60,
        price: 245902
    }
}, 1);

item_base[645] = createObject({
    b_i: 645,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Amethyst Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            body: 46
        },
        slot: 2,
        armor: 131,
        min_defense: 70,
        price: 438132
    }
}, 1);

item_base[646] = createObject({
    b_i: 646,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Diamond Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            body: 47
        },
        slot: 2,
        armor: 143,
        min_defense: 80,
        price: 708018
    }
}, 1);

item_base[647] = createObject({
    b_i: 647,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Fire Dragon Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 13
    },
    params: {
        wearable: !0,
        visible: {
            body: 48
        },
        slot: 2,
        armor: 116,
        min_defense: 70,
        price: 278974
    }
}, 1);

item_base[648] = createObject({
    b_i: 648,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Fire Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 137
        },
        slot: 4,
        disable_slot: 3,
        aim: 129,
        power: 186,
        min_accuracy: 80,
        price: 334706
    }
}, 1);

item_base[649] = createObject({
    b_i: 649,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Beelzebub Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            body: 49
        },
        slot: 2,
        armor: 145,
        min_defense: 90,
        price: 528322,
        enchant_id: 650
    }
}, 1);

item_base[650] = createObject({
    b_i: 650,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Beelzebub Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            body: 51
        },
        slot: 2,
        armor: 181,
        min_defense: 90,
        price: 977396
    }
}, 1);

item_base[651] = createObject({
    b_i: 651,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Overlord Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            cape: 17
        },
        slot: 1,
        armor: 30,
        power: 10,
        min_defense: 25,
        price: 31928
    }
}, 1);

item_base[652] = createObject({
    b_i: 652,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Phoenix Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            cape: 18
        },
        slot: 1,
        armor: 90,
        min_defense: 70,
        price: 132958
    }
}, 1);

item_base[653] = createObject({
    b_i: 653,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Lucifer Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            body: 50
        },
        slot: 2,
        armor: 125,
        min_defense: 85,
        price: 448276,
        enchant_id: 654
    }
}, 1);

item_base[654] = createObject({
    b_i: 654,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Lucifer Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            body: 52
        },
        slot: 2,
        armor: 156,
        min_defense: 85,
        price: 829310
    }
}, 1);

item_base[655] = createObject({
    b_i: 655,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 9
        },
        slot: 1,
        armor: 60,
        power: -20,
        min_defense: 50,
        price: 75882
    }
}, 1);

item_base[656] = createObject({
    b_i: 656,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Behemoth Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            cape: 19
        },
        slot: 1,
        armor: 85,
        min_defense: 25,
        price: 68332
    }
}, 1);

item_base[657] = createObject({
    b_i: 657,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fire Stone Chunk",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 1200
    }
}, 1);

item_base[658] = createObject({
    b_i: 658,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fire Stone Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 11520
    }
}, 1);

item_base[659] = createObject({
    b_i: 659,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Reptile Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            boots: 15
        },
        slot: 6,
        armor: 15,
        min_defense: 50,
        speed: 35,
        price: 24722,
        enchant_id: 660
    }
}, 1);

item_base[660] = createObject({
    b_i: 660,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Reptile Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            boots: 16
        },
        slot: 6,
        armor: 20,
        aim: 10,
        power: 10,
        min_defense: 50,
        speed: 35,
        price: 45736
    }
}, 1);

item_base[661] = createObject({
    b_i: 661,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Angel Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            boots: 17
        },
        slot: 6,
        armor: 30,
        min_defense: 70,
        speed: 40,
        price: 149582,
        enchant_id: 662
    }
}, 1);

item_base[662] = createObject({
    b_i: 662,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Angel Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            boots: 17
        },
        slot: 6,
        armor: 40,
        aim: 10,
        min_defense: 70,
        speed: 40,
        price: 276726
    }
}, 1);

item_base[663] = createObject({
    b_i: 663,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Silver Dragon Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 30,
        aim: 20,
        min_defense: 45,
        price: 9273
    }
}, 1);

item_base[664] = createObject({
    b_i: 664,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 29
        },
        slot: 0,
        armor: 51,
        min_defense: 80,
        price: 141004
    }
}, 1);

item_base[665] = createObject({
    b_i: 665,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Full Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 30
        },
        slot: 0,
        armor: 72,
        min_defense: 80,
        price: 241460
    }
}, 1);

item_base[666] = createObject({
    b_i: 666,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Fire Flail",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 134
        },
        slot: 4,
        aim: 56,
        power: 136,
        min_accuracy: 80,
        price: 259182,
        enchant_id: 667
    }
}, 1);

item_base[667] = createObject({
    b_i: 667,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Fire Flail",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 135
        },
        slot: 4,
        aim: 81,
        power: 170,
        min_accuracy: 80,
        price: 479486
    }
}, 1);

item_base[668] = createObject({
    b_i: 668,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Fire Battle Axe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 136
        },
        slot: 4,
        disable_slot: 3,
        aim: 89,
        power: 149,
        min_accuracy: 80,
        price: 180922,
        enchant_id: 648
    }
}, 1);

item_base[669] = createObject({
    b_i: 669,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Ruby Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 5,
        power: 10,
        armor: 5,
        min_health: 22,
        price: 1e5,
        pet: 1
    }
}, 1);

item_base[670] = createObject({
    b_i: 670,
    b_t: ITEM_CATEGORY.PET,
    name: "Gray Dog [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 5,
        power: 5,
        armor: 5,
        magic: 5,
        min_health: 10,
        price: 25e3,
        pet: 2
    }
}, 1);

item_base[671] = createObject({
    b_i: 671,
    b_t: ITEM_CATEGORY.PET,
    name: "Ruby Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 15,
        power: 20,
        armor: 10,
        min_health: 22,
        price: 13e4,
        pet: 3
    }
}, 1);

item_base[672] = createObject({
    b_i: 672,
    b_t: ITEM_CATEGORY.PET,
    name: "King Ruby Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 25,
        power: 40,
        armor: 25,
        min_health: 22,
        price: 162500,
        pet: 4
    }
}, 1);

item_base[673] = createObject({
    b_i: 673,
    b_t: ITEM_CATEGORY.PET,
    name: "Chaotic Ruby Dragon [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 35,
        power: 50,
        armor: 30,
        min_health: 22,
        price: 662500,
        pet: 5
    }
}, 1);

item_base[674] = createObject({
    b_i: 674,
    b_t: ITEM_CATEGORY.PET,
    name: "Gray Wolf [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 17,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 15,
        armor: 15,
        magic: 15,
        aim: 10,
        min_health: 10,
        price: 32500,
        pet: 6
    }
}, 1);

item_base[675] = createObject({
    b_i: 675,
    b_t: ITEM_CATEGORY.PET,
    name: "Brown Dog [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 5,
        power: 5,
        armor: 5,
        magic: 5,
        min_health: 10,
        price: 25e3,
        pet: 7
    }
}, 1);

item_base[676] = createObject({
    b_i: 676,
    b_t: ITEM_CATEGORY.PET,
    name: "Brown Wolf [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 18,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 15,
        armor: 15,
        magic: 15,
        aim: 10,
        min_health: 10,
        price: 32500,
        pet: 8
    }
}, 1);

item_base[677] = createObject({
    b_i: 677,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Dinosaur [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 14,
        y: 0
    },
    params: {
        wearable: !0,
        power: 8,
        armor: 8,
        slot: 12,
        min_health: 24,
        price: 1e5,
        pet: 9
    }
}, 1);

item_base[678] = createObject({
    b_i: 678,
    b_t: ITEM_CATEGORY.PET,
    name: "Dinosaur [Rare]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 16,
        armor: 16,
        min_health: 24,
        price: 13e4,
        pet: 10
    }
}, 1);

item_base[679] = createObject({
    b_i: 679,
    b_t: ITEM_CATEGORY.PET,
    name: "Spiky Dinosaur [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 25,
        armor: 25,
        min_health: 24,
        price: 162500,
        pet: 11
    }
}, 1);

item_base[680] = createObject({
    b_i: 680,
    b_t: ITEM_CATEGORY.PET,
    name: "White Horse [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 19,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 5,
        aim: 15,
        armor: 10,
        min_health: 44,
        price: 5e5,
        pet: 12
    }
}, 1);

item_base[681] = createObject({
    b_i: 681,
    b_t: ITEM_CATEGORY.PET,
    name: "Unicorn [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 10,
        aim: 30,
        armor: 30,
        min_health: 44,
        price: 65e4,
        pet: 13
    }
}, 1);

item_base[682] = createObject({
    b_i: 682,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Beholder [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 8,
        armor: 4,
        min_health: 20,
        price: 93e3,
        pet: 14
    }
}, 1);

item_base[683] = createObject({
    b_i: 683,
    b_t: ITEM_CATEGORY.PET,
    name: "Beholder [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 16,
        armor: 8,
        min_health: 20,
        price: 120900,
        pet: 15
    }
}, 1);

item_base[684] = createObject({
    b_i: 684,
    b_t: ITEM_CATEGORY.PET,
    name: "King Beholder [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 30,
        armor: 15,
        min_health: 20,
        price: 151126,
        pet: 16
    }
}, 1);

item_base[685] = createObject({
    b_i: 685,
    b_t: ITEM_CATEGORY.PET,
    name: "Demonic Beholder [Rare]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 50,
        armor: 30,
        min_health: 20,
        price: 651126,
        pet: 17
    }
}, 1);

item_base[686] = createObject({
    b_i: 686,
    b_t: ITEM_CATEGORY.PET,
    name: "Ghost [Common]",
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 15,
        min_health: 10,
        price: 3e4,
        pet: 18
    }
}, 1);

item_base[687] = createObject({
    b_i: 687,
    b_t: ITEM_CATEGORY.PET,
    name: "Nightmare Ghost [Common]",
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 35,
        min_health: 10,
        price: 39e3,
        pet: 19
    }
}, 1);

item_base[688] = createObject({
    b_i: 688,
    b_t: ITEM_CATEGORY.PET,
    name: "Angel [Rare]",
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 8,
        power: 8,
        armor: 8,
        magic: 8,
        min_health: 45,
        price: 6e5,
        pet: 20
    }
}, 1);

item_base[689] = createObject({
    b_i: 689,
    b_t: ITEM_CATEGORY.PET,
    name: "Archangel [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 15,
        power: 15,
        armor: 15,
        magic: 15,
        min_health: 45,
        price: 78e4,
        pet: 21
    }
}, 1);

item_base[690] = createObject({
    b_i: 690,
    b_t: ITEM_CATEGORY.PET,
    name: "Sacred Archangel [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 35,
        power: 35,
        armor: 35,
        magic: 25,
        min_health: 45,
        price: 975e3,
        pet: 22
    }
}, 1);

item_base[691] = createObject({
    b_i: 691,
    b_t: ITEM_CATEGORY.PET,
    name: "Saint Archangel [Legendary]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 50,
        power: 35,
        armor: 50,
        magic: 45,
        min_health: 45,
        price: 1975e3,
        pet: 23
    }
}, 1);

item_base[692] = createObject({
    b_i: 692,
    b_t: ITEM_CATEGORY.PET,
    name: "Skeleton [Common]",
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 5,
        min_health: 14,
        price: 62e3,
        pet: 24
    }
}, 1);

item_base[693] = createObject({
    b_i: 693,
    b_t: ITEM_CATEGORY.PET,
    name: "Skeleton Warrior [Common]",
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 15,
        min_health: 14,
        price: 80600,
        pet: 25
    }
}, 1);

item_base[694] = createObject({
    b_i: 694,
    b_t: ITEM_CATEGORY.PET,
    name: "Skeleton King [Common]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 30,
        min_health: 14,
        price: 100750,
        pet: 26
    }
}, 1);

item_base[695] = createObject({
    b_i: 695,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Gryffin [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 10,
        power: 5,
        armor: 5,
        min_health: 22,
        price: 97e3,
        pet: 28
    }
}, 1);

item_base[696] = createObject({
    b_i: 696,
    b_t: ITEM_CATEGORY.PET,
    name: "Gryffin [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 15,
        power: 15,
        armor: 15,
        min_health: 22,
        price: 126100,
        pet: 29
    }
}, 1);

item_base[697] = createObject({
    b_i: 697,
    b_t: ITEM_CATEGORY.PET,
    name: "Royal Gryffin [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 30,
        power: 25,
        armor: 25,
        min_health: 22,
        price: 157626,
        pet: 30
    }
}, 1);

item_base[698] = createObject({
    b_i: 698,
    b_t: ITEM_CATEGORY.PET,
    name: "Emerald Geko [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 10,
        armor: 10,
        min_health: 18,
        price: 9e4,
        pet: 31
    }
}, 1);

item_base[699] = createObject({
    b_i: 699,
    b_t: ITEM_CATEGORY.PET,
    name: "Moss Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 30,
        armor: 30,
        min_health: 18,
        price: 117e3,
        pet: 32
    }
}, 1);

item_base[700] = createObject({
    b_i: 700,
    b_t: ITEM_CATEGORY.PET,
    name: "Ruby Geko [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 10,
        defense: 10,
        min_health: 18,
        price: 9e4,
        pet: 33
    }
}, 1);

item_base[701] = createObject({
    b_i: 701,
    b_t: ITEM_CATEGORY.PET,
    name: "Flame Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 30,
        defense: 30,
        min_health: 18,
        price: 117e3,
        pet: 34
    }
}, 1);

item_base[702] = createObject({
    b_i: 702,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Black Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 10,
        aim: 5,
        armor: 10,
        min_health: 36,
        price: 25e4,
        pet: 35
    }
}, 1);

item_base[703] = createObject({
    b_i: 703,
    b_t: ITEM_CATEGORY.PET,
    name: "Black Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 20,
        aim: 10,
        armor: 20,
        min_health: 36,
        price: 325e3,
        pet: 36
    }
}, 1);

item_base[704] = createObject({
    b_i: 704,
    b_t: ITEM_CATEGORY.PET,
    name: "King Black Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 30,
        aim: 20,
        armor: 30,
        min_health: 36,
        price: 406250,
        pet: 37
    }
}, 1);

item_base[705] = createObject({
    b_i: 705,
    b_t: ITEM_CATEGORY.PET,
    name: "Blood Black Dragon [Rare]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 40,
        aim: 45,
        armor: 45,
        min_health: 36,
        price: 1156250,
        pet: 38
    }
}, 1);

item_base[706] = createObject({
    b_i: 706,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Emerald Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 5,
        aim: 5,
        armor: 10,
        min_health: 22,
        price: 95e3,
        pet: 39
    }
}, 1);

item_base[707] = createObject({
    b_i: 707,
    b_t: ITEM_CATEGORY.PET,
    name: "Emerald Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 10,
        aim: 10,
        armor: 20,
        min_health: 22,
        price: 123500,
        pet: 40
    }
}, 1);

item_base[708] = createObject({
    b_i: 708,
    b_t: ITEM_CATEGORY.PET,
    name: "King Emerald Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 25,
        aim: 25,
        armor: 25,
        min_health: 22,
        price: 154376,
        pet: 41
    }
}, 1);

item_base[709] = createObject({
    b_i: 709,
    b_t: ITEM_CATEGORY.PET,
    name: "Cursed Dragon [Rare]",
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 45,
        aim: 35,
        armor: 40,
        min_health: 22,
        price: 654376,
        pet: 42
    }
}, 1);

item_base[710] = createObject({
    b_i: 710,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Stone Of Evolution",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 4,
        price: 25e4,
        desc: "Required to evolve pets and items"
    }
}, 1);

item_base[711] = createObject({
    b_i: 711,
    b_t: ITEM_CATEGORY.PET,
    name: "Skeleton Overlord [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 50,
        aim: 30,
        min_health: 14,
        price: 1100750,
        pet: 27
    }
}, 1);

item_base[712] = createObject({
    b_i: 712,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 21
        },
        slot: 11,
        armor: 35,
        min_defense: 15,
        no_present: !0,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 713
    }
}, 1);

item_base[713] = createObject({
    b_i: 713,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 21
        },
        slot: 11,
        armor: 40,
        min_defense: 25,
        no_present: !0,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 714
    }
}, 1);

item_base[714] = createObject({
    b_i: 714,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 21
        },
        slot: 11,
        armor: 50,
        min_defense: 35,
        no_present: !0,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 715
    }
}, 1);

item_base[715] = createObject({
    b_i: 715,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            pants: 31
        },
        slot: 11,
        armor: 60,
        min_defense: 40,
        no_present: !0,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 716
    }
}, 1);

item_base[716] = createObject({
    b_i: 716,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            pants: 31
        },
        slot: 11,
        armor: 65,
        min_defense: 45,
        no_present: !0,
        price: 7e4,
        enchant_bonus: .3,
        enchant_id: 717
    }
}, 1);

item_base[717] = createObject({
    b_i: 717,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            pants: 31
        },
        slot: 11,
        armor: 75,
        min_defense: 50,
        no_present: !0,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 718
    }
}, 1);

item_base[718] = createObject({
    b_i: 718,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            pants: 32
        },
        slot: 11,
        armor: 88,
        min_defense: 60,
        no_present: !0,
        price: 23e4,
        enchant_bonus: .3,
        enchant_id: 719
    }
}, 1);

item_base[719] = createObject({
    b_i: 719,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            pants: 32
        },
        slot: 11,
        armor: 102,
        min_defense: 70,
        no_present: !0,
        price: 28e4,
        enchant_bonus: .3,
        enchant_id: 720
    }
}, 1);

item_base[720] = createObject({
    b_i: 720,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            pants: 32
        },
        slot: 11,
        armor: 114,
        min_defense: 80,
        no_present: !0,
        price: 55e4,
        enchant_bonus: .3,
        enchant_id: 954
    }
}, 1);

item_base[721] = createObject({
    b_i: 721,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 15
        },
        slot: 0,
        armor: 35,
        min_defense: 15,
        no_present: !0,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 722
    }
}, 1);

item_base[722] = createObject({
    b_i: 722,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 15
        },
        slot: 0,
        armor: 40,
        min_defense: 25,
        no_present: !0,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 723
    }
}, 1);

item_base[723] = createObject({
    b_i: 723,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 15
        },
        slot: 0,
        armor: 45,
        min_defense: 35,
        no_present: !0,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 724
    }
}, 1);

item_base[724] = createObject({
    b_i: 724,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 17
        },
        slot: 0,
        armor: 50,
        min_defense: 40,
        no_present: !0,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 725
    }
}, 1);

item_base[725] = createObject({
    b_i: 725,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 17
        },
        slot: 0,
        armor: 55,
        min_defense: 45,
        no_present: !0,
        price: 7e4,
        enchant_bonus: .3,
        enchant_id: 726
    }
}, 1);

item_base[726] = createObject({
    b_i: 726,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Collector Helmet +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 14
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 17
        },
        slot: 0,
        armor: 65,
        min_defense: 50,
        no_present: !0,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 727
    }
}, 1);

item_base[727] = createObject({
    b_i: 727,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ancient Soul Collector Helmet +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 32
        },
        slot: 0,
        armor: 75,
        min_defense: 60,
        no_present: !0,
        price: 23e4,
        enchant_bonus: .3,
        enchant_id: 728
    }
}, 1);

item_base[728] = createObject({
    b_i: 728,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ancient Soul Collector Helmet +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 32
        },
        slot: 0,
        armor: 85,
        min_defense: 70,
        no_present: !0,
        price: 28e4,
        enchant_bonus: .3,
        enchant_id: 729
    }
}, 1);

item_base[729] = createObject({
    b_i: 729,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ancient Soul Collector Helmet +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 32
        },
        slot: 0,
        armor: 90,
        min_defense: 80,
        no_present: !0,
        price: 55e4,
        enchant_bonus: .3,
        enchant_id: 958
    }
}, 1);

item_base[730] = createObject({
    b_i: 730,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 16
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 299
    }
}, 1);

item_base[731] = createObject({
    b_i: 731,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 16
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 300
    }
}, 1);

item_base[732] = createObject({
    b_i: 732,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Wood Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 12e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 301
    }
}, 1);

item_base[733] = createObject({
    b_i: 733,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 200,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 287
    }
}, 1);

item_base[734] = createObject({
    b_i: 734,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 2e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 288
    }
}, 1);

item_base[735] = createObject({
    b_i: 735,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 289
    }
}, 1);

item_base[736] = createObject({
    b_i: 736,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 300,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 290
    }
}, 1);

item_base[737] = createObject({
    b_i: 737,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 291,
        size: 2
    }
}, 1);

item_base[738] = createObject({
    b_i: 738,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fir Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1500,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 292,
        heals: 1
    }
}, 1);

item_base[739] = createObject({
    b_i: 739,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 600,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 293
    }
}, 1);

item_base[740] = createObject({
    b_i: 740,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 9e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 294
    }
}, 1);

item_base[741] = createObject({
    b_i: 741,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 750,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 295
    }
}, 1);

item_base[742] = createObject({
    b_i: 742,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1500,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 296
    }
}, 1);

item_base[743] = createObject({
    b_i: 743,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 6e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 297,
        size: 4
    }
}, 1);

item_base[744] = createObject({
    b_i: 744,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Cactus Wood Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 4500,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 298,
        heals: 2
    }
}, 1);

item_base[745] = createObject({
    b_i: 745,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1200,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 299
    }
}, 1);

item_base[746] = createObject({
    b_i: 746,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 37e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 300
    }
}, 1);

item_base[747] = createObject({
    b_i: 747,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1500,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 301
    }
}, 1);

item_base[748] = createObject({
    b_i: 748,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3600,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 302
    }
}, 1);

item_base[749] = createObject({
    b_i: 749,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 12e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 303,
        size: 6
    }
}, 1);

item_base[750] = createObject({
    b_i: 750,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Oak Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 9e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 304,
        heals: 3
    }
}, 1);

item_base[751] = createObject({
    b_i: 751,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Santa Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 31
        },
        slot: 0,
        armor: 40,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[752] = createObject({
    b_i: 752,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Fence",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5100,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 305
    }
}, 1);

item_base[753] = createObject({
    b_i: 753,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Soil",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 20
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5250,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 332
    }
}, 1);

item_base[754] = createObject({
    b_i: 754,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Green Leaf Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 1,
        price: 6,
        farming_id: 306
    }
}, 1);

item_base[755] = createObject({
    b_i: 755,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Yellow Leaf Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 2,
        price: 12,
        farming_id: 307
    }
}, 1);

item_base[756] = createObject({
    b_i: 756,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Grass Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 1,
        price: 2,
        farming_id: 308
    }
}, 1);

item_base[757] = createObject({
    b_i: 757,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Grass",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 4,
        min_farming: 1,
        price: 10
    }
}, 1);

item_base[758] = createObject({
    b_i: 758,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Hay",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 4,
        min_farming: 5,
        price: 14
    }
}, 1);

item_base[759] = createObject({
    b_i: 759,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Hay Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 5,
        price: 2,
        farming_id: 309
    }
}, 1);

item_base[760] = createObject({
    b_i: 760,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Wheat",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 4,
        min_farming: 7,
        price: 38
    }
}, 1);

item_base[761] = createObject({
    b_i: 761,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Wheat Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 7,
        price: 15,
        farming_id: 310
    }
}, 1);

item_base[762] = createObject({
    b_i: 762,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Apple",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 18
    },
    params: {
        wearable: !1,
        price: 60,
        heal: 6
    }
}, 1);

item_base[763] = createObject({
    b_i: 763,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Apple Tree Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 8,
        price: 25,
        farming_id: 311
    }
}, 1);

item_base[764] = createObject({
    b_i: 764,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Good Present",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 21
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "Contains a random item with value up to " + thousandSeperate(8e4) + " coins",
        no_present: !0
    }
}, 1);

item_base[765] = createObject({
    b_i: 765,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Great Present",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 22
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "Contains a random item with value up to " + thousandSeperate(17e4) + " coins",
        no_present: !0
    }
}, 1);

item_base[766] = createObject({
    b_i: 766,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Best Present",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 23
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "Contains a random item with value up to " + thousandSeperate(45e4) + " coins",
        no_present: !0
    }
}, 1);

item_base[767] = createObject({
    b_i: 767,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Rake",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 192
        },
        slot: 4,
        min_farming: 1,
        price: 240
    }
}, 1);

item_base[768] = createObject({
    b_i: 768,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3600,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 312
    }
}, 1);

item_base[769] = createObject({
    b_i: 769,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 313
    }
}, 1);

item_base[770] = createObject({
    b_i: 770,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 7800,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 314
    }
}, 1);

item_base[771] = createObject({
    b_i: 771,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 14e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 315
    }
}, 1);

item_base[772] = createObject({
    b_i: 772,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Oak Chair",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 29e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 316
    }
}, 1);

item_base[773] = createObject({
    b_i: 773,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blue Leaf Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 45,
        price: 300,
        farming_id: 317
    }
}, 1);

item_base[774] = createObject({
    b_i: 774,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Aconitum Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 20
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 65,
        price: 380,
        farming_id: 318
    }
}, 1);

item_base[775] = createObject({
    b_i: 775,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Blood Herb Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 67,
        price: 500,
        farming_id: 319
    }
}, 1);

item_base[776] = createObject({
    b_i: 776,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Oregano Leaf Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 25,
        price: 220,
        farming_id: 321
    }
}, 1);

item_base[777] = createObject({
    b_i: 777,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Tomato Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 4,
        price: 2,
        farming_id: 323
    }
}, 1);

item_base[778] = createObject({
    b_i: 778,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Yarrow Leaf Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 15,
        price: 130,
        farming_id: 322
    }
}, 1);

item_base[779] = createObject({
    b_i: 779,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Island Deed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 12
    },
    params: {
        wearable: !1,
        price: 35e3
    }
}, 1);

item_base[780] = createObject({
    b_i: 780,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potato",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 17
    },
    params: {
        wearable: !1,
        price: 40,
        heal: 3
    }
}, 1);

item_base[781] = createObject({
    b_i: 781,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Onion",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 19
    },
    params: {
        wearable: !1,
        price: 85,
        heal: 2
    }
}, 1);

item_base[782] = createObject({
    b_i: 782,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Banana",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 17
    },
    params: {
        wearable: !1,
        price: 100,
        heal: 8
    }
}, 1);

item_base[783] = createObject({
    b_i: 783,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Pineapple",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 18
    },
    params: {
        wearable: !1,
        price: 140,
        heal: 10
    }
}, 1);

item_base[784] = createObject({
    b_i: 784,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Carrot",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 19
    },
    params: {
        wearable: !1,
        price: 130,
        heal: 8
    }
}, 1);

item_base[785] = createObject({
    b_i: 785,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Corn",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 18
    },
    params: {
        wearable: !1,
        price: 200,
        heal: 4
    }
}, 1);

item_base[786] = createObject({
    b_i: 786,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Strawberry",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 19
    },
    params: {
        wearable: !1,
        price: 350,
        heal: 13
    }
}, 1);

item_base[787] = createObject({
    b_i: 787,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Potato Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 13,
        price: 35,
        farming_id: 324
    }
}, 1);

item_base[788] = createObject({
    b_i: 788,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Onion Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 17,
        price: 70,
        farming_id: 325
    }
}, 1);

item_base[789] = createObject({
    b_i: 789,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Banana Tree Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 28,
        price: 95,
        farming_id: 326
    }
}, 1);

item_base[790] = createObject({
    b_i: 790,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Pineapple Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 36,
        price: 110,
        farming_id: 327
    }
}, 1);

item_base[791] = createObject({
    b_i: 791,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Carrot Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 48,
        price: 100,
        farming_id: 328
    }
}, 1);

item_base[792] = createObject({
    b_i: 792,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Corn Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 55,
        price: 160,
        farming_id: 329
    }
}, 1);

item_base[793] = createObject({
    b_i: 793,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Strawberry Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 62,
        price: 250,
        farming_id: 330
    }
}, 1);

item_base[794] = createObject({
    b_i: 794,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Old Leaves Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 30,
        price: 220,
        farming_id: 331
    }
}, 1);

item_base[795] = createObject({
    b_i: 795,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Carpentry",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 11
    },
    params: {
        wearable: !1,
        boost_carpentry: .05,
        price: 976
    }
}, 1);

item_base[796] = createObject({
    b_i: 796,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Farming",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 12
    },
    params: {
        wearable: !1,
        boost_farming: .05,
        price: 508
    }
}, 1);

item_base[797] = createObject({
    b_i: 797,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bone Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 138
        },
        slot: 4,
        aim: 5,
        power: 6,
        min_accuracy: 10,
        price: 180,
        enchant_id: 798
    }
}, 1);

item_base[798] = createObject({
    b_i: 798,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bone Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 139
        },
        slot: 4,
        aim: 7,
        power: 8,
        min_accuracy: 10,
        price: 334
    }
}, 1);

item_base[799] = createObject({
    b_i: 799,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bone Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 140
        },
        slot: 4,
        aim: 10,
        power: 14,
        min_accuracy: 10,
        price: 266,
        enchant_id: 800
    }
}, 1);

item_base[800] = createObject({
    b_i: 800,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bone Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 141
        },
        slot: 4,
        aim: 15,
        power: 18,
        min_accuracy: 10,
        price: 492
    }
}, 1);

item_base[801] = createObject({
    b_i: 801,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bone Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 4
        },
        slot: 3,
        armor: 22,
        min_defense: 10,
        price: 1200,
        enchant_id: 802
    }
}, 1);

item_base[802] = createObject({
    b_i: 802,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bone Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 30
        },
        slot: 3,
        armor: 30,
        min_defense: 10,
        price: 2220
    }
}, 1);

item_base[803] = createObject({
    b_i: 803,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        min_health: 12,
        slot: 8,
        price: 6900,
        magic: 9,
        enchant_id: 1086
    }
}, 1);

item_base[804] = createObject({
    b_i: 804,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        min_health: 14,
        slot: 8,
        price: 10450,
        power: 10,
        aim: 10,
        enchant_id: 1087
    }
}, 1);

item_base[805] = createObject({
    b_i: 805,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        min_health: 20,
        slot: 8,
        price: 7200,
        armor: 12,
        enchant_id: 1089
    }
}, 1);

item_base[806] = createObject({
    b_i: 806,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        min_health: 26,
        slot: 8,
        price: 20600,
        aim: 15,
        power: 15,
        magic: 15,
        armor: 15,
        enchant_id: 1092
    }
}, 1);

item_base[807] = createObject({
    b_i: 807,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 6
    },
    params: {
        wearable: !0,
        min_health: 30,
        slot: 8,
        price: 11600,
        armor: 18,
        enchant_id: 1093
    }
}, 1);

item_base[808] = createObject({
    b_i: 808,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        min_health: 33,
        slot: 8,
        price: 16400,
        magic: 18,
        enchant_id: 1094
    }
}, 1);

item_base[809] = createObject({
    b_i: 809,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 7
    },
    params: {
        wearable: !0,
        min_health: 36,
        slot: 8,
        price: 24400,
        power: 20,
        aim: 20,
        enchant_id: 1095
    }
}, 1);

item_base[810] = createObject({
    b_i: 810,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        min_health: 40,
        slot: 8,
        price: 38400,
        armor: 24,
        power: 24,
        aim: 24,
        magic: 24,
        enchant_id: 1096
    }
}, 1);

item_base[811] = createObject({
    b_i: 811,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Amethyst Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        min_health: 70,
        slot: 8,
        price: 202300,
        armor: 50,
        magic: 50,
        enchant_id: 1102
    }
}, 1);

item_base[812] = createObject({
    b_i: 812,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Jadeite Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        min_health: 80,
        slot: 8,
        price: 4e5,
        power: 61,
        aim: 61,
        armor: 61,
        magic: 40,
        enchant_id: 1104
    }
}, 1);

item_base[813] = createObject({
    b_i: 813,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 11900,
        min_health: 14,
        power: 11,
        aim: 11,
        enchant_id: 1107
    }
}, 1);

item_base[814] = createObject({
    b_i: 814,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Silver Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 18900,
        min_health: 16,
        armor: 13,
        power: 13,
        magic: 13,
        aim: 13,
        enchant_id: 1108
    }
}, 1);

item_base[815] = createObject({
    b_i: 815,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 11200,
        min_health: 20,
        armor: 13,
        enchant_id: 1109
    }
}, 1);

item_base[816] = createObject({
    b_i: 816,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 13600,
        min_health: 22,
        magic: 13,
        enchant_id: 1110
    }
}, 1);

item_base[817] = createObject({
    b_i: 817,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Golden Diamond Necklace [Dup]",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 24600,
        min_health: 26,
        armor: 16,
        power: 16,
        aim: 16,
        magic: 16
    }
}, 1);

item_base[818] = createObject({
    b_i: 818,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 28400,
        min_health: 30,
        armor: 23,
        enchant_id: 1113
    }
}, 1);

item_base[819] = createObject({
    b_i: 819,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 35600,
        min_health: 33,
        magic: 23,
        enchant_id: 1114
    }
}, 1);

item_base[820] = createObject({
    b_i: 820,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 47600,
        min_health: 36,
        power: 26,
        aim: 26,
        enchant_id: 1115
    }
}, 1);

item_base[821] = createObject({
    b_i: 821,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "White Gold Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 68600,
        min_health: 40,
        power: 32,
        aim: 32,
        magic: 32,
        armor: 32,
        enchant_id: 1116
    }
}, 1);

item_base[822] = createObject({
    b_i: 822,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Amethyst Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 216250,
        min_health: 70,
        magic: 70,
        armor: 70,
        enchant_id: 1122
    }
}, 1);

item_base[823] = createObject({
    b_i: 823,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Platinum Black Opal Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 368550,
        min_health: 75,
        power: 70,
        aim: 70,
        magic: 50,
        armor: 70,
        enchant_id: 1123
    }
}, 1);

item_base[824] = createObject({
    b_i: 824,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 98e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 334
    }
}, 1);

item_base[825] = createObject({
    b_i: 825,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 36e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 305
    }
}, 1);

item_base[826] = createObject({
    b_i: 826,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 4200,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 335
    }
}, 1);

item_base[827] = createObject({
    b_i: 827,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 8400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 336
    }
}, 1);

item_base[828] = createObject({
    b_i: 828,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e4,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 337,
        size: 8
    }
}, 1);

item_base[829] = createObject({
    b_i: 829,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 24e4,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 338
    }
}, 1);

item_base[830] = createObject({
    b_i: 830,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 72e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 306
    }
}, 1);

item_base[831] = createObject({
    b_i: 831,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 6300,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 340
    }
}, 1);

item_base[832] = createObject({
    b_i: 832,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 14400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 341
    }
}, 1);

item_base[833] = createObject({
    b_i: 833,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 54e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 342,
        size: 10
    }
}, 1);

item_base[834] = createObject({
    b_i: 834,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Maple Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 37800,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 343,
        heals: 5
    }
}, 1);

item_base[835] = createObject({
    b_i: 835,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 356e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 344
    }
}, 1);

item_base[836] = createObject({
    b_i: 836,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 13e4,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 307
    }
}, 1);

item_base[837] = createObject({
    b_i: 837,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 9100,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 346
    }
}, 1);

item_base[838] = createObject({
    b_i: 838,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 23400,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 347
    }
}, 1);

item_base[839] = createObject({
    b_i: 839,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 104e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 348,
        size: 12
    }
}, 1);

item_base[840] = createObject({
    b_i: 840,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Spirit Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 54600,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 349,
        heals: 6
    }
}, 1);

item_base[841] = createObject({
    b_i: 841,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 45e4,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 350
    }
}, 1);

item_base[842] = createObject({
    b_i: 842,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 21e4,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 308
    }
}, 1);

item_base[843] = createObject({
    b_i: 843,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 17500,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 352
    }
}, 1);

item_base[844] = createObject({
    b_i: 844,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 35e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 353
    }
}, 1);

item_base[845] = createObject({
    b_i: 845,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 175e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 354,
        size: 14
    }
}, 1);

item_base[846] = createObject({
    b_i: 846,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Blue Palm Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 105e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 355,
        heals: 7
    }
}, 1);

item_base[847] = createObject({
    b_i: 847,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Wall",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 83e4,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 356
    }
}, 1);

item_base[848] = createObject({
    b_i: 848,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Floor",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 406e3,
        carpentry_type: BASE_TYPE.GROUND,
        carpentry_id: 310
    }
}, 1);

item_base[849] = createObject({
    b_i: 849,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Table",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 34800,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 358
    }
}, 1);

item_base[850] = createObject({
    b_i: 850,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Chest",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 69600,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 359
    }
}, 1);

item_base[851] = createObject({
    b_i: 851,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Cabinet",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 464e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 360,
        size: 16
    }
}, 1);

item_base[852] = createObject({
    b_i: 852,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Magic Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 0,
        y: 16
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 208800,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 361,
        heals: 8
    }
}, 1);

item_base[853] = createObject({
    b_i: 853,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Willow Bed",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 18e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 362,
        heals: 4
    }
}, 1);

item_base[854] = createObject({
    b_i: 854,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Beast Herb Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 17
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 69,
        price: 1300,
        farming_id: 320
    }
}, 1);

item_base[855] = createObject({
    b_i: 855,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion Of Preservation",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 14,
        price: 1e5,
        desc: "Keep 5 extra items on death, when equipped"
    }
}, 1);

item_base[856] = createObject({
    b_i: 856,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Veles Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 42
        },
        slot: 11,
        armor: 20,
        magic: 20,
        cooldown: .01,
        min_magic: 25,
        price: 18822,
        enchant_id: 870
    }
}, 1);

item_base[857] = createObject({
    b_i: 857,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Heka Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 43
        },
        slot: 11,
        armor: 30,
        magic: 26,
        cooldown: .01,
        min_magic: 45,
        price: 48202,
        enchant_id: 872
    }
}, 1);

item_base[858] = createObject({
    b_i: 858,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enki Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 44
        },
        slot: 11,
        armor: 52,
        magic: 42,
        cooldown: .03,
        min_magic: 65,
        price: 138420,
        enchant_id: 874
    }
}, 1);

item_base[859] = createObject({
    b_i: 859,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Odin Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 45
        },
        slot: 11,
        armor: 70,
        magic: 53,
        cooldown: .03,
        min_magic: 85,
        price: 323022,
        enchant_id: 876
    }
}, 1);

item_base[860] = createObject({
    b_i: 860,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Veles Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 33
        },
        slot: 0,
        armor: 14,
        magic: 14,
        cooldown: .01,
        min_magic: 25,
        price: 13482
    }
}, 1);

item_base[861] = createObject({
    b_i: 861,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Heka Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 34
        },
        slot: 0,
        armor: 20,
        magic: 20,
        cooldown: .02,
        min_magic: 45,
        price: 42482
    }
}, 1);

item_base[862] = createObject({
    b_i: 862,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enki Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 35
        },
        slot: 0,
        armor: 34,
        magic: 26,
        cooldown: .01,
        min_magic: 65,
        price: 118204
    }
}, 1);

item_base[863] = createObject({
    b_i: 863,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Odin Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 36
        },
        slot: 0,
        armor: 55,
        magic: 36,
        cooldown: .03,
        min_magic: 85,
        price: 234822
    }
}, 1);

item_base[864] = createObject({
    b_i: 864,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Veles Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 55
        },
        slot: 2,
        armor: 26,
        magic: 22,
        cooldown: .01,
        min_magic: 25,
        price: 32282,
        enchant_id: 879
    }
}, 1);

item_base[865] = createObject({
    b_i: 865,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Heka Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 56
        },
        slot: 2,
        armor: 33,
        magic: 30,
        cooldown: .02,
        min_magic: 45,
        price: 82832,
        enchant_id: 881
    }
}, 1);

item_base[866] = createObject({
    b_i: 866,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enki Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 57
        },
        slot: 2,
        armor: 58,
        magic: 42,
        cooldown: .03,
        min_magic: 65,
        price: 158202,
        enchant_id: 883
    }
}, 1);

item_base[867] = createObject({
    b_i: 867,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Odin Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 58
        },
        slot: 2,
        armor: 80,
        magic: 54,
        cooldown: .03,
        min_magic: 85,
        price: 492932,
        enchant_id: 885
    }
}, 1);

item_base[868] = createObject({
    b_i: 868,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Wizard Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 33
        },
        slot: 11,
        armor: 15,
        magic: 16,
        cooldown: .01,
        min_magic: 1,
        price: 4995
    }
}, 1);

item_base[869] = createObject({
    b_i: 869,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Witch Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 34
        },
        slot: 11,
        armor: 22,
        magic: 24,
        cooldown: .01,
        min_magic: 15,
        price: 14918
    }
}, 1);

item_base[870] = createObject({
    b_i: 870,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Veles Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 35
        },
        slot: 11,
        armor: 25,
        magic: 27,
        cooldown: .01,
        min_magic: 25,
        price: 34820
    }
}, 1);

item_base[871] = createObject({
    b_i: 871,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Battlemage robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 36
        },
        slot: 11,
        armor: 30,
        magic: 32,
        cooldown: .02,
        min_magic: 35,
        price: 62243
    }
}, 1);

item_base[872] = createObject({
    b_i: 872,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Heka Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 37
        },
        slot: 11,
        armor: 37,
        magic: 35,
        cooldown: .02,
        min_magic: 45,
        price: 89173
    }
}, 1);

item_base[873] = createObject({
    b_i: 873,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Merlin Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            pants: 38
        },
        slot: 11,
        armor: 52,
        magic: 48,
        cooldown: .02,
        min_magic: 55,
        price: 114085
    }
}, 1);

item_base[874] = createObject({
    b_i: 874,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Enki Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 39
        },
        slot: 11,
        armor: 65,
        magic: 56,
        cooldown: .03,
        min_magic: 65,
        price: 256078,
        no_present: !0
    }
}, 1);

item_base[875] = createObject({
    b_i: 875,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Grendalf Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 40
        },
        slot: 11,
        armor: 82,
        magic: 64,
        cooldown: .03,
        min_magic: 75,
        price: 384356,
        no_present: !0
    }
}, 1);

item_base[876] = createObject({
    b_i: 876,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Odin Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 41
        },
        slot: 11,
        armor: 88,
        magic: 71,
        cooldown: .03,
        min_magic: 85,
        price: 597590
    }
}, 1);

item_base[877] = createObject({
    b_i: 877,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Wizard Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            body: 59
        },
        slot: 2,
        armor: 21,
        magic: 16,
        cooldown: .01,
        min_magic: 1,
        price: 6660
    }
}, 1);

item_base[878] = createObject({
    b_i: 878,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Witch Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            body: 60
        },
        slot: 2,
        armor: 28,
        magic: 24,
        cooldown: .01,
        min_magic: 15,
        price: 22874
    }
}, 1);

item_base[879] = createObject({
    b_i: 879,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Veles Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 61
        },
        slot: 2,
        armor: 32,
        magic: 29,
        cooldown: .01,
        min_magic: 25,
        price: 59721
    }
}, 1);

item_base[880] = createObject({
    b_i: 880,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Battlemage Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            body: 62
        },
        slot: 2,
        armor: 36,
        magic: 32,
        cooldown: .02,
        min_magic: 35,
        price: 106561
    }
}, 1);

item_base[881] = createObject({
    b_i: 881,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Heka Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 63
        },
        slot: 2,
        armor: 41,
        magic: 40,
        cooldown: .02,
        min_magic: 45,
        price: 153239
    }
}, 1);

item_base[882] = createObject({
    b_i: 882,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Merlin Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            body: 64
        },
        slot: 2,
        armor: 59,
        magic: 48,
        cooldown: .02,
        min_magic: 55,
        price: 217712
    }
}, 1);

item_base[883] = createObject({
    b_i: 883,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Enki Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 65
        },
        slot: 2,
        armor: 72,
        magic: 56,
        cooldown: .03,
        min_magic: 65,
        price: 292674,
        no_present: !0
    }
}, 1);

item_base[884] = createObject({
    b_i: 884,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Grendalf Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            body: 66
        },
        slot: 2,
        armor: 89,
        magic: 65,
        cooldown: .03,
        min_magic: 75,
        price: 481888,
        no_present: !0
    }
}, 1);

item_base[885] = createObject({
    b_i: 885,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Odin Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            body: 67
        },
        slot: 2,
        armor: 100,
        magic: 73,
        cooldown: .03,
        min_magic: 85,
        price: 911924
    }
}, 1);

item_base[886] = createObject({
    b_i: 886,
    b_t: ITEM_CATEGORY.PET,
    name: "Pegasus [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 18,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 15,
        aim: 40,
        armor: 35,
        min_health: 44,
        price: 14e5,
        pet: 43
    }
}, 1);

item_base[887] = createObject({
    b_i: 887,
    b_t: ITEM_CATEGORY.PET,
    name: "Donkey [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 13,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 5,
        armor: 10,
        min_health: 12,
        price: 32500,
        pet: 44
    }
}, 1);

item_base[888] = createObject({
    b_i: 888,
    b_t: ITEM_CATEGORY.PET,
    name: "Horror Steed [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 19,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 3,
        armor: 7,
        power: 7,
        magic: 7,
        aim: 7,
        min_health: 38,
        price: 3e5,
        pet: 45
    }
}, 1);

item_base[889] = createObject({
    b_i: 889,
    b_t: ITEM_CATEGORY.PET,
    name: "Nightmare Steed [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 7,
        armor: 13,
        power: 13,
        magic: 13,
        aim: 13,
        min_health: 38,
        price: 39e4,
        pet: 46
    }
}, 1);

item_base[890] = createObject({
    b_i: 890,
    b_t: ITEM_CATEGORY.PET,
    name: "Underworld Steed [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 15,
        armor: 30,
        power: 30,
        magic: 30,
        aim: 30,
        min_health: 50,
        price: 139e4,
        pet: 47
    }
}, 1);

item_base[891] = createObject({
    b_i: 891,
    b_t: ITEM_CATEGORY.PET,
    name: "Baby Cupid [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 4,
        power: 4,
        magic: 4,
        aim: 4,
        price: 1,
        min_health: 44,
        pet: 48
    }
}, 1);

item_base[892] = createObject({
    b_i: 892,
    b_t: ITEM_CATEGORY.PET,
    name: "Cupid [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 8,
        power: 8,
        magic: 8,
        aim: 8,
        price: 1,
        min_health: 44,
        pet: 49
    }
}, 1);

item_base[893] = createObject({
    b_i: 893,
    b_t: ITEM_CATEGORY.PET,
    name: "Cupid Archer [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 16,
        power: 16,
        magic: 16,
        aim: 16,
        price: 1,
        min_health: 44,
        pet: 50
    }
}, 1);

item_base[894] = createObject({
    b_i: 894,
    b_t: ITEM_CATEGORY.PET,
    name: "Lady-Killer [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        armor: 25,
        power: 25,
        magic: 25,
        aim: 25,
        price: 1,
        min_health: 44,
        pet: 51
    }
}, 1);

item_base[895] = createObject({
    b_i: 895,
    b_t: ITEM_CATEGORY.PET,
    name: "Efreet [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 6,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 25,
        aim: 10,
        min_health: 49,
        price: 1046500,
        pet: 52
    }
}, 1);

item_base[896] = createObject({
    b_i: 896,
    b_t: ITEM_CATEGORY.PET,
    name: "Diablo [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 60,
        armor: 50,
        aim: 30,
        min_health: 62,
        price: 1455670,
        pet: 53
    }
}, 1);

item_base[897] = createObject({
    b_i: 897,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Valentine's Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 70
        },
        slot: 2,
        armor: 25,
        min_defense: 1,
        price: 1,
        enchant_id: 898
    }
}, 1);

item_base[898] = createObject({
    b_i: 898,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Valentine's Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 71
        },
        slot: 2,
        armor: 35,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[899] = createObject({
    b_i: 899,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Valentine's Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 31
        },
        slot: 3,
        armor: 25,
        min_defense: 1,
        price: 1,
        enchant_id: 900
    }
}, 1);

item_base[900] = createObject({
    b_i: 900,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Valentine's Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 32
        },
        slot: 3,
        armor: 35,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[901] = createObject({
    b_i: 901,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Valentine's Cape",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            cape: 20
        },
        slot: 1,
        armor: 25,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[902] = createObject({
    b_i: 902,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Valentine's Staff",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 143
        },
        slot: 4,
        aim: 25,
        power: 25,
        min_accuracy: 1,
        price: 1,
        enchant_id: 903
    }
}, 1);

item_base[903] = createObject({
    b_i: 903,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Valentine's Staff",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 15
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 144
        },
        slot: 4,
        aim: 35,
        power: 35,
        min_accuracy: 1,
        price: 1
    }
}, 1);

item_base[904] = createObject({
    b_i: 904,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Statue of Kronos",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 95,
        price: 190335
    }
}, 1);

item_base[905] = createObject({
    b_i: 905,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Chaotic Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 145
        },
        slot: 4,
        aim: 62,
        power: 108,
        min_accuracy: 70,
        price: 328322,
        enchant_id: 906
    }
}, 1);

item_base[906] = createObject({
    b_i: 906,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Chaotic Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 146
        },
        slot: 4,
        aim: 90,
        power: 135,
        min_accuracy: 70,
        price: 607296
    }
}, 1);

item_base[907] = createObject({
    b_i: 907,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Odin Mace",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 147
        },
        slot: 4,
        aim: 120,
        power: 155,
        min_accuracy: 90,
        price: 523722,
        enchant_id: 908
    }
}, 1);

item_base[908] = createObject({
    b_i: 908,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Odin Mace",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 148
        },
        slot: 4,
        aim: 174,
        power: 194,
        min_accuracy: 90,
        price: 968886
    }
}, 1);

item_base[909] = createObject({
    b_i: 909,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Kronos Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 150
        },
        slot: 4,
        aim: 160,
        power: 190,
        min_accuracy: 95,
        price: 1175443,
        enchant_id: 1061
    }
}, 1);

item_base[910] = createObject({
    b_i: 910,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Unicorn Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 149
        },
        slot: 4,
        aim: 90,
        power: 70,
        min_accuracy: 70,
        price: 216750
    }
}, 1);

item_base[911] = createObject({
    b_i: 911,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Unicorn Horn",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 70,
        price: 35e3
    }
}, 1);

item_base[912] = createObject({
    b_i: 912,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +10",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 133
        },
        slot: 4,
        aim: 174,
        power: 193,
        min_accuracy: 90,
        no_present: !0,
        price: 723e3,
        enchant_bonus: .3,
        enchant_id: 913
    }
}, 1);

item_base[913] = createObject({
    b_i: 913,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +11",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 133
        },
        slot: 4,
        aim: 232,
        power: 237,
        min_accuracy: 95,
        no_present: !0,
        enchant_bonus: .2,
        price: 912382,
        enchant_id: 1461
    }
}, 1);

item_base[914] = createObject({
    b_i: 914,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 35
        },
        slot: 2,
        armor: 28,
        magic: 24,
        no_present: !0,
        cooldown: .01,
        min_magic: 15,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 915
    }
}, 1);

item_base[915] = createObject({
    b_i: 915,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 35
        },
        slot: 2,
        armor: 32,
        magic: 30,
        no_present: !0,
        cooldown: .01,
        min_magic: 25,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 916
    }
}, 1);

item_base[916] = createObject({
    b_i: 916,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            body: 35
        },
        slot: 2,
        armor: 36,
        magic: 32,
        no_present: !0,
        cooldown: .02,
        min_magic: 35,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 917
    }
}, 1);

item_base[917] = createObject({
    b_i: 917,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 68
        },
        slot: 2,
        armor: 38,
        magic: 38,
        no_present: !0,
        cooldown: .02,
        min_magic: 40,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 918
    }
}, 1);

item_base[918] = createObject({
    b_i: 918,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 68
        },
        slot: 2,
        armor: 41,
        magic: 40,
        no_present: !0,
        cooldown: .02,
        min_magic: 45,
        price: 9e4,
        enchant_bonus: .3,
        enchant_id: 919
    }
}, 1);

item_base[919] = createObject({
    b_i: 919,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 68
        },
        slot: 2,
        armor: 58,
        magic: 48,
        no_present: !0,
        cooldown: .02,
        min_magic: 50,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 920
    }
}, 1);

item_base[920] = createObject({
    b_i: 920,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid Robe +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 69
        },
        slot: 2,
        armor: 72,
        magic: 56,
        no_present: !0,
        cooldown: .03,
        min_magic: 60,
        price: 25e4,
        enchant_bonus: .3,
        enchant_id: 921
    }
}, 1);

item_base[921] = createObject({
    b_i: 921,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid Robe +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 69
        },
        slot: 2,
        armor: 88,
        magic: 64,
        no_present: !0,
        cooldown: .03,
        min_magic: 70,
        price: 4e5,
        enchant_bonus: .3,
        enchant_id: 922
    }
}, 1);

item_base[922] = createObject({
    b_i: 922,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid Robe +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            body: 69
        },
        slot: 2,
        armor: 100,
        magic: 73,
        no_present: !0,
        cooldown: .03,
        enchant_bonus: .3,
        enchant_id: 1618,
        min_magic: 80,
        price: 95e4
    }
}, 1);

item_base[923] = createObject({
    b_i: 923,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe Bottom +1",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 22
        },
        slot: 11,
        armor: 22,
        magic: 24,
        no_present: !0,
        cooldown: .01,
        min_magic: 15,
        price: 2e4,
        enchant_bonus: .3,
        enchant_id: 924
    }
}, 1);

item_base[924] = createObject({
    b_i: 924,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe Bottom +2",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 22
        },
        slot: 11,
        armor: 25,
        magic: 27,
        no_present: !0,
        cooldown: .01,
        min_magic: 25,
        price: 3e4,
        enchant_bonus: .3,
        enchant_id: 925
    }
}, 1);

item_base[925] = createObject({
    b_i: 925,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk Robe Bottom +3",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            pants: 22
        },
        slot: 11,
        armor: 30,
        magic: 32,
        no_present: !0,
        cooldown: .02,
        min_magic: 35,
        price: 4e4,
        enchant_bonus: .3,
        enchant_id: 926
    }
}, 1);

item_base[926] = createObject({
    b_i: 926,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk robe Bottom +4",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 46
        },
        slot: 11,
        armor: 33,
        magic: 33,
        no_present: !0,
        cooldown: .02,
        min_magic: 40,
        price: 6e4,
        enchant_bonus: .3,
        enchant_id: 927
    }
}, 1);

item_base[927] = createObject({
    b_i: 927,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk robe Bottom +5",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 46
        },
        slot: 11,
        armor: 38,
        magic: 35,
        no_present: !0,
        cooldown: .02,
        min_magic: 45,
        price: 7e4,
        enchant_bonus: .3,
        enchant_id: 928
    }
}, 1);

item_base[928] = createObject({
    b_i: 928,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Monk robe Bottom +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 46
        },
        slot: 11,
        armor: 45,
        magic: 45,
        no_present: !0,
        cooldown: .02,
        min_magic: 50,
        price: 15e4,
        enchant_bonus: .3,
        enchant_id: 929
    }
}, 1);

item_base[929] = createObject({
    b_i: 929,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid robe Bottom +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 47
        },
        slot: 11,
        armor: 65,
        magic: 56,
        no_present: !0,
        cooldown: .03,
        min_magic: 60,
        price: 23e4,
        enchant_bonus: .3,
        enchant_id: 930
    }
}, 1);

item_base[930] = createObject({
    b_i: 930,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid robe Bottom +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 47
        },
        slot: 11,
        armor: 82,
        magic: 64,
        no_present: !0,
        cooldown: .03,
        min_magic: 70,
        price: 28e4,
        enchant_bonus: .3,
        enchant_id: 931
    }
}, 1);

item_base[931] = createObject({
    b_i: 931,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Druid robe Bottom +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            pants: 47
        },
        slot: 11,
        armor: 87,
        magic: 71,
        no_present: !0,
        cooldown: .03,
        enchant_bonus: .3,
        enchant_id: 1622,
        min_magic: 80,
        price: 55e4
    }
}, 1);

item_base[932] = createObject({
    b_i: 932,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Emerald Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            body: 72
        },
        slot: 2,
        armor: 21,
        min_defense: 30,
        price: 9260,
        enchant_id: 933
    }
}, 1);

item_base[933] = createObject({
    b_i: 933,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Emerald Chainmail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            body: 73
        },
        slot: 2,
        armor: 26,
        min_defense: 30,
        price: 17132
    }
}, 1);

item_base[934] = createObject({
    b_i: 934,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Emerald Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            body: 74
        },
        slot: 2,
        armor: 39,
        min_defense: 30,
        price: 18212,
        enchant_id: 935
    }
}, 1);

item_base[935] = createObject({
    b_i: 935,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Emerald Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            body: 75
        },
        slot: 2,
        armor: 48,
        min_defense: 30,
        price: 33692
    }
}, 1);

item_base[936] = createObject({
    b_i: 936,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Emerald Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            pants: 48
        },
        slot: 11,
        armor: 32,
        min_defense: 30,
        price: 11940,
        enchant_id: 937
    }
}, 1);

item_base[937] = createObject({
    b_i: 937,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Emerald Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            pants: 49
        },
        slot: 11,
        armor: 42,
        min_defense: 30,
        price: 22090
    }
}, 1);

item_base[938] = createObject({
    b_i: 938,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 151
        },
        slot: 4,
        aim: 14,
        power: 29,
        min_accuracy: 30,
        price: 8882,
        enchant_id: 939
    }
}, 1);

item_base[939] = createObject({
    b_i: 939,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Long Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 152
        },
        slot: 4,
        aim: 20,
        power: 36,
        min_accuracy: 30,
        price: 16430
    }
}, 1);

item_base[940] = createObject({
    b_i: 940,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Sabre",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 153
        },
        slot: 4,
        aim: 15,
        power: 38,
        min_accuracy: 30,
        price: 10569,
        enchant_id: 941
    }
}, 1);

item_base[941] = createObject({
    b_i: 941,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Sabre",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 16
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 154
        },
        slot: 4,
        aim: 22,
        power: 47,
        min_accuracy: 30,
        price: 19952
    }
}, 1);

item_base[942] = createObject({
    b_i: 942,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Katana",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 155
        },
        slot: 4,
        aim: 22,
        power: 37,
        min_accuracy: 30,
        price: 11274,
        enchant_id: 943
    }
}, 1);

item_base[943] = createObject({
    b_i: 943,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Katana",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 156
        },
        slot: 4,
        aim: 32,
        power: 46,
        min_accuracy: 30,
        price: 20856
    }
}, 1);

item_base[944] = createObject({
    b_i: 944,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Emerald Warhammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 157
        },
        slot: 4,
        disable_slot: 3,
        aim: 23,
        power: 95,
        min_accuracy: 30,
        price: 18054,
        enchant_id: 945
    }
}, 1);

item_base[945] = createObject({
    b_i: 945,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Emerald Warhammer",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 158
        },
        slot: 4,
        aim: 60,
        power: 85,
        min_accuracy: 30,
        price: 33400
    }
}, 1);

item_base[946] = createObject({
    b_i: 946,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fishing Guild Permission",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_fishing: 80,
        price: 98e3
    }
}, 1);

item_base[947] = createObject({
    b_i: 947,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Nephilim Book",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 69230
    }
}, 1);

item_base[948] = createObject({
    b_i: 948,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fellin Island Ticket",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 100
    }
}, 1);

item_base[949] = createObject({
    b_i: 949,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Ice Feather",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 55,
        price: 8e3
    }
}, 1);

item_base[950] = createObject({
    b_i: 950,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Lightning Feather",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 70,
        price: 2e4
    }
}, 1);

item_base[951] = createObject({
    b_i: 951,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ice Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            cape: 23
        },
        slot: 1,
        armor: 90,
        power: 10,
        aim: 25,
        enchant_id: 1292,
        min_strength: 60,
        price: 122880
    }
}, 1);

item_base[952] = createObject({
    b_i: 952,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Lightning Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            cape: 22
        },
        slot: 1,
        armor: 140,
        magic: 20,
        min_defense: 85,
        enchant_id: 1276,
        price: 367200
    }
}, 1);

item_base[953] = createObject({
    b_i: 953,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Nephilim Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            cape: 21
        },
        slot: 1,
        armor: 180,
        power: 20,
        aim: 35,
        min_strength: 90,
        enchant_id: 1295,
        price: 1363411
    }
}, 1);

item_base[954] = createObject({
    b_i: 954,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            pants: 60
        },
        slot: 11,
        armor: 135,
        min_defense: 90,
        no_present: !0,
        price: 748200,
        enchant_bonus: .3,
        enchant_id: 955
    }
}, 1);

item_base[955] = createObject({
    b_i: 955,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            pants: 60
        },
        slot: 11,
        armor: 145,
        min_defense: 95,
        no_present: !0,
        price: 998292,
        enchant_id: 1162,
        enchant_bonus: .2
    }
}, 1);

item_base[956] = createObject({
    b_i: 956,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            body: 80
        },
        slot: 2,
        armor: 181,
        min_defense: 90,
        no_present: !0,
        price: 1129100,
        enchant_bonus: .3,
        enchant_id: 957
    }
}, 1);

item_base[957] = createObject({
    b_i: 957,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            body: 81
        },
        slot: 2,
        armor: 193,
        min_defense: 95,
        no_present: !0,
        price: 1362882,
        enchant_id: 1163,
        enchant_bonus: .2
    }
}, 1);

item_base[958] = createObject({
    b_i: 958,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 37
        },
        slot: 0,
        armor: 100,
        min_defense: 90,
        no_present: !0,
        price: 748200,
        enchant_bonus: .3,
        enchant_id: 959
    }
}, 1);

item_base[959] = createObject({
    b_i: 959,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 37
        },
        slot: 0,
        armor: 112,
        min_defense: 95,
        no_present: !0,
        price: 998292,
        enchant_id: 1161,
        enchant_bonus: .2
    }
}, 1);

item_base[960] = createObject({
    b_i: 960,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 33
        },
        slot: 3,
        armor: 195,
        min_defense: 90,
        no_present: !0,
        price: 923022,
        enchant_bonus: .3,
        enchant_id: 961
    }
}, 1);

item_base[961] = createObject({
    b_i: 961,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 33
        },
        slot: 3,
        armor: 220,
        min_defense: 95,
        no_present: !0,
        price: 1128322,
        enchant_id: 1164,
        enchant_bonus: .2
    }
}, 1);

item_base[962] = createObject({
    b_i: 962,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Juggernaut Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            body: 86
        },
        slot: 2,
        armor: 150,
        min_defense: 95,
        price: 877344,
        enchant_id: 963
    }
}, 1);

item_base[963] = createObject({
    b_i: 963,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Juggernaut Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            body: 87
        },
        slot: 2,
        armor: 187,
        min_defense: 95,
        price: 1623086
    }
}, 1);

item_base[964] = createObject({
    b_i: 964,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 78
        },
        slot: 2,
        armor: 165,
        min_defense: 100,
        price: 894208,
        enchant_id: 965
    }
}, 1);

item_base[965] = createObject({
    b_i: 965,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bahamut Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            body: 79
        },
        slot: 2,
        armor: 206,
        min_defense: 100,
        price: 1654284
    }
}, 1);

item_base[966] = createObject({
    b_i: 966,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            body: 76
        },
        slot: 2,
        armor: 200,
        min_defense: 110,
        price: 5557222,
        enchant_id: 967
    }
}, 1);

item_base[967] = createObject({
    b_i: 967,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted 7 Souls Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            body: 77
        },
        slot: 2,
        armor: 250,
        min_defense: 110,
        price: 10280860
    }
}, 1);

item_base[968] = createObject({
    b_i: 968,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "7 Souls Jewel",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 99,
        price: 324530
    }
}, 1);

item_base[969] = createObject({
    b_i: 969,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Juggernaut Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            pants: 56
        },
        slot: 11,
        armor: 125,
        min_defense: 95,
        price: 348202,
        enchant_id: 970
    }
}, 1);

item_base[970] = createObject({
    b_i: 970,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Juggernaut Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            pants: 57
        },
        slot: 11,
        armor: 165,
        min_defense: 95,
        price: 811544
    }
}, 1);

item_base[971] = createObject({
    b_i: 971,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ichor Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            pants: 51
        },
        slot: 11,
        armor: 200,
        min_defense: 105,
        price: 2209502
    }
}, 1);

item_base[972] = createObject({
    b_i: 972,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            body: 82
        },
        slot: 2,
        armor: 180,
        min_defense: 105,
        price: 1379856,
        enchant_id: 973
    }
}, 1);

item_base[973] = createObject({
    b_i: 973,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ichor Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            body: 83
        },
        slot: 2,
        armor: 225,
        min_defense: 105,
        price: 2552734
    }
}, 1);

item_base[974] = createObject({
    b_i: 974,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 38
        },
        slot: 0,
        armor: 125,
        min_defense: 105,
        price: 1008794,
        enchant_id: 975
    }
}, 1);

item_base[975] = createObject({
    b_i: 975,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ichor Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 39
        },
        slot: 0,
        armor: 156,
        min_defense: 105,
        price: 1866268
    }
}, 1);

item_base[976] = createObject({
    b_i: 976,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bronze Full Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 48
        },
        slot: 0,
        armor: 23,
        min_defense: 1,
        price: 430
    }
}, 1);

item_base[977] = createObject({
    b_i: 977,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Juggernaut Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 42
        },
        slot: 0,
        armor: 90,
        min_defense: 95,
        price: 438672,
        enchant_id: 978
    }
}, 1);

item_base[978] = createObject({
    b_i: 978,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Juggernaut Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 43
        },
        slot: 0,
        armor: 112,
        min_defense: 95,
        price: 811543
    }
}, 1);

item_base[979] = createObject({
    b_i: 979,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demigod Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            pants: 52
        },
        slot: 11,
        armor: 84,
        magic: 66,
        cooldown: .04,
        min_magic: 95,
        enchant_id: 1578,
        price: 1355477
    }
}, 1);

item_base[980] = createObject({
    b_i: 980,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Shiva Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 46
        },
        slot: 0,
        armor: 64,
        magic: 44,
        cooldown: .04,
        min_magic: 90,
        price: 457008
    }
}, 1);

item_base[981] = createObject({
    b_i: 981,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Golden Apple",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 92,
        price: 28720
    }
}, 1);

item_base[982] = createObject({
    b_i: 982,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Warrior Trophy",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 85,
        price: 44400
    }
}, 1);

item_base[983] = createObject({
    b_i: 983,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Rusty Warrior Trophy",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 85,
        price: 5e3
    }
}, 1);

item_base[984] = createObject({
    b_i: 984,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demigod Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 44
        },
        slot: 0,
        armor: 74,
        magic: 50,
        cooldown: .04,
        min_magic: 95,
        price: 1051061
    }
}, 1);

item_base[985] = createObject({
    b_i: 985,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Shiva Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            body: 90
        },
        slot: 2,
        armor: 92,
        magic: 62,
        cooldown: .04,
        min_magic: 90,
        enchant_id: 1575,
        price: 709574
    }
}, 1);

item_base[986] = createObject({
    b_i: 986,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demigod Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            body: 88
        },
        slot: 2,
        armor: 114,
        magic: 75,
        cooldown: .04,
        min_magic: 95,
        enchant_id: 1576,
        price: 1971389
    }
}, 1);

item_base[987] = createObject({
    b_i: 987,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Shiva Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            pants: 54
        },
        slot: 11,
        armor: 77,
        magic: 60,
        cooldown: .04,
        min_magic: 90,
        enchant_id: 1577,
        price: 443465
    }
}, 1);

item_base[988] = createObject({
    b_i: 988,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Needle For Robe Bottoms",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 120
    }
}, 1);

item_base[989] = createObject({
    b_i: 989,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Needle For Robes",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 120
    }
}, 1);

item_base[990] = createObject({
    b_i: 990,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Thread",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 20
    },
    params: {
        wearable: !0,
        slot: 4,
        price: 228
    }
}, 1);

item_base[991] = createObject({
    b_i: 991,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Needle For Hats",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 120
    }
}, 1);

item_base[992] = createObject({
    b_i: 992,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Air Bolt Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 13,
        min_accuracy: 1,
        price: 1345,
        enchant_bonus: -.3,
        enchant_id: 998
    }
}, 1);

item_base[993] = createObject({
    b_i: 993,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Flash Bolt Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 10,
        min_accuracy: 1,
        price: 750,
        enchant_bonus: -.3,
        enchant_id: 997
    }
}, 1);

item_base[994] = createObject({
    b_i: 994,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Earth Bolt Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 15,
        min_accuracy: 1,
        price: 1687,
        enchant_bonus: -.3,
        enchant_id: 1e3
    }
}, 1);

item_base[995] = createObject({
    b_i: 995,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Water Bolt Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 17,
        min_accuracy: 1,
        price: 2065,
        enchant_bonus: -.3,
        enchant_id: 999
    }
}, 1);

item_base[996] = createObject({
    b_i: 996,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fire Bolt Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 19,
        min_accuracy: 1,
        price: 2478,
        enchant_bonus: -.3,
        enchant_id: 1001
    }
}, 1);

item_base[997] = createObject({
    b_i: 997,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Flash Missile Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 20,
        min_accuracy: 1,
        price: 1387,
        enchant_bonus: -.3,
        enchant_id: 1002
    }
}, 1);

item_base[998] = createObject({
    b_i: 998,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Air Missile Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 23,
        min_accuracy: 1,
        price: 2489,
        enchant_bonus: -.3,
        enchant_id: 1003
    }
}, 1);

item_base[999] = createObject({
    b_i: 999,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Water Missile Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 26,
        min_accuracy: 1,
        price: 3121,
        enchant_bonus: -.3,
        enchant_id: 1005
    }
}, 1);

item_base[1e3] = createObject({
    b_i: 1e3,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Earth Missile Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 28,
        min_accuracy: 1,
        price: 3821,
        enchant_bonus: -.3,
        enchant_id: 1004
    }
}, 1);

item_base[1001] = createObject({
    b_i: 1001,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fire Missile Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 30,
        min_accuracy: 1,
        price: 4587,
        enchant_bonus: -.3,
        enchant_id: 1006
    }
}, 1);

item_base[1002] = createObject({
    b_i: 1002,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Flash Wave Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 34,
        min_accuracy: 1,
        price: 2566,
        enchant_bonus: -.3,
        enchant_id: 1007
    }
}, 1);

item_base[1003] = createObject({
    b_i: 1003,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Air Wave Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 38,
        min_accuracy: 1,
        price: 4604,
        enchant_bonus: -.3,
        enchant_id: 1008
    }
}, 1);

item_base[1004] = createObject({
    b_i: 1004,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Earth Wave Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 42,
        min_accuracy: 1,
        price: 5775,
        enchant_bonus: -.3,
        enchant_id: 1009
    }
}, 1);

item_base[1005] = createObject({
    b_i: 1005,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Water Wave Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 46,
        min_accuracy: 1,
        price: 7069,
        enchant_bonus: -.3,
        enchant_id: 1010
    }
}, 1);

item_base[1006] = createObject({
    b_i: 1006,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fire Wave Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 50,
        min_accuracy: 1,
        price: 8486,
        enchant_bonus: -.3,
        enchant_id: 1011
    }
}, 1);

item_base[1007] = createObject({
    b_i: 1007,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Flash Blast Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 55,
        min_accuracy: 1,
        price: 4748
    }
}, 1);

item_base[1008] = createObject({
    b_i: 1008,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Air Blast Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 60,
        min_accuracy: 1,
        price: 8519
    }
}, 1);

item_base[1009] = createObject({
    b_i: 1009,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Earth Blast Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 65,
        min_accuracy: 1,
        price: 10684
    }
}, 1);

item_base[1010] = createObject({
    b_i: 1010,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Water Blast Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 70,
        min_accuracy: 1,
        price: 13077
    }
}, 1);

item_base[1011] = createObject({
    b_i: 1011,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Fire Blast Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 72,
        min_accuracy: 1,
        price: 15699
    }
}, 1);

item_base[1012] = createObject({
    b_i: 1012,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Flannel Fabric",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 34,
        price: 3005
    }
}, 1);

item_base[1013] = createObject({
    b_i: 1013,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Jute Fabric",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 55,
        price: 4752
    }
}, 1);

item_base[1014] = createObject({
    b_i: 1014,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Silk Fabric",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 16
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 65,
        price: 6900
    }
}, 1);

item_base[1015] = createObject({
    b_i: 1015,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragon Herb Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 80,
        price: 5e3,
        farming_id: 437
    }
}, 1);

item_base[1016] = createObject({
    b_i: 1016,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Mortar And Pestle",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 4,
        min_alchemy: 1,
        price: 320
    }
}, 1);

item_base[1017] = createObject({
    b_i: 1017,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Trout With Potatoes",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 10
    },
    params: {
        wearable: !1,
        heal: 7,
        price: 110
    }
}, 1);

item_base[1018] = createObject({
    b_i: 1018,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Lion Fish Soup",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 14,
        price: 508
    }
}, 1);

item_base[1019] = createObject({
    b_i: 1019,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Egg Of Hope",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 20
    },
    params: {
        wearable: !1,
        price: 1,
        heal: 40
    }
}, 1);

item_base[1020] = createObject({
    b_i: 1020,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Egg Of Courage",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 20
    },
    params: {
        wearable: !1,
        boost_accuracy: .25,
        price: 1
    }
}, 1);

item_base[1021] = createObject({
    b_i: 1021,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Egg Of Bravery",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 20
    },
    params: {
        wearable: !1,
        boost_strength: .25,
        price: 1
    }
}, 1);

item_base[1022] = createObject({
    b_i: 1022,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Egg Of Wishes",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 20
    },
    params: {
        wearable: !1,
        boost_defense: .25,
        price: 1
    }
}, 1);

item_base[1023] = createObject({
    b_i: 1023,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Pineapple Juice",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 14
    },
    params: {
        wearable: !1,
        heal: 12,
        price: 420
    }
}, 1);

item_base[1024] = createObject({
    b_i: 1024,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Root Beer",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 16
    },
    params: {
        wearable: !1,
        boost_strength: .06,
        boost_accuracy: -.02,
        price: 188
    }
}, 1);

item_base[1025] = createObject({
    b_i: 1025,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Rock Squid Soup",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 20
    },
    params: {
        wearable: !1,
        heal: 19,
        price: 780
    }
}, 1);

item_base[1026] = createObject({
    b_i: 1026,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Lobster Curry",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 20
    },
    params: {
        wearable: !1,
        heal: 16,
        price: 882
    }
}, 1);

item_base[1027] = createObject({
    b_i: 1027,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Salmon Soup",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 20
    },
    params: {
        wearable: !1,
        heal: 12,
        price: 360
    }
}, 1);

item_base[1028] = createObject({
    b_i: 1028,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Hammer Shark Dish",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 21
    },
    params: {
        wearable: !1,
        heal: 23,
        price: 1046
    }
}, 1);

item_base[1029] = createObject({
    b_i: 1029,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Manta Ray Steak",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 21
    },
    params: {
        wearable: !1,
        heal: 25,
        price: 1562
    }
}, 1);

item_base[1030] = createObject({
    b_i: 1030,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Dolphin Sushi",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 21
    },
    params: {
        wearable: !1,
        heal: 20,
        price: 880
    }
}, 1);

item_base[1031] = createObject({
    b_i: 1031,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Repeat Quest Permission",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 16
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 7e3
    }
}, 1);

item_base[1032] = createObject({
    b_i: 1032,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            pants: 50
        },
        slot: 11,
        armor: 155,
        min_defense: 105,
        price: 1194325,
        enchant_id: 971
    }
}, 1);

item_base[1033] = createObject({
    b_i: 1033,
    b_t: ITEM_CATEGORY.FOOD,
    name: "2x Experience Potion",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 15
    },
    params: {
        wearable: !1,
        price: 449e3,
        boost_accuracy: .15,
        boost_strength: .15,
        boost_defense: .15,
        boost_magic: .15,
        boost_mining: .15,
        boost_cooking: .15,
        boost_fishing: .15,
        boost_woodcutting: .15,
        desc: "Experience lasts for 30 minutes(for all players)",
        no_present: !0
    }
}, 1);

item_base[1034] = createObject({
    b_i: 1034,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cotton Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 3,
        price: 240,
        farming_id: 439
    }
}, 1);

item_base[1035] = createObject({
    b_i: 1035,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bamboo Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 20,
        price: 716,
        farming_id: 440
    }
}, 1);

item_base[1036] = createObject({
    b_i: 1036,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Iron Fishing Rod",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 159
        },
        slot: 4,
        min_fishing: 65,
        price: 2860
    }
}, 1);

item_base[1037] = createObject({
    b_i: 1037,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Kronos Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 34
        },
        slot: 3,
        armor: 170,
        min_defense: 95,
        price: 677370,
        enchant_id: 1040
    }
}, 1);

item_base[1038] = createObject({
    b_i: 1038,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 35
        },
        slot: 3,
        armor: 240,
        min_defense: 105,
        price: 1341324,
        enchant_id: 1039
    }
}, 1);

item_base[1039] = createObject({
    b_i: 1039,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ichor Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 36
        },
        slot: 3,
        armor: 300,
        min_defense: 105,
        price: 2481449
    }
}, 1);

item_base[1040] = createObject({
    b_i: 1040,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Kronos Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 37
        },
        slot: 3,
        armor: 212,
        min_defense: 95,
        price: 1253135
    }
}, 1);

item_base[1041] = createObject({
    b_i: 1041,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Blue)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 50
        },
        slot: 0,
        armor: 20,
        aim: 20,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "1st anniversary"
    }
}, 1);

item_base[1042] = createObject({
    b_i: 1042,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Red)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 49
        },
        slot: 0,
        armor: 50,
        aim: 30,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "1st anniversary"
    }
}, 1);

item_base[1043] = createObject({
    b_i: 1043,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Monk Wand",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 54
        },
        slot: 4,
        aim: 7,
        power: 1,
        magic: 14,
        cooldown: .02,
        no_present: !0,
        min_magic: 10,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 1e4,
        enchant_id: 1044
    }
}, 1);

item_base[1044] = createObject({
    b_i: 1044,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Monk Wand +1",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 55
        },
        slot: 4,
        aim: 12,
        power: 1,
        magic: 30,
        no_present: !0,
        cooldown: .03,
        min_magic: 15,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 2e4,
        enchant_id: 1045
    }
}, 1);

item_base[1045] = createObject({
    b_i: 1045,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Angelic Wand +2",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 161
        },
        slot: 4,
        aim: 20,
        power: 1,
        magic: 45,
        cooldown: .04,
        no_present: !0,
        min_magic: 25,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 3e4,
        enchant_id: 1046
    }
}, 1);

item_base[1046] = createObject({
    b_i: 1046,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Serpent Wand +3",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 162
        },
        slot: 4,
        aim: 37,
        power: 1,
        magic: 50,
        cooldown: .06,
        no_present: !0,
        min_magic: 35,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 4e4,
        enchant_id: 1047
    }
}, 1);

item_base[1047] = createObject({
    b_i: 1047,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Gorgon Wand +4",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 163
        },
        slot: 4,
        aim: 67,
        power: 1,
        magic: 75,
        cooldown: .07,
        no_present: !0,
        min_magic: 40,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 6e4,
        enchant_id: 1048
    }
}, 1);

item_base[1048] = createObject({
    b_i: 1048,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Legendary Wand +5",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 164
        },
        slot: 4,
        aim: 70,
        power: 1,
        magic: 85,
        cooldown: .07,
        no_present: !0,
        min_accuracy: 1,
        min_magic: 45,
        price: 9e4
    }
}, 1);

item_base[1049] = createObject({
    b_i: 1049,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Misery Staff +6",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 165
        },
        slot: 4,
        aim: 40,
        power: 1,
        magic: 45,
        cooldown: .16,
        no_present: !0,
        min_magic: 50,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 15e4,
        enchant_id: 1050
    }
}, 1);

item_base[1050] = createObject({
    b_i: 1050,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ancient Staff +7",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 166
        },
        slot: 4,
        aim: 60,
        power: 1,
        magic: 50,
        cooldown: .2,
        no_present: !0,
        min_magic: 60,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 25e4,
        enchant_id: 1051
    }
}, 1);

item_base[1051] = createObject({
    b_i: 1051,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Divine Staff +8",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 167
        },
        slot: 4,
        aim: 62,
        power: 1,
        magic: 62,
        cooldown: .24,
        no_present: !0,
        min_magic: 70,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 4e5,
        enchant_id: 1052
    }
}, 1);

item_base[1052] = createObject({
    b_i: 1052,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Demonic Staff +9",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 17
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 168
        },
        slot: 4,
        aim: 75,
        power: 1,
        magic: 76,
        cooldown: .28,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .3,
        enchant_id: 1671,
        min_magic: 80,
        price: 95e4
    }
}, 1);

item_base[1053] = createObject({
    b_i: 1053,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Resurrection Scepter +6",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 169
        },
        slot: 4,
        aim: 90,
        power: 1,
        magic: 90,
        cooldown: .08,
        no_present: !0,
        min_magic: 50,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 15e4,
        enchant_id: 1054
    }
}, 1);

item_base[1054] = createObject({
    b_i: 1054,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Unicorn Scepter +7",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 170
        },
        slot: 4,
        aim: 101,
        power: 1,
        magic: 99,
        cooldown: .09,
        no_present: !0,
        min_magic: 60,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 25e4,
        enchant_id: 1055
    }
}, 1);

item_base[1055] = createObject({
    b_i: 1055,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Kundun Scepter +8",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 171
        },
        slot: 4,
        aim: 116,
        power: 1,
        magic: 111,
        cooldown: .1,
        no_present: !0,
        min_magic: 70,
        min_accuracy: 1,
        enchant_bonus: .3,
        price: 4e5,
        enchant_id: 1056
    }
}, 1);

item_base[1056] = createObject({
    b_i: 1056,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Imperial Scepter +9",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 172
        },
        slot: 4,
        aim: 126,
        power: 1,
        magic: 128,
        cooldown: .11,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .3,
        enchant_id: 1653,
        min_magic: 80,
        price: 95e4
    }
}, 1);

item_base[1057] = createObject({
    b_i: 1057,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Yellow Key",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 16,
        min_accuracy: 1,
        price: 1e4
    }
}, 1);

item_base[1058] = createObject({
    b_i: 1058,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Blue Key",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 17,
        min_accuracy: 1,
        price: 1e4
    }
}, 1);

item_base[1059] = createObject({
    b_i: 1059,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Red Key",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 18,
        min_accuracy: 1,
        price: 1e4
    }
}, 1);

item_base[1060] = createObject({
    b_i: 1060,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Lock Pick",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 4,
        min_accuracy: 1,
        price: 3e5
    }
}, 1);

item_base[1061] = createObject({
    b_i: 1061,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Kronos Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 173
        },
        slot: 4,
        aim: 232,
        power: 238,
        min_accuracy: 95,
        price: 2293250
    }
}, 1);

item_base[1062] = createObject({
    b_i: 1062,
    b_t: ITEM_CATEGORY.PET,
    name: "Nephilim Slave [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1e5,
        min_health: 10,
        pet: 54
    }
}, 1);

item_base[1063] = createObject({
    b_i: 1063,
    b_t: ITEM_CATEGORY.PET,
    name: "Nephilim Protector [Legendary]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 60,
        power: 50,
        armor: 70,
        magic: 25,
        min_health: 73,
        price: 2401e3,
        pet: 55
    }
}, 1);

item_base[1064] = createObject({
    b_i: 1064,
    b_t: ITEM_CATEGORY.PET,
    name: "Flame Phoenix [Rare]",
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 20,
        armor: 70,
        magic: 70,
        min_health: 56,
        price: 1117465,
        pet: 56
    }
}, 1);

item_base[1065] = createObject({
    b_i: 1065,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Amethyst Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 19
        },
        slot: 6,
        armor: 57,
        speed: 28,
        min_defense: 80,
        price: 174960
    }
}, 1);

item_base[1066] = createObject({
    b_i: 1066,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Juggernaut boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 77,
        power: 20,
        speed: 20,
        min_defense: 95,
        price: 348768
    }
}, 1);

item_base[1067] = createObject({
    b_i: 1067,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            boots: 5
        },
        slot: 6,
        armor: 100,
        aim: 20,
        speed: 28,
        min_defense: 105,
        price: 606614
    }
}, 1);

item_base[1068] = createObject({
    b_i: 1068,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            boots: 4
        },
        slot: 6,
        armor: 120,
        aim: 15,
        power: 10,
        speed: 31,
        min_defense: 110,
        price: 2040775
    }
}, 1);

item_base[1069] = createObject({
    b_i: 1069,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wizard Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 9
        },
        slot: 6,
        armor: 8,
        magic: 8,
        speed: 5,
        cooldown: .01,
        min_magic: 1,
        price: 1560
    }
}, 1);

item_base[1070] = createObject({
    b_i: 1070,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Witch Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 7
        },
        slot: 6,
        armor: 12,
        magic: 12,
        speed: 5,
        cooldown: .01,
        min_magic: 15,
        price: 5358
    }
}, 1);

item_base[1071] = createObject({
    b_i: 1071,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Veles Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 1
        },
        slot: 6,
        armor: 14,
        magic: 14,
        speed: 5,
        cooldown: .01,
        min_magic: 25,
        price: 11524
    }
}, 1);

item_base[1072] = createObject({
    b_i: 1072,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Battlemage Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 16,
        magic: 16,
        speed: 10,
        cooldown: .02,
        min_magic: 35,
        price: 28821
    }
}, 1);

item_base[1073] = createObject({
    b_i: 1073,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Heka Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 10
        },
        slot: 6,
        armor: 22,
        magic: 20,
        speed: 10,
        cooldown: .02,
        min_magic: 45,
        price: 34723
    }
}, 1);

item_base[1074] = createObject({
    b_i: 1074,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Merlin Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            boots: 19
        },
        slot: 6,
        armor: 28,
        magic: 24,
        speed: 15,
        cooldown: .02,
        min_magic: 55,
        price: 63690
    }
}, 1);

item_base[1075] = createObject({
    b_i: 1075,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enki Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            boots: 5
        },
        slot: 6,
        armor: 30,
        magic: 27,
        speed: 20,
        cooldown: .03,
        min_magic: 65,
        price: 89454
    }
}, 1);

item_base[1076] = createObject({
    b_i: 1076,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Grendalf Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 44,
        magic: 32,
        speed: 20,
        cooldown: .03,
        min_magic: 75,
        price: 158550
    }
}, 1);

item_base[1077] = createObject({
    b_i: 1077,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Odin Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 50,
        magic: 36,
        speed: 25,
        cooldown: .03,
        min_magic: 85,
        price: 212320
    }
}, 1);

item_base[1078] = createObject({
    b_i: 1078,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Shiva Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 56,
        magic: 42,
        speed: 25,
        cooldown: .04,
        min_magic: 90,
        price: 380584
    }
}, 1);

item_base[1079] = createObject({
    b_i: 1079,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demigod Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 62,
        magic: 50,
        speed: 25,
        cooldown: .04,
        min_magic: 95,
        price: 971688
    }
}, 1);

item_base[1080] = createObject({
    b_i: 1080,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 55,
        power: 10,
        aim: 10,
        speed: 27,
        min_defense: 70,
        price: 121500
    }
}, 1);

item_base[1081] = createObject({
    b_i: 1081,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion Of Oblivion",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 16
    },
    params: {
        wearable: !1,
        price: 5e4,
        desc: "Removes 1 skill level"
    }
}, 1);

item_base[1082] = createObject({
    b_i: 1082,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +6",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 55,
        speed: 36,
        power: 5,
        no_present: !0,
        min_defense: 60,
        price: 24e4,
        enchant_bonus: .3,
        enchant_id: 1083
    }
}, 1);

item_base[1083] = createObject({
    b_i: 1083,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +7",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 70,
        speed: 40,
        aim: 5,
        power: 8,
        enchant_bonus: .3,
        enchant_id: 1591,
        min_defense: 70,
        price: 36e4
    }
}, 1);

item_base[1084] = createObject({
    b_i: 1084,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Needle For Boots",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 120
    }
}, 1);

item_base[1085] = createObject({
    b_i: 1085,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 8325,
        armor: 13
    }
}, 1);

item_base[1086] = createObject({
    b_i: 1086,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        min_health: 12,
        slot: 8,
        price: 12765,
        magic: 13
    }
}, 1);

item_base[1087] = createObject({
    b_i: 1087,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        min_health: 14,
        slot: 8,
        price: 19332,
        power: 14,
        aim: 14
    }
}, 1);

item_base[1088] = createObject({
    b_i: 1088,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 16,
        price: 33115,
        magic: 17,
        armor: 17,
        aim: 17,
        power: 17
    }
}, 1);

item_base[1089] = createObject({
    b_i: 1089,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        min_health: 20,
        slot: 8,
        price: 13320,
        armor: 17
    }
}, 1);

item_base[1090] = createObject({
    b_i: 1090,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 22,
        price: 17760,
        magic: 17
    }
}, 1);

item_base[1091] = createObject({
    b_i: 1091,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 24,
        price: 25160,
        aim: 18,
        power: 18
    }
}, 1);

item_base[1092] = createObject({
    b_i: 1092,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        min_health: 26,
        slot: 8,
        price: 38110,
        aim: 21,
        power: 21,
        magic: 21,
        armor: 21
    }
}, 1);

item_base[1093] = createObject({
    b_i: 1093,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        min_health: 30,
        slot: 8,
        price: 21460,
        armor: 25
    }
}, 1);

item_base[1094] = createObject({
    b_i: 1094,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 9
    },
    params: {
        wearable: !0,
        min_health: 33,
        slot: 8,
        price: 30340,
        magic: 25
    }
}, 1);

item_base[1095] = createObject({
    b_i: 1095,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 9
    },
    params: {
        wearable: !0,
        min_health: 36,
        slot: 8,
        price: 45140,
        power: 28,
        aim: 28
    }
}, 1);

item_base[1096] = createObject({
    b_i: 1096,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        min_health: 40,
        slot: 8,
        price: 71040,
        armor: 34,
        power: 34,
        aim: 34,
        magic: 34
    }
}, 1);

item_base[1097] = createObject({
    b_i: 1097,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Amethyst Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 45,
        price: 105080,
        armor: 39,
        magic: 39
    }
}, 1);

item_base[1098] = createObject({
    b_i: 1098,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Sapphire Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 47360,
        armor: 42
    }
}, 1);

item_base[1099] = createObject({
    b_i: 1099,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Emerald Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 55,
        price: 65120,
        magic: 42
    }
}, 1);

item_base[1100] = createObject({
    b_i: 1100,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Ruby Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 94720,
        aim: 48,
        power: 48
    }
}, 1);

item_base[1101] = createObject({
    b_i: 1101,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Diamond Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 65,
        price: 146520,
        magic: 42,
        armor: 59,
        aim: 59,
        power: 59
    }
}, 1);

item_base[1102] = createObject({
    b_i: 1102,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Amethyst Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        min_health: 70,
        slot: 8,
        price: 374255,
        armor: 70,
        magic: 70
    }
}, 1);

item_base[1103] = createObject({
    b_i: 1103,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Black Opal Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 75,
        price: 393680,
        magic: 49,
        armor: 64,
        aim: 64,
        power: 64
    }
}, 1);

item_base[1104] = createObject({
    b_i: 1104,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Jadeite Ring",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        min_health: 80,
        slot: 8,
        price: 74e4,
        power: 85,
        aim: 85,
        armor: 85,
        magic: 56
    }
}, 1);

item_base[1105] = createObject({
    b_i: 1105,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        price: 10175,
        armor: 14
    }
}, 1);

item_base[1106] = createObject({
    b_i: 1106,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 12,
        price: 14165,
        magic: 14
    }
}, 1);

item_base[1107] = createObject({
    b_i: 1107,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 22015,
        min_health: 14,
        power: 15,
        aim: 15
    }
}, 1);

item_base[1108] = createObject({
    b_i: 1108,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Silver Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 34965,
        min_health: 16,
        armor: 18,
        power: 18,
        magic: 18,
        aim: 18
    }
}, 1);

item_base[1109] = createObject({
    b_i: 1109,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 20720,
        min_health: 20,
        armor: 18
    }
}, 1);

item_base[1110] = createObject({
    b_i: 1110,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 25160,
        min_health: 22,
        magic: 18
    }
}, 1);

item_base[1111] = createObject({
    b_i: 1111,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 24,
        price: 32560,
        aim: 20,
        power: 20
    }
}, 1);

item_base[1112] = createObject({
    b_i: 1112,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Golden Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 26,
        price: 45510,
        magic: 22,
        armor: 22,
        aim: 22,
        power: 22
    }
}, 1);

item_base[1113] = createObject({
    b_i: 1113,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 52540,
        min_health: 30,
        armor: 32
    }
}, 1);

item_base[1114] = createObject({
    b_i: 1114,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 65860,
        min_health: 33,
        magic: 32
    }
}, 1);

item_base[1115] = createObject({
    b_i: 1115,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 88060,
        min_health: 36,
        power: 36,
        aim: 36
    }
}, 1);

item_base[1116] = createObject({
    b_i: 1116,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 126910,
        min_health: 40,
        power: 45,
        aim: 45,
        magic: 45,
        armor: 45
    }
}, 1);

item_base[1117] = createObject({
    b_i: 1117,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted White Gold Amethyst Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 45,
        price: 165760,
        armor: 53,
        magic: 53
    }
}, 1);

item_base[1118] = createObject({
    b_i: 1118,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Sapphire Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        price: 82880,
        armor: 56
    }
}, 1);

item_base[1119] = createObject({
    b_i: 1119,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Emerald Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 55,
        price: 109520,
        magic: 56
    }
}, 1);

item_base[1120] = createObject({
    b_i: 1120,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Ruby Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        price: 153920,
        aim: 64,
        power: 64
    }
}, 1);

item_base[1121] = createObject({
    b_i: 1121,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Diamond Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 65,
        price: 231620,
        magic: 63,
        armor: 81,
        aim: 81,
        power: 81
    }
}, 1);

item_base[1122] = createObject({
    b_i: 1122,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Amethyst Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 400062,
        min_health: 70,
        magic: 91,
        armor: 91
    }
}, 1);

item_base[1123] = createObject({
    b_i: 1123,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Black Opal Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 681818,
        min_health: 75,
        power: 91,
        aim: 91,
        magic: 65,
        armor: 91
    }
}, 1);

item_base[1124] = createObject({
    b_i: 1124,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Enchanted Platinum Jadeite Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        price: 1082250,
        min_health: 80,
        magic: 75,
        armor: 101,
        aim: 101,
        power: 101
    }
}, 1);

item_base[1125] = createObject({
    b_i: 1125,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Low Jewelry Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e3
    }
}, 1);

item_base[1126] = createObject({
    b_i: 1126,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Medium Jewelry Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5e4
    }
}, 1);

item_base[1127] = createObject({
    b_i: 1127,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "High Jewelry Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 15e4
    }
}, 1);

item_base[1128] = createObject({
    b_i: 1128,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Superior Jewelry Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e5
    }
}, 1);

item_base[1129] = createObject({
    b_i: 1129,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Tombstone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 462
    }
}, 1);

item_base[1130] = createObject({
    b_i: 1130,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Tombstone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 463
    }
}, 1);

item_base[1131] = createObject({
    b_i: 1131,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Reaper Memorial",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 464
    }
}, 1);

item_base[1132] = createObject({
    b_i: 1132,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Gargoyle Statue",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 465
    }
}, 1);

item_base[1133] = createObject({
    b_i: 1133,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Gargoyle Statue",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 466
    }
}, 1);

item_base[1134] = createObject({
    b_i: 1134,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Gargoyle Statue",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 467
    }
}, 1);

item_base[1135] = createObject({
    b_i: 1135,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Small Tombstone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 468
    }
}, 1);

item_base[1136] = createObject({
    b_i: 1136,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Small Tombstone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 469
    }
}, 1);

item_base[1137] = createObject({
    b_i: 1137,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Small Tombstone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 470
    }
}, 1);

item_base[1138] = createObject({
    b_i: 1138,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Reaper Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 4,
        price: 1,
        desc: "Reaper has a soul"
    }
}, 1);

item_base[1139] = createObject({
    b_i: 1139,
    b_t: ITEM_CATEGORY.PET,
    name: "Angry Witch [Legendary]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        magic: 45,
        price: 1,
        min_health: 20,
        pet: 57
    }
}, 1);

item_base[1140] = createObject({
    b_i: 1140,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Unicorn Blood Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 1,
        price: 1,
        armor: 22,
        accuracy: 20,
        power: 22,
        magic: 22
    }
}, 1);

item_base[1141] = createObject({
    b_i: 1141,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Cursed Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 30,
        price: 1,
        accuracy: 31,
        power: 31
    }
}, 1);

item_base[1142] = createObject({
    b_i: 1142,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Resurrection Necklace",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 13
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 45,
        price: 1,
        armor: 50,
        power: 25
    }
}, 1);

item_base[1143] = createObject({
    b_i: 1143,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Guild Deed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 12
    },
    params: {
        wearable: !1,
        price: 1e5,
        no_present: !0,
        desc: "Can be used to create a guild or visit one."
    }
}, 1);

item_base[1144] = createObject({
    b_i: 1144,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Candy Cane",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 175
        },
        slot: 4,
        aim: 20,
        magic: 25,
        min_magic: 15,
        price: 1
    }
}, 1);

item_base[1145] = createObject({
    b_i: 1145,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Candy Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 174
        },
        slot: 4,
        aim: 25,
        power: 25,
        min_accuracy: 15,
        price: 1
    }
}, 1);

item_base[1146] = createObject({
    b_i: 1146,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Candy Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 38
        },
        slot: 3,
        armor: 25,
        min_defense: 15,
        price: 1
    }
}, 1);

item_base[1147] = createObject({
    b_i: 1147,
    b_t: ITEM_CATEGORY.PET,
    name: "Rudolph [Legendary]",
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        speed: 30,
        aim: 10,
        armor: 25,
        price: 1,
        min_health: 55,
        pet: 58
    }
}, 1);

item_base[1148] = createObject({
    b_i: 1148,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Santa's Bag",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 10,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 53
        },
        slot: 3,
        magic_slots: 5,
        armor: 75,
        min_magic: 85,
        price: 1
    }
}, 1);

item_base[1149] = createObject({
    b_i: 1149,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Legendary Present",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 24
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "Contains a random item with value up to " + thousandSeperate(15e5) + " coins",
        no_present: !0
    }
}, 1);

item_base[1150] = createObject({
    b_i: 1150,
    b_t: ITEM_CATEGORY.PET,
    name: "Piglet [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 25,
        speed: -10,
        armor: 35,
        price: 2e5,
        min_health: 10,
        pet: 59
    }
}, 1);

item_base[1151] = createObject({
    b_i: 1151,
    b_t: ITEM_CATEGORY.PET,
    name: "Pig [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 8,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 45,
        speed: -15,
        armor: 40,
        price: 6e5,
        min_health: 10,
        pet: 60
    }
}, 1);

item_base[1152] = createObject({
    b_i: 1152,
    b_t: ITEM_CATEGORY.SPELL,
    name: "Firecracker",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 10,
        min_magic: 1,
        magic: 26,
        price: 1
    }
}, 1);

item_base[1153] = createObject({
    b_i: 1153,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Rose Pouch",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 55
        },
        slot: 3,
        magic_slots: 5,
        cooldown: .03,
        aim: 40,
        min_magic: 85,
        price: 1
    }
}, 1);

item_base[1154] = createObject({
    b_i: 1154,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Rose Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 21
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 1,
        price: 1,
        farming_id: 477
    }
}, 1);

item_base[1155] = createObject({
    b_i: 1155,
    b_t: ITEM_CATEGORY.PET,
    name: "Armored Pig [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 9,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 50,
        speed: -20,
        armor: 70,
        price: 95e4,
        min_health: 10,
        pet: 61
    }
}, 1);

item_base[1156] = createObject({
    b_i: 1156,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Rose Sword",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 176
        },
        slot: 4,
        aim: 25,
        power: 45,
        min_accuracy: 15,
        price: 1
    }
}, 1);

item_base[1157] = createObject({
    b_i: 1157,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Rose",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 18
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 177
        },
        slot: 4,
        aim: 25,
        power: 25,
        price: 1
    }
}, 1);

item_base[1158] = createObject({
    b_i: 1158,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Heart Shaped Candy",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 3
    },
    params: {
        wearable: !1,
        price: 1,
        heal: 30
    }
}, 1);

item_base[1159] = createObject({
    b_i: 1159,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Needle",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 120
    }
}, 1);

item_base[1160] = createObject({
    b_i: 1160,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Rare Present",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 25
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "Contains a random rare item from an event",
        no_present: !0
    }
}, 1);

item_base[1161] = createObject({
    b_i: 1161,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 51
        },
        slot: 0,
        armor: 130,
        no_present: !0,
        min_defense: 105,
        enchant_bonus: .2,
        enchant_id: 1495,
        price: 1425124
    }
}, 1);

item_base[1162] = createObject({
    b_i: 1162,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            pants: 61
        },
        slot: 11,
        armor: 188,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1508,
        min_defense: 105,
        price: 1435322
    }
}, 1);

item_base[1163] = createObject({
    b_i: 1163,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            body: 92
        },
        slot: 2,
        armor: 219,
        min_defense: 105,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1484,
        price: 1762882
    }
}, 1);

item_base[1164] = createObject({
    b_i: 1164,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 39
        },
        slot: 3,
        armor: 290,
        min_defense: 105,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1475,
        price: 1423222
    }
}, 1);

item_base[1165] = createObject({
    b_i: 1165,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Flag of Estonia",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 1e5,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 478,
        no_present: !0
    }
}, 1);

item_base[1166] = createObject({
    b_i: 1166,
    b_t: ITEM_CATEGORY.PET,
    name: "Gray Werewolf [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 62,
        aim: 17,
        power: 25,
        armor: 25,
        magic: 25,
        min_health: 18,
        price: 90220
    }
}, 1);

item_base[1167] = createObject({
    b_i: 1167,
    b_t: ITEM_CATEGORY.PET,
    name: "Warg [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 63,
        aim: 19,
        power: 28,
        armor: 28,
        magic: 28,
        min_health: 24,
        price: 103753
    }
}, 1);

item_base[1168] = createObject({
    b_i: 1168,
    b_t: ITEM_CATEGORY.PET,
    name: "Swamp Guru [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 64,
        aim: 14,
        power: 17,
        armor: 21,
        magic: 23,
        min_health: 15,
        price: 82586,
        no_present: !0
    }
}, 1);

item_base[1169] = createObject({
    b_i: 1169,
    b_t: ITEM_CATEGORY.PET,
    name: "Ghost Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 962404,
        aim: 40,
        armor: 66,
        magic: 52,
        min_health: 49,
        pet: 65,
        no_present: !0
    }
}, 1);

item_base[1170] = createObject({
    b_i: 1170,
    b_t: ITEM_CATEGORY.PET,
    name: "Kobalos [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 27e3,
        min_health: 10,
        no_present: !0,
        pet: 66
    }
}, 1);

item_base[1171] = createObject({
    b_i: 1171,
    b_t: ITEM_CATEGORY.PET,
    name: "Leprechaun [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 10,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 40,
        armor: 40,
        price: 406250,
        min_health: 20,
        pet: 67
    }
}, 1);

item_base[1172] = createObject({
    b_i: 1172,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "3-leaf clover",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 23
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 5e3
    }
}, 1);

item_base[1173] = createObject({
    b_i: 1173,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "4-leaf clover",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 23
    },
    params: {
        wearable: !0,
        slot: 15,
        price: 25e3
    }
}, 1);

item_base[1174] = createObject({
    b_i: 1174,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Leprechaun Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 22
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 52
        },
        slot: 0,
        armor: 25,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[1175] = createObject({
    b_i: 1175,
    b_t: ITEM_CATEGORY.PET,
    name: "Lion [Common]",
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 15,
        armor: 15,
        min_health: 18,
        price: 92700,
        pet: 68
    }
}, 1);

item_base[1176] = createObject({
    b_i: 1176,
    b_t: ITEM_CATEGORY.PET,
    name: "Desert Scorpion [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 5,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 4,
        armor: 2,
        aim: 10,
        speed: -5,
        min_health: 16,
        price: 88700,
        pet: 69
    }
}, 1);

item_base[1177] = createObject({
    b_i: 1177,
    b_t: ITEM_CATEGORY.PET,
    name: "Deathstalker Scorpion [Common]",
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 10,
        armor: 5,
        aim: 25,
        speed: -8,
        min_health: 16,
        price: 115310,
        pet: 70
    }
}, 1);

item_base[1178] = createObject({
    b_i: 1178,
    b_t: ITEM_CATEGORY.PET,
    name: "Emperor Scorpion [Rare]",
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        slot: 12,
        power: 15,
        armor: 10,
        aim: 35,
        speed: -8,
        min_health: 16,
        price: 394138,
        pet: 71
    }
}, 1);

item_base[1179] = createObject({
    b_i: 1179,
    b_t: ITEM_CATEGORY.PET,
    name: "Brown Werewolf [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 72,
        aim: 17,
        power: 25,
        armor: 25,
        magic: 25,
        min_health: 18,
        price: 90220
    }
}, 1);

item_base[1180] = createObject({
    b_i: 1180,
    b_t: ITEM_CATEGORY.PET,
    name: "Dark Pegasus [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3480361,
        aim: 40,
        power: 17,
        armor: 98,
        magic: 98,
        speed: 9,
        min_health: 83,
        pet: 73,
        no_present: !0
    }
}, 1);

item_base[1181] = createObject({
    b_i: 1181,
    b_t: ITEM_CATEGORY.PET,
    name: "Sleipnir [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 5209164,
        aim: 68,
        power: 68,
        armor: 68,
        speed: 34,
        min_health: 93,
        pet: 74,
        no_present: !0
    }
}, 1);

item_base[1182] = createObject({
    b_i: 1182,
    b_t: ITEM_CATEGORY.PET,
    name: "HellKyte [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2244109,
        aim: 15,
        power: 38,
        armor: 11,
        magic: 23,
        min_health: 73,
        pet: 75,
        no_present: !0
    }
}, 1);

item_base[1183] = createObject({
    b_i: 1183,
    b_t: ITEM_CATEGORY.PET,
    name: "Ifrit [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4510142,
        aim: 23,
        power: 57,
        min_health: 90,
        pet: 76,
        no_present: !0
    }
}, 1);

item_base[1184] = createObject({
    b_i: 1184,
    b_t: ITEM_CATEGORY.PET,
    name: "Death Knight [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2980383,
        aim: 40,
        power: 72,
        min_health: 80,
        pet: 77,
        no_present: !0
    }
}, 1);

item_base[1185] = createObject({
    b_i: 1185,
    b_t: ITEM_CATEGORY.PET,
    name: "Shiva [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4236349,
        aim: 69,
        power: 58,
        armor: 98,
        magic: 58,
        min_health: 90,
        pet: 78,
        no_present: !0
    }
}, 1);

item_base[1186] = createObject({
    b_i: 1186,
    b_t: ITEM_CATEGORY.PET,
    name: "Fire Overlord [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4023517,
        aim: 53,
        power: 94,
        min_health: 86,
        pet: 79,
        no_present: !0
    }
}, 1);

item_base[1187] = createObject({
    b_i: 1187,
    b_t: ITEM_CATEGORY.PET,
    name: "Lionhead Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1819147,
        aim: 66,
        power: 46,
        armor: 66,
        magic: 14,
        min_health: 69,
        pet: 80,
        no_present: !0
    }
}, 1);

item_base[1188] = createObject({
    b_i: 1188,
    b_t: ITEM_CATEGORY.PET,
    name: "Horntail [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1122545,
        aim: 55,
        armor: 60,
        magic: 66,
        min_health: 56,
        pet: 81,
        no_present: !0
    }
}, 1);

item_base[1189] = createObject({
    b_i: 1189,
    b_t: ITEM_CATEGORY.PET,
    name: "Rael [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 7401510,
        aim: 113,
        power: 79,
        armor: 113,
        magic: 101,
        min_health: 96,
        pet: 82,
        no_present: !0
    }
}, 1);

item_base[1190] = createObject({
    b_i: 1190,
    b_t: ITEM_CATEGORY.PET,
    name: "Cursed Archangel [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 5482600,
        aim: 86,
        power: 60,
        armor: 86,
        magic: 77,
        min_health: 94,
        pet: 83,
        no_present: !0
    }
}, 1);

item_base[1191] = createObject({
    b_i: 1191,
    b_t: ITEM_CATEGORY.PET,
    name: "Jophiel the archangel [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3313312,
        aim: 63,
        power: 63,
        armor: 63,
        magic: 56,
        min_health: 80,
        pet: 84,
        no_present: !0
    }
}, 1);

item_base[1192] = createObject({
    b_i: 1192,
    b_t: ITEM_CATEGORY.PET,
    name: "Michael the archangel [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2881141,
        aim: 58,
        power: 58,
        armor: 58,
        magic: 52,
        min_health: 76,
        pet: 85,
        no_present: !0
    }
}, 1);

item_base[1193] = createObject({
    b_i: 1193,
    b_t: ITEM_CATEGORY.PET,
    name: "Obsidian Dragon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2927812,
        aim: 83,
        power: 83,
        armor: 90,
        min_health: 80,
        pet: 86,
        no_present: !0
    }
}, 1);

item_base[1194] = createObject({
    b_i: 1194,
    b_t: ITEM_CATEGORY.PET,
    name: "Ancient Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 372157,
        armor: 43,
        magic: 52,
        min_health: 39,
        pet: 87,
        no_present: !0
    }
}, 1);

item_base[1195] = createObject({
    b_i: 1195,
    b_t: ITEM_CATEGORY.PET,
    name: "Hydra [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 427981,
        armor: 47,
        magic: 56,
        min_health: 42,
        pet: 88,
        no_present: !0
    }
}, 1);

item_base[1196] = createObject({
    b_i: 1196,
    b_t: ITEM_CATEGORY.PET,
    name: "Wildfire Steed [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3858640,
        aim: 52,
        poweer: 52,
        armor: 52,
        speed: 26,
        min_health: 83,
        pet: 89,
        no_present: !0
    }
}, 1);

item_base[1197] = createObject({
    b_i: 1197,
    b_t: ITEM_CATEGORY.PET,
    name: "Giant Troll [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 164800,
        power: 25,
        armor: 15,
        min_health: 32,
        pet: 90,
        no_present: !0
    }
}, 1);

item_base[1198] = createObject({
    b_i: 1198,
    b_t: ITEM_CATEGORY.PET,
    name: "Manticore [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 675730,
        aim: 40,
        power: 26,
        armor: 20,
        speed: 12,
        min_health: 47,
        pet: 91,
        no_present: !0
    }
}, 1);

item_base[1199] = createObject({
    b_i: 1199,
    b_t: ITEM_CATEGORY.PET,
    name: "Fire Elemental [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2905084,
        aim: 17,
        power: 43,
        min_health: 80,
        pet: 92,
        no_present: !0
    }
}, 1);

item_base[1200] = createObject({
    b_i: 1200,
    b_t: ITEM_CATEGORY.PET,
    name: "Rathalos [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 373510,
        power: 56,
        armor: 56,
        min_health: 39,
        pet: 93,
        no_present: !0
    }
}, 1);

item_base[1201] = createObject({
    b_i: 1201,
    b_t: ITEM_CATEGORY.PET,
    name: "Saint Dragon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1530660,
        aim: 71,
        power: 75,
        armor: 64,
        magic: 19,
        min_health: 65,
        pet: 94,
        no_present: !0
    }
}, 1);

item_base[1202] = createObject({
    b_i: 1202,
    b_t: ITEM_CATEGORY.PET,
    name: "Ancient Ironbelly [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1515436,
        aim: 71,
        armor: 79,
        magic: 86,
        min_health: 65,
        pet: 95,
        no_present: !0
    }
}, 1);

item_base[1203] = createObject({
    b_i: 1203,
    b_t: ITEM_CATEGORY.PET,
    name: "Archsky Dragon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2002623,
        aim: 68,
        power: 98,
        armor: 68,
        min_health: 69,
        pet: 96,
        no_present: !0
    }
}, 1);

item_base[1204] = createObject({
    b_i: 1204,
    b_t: ITEM_CATEGORY.PET,
    name: "Flame Beholder [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1662303,
        aim: 12,
        power: 29,
        armor: 9,
        magic: 17,
        min_health: 65,
        pet: 97,
        no_present: !0
    }
}, 1);

item_base[1205] = createObject({
    b_i: 1205,
    b_t: ITEM_CATEGORY.PET,
    name: "Efreet Sultan [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2905084,
        aim: 17,
        power: 43,
        min_health: 76,
        pet: 98,
        no_present: !0
    }
}, 1);

item_base[1206] = createObject({
    b_i: 1206,
    b_t: ITEM_CATEGORY.PET,
    name: "Spiked Emerald Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 387946,
        power: 14,
        armor: 49,
        magic: 35,
        min_health: 41,
        pet: 99,
        no_present: !0
    }
}, 1);

item_base[1207] = createObject({
    b_i: 1207,
    b_t: ITEM_CATEGORY.PET,
    name: "Spiked Ruby Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 446138,
        power: 16,
        armor: 53,
        magic: 38,
        min_health: 43,
        pet: 100,
        no_present: !0
    }
}, 1);

item_base[1208] = createObject({
    b_i: 1208,
    b_t: ITEM_CATEGORY.PET,
    name: "Magma Wyvern [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 324792,
        power: 17,
        armor: 52,
        magic: 35,
        min_health: 38,
        pet: 101,
        no_present: !0
    }
}, 1);

item_base[1209] = createObject({
    b_i: 1209,
    b_t: ITEM_CATEGORY.PET,
    name: "Swamp Wyvern [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 373510,
        armor: 56,
        magic: 56,
        min_health: 39,
        pet: 102,
        no_present: !0
    }
}, 1);

item_base[1210] = createObject({
    b_i: 1210,
    b_t: ITEM_CATEGORY.PET,
    name: "Naga [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 137500,
        aim: 25,
        armor: 25,
        min_health: 26,
        pet: 103,
        no_present: !0
    }
}, 1);

item_base[1211] = createObject({
    b_i: 1211,
    b_t: ITEM_CATEGORY.PET,
    name: "Gorgon [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 438955,
        aim: 47,
        armor: 47,
        min_health: 42,
        pet: 104,
        no_present: !0
    }
}, 1);

item_base[1212] = createObject({
    b_i: 1212,
    b_t: ITEM_CATEGORY.PET,
    name: "Rubysoul Dragon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1530660,
        aim: 71,
        power: 30,
        armor: 79,
        magic: 68,
        min_health: 65,
        pet: 105,
        no_present: !0
    }
}, 1);

item_base[1213] = createObject({
    b_i: 1213,
    b_t: ITEM_CATEGORY.PET,
    name: "Crystal Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1133822,
        aim: 55,
        power: 23,
        armor: 60,
        magic: 52,
        min_health: 58,
        pet: 106,
        no_present: !0
    }
}, 1);

item_base[1214] = createObject({
    b_i: 1214,
    b_t: ITEM_CATEGORY.PET,
    name: "Undead Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2168750,
        aim: 63,
        power: 63,
        armor: 69,
        min_health: 69,
        pet: 107,
        no_present: !0
    }
}, 1);

item_base[1215] = createObject({
    b_i: 1215,
    b_t: ITEM_CATEGORY.PET,
    name: "Beholder Worm [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 534976,
        armor: 56,
        magic: 68,
        min_health: 45,
        pet: 108,
        no_present: !0
    }
}, 1);

item_base[1216] = createObject({
    b_i: 1216,
    b_t: ITEM_CATEGORY.PET,
    name: "Royal Horse [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 845986,
        aim: 19,
        armor: 19,
        speed: 10,
        min_health: 48,
        pet: 109,
        no_present: !0
    }
}, 1);

item_base[1217] = createObject({
    b_i: 1217,
    b_t: ITEM_CATEGORY.PET,
    name: "Lava Pegasus [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4002415,
        aim: 44,
        power: 19,
        armor: 106,
        magic: 106,
        speed: 9,
        min_health: 86,
        pet: 110,
        no_present: !0
    }
}, 1);

item_base[1218] = createObject({
    b_i: 1218,
    b_t: ITEM_CATEGORY.PET,
    name: "Nightmare Pegasus [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 5003019,
        aim: 53,
        power: 23,
        armor: 128,
        magic: 128,
        speed: 11,
        min_health: 93,
        pet: 111,
        no_present: !0
    }
}, 1);

item_base[1219] = createObject({
    b_i: 1219,
    b_t: ITEM_CATEGORY.PET,
    name: "Sun Pegasus [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3391925,
        aim: 62,
        power: 5,
        armor: 58,
        magic: 5,
        speed: 25,
        min_health: 83,
        pet: 112,
        no_present: !0
    }
}, 1);

item_base[1220] = createObject({
    b_i: 1220,
    b_t: ITEM_CATEGORY.PET,
    name: "Flaming Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1483425,
        aim: 52,
        power: 75,
        armor: 52,
        min_health: 65,
        pet: 113,
        no_present: !0
    }
}, 1);

item_base[1221] = createObject({
    b_i: 1221,
    b_t: ITEM_CATEGORY.PET,
    name: "Lava Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1830425,
        aim: 66,
        power: 69,
        armor: 66,
        min_health: 69,
        pet: 114,
        no_present: !0
    }
}, 1);

item_base[1222] = createObject({
    b_i: 1222,
    b_t: ITEM_CATEGORY.PET,
    name: "White Belly Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1472147,
        aim: 52,
        power: 17,
        armor: 63,
        magic: 52,
        min_health: 62,
        pet: 115,
        no_present: !0
    }
}, 1);

item_base[1223] = createObject({
    b_i: 1223,
    b_t: ITEM_CATEGORY.PET,
    name: "Underworld Dragon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2471073,
        aim: 86,
        power: 90,
        armor: 86,
        min_health: 76,
        pet: 116,
        no_present: !0
    }
}, 1);

item_base[1224] = createObject({
    b_i: 1224,
    b_t: ITEM_CATEGORY.PET,
    name: "Fire Heart Dragon [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1145100,
        aim: 55,
        power: 81,
        armor: 49,
        min_health: 62,
        pet: 117,
        no_present: !0
    }
}, 1);

item_base[1225] = createObject({
    b_i: 1225,
    b_t: ITEM_CATEGORY.PET,
    name: "Dragonite [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1133822,
        aim: 55,
        power: 58,
        armor: 49,
        magic: 14,
        min_health: 58,
        pet: 118,
        no_present: !0
    }
}, 1);

item_base[1226] = createObject({
    b_i: 1226,
    b_t: ITEM_CATEGORY.PET,
    name: "Ice Beholder [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 419523,
        armor: 26,
        magic: 52,
        min_health: 41,
        pet: 119,
        no_present: !0
    }
}, 1);

item_base[1227] = createObject({
    b_i: 1227,
    b_t: ITEM_CATEGORY.PET,
    name: "Cloudcaller [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3886400,
        aim: 69,
        armor: 60,
        speed: 26,
        min_health: 86,
        pet: 120,
        no_present: !0
    }
}, 1);

item_base[1228] = createObject({
    b_i: 1228,
    b_t: ITEM_CATEGORY.PET,
    name: "Centaur [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 128460,
        aim: 10,
        speed: 5,
        min_health: 28,
        pet: 121,
        no_present: !0
    }
}, 1);

item_base[1229] = createObject({
    b_i: 1229,
    b_t: ITEM_CATEGORY.PET,
    name: "Demon [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 124503,
        armor: 65,
        min_health: 28,
        pet: 122,
        no_present: !0
    }
}, 1);

item_base[1230] = createObject({
    b_i: 1230,
    b_t: ITEM_CATEGORY.PET,
    name: "Dark Guru [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 123,
        aim: 14,
        power: 17,
        armor: 22,
        magic: 23,
        min_health: 14,
        price: 82586,
        no_present: !0
    }
}, 1);

item_base[1231] = createObject({
    b_i: 1231,
    b_t: ITEM_CATEGORY.PET,
    name: "Shadow Werewolf [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1e5,
        pet: 124,
        min_health: 10,
        no_present: !0
    }
}, 1);

item_base[1232] = createObject({
    b_i: 1232,
    b_t: ITEM_CATEGORY.PET,
    name: "Raguel the archangel [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4141640,
        aim: 75,
        power: 75,
        armor: 75,
        magic: 68,
        min_health: 90,
        pet: 125,
        no_present: !0
    }
}, 1);

item_base[1233] = createObject({
    b_i: 1233,
    b_t: ITEM_CATEGORY.PET,
    name: "Winged Centaur [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 397085,
        aim: 40,
        power: 29,
        armor: 29,
        speed: 3,
        min_health: 41,
        pet: 126,
        no_present: !0
    }
}, 1);

item_base[1234] = createObject({
    b_i: 1234,
    b_t: ITEM_CATEGORY.PET,
    name: "Ankylosaurus [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 451100,
        power: 43,
        armor: 43,
        min_health: 43,
        pet: 127,
        no_present: !0
    }
}, 1);

item_base[1235] = createObject({
    b_i: 1235,
    b_t: ITEM_CATEGORY.PET,
    name: "Tyrannosaurus [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 518765,
        power: 46,
        armor: 47,
        min_health: 44,
        pet: 128,
        no_present: !0
    }
}, 1);

item_base[1236] = createObject({
    b_i: 1236,
    b_t: ITEM_CATEGORY.PET,
    name: "Shadow Dragon [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1106765,
        aim: 44,
        armor: 72,
        magic: 56,
        min_health: 56,
        pet: 129,
        no_present: !0
    }
}, 1);

item_base[1237] = createObject({
    b_i: 1237,
    b_t: ITEM_CATEGORY.PET,
    name: "Marble Unicorn [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 5246640,
        aim: 75,
        armor: 65,
        speed: 28,
        min_health: 93,
        pet: 130,
        no_present: !0
    }
}, 1);

item_base[1238] = createObject({
    b_i: 1238,
    b_t: ITEM_CATEGORY.PET,
    name: "Underworld Lord [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 4761769,
        aim: 75,
        power: 75,
        armor: 75,
        magic: 52,
        min_health: 93,
        pet: 131,
        no_present: !0
    }
}, 1);

item_base[1239] = createObject({
    b_i: 1239,
    b_t: ITEM_CATEGORY.PET,
    name: "Lord Of Destruction [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 6428389,
        aim: 98,
        power: 98,
        armor: 98,
        magic: 68,
        min_health: 94,
        pet: 132,
        no_present: !0
    }
}, 1);

item_base[1240] = createObject({
    b_i: 1240,
    b_t: ITEM_CATEGORY.PET,
    name: "Game Master [Ancient]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1,
        aim: 500,
        power: 500,
        armor: 500,
        magic: 500,
        min_health: 150,
        pet: 133,
        no_present: !0,
        no_buy: !0
    }
}, 1);

item_base[1241] = createObject({
    b_i: 1241,
    b_t: ITEM_CATEGORY.PET,
    name: "Ruby Horse [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 618354,
        aim: 10,
        power: 11,
        armor: 18,
        Magic: 11,
        speed: 9,
        min_health: 47,
        pet: 134,
        no_present: !0
    }
}, 1);

item_base[1242] = createObject({
    b_i: 1242,
    b_t: ITEM_CATEGORY.PET,
    name: "Winged Sapphire Demon [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 1057482,
        aim: 23,
        armor: 23,
        speed: 12,
        min_health: 52,
        pet: 135,
        no_present: !0
    }
}, 1);

item_base[1243] = createObject({
    b_i: 1243,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Breeding Nest",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 22
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5250,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 479
    }
}, 1);

item_base[1244] = createObject({
    b_i: 1244,
    b_t: ITEM_CATEGORY.PET,
    name: "Bone Horse [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 458040,
        aim: 8,
        power: 8,
        armor: 14,
        magic: 8,
        speed: 6,
        min_health: 44,
        pet: 136,
        no_present: !0
    }
}, 1);

item_base[1245] = createObject({
    b_i: 1245,
    b_t: ITEM_CATEGORY.PET,
    name: "Disembodied Spirit [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 108264,
        armor: 60,
        min_health: 26,
        pet: 137,
        no_present: !0
    }
}, 1);

item_base[1246] = createObject({
    b_i: 1246,
    b_t: ITEM_CATEGORY.PET,
    name: "Royal Donkey [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 12,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 62280,
        armor: 17,
        speed: 7,
        min_health: 14,
        pet: 138,
        no_present: !0
    }
}, 1);

item_base[1247] = createObject({
    b_i: 1247,
    b_t: ITEM_CATEGORY.PET,
    name: "Undead Donkey [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 13,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 79772,
        armor: 19,
        speed: 9,
        min_health: 22,
        pet: 139,
        no_present: !0
    }
}, 1);

item_base[1248] = createObject({
    b_i: 1248,
    b_t: ITEM_CATEGORY.PET,
    name: "Shadow Guru [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        pet: 140,
        aim: 14,
        power: 17,
        armor: 22,
        magic: 23,
        min_health: 14,
        price: 89250,
        no_present: !0
    }
}, 1);

item_base[1249] = createObject({
    b_i: 1249,
    b_t: ITEM_CATEGORY.PET,
    name: "Hinny [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 735640,
        aim: 17,
        armor: 17,
        speed: 9,
        min_health: 48,
        pet: 141,
        no_present: !0
    }
}, 1);

item_base[1250] = createObject({
    b_i: 1250,
    b_t: ITEM_CATEGORY.PET,
    name: "Crystallized Pegasus [Rare]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2713540,
        aim: 54,
        power: 4,
        armor: 48,
        magic: 4,
        speed: 20,
        min_health: 76,
        pet: 142,
        no_present: !0
    }
}, 1);

item_base[1251] = createObject({
    b_i: 1251,
    b_t: ITEM_CATEGORY.PET,
    name: "Demonic Unicorn [Common]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 14,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 2359600,
        aim: 50,
        power: 4,
        armor: 44,
        magic: 4,
        speed: 19,
        min_health: 73,
        pet: 143,
        no_present: !0
    }
}, 1);

item_base[1252] = createObject({
    b_i: 1252,
    b_t: ITEM_CATEGORY.PET,
    name: "Lindworm [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 324792,
        armor: 52,
        magic: 52,
        min_health: 38,
        pet: 144,
        no_present: !0
    }
}, 1);

item_base[1253] = createObject({
    b_i: 1253,
    b_t: ITEM_CATEGORY.PET,
    name: "Soul Trapper [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 324792,
        power: 52,
        armor: 52,
        min_health: 38,
        pet: 145,
        no_present: !0
    }
}, 1);

item_base[1254] = createObject({
    b_i: 1254,
    b_t: ITEM_CATEGORY.PET,
    name: "Dream Collector [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC5,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 438496,
        power: 23,
        armor: 68,
        magic: 45,
        min_health: 42,
        pet: 146,
        no_present: !0
    }
}, 1);

item_base[1255] = createObject({
    b_i: 1255,
    b_t: ITEM_CATEGORY.PET,
    name: "Genie [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 15,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 3340846,
        aim: 19,
        power: 47,
        min_health: 83,
        pet: 147,
        no_present: !0
    }
}, 1);

item_base[1256] = createObject({
    b_i: 1256,
    b_t: ITEM_CATEGORY.PET,
    name: "Euryale [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 381700,
        aim: 43,
        armor: 43,
        min_health: 39,
        pet: 148,
        no_present: !0
    }
}, 1);

item_base[1257] = createObject({
    b_i: 1257,
    b_t: ITEM_CATEGORY.PET,
    name: "Medusa [Common]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 11e4,
        aim: 15,
        armor: 5,
        min_health: 26,
        pet: 149,
        no_present: !0
    }
}, 1);

item_base[1258] = createObject({
    b_i: 1258,
    b_t: ITEM_CATEGORY.PET,
    name: "Giant Bunny [Rare]",
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 16,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        aim: 40,
        armor: 20,
        speed: 10,
        price: 1,
        min_health: 30,
        pet: 150
    }
}, 1);

item_base[1259] = createObject({
    b_i: 1259,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Balance Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 24
        },
        slot: 1,
        armor: 325,
        magic: 50,
        min_defense: 115,
        enchant_id: 1260,
        price: 5253165
    }
}, 1);

item_base[1260] = createObject({
    b_i: 1260,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Balance Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 25
        },
        slot: 1,
        armor: 406,
        magic: 63,
        min_defense: 115,
        price: 9718354
    }
}, 1);

item_base[1261] = createObject({
    b_i: 1261,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Saint Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 59
        },
        slot: 1,
        armor: 225,
        power: 40,
        aim: 55,
        min_strength: 110,
        enchant_id: 1262,
        price: 2480310
    }
}, 1);

item_base[1262] = createObject({
    b_i: 1262,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Saint Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 53
        },
        slot: 1,
        armor: 281,
        power: 50,
        aim: 69,
        min_strength: 110,
        price: 4588574
    }
}, 1);

item_base[1263] = createObject({
    b_i: 1263,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wings of Raguel",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 28
        },
        slot: 1,
        armor: 240,
        power: 50,
        aim: 70,
        min_strength: 120,
        enchant_id: 1264,
        price: 6962460
    }
}, 1);

item_base[1264] = createObject({
    b_i: 1264,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Wings of Raguel",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 29
        },
        slot: 1,
        armor: 300,
        power: 62,
        aim: 87,
        min_strength: 120,
        price: 12880551
    }
}, 1);

item_base[1265] = createObject({
    b_i: 1265,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Archdevil Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 30
        },
        slot: 1,
        armor: 150,
        aim: 37,
        power: 25,
        min_strength: 80,
        price: 340574
    }
}, 1);

item_base[1266] = createObject({
    b_i: 1266,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Wings of Path",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 46
        },
        slot: 1,
        armor: 20,
        magic: 5,
        min_defense: 1,
        enchant_id: 1267,
        price: 1064
    }
}, 1);

item_base[1267] = createObject({
    b_i: 1267,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Wings of Path",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 47
        },
        slot: 1,
        armor: 25,
        magic: 6,
        min_defense: 1,
        price: 1964
    }
}, 1);

item_base[1268] = createObject({
    b_i: 1268,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Angel Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 57
        },
        slot: 1,
        armor: 44,
        magic: 13,
        min_defense: 5,
        price: 72520
    }
}, 1);

item_base[1269] = createObject({
    b_i: 1269,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Soul Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 26
        },
        slot: 1,
        armor: 45,
        magic: 15,
        min_defense: 15,
        enchant_id: 1270,
        price: 44226
    }
}, 1);

item_base[1270] = createObject({
    b_i: 1270,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Soul Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 27
        },
        slot: 1,
        armor: 56,
        magic: 19,
        min_defense: 15,
        price: 81818
    }
}, 1);

item_base[1271] = createObject({
    b_i: 1271,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Iron Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 33
        },
        slot: 1,
        armor: 65,
        magic: 10,
        min_defense: 25,
        enchant_id: 1272,
        price: 52530
    }
}, 1);

item_base[1272] = createObject({
    b_i: 1272,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 23
    },
    params: {
        wearable: !0,
        visible: {
            cape: 45
        },
        slot: 1,
        armor: 81,
        magic: 12,
        min_defense: 25,
        price: 97180
    }
}, 1);

item_base[1273] = createObject({
    b_i: 1273,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sapphire Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 56
        },
        slot: 1,
        armor: 80,
        magic: 15,
        min_defense: 35,
        enchant_id: 1274,
        price: 57120
    }
}, 1);

item_base[1274] = createObject({
    b_i: 1274,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Sapphire Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 55
        },
        slot: 1,
        armor: 100,
        magic: 19,
        min_defense: 35,
        price: 105672
    }
}, 1);

item_base[1275] = createObject({
    b_i: 1275,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Archangel Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 37
        },
        slot: 1,
        armor: 163,
        magic: 25,
        min_defense: 75,
        price: 343574
    }
}, 1);

item_base[1276] = createObject({
    b_i: 1276,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Lightning Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 43
        },
        slot: 1,
        armor: 175,
        magic: 25,
        min_defense: 85,
        price: 679320
    }
}, 1);

item_base[1277] = createObject({
    b_i: 1277,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Core Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 48
        },
        slot: 1,
        armor: 220,
        magic: 30,
        min_defense: 95,
        enchant_id: 1278,
        price: 973228
    }
}, 1);

item_base[1278] = createObject({
    b_i: 1278,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Core Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 49
        },
        slot: 1,
        armor: 275,
        magic: 38,
        min_defense: 95,
        price: 1800471
    }
}, 1);

item_base[1279] = createObject({
    b_i: 1279,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Shadow Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 61
        },
        slot: 1,
        armor: 270,
        magic: 40,
        min_defense: 105,
        enchant_id: 1280,
        price: 2499990
    }
}, 1);

item_base[1280] = createObject({
    b_i: 1280,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Shadow Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 62
        },
        slot: 1,
        armor: 337,
        magic: 50,
        min_defense: 105,
        price: 4624981
    }
}, 1);

item_base[1281] = createObject({
    b_i: 1281,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bat Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 34
        },
        slot: 1,
        armor: 10,
        power: 5,
        aim: 5,
        min_strength: 1,
        enchant_id: 1282,
        price: 1322
    }
}, 1);

item_base[1282] = createObject({
    b_i: 1282,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bat Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 35
        },
        slot: 1,
        armor: 13,
        power: 6,
        aim: 6,
        min_strength: 1,
        price: 2445
    }
}, 1);

item_base[1283] = createObject({
    b_i: 1283,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Devil Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 58
        },
        slot: 1,
        armor: 31,
        power: 12,
        aim: 12,
        min_strength: 10,
        price: 72520
    }
}, 1);

item_base[1284] = createObject({
    b_i: 1284,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Fire Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 38
        },
        slot: 1,
        armor: 30,
        power: 15,
        aim: 15,
        min_strength: 20,
        enchant_id: 1285,
        price: 46500
    }
}, 1);

item_base[1285] = createObject({
    b_i: 1285,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Fire Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 39
        },
        slot: 1,
        armor: 37,
        power: 19,
        aim: 19,
        min_strength: 20,
        price: 86025
    }
}, 1);

item_base[1286] = createObject({
    b_i: 1286,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Gorgon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 12,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 40
        },
        slot: 1,
        armor: 45,
        power: 10,
        aim: 15,
        min_strength: 30,
        enchant_id: 1287,
        price: 63216
    }
}, 1);

item_base[1287] = createObject({
    b_i: 1287,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Gorgon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 13,
        y: 24
    },
    params: {
        wearable: !0,
        visible: {
            cape: 52
        },
        slot: 1,
        armor: 56,
        power: 12,
        aim: 19,
        min_strength: 30,
        price: 116950
    }
}, 1);

item_base[1288] = createObject({
    b_i: 1288,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ruby Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 60
        },
        slot: 1,
        armor: 55,
        power: 15,
        aim: 15,
        min_strength: 40,
        enchant_id: 1289,
        price: 82800
    }
}, 1);

item_base[1289] = createObject({
    b_i: 1289,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ruby Dragon Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 54
        },
        slot: 1,
        armor: 69,
        power: 19,
        aim: 19,
        min_strength: 40,
        price: 153180
    }
}, 1);

item_base[1290] = createObject({
    b_i: 1290,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Spirit Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 41
        },
        slot: 1,
        armor: 75,
        power: 20,
        aim: 20,
        min_strength: 50,
        enchant_id: 1291,
        price: 98422
    }
}, 1);

item_base[1291] = createObject({
    b_i: 1291,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Spirit Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 42
        },
        slot: 1,
        armor: 94,
        power: 25,
        aim: 25,
        min_strength: 50,
        price: 182080
    }
}, 1);

item_base[1292] = createObject({
    b_i: 1292,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Ice Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 44
        },
        slot: 1,
        armor: 112,
        power: 13,
        aim: 31,
        min_strength: 60,
        price: 227328
    }
}, 1);

item_base[1293] = createObject({
    b_i: 1293,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sunstorm Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 31
        },
        slot: 1,
        armor: 110,
        power: 15,
        aim: 25,
        min_strength: 70,
        enchant_id: 1294,
        price: 133220
    }
}, 1);

item_base[1294] = createObject({
    b_i: 1294,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Sunstorm Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 32
        },
        slot: 1,
        armor: 138,
        power: 19,
        aim: 31,
        min_strength: 70,
        price: 246457
    }
}, 1);

item_base[1295] = createObject({
    b_i: 1295,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Nephilim Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 36
        },
        slot: 1,
        armor: 225,
        power: 25,
        aim: 44,
        min_strength: 90,
        price: 2522310
    }
}, 1);

item_base[1296] = createObject({
    b_i: 1296,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Underworld Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 51
        },
        slot: 1,
        armor: 195,
        power: 30,
        aim: 45,
        min_strength: 100,
        enchant_id: 1297,
        price: 231e4
    }
}, 1);

item_base[1297] = createObject({
    b_i: 1297,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Underworld Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 9,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 50
        },
        slot: 1,
        armor: 244,
        power: 37,
        aim: 56,
        min_strength: 100,
        price: 4273500
    }
}, 1);

item_base[1298] = createObject({
    b_i: 1298,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Crystal Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 63
        },
        slot: 1,
        armor: 100,
        magic: 10,
        min_defense: 55,
        enchant_id: 1299,
        price: 94150
    }
}, 1);

item_base[1299] = createObject({
    b_i: 1299,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Crystal Wings",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 25
    },
    params: {
        wearable: !0,
        visible: {
            cape: 64
        },
        slot: 1,
        armor: 125,
        magic: 13,
        min_defense: 55,
        price: 174177
    }
}, 1);

item_base[1300] = createObject({
    b_i: 1300,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Crystal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 1,
        price: 1600
    }
}, 1);

item_base[1301] = createObject({
    b_i: 1301,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Crystal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 1,
        price: 1250
    }
}, 1);

item_base[1302] = createObject({
    b_i: 1302,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Feather",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25
    }
}, 1);

item_base[1303] = createObject({
    b_i: 1303,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Low Wings Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e3
    }
}, 1);

item_base[1304] = createObject({
    b_i: 1304,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Medium Wings Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 5e4
    }
}, 1);

item_base[1305] = createObject({
    b_i: 1305,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "High Wings Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 15e4
    }
}, 1);

item_base[1306] = createObject({
    b_i: 1306,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Superior Wings Enchant Scroll",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 3e5
    }
}, 1);

item_base[1307] = createObject({
    b_i: 1307,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Nightmare Orb",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 15e4
    }
}, 1);

item_base[1308] = createObject({
    b_i: 1308,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Mark of Raguel",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 30
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 25e4
    }
}, 1);

item_base[1309] = createObject({
    b_i: 1309,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 65
        },
        slot: 1,
        armor: 185,
        power: 25,
        aim: 40,
        speed: 5,
        min_strength: 95,
        price: 14e5,
        enchant_bonus: .3,
        enchant_id: 1320
    }
}, 1);

item_base[1310] = createObject({
    b_i: 1310,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 66
        },
        slot: 1,
        armor: 225,
        magic: 30,
        speed: 5,
        min_defense: 95,
        price: 14e5,
        enchant_bonus: .3,
        enchant_id: 1317
    }
}, 1);

item_base[1311] = createObject({
    b_i: 1311,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Mark of Peace",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 0,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 2e5
    }
}, 1);

item_base[1312] = createObject({
    b_i: 1312,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Mark of War",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 1,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 2e5
    }
}, 1);

item_base[1313] = createObject({
    b_i: 1313,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Green)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 53
        },
        slot: 0,
        armor: 20,
        aim: 20,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "2nd anniversary"
    }
}, 1);

item_base[1314] = createObject({
    b_i: 1314,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Purple)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 54
        },
        slot: 0,
        armor: 50,
        aim: 30,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "2nd anniversary"
    }
}, 1);

item_base[1315] = createObject({
    b_i: 1315,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 67
        },
        slot: 1,
        armor: 385,
        magic: 62,
        speed: 13,
        min_defense: 115,
        price: 9175040,
        enchant_bonus: .2,
        enchant_id: 1318
    }
}, 1);

item_base[1316] = createObject({
    b_i: 1316,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 68
        },
        slot: 1,
        armor: 305,
        magic: 46,
        speed: 9,
        min_defense: 105,
        price: 3584e3,
        enchant_bonus: .2,
        enchant_id: 1319
    }
}, 1);

item_base[1317] = createObject({
    b_i: 1317,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 69
        },
        slot: 1,
        armor: 265,
        magic: 38,
        speed: 7,
        min_defense: 100,
        price: 224e4,
        enchant_bonus: .2,
        enchant_id: 1316
    }
}, 1);

item_base[1318] = createObject({
    b_i: 1318,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 7,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 70
        },
        slot: 1,
        armor: 425,
        magic: 70,
        speed: 15,
        min_defense: 120,
        price: 13762560
    }
}, 1);

item_base[1319] = createObject({
    b_i: 1319,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Peace Dragon Wings +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            cape: 71
        },
        slot: 1,
        armor: 345,
        magic: 54,
        speed: 11,
        min_defense: 110,
        price: 5734400,
        enchant_bonus: .2,
        enchant_id: 1315
    }
}, 1);

item_base[1320] = createObject({
    b_i: 1320,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 73
        },
        slot: 1,
        armor: 210,
        power: 35,
        aim: 53,
        speed: 7,
        min_strength: 100,
        price: 224e4,
        enchant_bonus: .2,
        enchant_id: 1321
    }
}, 1);

item_base[1321] = createObject({
    b_i: 1321,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            cape: 73
        },
        slot: 1,
        armor: 235,
        power: 45,
        aim: 66,
        speed: 9,
        min_strength: 105,
        price: 3584e3,
        enchant_bonus: .2,
        enchant_id: 1322
    }
}, 1);

item_base[1322] = createObject({
    b_i: 1322,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            cape: 74
        },
        slot: 1,
        armor: 260,
        power: 55,
        aim: 79,
        speed: 11,
        min_strength: 110,
        price: 5734400,
        enchant_bonus: .2,
        enchant_id: 1323
    }
}, 1);

item_base[1323] = createObject({
    b_i: 1323,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            cape: 74
        },
        slot: 1,
        armor: 285,
        power: 65,
        aim: 92,
        speed: 13,
        min_strength: 115,
        price: 9175040,
        enchant_bonus: .2,
        enchant_id: 1324
    }
}, 1);

item_base[1324] = createObject({
    b_i: 1324,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "War Dragon Wings +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            cape: 74
        },
        slot: 1,
        armor: 310,
        power: 75,
        aim: 105,
        speed: 15,
        min_strength: 120,
        price: 13762560
    }
}, 1);

item_base[1325] = createObject({
    b_i: 1325,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Test Bow",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 178
        },
        slot: 4,
        aim: 500,
        power: 500,
        min_accuracy: 1,
        no_present: !0,
        price: 1,
        no_buy: !0
    }
}, 1);

item_base[1326] = createObject({
    b_i: 1326,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Random Reward",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 31
    },
    params: {
        wearable: !1,
        slot: 9,
        price: 1,
        desc: "A random reward! What could it be?",
        no_present: !0,
        no_buy: !0
    }
}, 1);

item_base[1327] = createObject({
    b_i: 1327,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Boar Spear",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 179
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 5,
        power: 45,
        min_accuracy: 1,
        min_strength: 10,
        enchant_bonus: .3,
        price: 1e4,
        enchant_id: 1328
    }
}, 1);

item_base[1328] = createObject({
    b_i: 1328,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Spontoon +1",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 180
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 10,
        power: 70,
        min_accuracy: 1,
        min_strength: 15,
        enchant_bonus: .3,
        price: 2e4,
        enchant_id: 1329
    }
}, 1);

item_base[1329] = createObject({
    b_i: 1329,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Warspear +2",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 3,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 181
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 25,
        power: 100,
        min_accuracy: 1,
        min_strength: 25,
        enchant_bonus: .3,
        price: 3e4,
        enchant_id: 1330
    }
}, 1);

item_base[1330] = createObject({
    b_i: 1330,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Shadowspear +3",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 4,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 182
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 30,
        power: 115,
        min_accuracy: 1,
        min_strength: 35,
        enchant_bonus: .3,
        price: 4e4,
        enchant_id: 1331
    }
}, 1);

item_base[1331] = createObject({
    b_i: 1331,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dragon Lance +4",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 5,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 183
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 30,
        power: 130,
        min_accuracy: 1,
        min_strength: 40,
        enchant_bonus: .3,
        price: 6e4,
        enchant_id: 1332
    }
}, 1);

item_base[1332] = createObject({
    b_i: 1332,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Qiang +5",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 6,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 184
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 35,
        power: 145,
        min_accuracy: 1,
        min_strength: 45,
        enchant_bonus: .3,
        price: 7e4,
        enchant_id: 1333
    }
}, 1);

item_base[1333] = createObject({
    b_i: 1333,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Demonspear +6",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 7,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 185
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 56,
        power: 160,
        min_accuracy: 1,
        min_strength: 50,
        enchant_bonus: .3,
        price: 15e4,
        enchant_id: 1334
    }
}, 1);

item_base[1334] = createObject({
    b_i: 1334,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ancient Spear +7",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 8,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 186
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 72,
        power: 175,
        min_accuracy: 1,
        min_strength: 60,
        enchant_bonus: .3,
        price: 23e4,
        enchant_id: 1335
    }
}, 1);

item_base[1335] = createObject({
    b_i: 1335,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Guardian's Piercer +8",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 9,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 187
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 100,
        power: 190,
        min_accuracy: 1,
        min_strength: 70,
        enchant_bonus: .3,
        price: 28e4,
        enchant_id: 1336
    }
}, 1);

item_base[1336] = createObject({
    b_i: 1336,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Ebonsteel Impaler +9",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 0,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 188
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 120,
        power: 220,
        min_accuracy: 1,
        min_strength: 80,
        enchant_bonus: .3,
        price: 55e4,
        enchant_id: 1337
    }
}, 1);

item_base[1337] = createObject({
    b_i: 1337,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Spike of Eternity +10",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 1,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 189
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 217,
        power: 262,
        min_accuracy: 1,
        min_strength: 90,
        enchant_bonus: .3,
        price: 723e3,
        enchant_id: 1338
    }
}, 1);

item_base[1338] = createObject({
    b_i: 1338,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Stormfury Piercer +11",
    img: {
        sheet: IMAGE_SHEET.WEAPONS,
        x: 2,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 190
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 230,
        power: 270,
        min_accuracy: 1,
        min_strength: 95,
        enchant_bonus: .2,
        price: 912382,
        enchant_id: 1464
    }
}, 1);

item_base[1339] = createObject({
    b_i: 1339,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Elemental pouch",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 31
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 54
        },
        slot: 3,
        magic_slots: 5,
        min_magic: 90,
        price: 35e5
    }
}, 1);

item_base[1340] = createObject({
    b_i: 1340,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Air Orb",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 8e5
    }
}, 1);

item_base[1341] = createObject({
    b_i: 1341,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Earth Orb",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 6,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 8e5
    }
}, 1);

item_base[1342] = createObject({
    b_i: 1342,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Fire Orb",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 8e5
    }
}, 1);

item_base[1343] = createObject({
    b_i: 1343,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Water Orb",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 31
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 80,
        price: 8e5
    }
}, 1);

item_base[1344] = createObject({
    b_i: 1344,
    b_t: ITEM_CATEGORY.PET,
    name: "Mylanth [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 6107144,
        aim: 109,
        power: 71,
        armor: 122,
        magic: 59,
        min_health: 94,
        pet: 151,
        no_present: !0
    }
}, 1);

item_base[1345] = createObject({
    b_i: 1345,
    b_t: ITEM_CATEGORY.PET,
    name: "Tesselth [Ancient]",
    img: {
        sheet: IMAGE_SHEET.MISC4,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 7023216,
        aim: 128,
        power: 84,
        armor: 143,
        magic: 70,
        min_health: 96,
        pet: 152,
        no_present: !0
    }
}, 1);

item_base[1346] = createObject({
    b_i: 1346,
    b_t: ITEM_CATEGORY.PET,
    name: "Xirador [Legendary]",
    img: {
        sheet: IMAGE_SHEET.MISC2,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 7023216,
        aim: 107,
        power: 133,
        armor: 111,
        pet: 153,
        min_health: 94,
        no_present: !0
    }
}, 1);

item_base[1347] = createObject({
    b_i: 1347,
    b_t: ITEM_CATEGORY.PET,
    name: "Xalanth [Ancient]",
    img: {
        sheet: IMAGE_SHEET.MISC3,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 12,
        price: 7023216,
        aim: 125,
        power: 156,
        armor: 130,
        min_health: 96,
        pet: 154,
        no_present: !0
    }
}, 1);

item_base[1348] = createObject({
    b_i: 1348,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Light Peacekeeper",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 40
        },
        slot: 3,
        armor: 8,
        min_defense: 10,
        magic_block: 10,
        price: 827,
        enchant_id: 1349
    }
}, 1);

item_base[1349] = createObject({
    b_i: 1349,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sturdy Peacekeeper",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 41
        },
        slot: 3,
        armor: 11,
        min_defense: 20,
        magic_block: 15,
        price: 9805,
        enchant_id: 1350
    }
}, 1);

item_base[1350] = createObject({
    b_i: 1350,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Peacekeeper",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 42
        },
        slot: 3,
        armor: 18,
        min_defense: 30,
        magic_block: 20,
        price: 27946
    }
}, 1);

item_base[1351] = createObject({
    b_i: 1351,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Light Greenwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 43
        },
        slot: 3,
        armor: 27,
        min_defense: 40,
        magic_block: 25,
        price: 38540,
        enchant_id: 1352
    }
}, 1);

item_base[1352] = createObject({
    b_i: 1352,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sturdy Greenwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 44
        },
        slot: 3,
        armor: 39,
        min_defense: 50,
        magic_block: 30,
        price: 109839,
        enchant_id: 1353
    }
}, 1);

item_base[1353] = createObject({
    b_i: 1353,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Greenwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 45
        },
        slot: 3,
        armor: 48,
        min_defense: 60,
        magic_block: 35,
        price: 203202
    }
}, 1);

item_base[1354] = createObject({
    b_i: 1354,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Light Redwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 46
        },
        slot: 3,
        armor: 55,
        min_defense: 70,
        magic_block: 40,
        price: 294386,
        enchant_id: 1355
    }
}, 1);

item_base[1355] = createObject({
    b_i: 1355,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Sturdy Redwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 47
        },
        slot: 3,
        armor: 70,
        min_defense: 80,
        magic_block: 45,
        price: 544614,
        enchant_id: 1356
    }
}, 1);

item_base[1356] = createObject({
    b_i: 1356,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Redwood Shield",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 48
        },
        slot: 3,
        armor: 85,
        min_defense: 90,
        magic_block: 50,
        price: 844151
    }
}, 1);

item_base[1357] = createObject({
    b_i: 1357,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Gate",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 75e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 497
    }
}, 1);

item_base[1358] = createObject({
    b_i: 1358,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Tossa Jute Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 85,
        price: 3801,
        farming_id: 518
    }
}, 1);

item_base[1359] = createObject({
    b_i: 1359,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Bag of Worms",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 95,
        price: 5520,
        farming_id: 519
    }
}, 1);

item_base[1360] = createObject({
    b_i: 1360,
    b_t: ITEM_CATEGORY.HOUSE,
    name: "Mailbox",
    img: {
        sheet: IMAGE_SHEET.HOUSE_INV,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 63e3,
        carpentry_type: BASE_TYPE.OBJECT,
        carpentry_id: 520
    }
}, 1);

item_base[1361] = createObject({
    b_i: 1361,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Birthday Cake",
    img: {
        sheet: IMAGE_SHEET.FISH,
        x: 0,
        y: 14
    },
    params: {
        wearable: !1,
        heal: 50,
        price: 1,
        desc: "Happy birthday!"
    }
}, 1);

item_base[1362] = createObject({
    b_i: 1362,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Poison Rain Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 75,
        min_accuracy: 1,
        price: 43960
    }
}, 1);

item_base[1363] = createObject({
    b_i: 1363,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Blizzard Medallion",
    img: {
        sheet: IMAGE_SHEET.MSPELL,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_magic: 79,
        min_accuracy: 1,
        price: 48739
    }
}, 1);

item_base[1364] = createObject({
    b_i: 1364,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Flannel Seed",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_farming: 66,
        price: 800,
        farming_id: 526
    }
}, 1);

item_base[1365] = createObject({
    b_i: 1365,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Teleport Book",
    img: {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 7,
        y: 7
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 25e3,
        desc: "Can be used to teleport to various locations. Single use."
    }
}, 1);

item_base[1366] = createObject({
    b_i: 1366,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "NPC Tag",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 2,
        y: 31
    },
    params: {
        wearable: !0,
        visible: {
            cape: 72
        },
        slot: 1,
        price: 1,
        no_present: !0,
        no_buy: !0
    }
}, 1);

item_base[1367] = createObject({
    b_i: 1367,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion Of Love",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 16
    },
    params: {
        wearable: !1,
        boost_health: .1,
        price: 1,
        desc_only: "Restores health to 110%."
    }
}, 1);

item_base[1368] = createObject({
    b_i: 1368,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Frog",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 1,
        price: 26
    }
}, 1);

item_base[1369] = createObject({
    b_i: 1369,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Frog",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 4
    },
    params: {
        wearable: !1,
        heal: 3,
        price: 39
    }
}, 1);

item_base[1370] = createObject({
    b_i: 1370,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Eel",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 47,
        price: 125
    }
}, 1);

item_base[1371] = createObject({
    b_i: 1371,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Eel",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 1,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 12,
        price: 188
    }
}, 1);

item_base[1372] = createObject({
    b_i: 1372,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Cowfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 64,
        price: 228
    }
}, 1);

item_base[1373] = createObject({
    b_i: 1373,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Cowfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 6
    },
    params: {
        wearable: !1,
        heal: 16,
        price: 342
    }
}, 1);

item_base[1374] = createObject({
    b_i: 1374,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Giant Catfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 95,
        price: 465
    }
}, 1);

item_base[1375] = createObject({
    b_i: 1375,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Giant Catfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 23,
        price: 698
    }
}, 1);

item_base[1376] = createObject({
    b_i: 1376,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Whale Shark",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 99,
        price: 498
    }
}, 1);

item_base[1377] = createObject({
    b_i: 1377,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Whale Shark",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 1,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 25,
        price: 733
    }
}, 1);

item_base[1378] = createObject({
    b_i: 1378,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Coelacanth",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 103,
        price: 523
    }
}, 1);

item_base[1379] = createObject({
    b_i: 1379,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Coelacanth Kombu-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 0,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 28,
        price: 1024
    }
}, 1);

item_base[1380] = createObject({
    b_i: 1380,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Coelacanth Nori-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 1,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 32,
        price: 2134
    }
}, 1);

item_base[1381] = createObject({
    b_i: 1381,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw sturgeon",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 107,
        price: 536
    }
}, 1);

item_base[1382] = createObject({
    b_i: 1382,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sturgeon Kombu-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 30,
        price: 1124
    }
}, 1);

item_base[1383] = createObject({
    b_i: 1383,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sturgeon Nori-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 7
    },
    params: {
        wearable: !1,
        heal: 33,
        price: 2604
    }
}, 1);

item_base[1384] = createObject({
    b_i: 1384,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Blue Marlin",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 108,
        price: 558
    }
}, 1);

item_base[1385] = createObject({
    b_i: 1385,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Blue Marlin",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 6
    },
    params: {
        wearable: !1,
        heal: 26,
        price: 837
    }
}, 1);

item_base[1386] = createObject({
    b_i: 1386,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Stonefish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 112,
        price: 582
    }
}, 1);

item_base[1387] = createObject({
    b_i: 1387,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Stonefish Kombu-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 2,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 32,
        price: 1237
    }
}, 1);

item_base[1388] = createObject({
    b_i: 1388,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Stonefish Nori-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 34,
        price: 3123
    }
}, 1);

item_base[1389] = createObject({
    b_i: 1389,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Stonefish Dulse-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 37,
        price: 3873
    }
}, 1);

item_base[1390] = createObject({
    b_i: 1390,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Sunfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 116,
        price: 616
    }
}, 1);

item_base[1391] = createObject({
    b_i: 1391,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sunfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 5
    },
    params: {
        wearable: !1,
        heal: 28,
        price: 924
    }
}, 1);

item_base[1392] = createObject({
    b_i: 1392,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Raw Oarfish",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 3,
        min_cooking: 120,
        price: 660
    }
}, 1);

item_base[1393] = createObject({
    b_i: 1393,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Oarfish Kombu-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 8
    },
    params: {
        wearable: !1,
        heal: 33,
        price: 1470
    }
}, 1);

item_base[1394] = createObject({
    b_i: 1394,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Oarfish Nori-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 0,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 37,
        price: 3690
    }
}, 1);

item_base[1395] = createObject({
    b_i: 1395,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Oarfish Dulse-sushi",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 1,
        y: 9
    },
    params: {
        wearable: !1,
        heal: 40,
        price: 4590
    }
}, 1);

item_base[1396] = createObject({
    b_i: 1396,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Sunken Treasure",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 5,
        y: 1
    },
    params: {
        wearable: !1,
        slot: 19,
        price: 2e4,
        results: [ {
            requires: [],
            skill: "health",
            continuous: !1,
            returns: [ {
                id: 1300,
                level: 1,
                base_chance: .2,
                max_chance: .2,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 203,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 200,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 198,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 196,
                level: 1,
                base_chance: .15,
                max_chance: .15,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 194,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 202,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 485,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 385,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 372,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 384,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 658,
                level: 1,
                base_chance: .05,
                max_chance: .05,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 387,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 389,
                level: 1,
                base_chance: .1,
                max_chance: .1,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 1266,
                level: 1,
                base_chance: .5,
                max_chance: .5,
                next: !0,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            }, {
                id: 68,
                level: 1,
                base_chance: 1,
                max_chance: 1,
                next: !1,
                consumes: [ {
                    id: 1396,
                    count: 1
                } ],
                duration: 100
            } ]
        } ]
    }
}, 1);

item_base[1397] = createObject({
    b_i: 1397,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Poseidon's Trident",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 193
        },
        slot: 4,
        min_fishing: 95,
        price: 35e4
    }
}, 1);

item_base[1398] = createObject({
    b_i: 1398,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Poseidon's' Piece 1",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 17500
    }
}, 1);

item_base[1399] = createObject({
    b_i: 1399,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Poseidon's' Piece 2",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 17500
    }
}, 1);

item_base[1400] = createObject({
    b_i: 1400,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Poseidon's Permission",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 3,
        y: 5
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 1,
        to_map: 23,
        to_i: 20,
        to_j: 20
    }
}, 1);

item_base[1401] = createObject({
    b_i: 1401,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Saw",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        slot: 4,
        min_carpentry: 1,
        price: 1,
        no_present: !0,
        no_buy: !0
    }
}, 1);

item_base[1402] = createObject({
    b_i: 1402,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Small Potion Of Magic",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 16
    },
    params: {
        wearable: !1,
        boost_magic: .05,
        price: 390
    }
}, 1);

item_base[1403] = createObject({
    b_i: 1403,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Medium Potion Of Magic",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 16
    },
    params: {
        wearable: !1,
        boost_magic: .1,
        price: 4928
    }
}, 1);

item_base[1404] = createObject({
    b_i: 1404,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Large Potion Of Magic",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 16
    },
    params: {
        wearable: !1,
        boost_magic: .15,
        price: 7395
    }
}, 1);

item_base[1405] = createObject({
    b_i: 1405,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Superior Potion Of Magic",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 16
    },
    params: {
        wearable: !1,
        boost_magic: .2,
        price: 22800
    }
}, 1);

item_base[1406] = createObject({
    b_i: 1406,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Dorpat",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 16
    },
    params: {
        wearable: !1,
        price: 1014,
        no_magic_exp: !0,
        to_map: 0,
        to_i: 20,
        to_j: 20
    }
}, 1);

item_base[1407] = createObject({
    b_i: 1407,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Reval",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 16
    },
    params: {
        wearable: !1,
        price: 2240,
        no_magic_exp: !0,
        to_map: 4,
        to_i: 16,
        to_j: 24
    }
}, 1);

item_base[1408] = createObject({
    b_i: 1408,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Rakblood",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 16
    },
    params: {
        wearable: !1,
        price: 4140,
        no_magic_exp: !0,
        to_map: 5,
        to_i: 34,
        to_j: 68
    }
}, 1);

item_base[1409] = createObject({
    b_i: 1409,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Whiland",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 17
    },
    params: {
        wearable: !1,
        price: 3072,
        no_magic_exp: !0,
        to_map: 3,
        to_i: 28,
        to_j: 93
    }
}, 1);

item_base[1410] = createObject({
    b_i: 1410,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Narwa",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 17
    },
    params: {
        wearable: !1,
        price: 6192,
        no_magic_exp: !0,
        to_map: 2,
        to_i: 68,
        to_j: 37
    }
}, 1);

item_base[1411] = createObject({
    b_i: 1411,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of Cesis",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 17
    },
    params: {
        wearable: !1,
        price: 6480,
        no_magic_exp: !0,
        to_map: 10,
        to_i: 58,
        to_j: 64
    }
}, 1);

item_base[1412] = createObject({
    b_i: 1412,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Memory Of War",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 17
    },
    params: {
        wearable: !1,
        price: 10320,
        no_magic_exp: !0,
        to_map: 16,
        to_i: 82,
        to_j: 69
    }
}, 1);

item_base[1413] = createObject({
    b_i: 1413,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Call Of Orcs",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 17
    },
    params: {
        wearable: !1,
        price: 9450,
        no_magic_exp: !0,
        to_map: 4,
        to_i: 71,
        to_j: 75
    }
}, 1);

item_base[1414] = createObject({
    b_i: 1414,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Death Call",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 17
    },
    params: {
        wearable: !1,
        price: 19680,
        no_magic_exp: !0,
        to_map: 11,
        to_i: 45,
        to_j: 78
    }
}, 1);

item_base[1415] = createObject({
    b_i: 1415,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion of Hell",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 17
    },
    params: {
        wearable: !1,
        price: 34800,
        no_magic_exp: !0,
        to_map: 7,
        to_i: 10,
        to_j: 75
    }
}, 1);

item_base[1416] = createObject({
    b_i: 1416,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion of Heaven",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 17
    },
    params: {
        wearable: !1,
        price: 51600,
        no_magic_exp: !0,
        to_map: 9,
        to_i: 41,
        to_j: 7
    }
}, 1);

item_base[1417] = createObject({
    b_i: 1417,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion of Catacombs",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 17
    },
    params: {
        wearable: !1,
        price: 9e4,
        no_magic_exp: !0,
        to_map: 13,
        to_i: 12,
        to_j: 40
    }
}, 1);

item_base[1418] = createObject({
    b_i: 1418,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion of Chaos",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 18
    },
    params: {
        wearable: !1,
        price: 132e3,
        no_magic_exp: !0,
        to_map: 15,
        to_i: 68,
        to_j: 22
    }
}, 1);

item_base[1419] = createObject({
    b_i: 1419,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Call of Gods",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 18
    },
    params: {
        wearable: !1,
        price: 176400,
        no_magic_exp: !0,
        to_map: 9,
        to_i: 25,
        to_j: 86
    }
}, 1);

item_base[1420] = createObject({
    b_i: 1420,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Potion of Life",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 2,
        y: 18
    },
    params: {
        wearable: !1,
        price: 267600,
        no_magic_exp: !0,
        to_map: 16,
        to_i: 85,
        to_j: 38,
        desc: "Teleports to World Tree"
    }
}, 1);

item_base[1421] = createObject({
    b_i: 1421,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dorpat Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 70,
        min_alchemy: 24,
        desc: "Dorpat has a soul"
    }
}, 1);

item_base[1422] = createObject({
    b_i: 1422,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Reval Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 15
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 100,
        min_alchemy: 40,
        desc: "Reval has a soul"
    }
}, 1);

item_base[1423] = createObject({
    b_i: 1423,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Whiland Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 120,
        min_alchemy: 55,
        desc: "Whiland has a soul"
    }
}, 1);

item_base[1424] = createObject({
    b_i: 1424,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Rakblood Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 260,
        min_alchemy: 65,
        desc: "Rakblood has a soul"
    }
}, 1);

item_base[1425] = createObject({
    b_i: 1425,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Head of Orc Overlord",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 3,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 60,
        price: 2e3
    }
}, 1);

item_base[1426] = createObject({
    b_i: 1426,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Reaper Head",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 4,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 77,
        price: 2500
    }
}, 1);

item_base[1427] = createObject({
    b_i: 1427,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Diablo's Head",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 5,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 90,
        price: 3e3
    }
}, 1);

item_base[1428] = createObject({
    b_i: 1428,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Piece of Portal",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 6,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 100,
        price: 5e3
    }
}, 1);

item_base[1429] = createObject({
    b_i: 1429,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Pharaoh Head",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 7,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 105,
        price: 6e3
    }
}, 1);

item_base[1430] = createObject({
    b_i: 1430,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Head of Chaotic Dragon",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 8,
        y: 18
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 110,
        price: 8500
    }
}, 1);

item_base[1431] = createObject({
    b_i: 1431,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Nephilim Mask",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 0,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 115,
        price: 12e3
    }
}, 1);

item_base[1432] = createObject({
    b_i: 1432,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Piece of Life",
    img: {
        sheet: IMAGE_SHEET.ALCHEMY,
        x: 1,
        y: 19
    },
    params: {
        wearable: !0,
        slot: 3,
        min_alchemy: 120,
        price: 2e4
    }
}, 1);

item_base[1433] = createObject({
    b_i: 1433,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Narwa Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 8,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 270,
        min_alchemy: 66,
        desc: "Narwa has a soul"
    }
}, 1);

item_base[1434] = createObject({
    b_i: 1434,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cesis Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 9,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 300,
        min_alchemy: 70,
        desc: "Cesis has a soul"
    }
}, 1);

item_base[1435] = createObject({
    b_i: 1435,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Lost Soul",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 10,
        y: 6
    },
    params: {
        wearable: !0,
        slot: 3,
        price: 700,
        min_alchemy: 81
    }
}, 1);

item_base[1436] = createObject({
    b_i: 1436,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Egg Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 56
        },
        slot: 0,
        armor: 30,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[1437] = createObject({
    b_i: 1437,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Egg Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 56
        },
        slot: 3,
        armor: 45,
        min_defense: 1,
        price: 1
    }
}, 1);

item_base[1438] = createObject({
    b_i: 1438,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Easter Egg",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 0
    },
    params: {
        wearable: !0,
        min_cooking: 50,
        slot: 3,
        price: 2e3
    }
}, 1);

item_base[1439] = createObject({
    b_i: 1439,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Sapphire Egg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 4,
        y: 9
    },
    params: {
        wearable: !1,
        boost_defense: .18,
        price: 5700
    }
}, 1);

item_base[1440] = createObject({
    b_i: 1440,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Emerald Egg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 3,
        y: 9
    },
    params: {
        wearable: !1,
        boost_magic: .18,
        price: 7500
    }
}, 1);

item_base[1441] = createObject({
    b_i: 1441,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Ruby Egg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 2,
        y: 9
    },
    params: {
        wearable: !1,
        boost_accuracy: .15,
        boost_strength: .15,
        price: 10500
    }
}, 1);

item_base[1442] = createObject({
    b_i: 1442,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Diamond Egg",
    img: {
        sheet: IMAGE_SHEET.FOOD,
        x: 5,
        y: 9
    },
    params: {
        wearable: !1,
        boost_accuracy: .12,
        boost_strength: .12,
        boost_defense: .12,
        boost_magic: .12,
        price: 15750
    }
}, 1);

item_base[1443] = createObject({
    b_i: 1443,
    b_t: ITEM_CATEGORY.FOOD,
    name: "Ham Omelette",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 1
    },
    params: {
        wearable: !1,
        heal: 28,
        price: 6e3
    }
}, 1);

item_base[1444] = createObject({
    b_i: 1444,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Secret Boss Scroll",
    img: {
        sheet: IMAGE_SHEET.ACTIONS,
        x: 5,
        y: 0
    },
    params: {
        wearable: !1,
        slot: 9,
        min_magic: 1,
        price: 1e4,
        desc: "Can be used to teleport to bosses in Every Man's Land. Single use."
    }
}, 1);

item_base[1445] = createObject({
    b_i: 1445,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Yellow)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 10,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 57
        },
        slot: 0,
        armor: 50,
        aim: 30,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "3rd anniversary"
    }
}, 1);

item_base[1446] = createObject({
    b_i: 1446,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Party Hat (Teal)",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 26
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 58
        },
        slot: 0,
        armor: 20,
        aim: 20,
        power: 20,
        min_defense: 1,
        price: 1,
        desc: "3rd anniversary"
    }
}, 1);

item_base[1447] = createObject({
    b_i: 1447,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragonstone Ore",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 7,
        y: 11
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 90,
        price: 2e3
    }
}, 1);

item_base[1448] = createObject({
    b_i: 1448,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Dragonstone Bar",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 2
    },
    params: {
        wearable: !0,
        slot: 3,
        min_forging: 90,
        price: 25600
    }
}, 1);

item_base[1449] = createObject({
    b_i: 1449,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dragonstone Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 0,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 194
        },
        slot: 4,
        aim: 19,
        power: 50,
        min_accuracy: 110,
        price: 77670,
        enchant_id: 1150
    }
}, 1);

item_base[1450] = createObject({
    b_i: 1450,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Dragonstone Dagger",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 0,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 195
        },
        slot: 4,
        aim: 28,
        power: 63,
        min_accuracy: 110,
        price: 143690
    }
}, 1);

item_base[1451] = createObject({
    b_i: 1451,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dragonstone Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 2,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 198
        },
        slot: 4,
        disable_slot: 3,
        aim: 104,
        power: 185,
        min_accuracy: 110,
        price: 207584,
        enchant_id: 1152
    }
}, 1);

item_base[1452] = createObject({
    b_i: 1452,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Dragonstone Scythe",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 2,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 199
        },
        slot: 4,
        disable_slot: 3,
        aim: 150,
        power: 231,
        min_accuracy: 110,
        price: 384030
    }
}, 1);

item_base[1453] = createObject({
    b_i: 1453,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Dragonstone Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 1,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 196
        },
        slot: 4,
        aim: 72,
        power: 215,
        min_accuracy: 110,
        price: 352104,
        enchant_id: 1454
    }
}, 1);

item_base[1454] = createObject({
    b_i: 1454,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Dragonstone Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 1,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 197
        },
        slot: 4,
        aim: 104,
        power: 269,
        min_accuracy: 110,
        price: 651392
    }
}, 1);

item_base[1455] = createObject({
    b_i: 1455,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Bahamut Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 204
        },
        slot: 4,
        aim: 175,
        power: 170,
        min_accuracy: 100,
        price: 385474,
        enchant_id: 1456
    }
}, 1);

item_base[1456] = createObject({
    b_i: 1456,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Bahamut Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 1,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 205
        },
        slot: 4,
        aim: 254,
        power: 212,
        min_accuracy: 100,
        price: 713126
    }
}, 1);

item_base[1457] = createObject({
    b_i: 1457,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Eclipse Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 206
        },
        slot: 4,
        aim: 160,
        power: 230,
        min_accuracy: 115,
        price: 754844,
        enchant_id: 1458
    }
}, 1);

item_base[1458] = createObject({
    b_i: 1458,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Eclipse Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 207
        },
        slot: 4,
        aim: 232,
        power: 287,
        min_accuracy: 115,
        price: 1396461
    }
}, 1);

item_base[1459] = createObject({
    b_i: 1459,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Star Diamond Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 4,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 208
        },
        slot: 4,
        aim: 210,
        power: 245,
        min_accuracy: 120,
        price: 1145757,
        enchant_id: 1460
    }
}, 1);

item_base[1460] = createObject({
    b_i: 1460,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Star Diamond Blade",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 4,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 209
        },
        slot: 4,
        aim: 304,
        power: 306,
        min_accuracy: 120,
        price: 2119650
    }
}, 1);

item_base[1461] = createObject({
    b_i: 1461,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +12",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 202
        },
        slot: 4,
        aim: 240,
        power: 250,
        min_accuracy: 105,
        no_present: !0,
        enchant_bonus: .2,
        price: 1145750,
        enchant_id: 1462
    }
}, 1);

item_base[1462] = createObject({
    b_i: 1462,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +13",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 202
        },
        slot: 4,
        aim: 260,
        power: 270,
        min_accuracy: 115,
        no_present: !0,
        enchant_bonus: .2,
        price: 1545442,
        enchant_id: 1463
    }
}, 1);

item_base[1463] = createObject({
    b_i: 1463,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Firelord Keyblade +14",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 203
        },
        slot: 4,
        aim: 300,
        power: 300,
        min_accuracy: 120,
        no_present: !0,
        price: 2145774
    }
}, 1);

item_base[1464] = createObject({
    b_i: 1464,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Vindication Spear +12",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 210
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 245,
        power: 288,
        min_accuracy: 1,
        min_strength: 105,
        enchant_bonus: .2,
        price: 1145750,
        enchant_id: 1465
    }
}, 1);

item_base[1465] = createObject({
    b_i: 1465,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "King's Legacy Spear +13",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 210
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 252,
        power: 340,
        min_accuracy: 1,
        min_strength: 115,
        enchant_bonus: .2,
        price: 1545442,
        enchant_id: 1466
    }
}, 1);

item_base[1466] = createObject({
    b_i: 1466,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Peacemaker +14",
    img: {
        sheet: IMAGE_SHEET.WEAPONS2,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 0,
            right_hand: 0,
            weapon: 211
        },
        slot: 4,
        disable_slot: 3,
        no_present: !0,
        aim: 270,
        power: 390,
        min_accuracy: 1,
        min_strength: 120,
        price: 1545442
    }
}, 1);

item_base[1467] = createObject({
    b_i: 1467,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 58
        },
        slot: 3,
        armor: 220,
        min_defense: 100,
        price: 988554,
        enchant_id: 1468
    }
}, 1);

item_base[1468] = createObject({
    b_i: 1468,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bahamut Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 59
        },
        slot: 3,
        armor: 275,
        min_defense: 100,
        price: 1828824
    }
}, 1);

item_base[1469] = createObject({
    b_i: 1469,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 66
        },
        slot: 3,
        armor: 225,
        min_defense: 100,
        price: 722547,
        enchant_id: 1470
    }
}, 1);

item_base[1470] = createObject({
    b_i: 1470,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragonstone Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 67
        },
        slot: 3,
        armor: 280,
        min_defense: 100,
        price: 1336711
    }
}, 1);

item_base[1471] = createObject({
    b_i: 1471,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 60
        },
        slot: 3,
        armor: 280,
        min_defense: 115,
        price: 1429382,
        enchant_id: 1472
    }
}, 1);

item_base[1472] = createObject({
    b_i: 1472,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Eclipse Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 61
        },
        slot: 3,
        armor: 350,
        min_defense: 115,
        price: 2644356
    }
}, 1);

item_base[1473] = createObject({
    b_i: 1473,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 62
        },
        slot: 3,
        armor: 300,
        min_defense: 120,
        price: 1722212,
        enchant_id: 1474
    }
}, 1);

item_base[1474] = createObject({
    b_i: 1474,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Star Diamond Shield",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 63
        },
        slot: 3,
        armor: 375,
        min_defense: 120,
        price: 3186092
    }
}, 1);

item_base[1475] = createObject({
    b_i: 1475,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 64
        },
        slot: 3,
        armor: 330,
        min_defense: 110,
        enchant_bonus: .2,
        no_present: !0,
        enchant_id: 1476,
        price: 1823122
    }
}, 1);

item_base[1476] = createObject({
    b_i: 1476,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 64
        },
        slot: 3,
        armor: 350,
        min_defense: 115,
        enchant_bonus: .2,
        no_present: !0,
        enchant_id: 1477,
        price: 2432128
    }
}, 1);

item_base[1477] = createObject({
    b_i: 1477,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Shield +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 1,
            shield: 65
        },
        slot: 3,
        armor: 375,
        min_defense: 120,
        no_present: !0,
        price: 2921231
    }
}, 1);

item_base[1478] = createObject({
    b_i: 1478,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            body: 84
        },
        slot: 2,
        armor: 159,
        min_defense: 110,
        price: 854844,
        enchant_id: 1479
    }
}, 1);

item_base[1479] = createObject({
    b_i: 1479,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragonstone Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 6,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            body: 85
        },
        slot: 2,
        armor: 199,
        min_defense: 110,
        price: 1581461
    }
}, 1);

item_base[1480] = createObject({
    b_i: 1480,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            body: 93
        },
        slot: 2,
        armor: 200,
        min_defense: 115,
        price: 1487454,
        enchant_id: 1481
    }
}, 1);

item_base[1481] = createObject({
    b_i: 1481,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Eclipse Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 94
        },
        slot: 2,
        armor: 250,
        min_defense: 115,
        price: 2751789
    }
}, 1);

item_base[1482] = createObject({
    b_i: 1482,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            body: 95
        },
        slot: 2,
        armor: 220,
        min_defense: 120,
        price: 2584525,
        enchant_id: 1483
    }
}, 1);

item_base[1483] = createObject({
    b_i: 1483,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Star Diamond Platemail",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            body: 96
        },
        slot: 2,
        armor: 275,
        min_defense: 120,
        price: 4781371
    }
}, 1);

item_base[1484] = createObject({
    b_i: 1484,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            body: 97
        },
        slot: 2,
        armor: 234,
        min_defense: 110,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1485,
        price: 2212992
    }
}, 1);

item_base[1485] = createObject({
    b_i: 1485,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            body: 97
        },
        slot: 2,
        armor: 252,
        min_defense: 115,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1486,
        price: 2678882
    }
}, 1);

item_base[1486] = createObject({
    b_i: 1486,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Platemail +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            body: 98
        },
        slot: 2,
        armor: 275,
        no_present: !0,
        min_defense: 120,
        price: 3823234
    }
}, 1);

item_base[1487] = createObject({
    b_i: 1487,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 59
        },
        slot: 0,
        armor: 100,
        min_defense: 100,
        enchant_id: 1488,
        price: 792302
    }
}, 1);

item_base[1488] = createObject({
    b_i: 1488,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bahamut Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 60
        },
        slot: 0,
        armor: 125,
        min_defense: 100,
        price: 1465758
    }
}, 1);

item_base[1489] = createObject({
    b_i: 1489,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 40
        },
        slot: 0,
        armor: 92,
        min_defense: 110,
        enchant_id: 1490,
        price: 458547
    }
}, 1);

item_base[1490] = createObject({
    b_i: 1490,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragonstone Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 41
        },
        slot: 0,
        armor: 115,
        min_defense: 110,
        price: 848311
    }
}, 1);

item_base[1491] = createObject({
    b_i: 1491,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 61
        },
        slot: 0,
        armor: 130,
        min_defense: 115,
        enchant_id: 1492,
        price: 854755
    }
}, 1);

item_base[1492] = createObject({
    b_i: 1492,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Eclipse Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 62
        },
        slot: 0,
        armor: 162,
        min_defense: 115,
        price: 1581296
    }
}, 1);

item_base[1493] = createObject({
    b_i: 1493,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 63
        },
        slot: 0,
        armor: 145,
        min_defense: 120,
        enchant_id: 1494,
        price: 1425844
    }
}, 1);

item_base[1494] = createObject({
    b_i: 1494,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Star Diamond Helmet",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 64
        },
        slot: 0,
        armor: 181,
        min_defense: 120,
        price: 2637811
    }
}, 1);

item_base[1495] = createObject({
    b_i: 1495,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 65
        },
        slot: 0,
        armor: 144,
        no_present: !0,
        min_defense: 110,
        enchant_bonus: .2,
        enchant_id: 1496,
        price: 1762882
    }
}, 1);

item_base[1496] = createObject({
    b_i: 1496,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 65
        },
        slot: 0,
        armor: 162,
        no_present: !0,
        min_defense: 115,
        enchant_bonus: .2,
        enchant_id: 1497,
        price: 2212992
    }
}, 1);

item_base[1497] = createObject({
    b_i: 1497,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Helmet +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 66
        },
        slot: 0,
        armor: 181,
        no_present: !0,
        min_defense: 120,
        price: 2678882
    }
}, 1);

item_base[1498] = createObject({
    b_i: 1498,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Diamond Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 67
        },
        slot: 11,
        armor: 79,
        min_defense: 80,
        price: 283202,
        enchant_id: 1499
    }
}, 1);

item_base[1499] = createObject({
    b_i: 1499,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Diamond Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 68
        },
        slot: 11,
        armor: 114,
        min_defense: 80,
        price: 523923,
        enchant_id: 1499
    }
}, 1);

item_base[1500] = createObject({
    b_i: 1500,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            pants: 58
        },
        slot: 11,
        armor: 111,
        min_defense: 110,
        price: 486487,
        enchant_id: 1501
    }
}, 1);

item_base[1501] = createObject({
    b_i: 1501,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragonstone Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 3,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            pants: 59
        },
        slot: 11,
        armor: 160,
        min_defense: 110,
        price: 9e5
    }
}, 1);

item_base[1502] = createObject({
    b_i: 1502,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            pants: 62
        },
        slot: 11,
        armor: 110,
        min_defense: 100,
        price: 582722,
        enchant_id: 1503
    }
}, 1);

item_base[1503] = createObject({
    b_i: 1503,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bahamut Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            pants: 63
        },
        slot: 11,
        armor: 160,
        min_defense: 100,
        price: 1078035
    }
}, 1);

item_base[1504] = createObject({
    b_i: 1504,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            pants: 64
        },
        slot: 11,
        armor: 145,
        min_defense: 115,
        price: 998748,
        enchant_id: 1505
    }
}, 1);

item_base[1505] = createObject({
    b_i: 1505,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Eclipse Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            pants: 65
        },
        slot: 11,
        armor: 210,
        min_defense: 115,
        price: 1847683
    }
}, 1);

item_base[1506] = createObject({
    b_i: 1506,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            pants: 66
        },
        slot: 11,
        armor: 160,
        min_defense: 120,
        price: 1514784,
        enchant_id: 1507
    }
}, 1);

item_base[1507] = createObject({
    b_i: 1507,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Star Diamond Pants",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            pants: 67
        },
        slot: 11,
        armor: 232,
        min_defense: 120,
        price: 2802350
    }
}, 1);

item_base[1508] = createObject({
    b_i: 1508,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 69
        },
        slot: 11,
        armor: 203,
        min_defense: 110,
        price: 1514784,
        enchant_bonus: .2,
        enchant_id: 1509
    }
}, 1);

item_base[1509] = createObject({
    b_i: 1509,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 69
        },
        slot: 11,
        armor: 215,
        min_defense: 115,
        price: 2212992,
        enchant_bonus: .2,
        enchant_id: 1510
    }
}, 1);

item_base[1510] = createObject({
    b_i: 1510,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Pants +15",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            pants: 70
        },
        slot: 11,
        armor: 232,
        min_defense: 120,
        price: 2678882
    }
}, 1);

item_base[1511] = createObject({
    b_i: 1511,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 4e4,
        no_present: !0,
        aim: 16,
        armor: 13,
        enchant_bonus: .3,
        enchant_id: 1512
    }
}, 1);

item_base[1512] = createObject({
    b_i: 1512,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 20,
        price: 6e4,
        no_present: !0,
        aim: 18,
        armor: 17,
        enchant_bonus: .3,
        enchant_id: 1513
    }
}, 1);

item_base[1513] = createObject({
    b_i: 1513,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 30,
        price: 9e4,
        no_present: !0,
        aim: 28,
        armor: 25,
        enchant_bonus: .3,
        enchant_id: 1514
    }
}, 1);

item_base[1514] = createObject({
    b_i: 1514,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 40,
        price: 15e4,
        no_present: !0,
        aim: 36,
        armor: 36,
        enchant_bonus: .3,
        enchant_id: 1515
    }
}, 1);

item_base[1515] = createObject({
    b_i: 1515,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 25e4,
        no_present: !0,
        aim: 40,
        armor: 40,
        enchant_bonus: .3,
        enchant_id: 1516
    }
}, 1);

item_base[1516] = createObject({
    b_i: 1516,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 45e4,
        no_present: !0,
        aim: 47,
        armor: 58,
        enchant_bonus: .3,
        enchant_id: 1517
    }
}, 1);

item_base[1517] = createObject({
    b_i: 1517,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 70,
        price: 95e4,
        no_present: !0,
        aim: 64,
        armor: 70,
        enchant_bonus: .3,
        enchant_id: 1518
    }
}, 1);

item_base[1518] = createObject({
    b_i: 1518,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Aim +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 1,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 80,
        price: 1129100,
        no_present: !0,
        aim: 85,
        armor: 85
    }
}, 1);

item_base[1519] = createObject({
    b_i: 1519,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 4e4,
        no_present: !0,
        power: 14,
        aim: 16,
        enchant_bonus: .3,
        enchant_id: 1520
    }
}, 1);

item_base[1520] = createObject({
    b_i: 1520,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 20,
        price: 6e4,
        no_present: !0,
        power: 18,
        aim: 18,
        enchant_bonus: .3,
        enchant_id: 1521
    }
}, 1);

item_base[1521] = createObject({
    b_i: 1521,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 30,
        price: 9e4,
        no_present: !0,
        power: 28,
        aim: 28,
        enchant_bonus: .3,
        enchant_id: 1522
    }
}, 1);

item_base[1522] = createObject({
    b_i: 1522,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 40,
        price: 15e4,
        no_present: !0,
        power: 33,
        aim: 36,
        enchant_bonus: .3,
        enchant_id: 1523
    }
}, 1);

item_base[1523] = createObject({
    b_i: 1523,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 25e4,
        no_present: !0,
        power: 40,
        aim: 40,
        enchant_bonus: .3,
        enchant_id: 1524
    }
}, 1);

item_base[1524] = createObject({
    b_i: 1524,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 4e5,
        no_present: !0,
        power: 47,
        aim: 47,
        enchant_bonus: .3,
        enchant_id: 1525
    }
}, 1);

item_base[1525] = createObject({
    b_i: 1525,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 70,
        price: 95e4,
        no_present: !0,
        power: 64,
        aim: 64,
        enchant_bonus: .3,
        enchant_id: 1526
    }
}, 1);

item_base[1526] = createObject({
    b_i: 1526,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Power +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 0,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 80,
        price: 1129100,
        no_present: !0,
        power: 85,
        aim: 85
    }
}, 1);

item_base[1527] = createObject({
    b_i: 1527,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 4e4,
        no_present: !0,
        magic: 12,
        aim: 16,
        enchant_bonus: .3,
        enchant_id: 1528
    }
}, 1);

item_base[1528] = createObject({
    b_i: 1528,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 20,
        price: 6e4,
        no_present: !0,
        magic: 17,
        aim: 18,
        enchant_bonus: .3,
        enchant_id: 1529
    }
}, 1);

item_base[1529] = createObject({
    b_i: 1529,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 30,
        price: 9e4,
        no_present: !0,
        magic: 21,
        aim: 28,
        enchant_bonus: .3,
        enchant_id: 1530
    }
}, 1);

item_base[1530] = createObject({
    b_i: 1530,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 40,
        price: 15e4,
        no_present: !0,
        magic: 28,
        aim: 36,
        enchant_bonus: .3,
        enchant_id: 1531
    }
}, 1);

item_base[1531] = createObject({
    b_i: 1531,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 25e4,
        no_present: !0,
        magic: 34,
        aim: 40,
        enchant_bonus: .3,
        enchant_id: 1532
    }
}, 1);

item_base[1532] = createObject({
    b_i: 1532,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 4e5,
        no_present: !0,
        magic: 42,
        aim: 47,
        enchant_bonus: .3,
        enchant_id: 1533
    }
}, 1);

item_base[1533] = createObject({
    b_i: 1533,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 70,
        price: 95e4,
        no_present: !0,
        magic: 49,
        aim: 64,
        enchant_bonus: .3,
        enchant_id: 1534
    }
}, 1);

item_base[1534] = createObject({
    b_i: 1534,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Magic +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 2,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 80,
        price: 1129100,
        no_present: !0,
        magic: 70,
        aim: 85
    }
}, 1);

item_base[1535] = createObject({
    b_i: 1535,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 10,
        price: 4e4,
        no_present: !0,
        armor: 13,
        power: 14,
        enchant_bonus: .3,
        enchant_id: 1536
    }
}, 1);

item_base[1536] = createObject({
    b_i: 1536,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 20,
        price: 6e4,
        no_present: !0,
        armor: 17,
        power: 18,
        enchant_bonus: .3,
        enchant_id: 1537
    }
}, 1);

item_base[1537] = createObject({
    b_i: 1537,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 30,
        price: 9e4,
        no_present: !0,
        armor: 25,
        power: 28,
        enchant_bonus: .3,
        enchant_id: 1538
    }
}, 1);

item_base[1538] = createObject({
    b_i: 1538,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 40,
        price: 15e4,
        no_present: !0,
        armor: 36,
        power: 33,
        enchant_bonus: .3,
        enchant_id: 1539
    }
}, 1);

item_base[1539] = createObject({
    b_i: 1539,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 50,
        price: 25e4,
        no_present: !0,
        armor: 40,
        power: 40,
        enchant_bonus: .3,
        enchant_id: 1540
    }
}, 1);

item_base[1540] = createObject({
    b_i: 1540,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 60,
        price: 4e5,
        no_present: !0,
        armor: 58,
        power: 47,
        enchant_bonus: .3,
        enchant_id: 1541
    }
}, 1);

item_base[1541] = createObject({
    b_i: 1541,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 70,
        price: 95e4,
        no_present: !0,
        armor: 70,
        power: 64,
        enchant_bonus: .3,
        enchant_id: 1542
    }
}, 1);

item_base[1542] = createObject({
    b_i: 1542,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Ring of Defense +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 3,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 8,
        min_health: 80,
        price: 1129100,
        no_present: !0,
        armor: 85,
        power: 85
    }
}, 1);

item_base[1543] = createObject({
    b_i: 1543,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        no_present: !0,
        price: 4e4,
        aim: 15,
        armor: 14,
        enchant_bonus: .3,
        enchant_id: 1544
    }
}, 1);

item_base[1544] = createObject({
    b_i: 1544,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 20,
        no_present: !0,
        price: 6e4,
        aim: 18,
        armor: 18,
        enchant_bonus: .3,
        enchant_id: 1545
    }
}, 1);

item_base[1545] = createObject({
    b_i: 1545,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 30,
        no_present: !0,
        price: 9e4,
        aim: 32,
        armor: 22,
        enchant_bonus: .3,
        enchant_id: 1546
    }
}, 1);

item_base[1546] = createObject({
    b_i: 1546,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 40,
        no_present: !0,
        price: 15e4,
        aim: 45,
        armor: 45,
        enchant_bonus: .3,
        enchant_id: 1547
    }
}, 1);

item_base[1547] = createObject({
    b_i: 1547,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        no_present: !0,
        price: 25e4,
        aim: 45,
        armor: 56,
        enchant_bonus: .3,
        enchant_id: 1548
    }
}, 1);

item_base[1548] = createObject({
    b_i: 1548,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        no_present: !0,
        price: 4e5,
        aim: 64,
        armor: 81,
        enchant_bonus: .3,
        enchant_id: 1549
    }
}, 1);

item_base[1549] = createObject({
    b_i: 1549,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 70,
        no_present: !0,
        price: 95e4,
        aim: 81,
        armor: 91,
        enchant_bonus: .3,
        enchant_id: 1550
    }
}, 1);

item_base[1550] = createObject({
    b_i: 1550,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Aim +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 5,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 80,
        no_present: !0,
        price: 1129100,
        aim: 101,
        armor: 101
    }
}, 1);

item_base[1551] = createObject({
    b_i: 1551,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        no_present: !0,
        price: 4e4,
        power: 15,
        aim: 15,
        enchant_bonus: .3,
        enchant_id: 1552
    }
}, 1);

item_base[1552] = createObject({
    b_i: 1552,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 20,
        no_present: !0,
        price: 6e4,
        power: 18,
        aim: 18,
        enchant_bonus: .3,
        enchant_id: 1553
    }
}, 1);

item_base[1553] = createObject({
    b_i: 1553,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 30,
        no_present: !0,
        price: 9e4,
        power: 20,
        aim: 32,
        enchant_bonus: .3,
        enchant_id: 1554
    }
}, 1);

item_base[1554] = createObject({
    b_i: 1554,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 40,
        no_present: !0,
        price: 15e4,
        power: 36,
        aim: 45,
        enchant_bonus: .3,
        enchant_id: 1555
    }
}, 1);

item_base[1555] = createObject({
    b_i: 1555,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        no_present: !0,
        price: 25e4,
        power: 45,
        aim: 45,
        enchant_bonus: .3,
        enchant_id: 1556
    }
}, 1);

item_base[1556] = createObject({
    b_i: 1556,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        no_present: !0,
        price: 4e5,
        power: 64,
        aim: 64,
        enchant_bonus: .3,
        enchant_id: 1557
    }
}, 1);

item_base[1557] = createObject({
    b_i: 1557,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 70,
        no_present: !0,
        price: 95e4,
        power: 81,
        aim: 81,
        enchant_bonus: .3,
        enchant_id: 1558
    }
}, 1);

item_base[1558] = createObject({
    b_i: 1558,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Power +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 4,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 80,
        no_present: !0,
        price: 1129100,
        power: 101,
        aim: 101
    }
}, 1);

item_base[1559] = createObject({
    b_i: 1559,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        no_present: !0,
        price: 4e4,
        magic: 14,
        aim: 15,
        enchant_bonus: .3,
        enchant_id: 1560
    }
}, 1);

item_base[1560] = createObject({
    b_i: 1560,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 20,
        no_present: !0,
        price: 6e4,
        magic: 18,
        aim: 18,
        enchant_bonus: .3,
        enchant_id: 1561
    }
}, 1);

item_base[1561] = createObject({
    b_i: 1561,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 30,
        no_present: !0,
        price: 9e4,
        magic: 32,
        aim: 32,
        enchant_bonus: .3,
        enchant_id: 1562
    }
}, 1);

item_base[1562] = createObject({
    b_i: 1562,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 40,
        no_present: !0,
        price: 15e4,
        magic: 44,
        aim: 45,
        enchant_bonus: .3,
        enchant_id: 1563
    }
}, 1);

item_base[1563] = createObject({
    b_i: 1563,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        no_present: !0,
        price: 25e4,
        magic: 53,
        aim: 45,
        enchant_bonus: .3,
        enchant_id: 1564
    }
}, 1);

item_base[1564] = createObject({
    b_i: 1564,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        no_present: !0,
        price: 4e5,
        magic: 63,
        aim: 64,
        enchant_bonus: .3,
        enchant_id: 1565
    }
}, 1);

item_base[1565] = createObject({
    b_i: 1565,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 70,
        no_present: !0,
        price: 95e4,
        magic: 65,
        aim: 81,
        enchant_bonus: .3,
        enchant_id: 1566
    }
}, 1);

item_base[1566] = createObject({
    b_i: 1566,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Magic +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 6,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 80,
        no_present: !0,
        price: 1129100,
        magic: 91,
        aim: 101
    }
}, 1);

item_base[1567] = createObject({
    b_i: 1567,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 10,
        no_present: !0,
        price: 4e4,
        armor: 14,
        power: 15,
        enchant_bonus: .3,
        enchant_id: 1568
    }
}, 1);

item_base[1568] = createObject({
    b_i: 1568,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +1",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 20,
        no_present: !0,
        price: 6e4,
        armor: 18,
        power: 18,
        enchant_bonus: .3,
        enchant_id: 1569
    }
}, 1);

item_base[1569] = createObject({
    b_i: 1569,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +2",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 30,
        no_present: !0,
        price: 9e4,
        armor: 22,
        power: 20,
        enchant_bonus: .3,
        enchant_id: 1570
    }
}, 1);

item_base[1570] = createObject({
    b_i: 1570,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +3",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 40,
        no_present: !0,
        price: 15e4,
        armor: 45,
        power: 36,
        enchant_bonus: .3,
        enchant_id: 1571
    }
}, 1);

item_base[1571] = createObject({
    b_i: 1571,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +4",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 50,
        no_present: !0,
        price: 25e4,
        armor: 56,
        power: 45,
        enchant_bonus: .3,
        enchant_id: 1572
    }
}, 1);

item_base[1572] = createObject({
    b_i: 1572,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +5",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 60,
        no_present: !0,
        price: 4e5,
        armor: 81,
        power: 64,
        enchant_bonus: .3,
        enchant_id: 1573
    }
}, 1);

item_base[1573] = createObject({
    b_i: 1573,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +6",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 70,
        no_present: !0,
        price: 95e4,
        armor: 91,
        power: 81,
        enchant_bonus: .3,
        enchant_id: 1574
    }
}, 1);

item_base[1574] = createObject({
    b_i: 1574,
    b_t: ITEM_CATEGORY.JEWELRY,
    name: "Firelord Necklace of Defense +7",
    img: {
        sheet: IMAGE_SHEET.JEWELRY,
        x: 7,
        y: 14
    },
    params: {
        wearable: !0,
        slot: 7,
        min_health: 80,
        no_present: !0,
        price: 1129100,
        armor: 101,
        power: 101
    }
}, 1);

item_base[1575] = createObject({
    b_i: 1575,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Shiva Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 4,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            body: 91
        },
        slot: 2,
        armor: 115,
        magic: 84,
        cooldown: .04,
        min_magic: 90,
        price: 1312710
    }
}, 1);

item_base[1576] = createObject({
    b_i: 1576,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demigod Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 5,
        y: 19
    },
    params: {
        wearable: !0,
        visible: {
            body: 89
        },
        slot: 2,
        armor: 142,
        magic: 101,
        cooldown: .04,
        min_magic: 95,
        price: 3647069
    }
}, 1);

item_base[1577] = createObject({
    b_i: 1577,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Shiva Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 1,
        y: 20
    },
    params: {
        wearable: !0,
        visible: {
            pants: 55
        },
        slot: 11,
        armor: 96,
        magic: 81,
        cooldown: .04,
        min_magic: 90,
        price: 820409
    }
}, 1);

item_base[1578] = createObject({
    b_i: 1578,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demigod Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 8,
        y: 21
    },
    params: {
        wearable: !0,
        visible: {
            pants: 53
        },
        slot: 11,
        armor: 105,
        magic: 88,
        cooldown: .04,
        min_magic: 95,
        price: 2507632
    }
}, 1);

item_base[1579] = createObject({
    b_i: 1579,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Moon Stone",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 3,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_forging: 100,
        price: 6e4
    }
}, 1);

item_base[1580] = createObject({
    b_i: 1580,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Uncut Star Diamond",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 7
    },
    params: {
        wearable: !0,
        slot: 4,
        min_jewelry: 100,
        price: 5e4
    }
}, 1);

item_base[1581] = createObject({
    b_i: 1581,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Cut Star Diamond",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 11,
        y: 3
    },
    params: {
        wearable: !0,
        slot: 3,
        min_jewelry: 100,
        price: 4e4
    }
}, 1);

item_base[1582] = createObject({
    b_i: 1582,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 9
        },
        slot: 6,
        armor: 76,
        speed: 25,
        aim: 10,
        min_defense: 110,
        price: 232422,
        enchant_id: 1583
    }
}, 1);

item_base[1583] = createObject({
    b_i: 1583,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Dragonstone Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 9
        },
        slot: 6,
        armor: 95,
        speed: 42,
        aim: 10,
        min_defense: 110,
        price: 429980
    }
}, 1);

item_base[1584] = createObject({
    b_i: 1584,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            boots: 10
        },
        slot: 6,
        armor: 100,
        speed: 25,
        power: 25,
        min_defense: 115,
        price: 642554,
        enchant_id: 1585
    }
}, 1);

item_base[1585] = createObject({
    b_i: 1585,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Eclipse Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            boots: 10
        },
        slot: 6,
        armor: 125,
        speed: 35,
        power: 25,
        min_defense: 115,
        price: 1188724
    }
}, 1);

item_base[1586] = createObject({
    b_i: 1586,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 130,
        speed: 30,
        power: 10,
        aim: 10,
        min_defense: 120,
        price: 984557,
        enchant_id: 1587
    }
}, 1);

item_base[1587] = createObject({
    b_i: 1587,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Star Diamond Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 162,
        speed: 44,
        power: 10,
        aim: 10,
        min_defense: 120,
        price: 1821430,
        enchant_id: 1587
    }
}, 1);

item_base[1588] = createObject({
    b_i: 1588,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bronze Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 0,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 1
        },
        slot: 6,
        armor: 15,
        speed: 5,
        min_defense: 1,
        price: 481
    }
}, 1);

item_base[1589] = createObject({
    b_i: 1589,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Iron Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 4
        },
        slot: 6,
        armor: 20,
        min_defense: 20,
        speed: 10,
        price: 7673
    }
}, 1);

item_base[1590] = createObject({
    b_i: 1590,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Steel Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR,
        x: 11,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 29,
        speed: 12,
        min_defense: 40,
        price: 25360
    }
}, 1);

item_base[1591] = createObject({
    b_i: 1591,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +8",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 85,
        speed: 40,
        aim: 8,
        power: 8,
        no_present: !0,
        enchant_bonus: .3,
        enchant_id: 1592,
        min_defense: 80,
        price: 55e4
    }
}, 1);

item_base[1592] = createObject({
    b_i: 1592,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +9",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 90,
        speed: 40,
        aim: 10,
        power: 10,
        no_present: !0,
        enchant_bonus: .3,
        enchant_id: 1593,
        min_defense: 90,
        price: 748200
    }
}, 1);

item_base[1593] = createObject({
    b_i: 1593,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 100,
        speed: 40,
        aim: 10,
        power: 10,
        no_present: !0,
        enchant_bonus: .3,
        enchant_id: 1594,
        min_defense: 95,
        price: 998292
    }
}, 1);

item_base[1594] = createObject({
    b_i: 1594,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 112,
        speed: 40,
        aim: 10,
        power: 10,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1595,
        min_defense: 105,
        price: 1425124
    }
}, 1);

item_base[1595] = createObject({
    b_i: 1595,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 120,
        speed: 40,
        aim: 10,
        power: 10,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1596,
        min_defense: 110,
        price: 1762882
    }
}, 1);

item_base[1596] = createObject({
    b_i: 1596,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 125,
        speed: 42,
        aim: 10,
        power: 10,
        no_present: !0,
        enchant_bonus: .2,
        enchant_id: 1597,
        min_defense: 115,
        price: 2212992
    }
}, 1);

item_base[1597] = createObject({
    b_i: 1597,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Firelord Boots +14",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 14
        },
        slot: 6,
        armor: 162,
        speed: 44,
        aim: 10,
        power: 10,
        no_present: !0,
        min_defense: 120,
        price: 2678882
    }
}, 1);

item_base[1598] = createObject({
    b_i: 1598,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Beginner Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 68
        },
        slot: 3,
        magic_slots: 1,
        cooldown: .05,
        min_magic: 30,
        min_accuracy: 1,
        enchant_id: 1677,
        price: 3e4
    }
}, 1);

item_base[1599] = createObject({
    b_i: 1599,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Apprentice Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 69
        },
        slot: 3,
        magic_slots: 2,
        cooldown: .1,
        min_magic: 60,
        min_accuracy: 1,
        enchant_id: 1678,
        price: 9e4
    }
}, 1);

item_base[1600] = createObject({
    b_i: 1600,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Demonic Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 70
        },
        slot: 3,
        magic_slots: 3,
        cooldown: .12,
        min_magic: 75,
        min_accuracy: 1,
        enchant_id: 1679,
        price: 4e5
    }
}, 1);

item_base[1601] = createObject({
    b_i: 1601,
    b_t: ITEM_CATEGORY.MATERIAL,
    name: "Demonic Crystal",
    img: {
        sheet: IMAGE_SHEET.MISC,
        x: 4,
        y: 5
    },
    params: {
        wearable: !0,
        slot: 3,
        min_magic: 100,
        price: 9e4
    }
}, 1);

item_base[1602] = createObject({
    b_i: 1602,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            body: 101
        },
        slot: 2,
        armor: 132,
        magic: 90,
        cooldown: .04,
        min_magic: 105,
        price: 1254852,
        enchant_id: 1603
    }
}, 1);

item_base[1603] = createObject({
    b_i: 1603,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Cursed Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            body: 102
        },
        slot: 2,
        armor: 165,
        magic: 121,
        cooldown: .04,
        min_magic: 105,
        price: 2321476
    }
}, 1);

item_base[1604] = createObject({
    b_i: 1604,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demonic Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            body: 103
        },
        slot: 2,
        armor: 154,
        magic: 100,
        cooldown: .05,
        min_magic: 110,
        price: 1574654,
        enchant_id: 1605
    }
}, 1);

item_base[1605] = createObject({
    b_i: 1605,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demonic Robe",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            body: 104
        },
        slot: 2,
        armor: 192,
        magic: 135,
        cooldown: .05,
        min_magic: 110,
        price: 2913109
    }
}, 1);

item_base[1606] = createObject({
    b_i: 1606,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            pants: 73
        },
        slot: 11,
        armor: 100,
        magic: 76,
        cooldown: .04,
        min_magic: 105,
        price: 1645885,
        enchant_id: 1607
    }
}, 1);

item_base[1607] = createObject({
    b_i: 1607,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Cursed Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 74
        },
        slot: 11,
        armor: 125,
        magic: 102,
        cooldown: .04,
        min_magic: 105,
        price: 3044887
    }
}, 1);

item_base[1608] = createObject({
    b_i: 1608,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demonic Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            pants: 75
        },
        slot: 11,
        armor: 132,
        magic: 88,
        cooldown: .05,
        min_magic: 110,
        price: 1954844,
        enchant_id: 1609
    }
}, 1);

item_base[1609] = createObject({
    b_i: 1609,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demonic Robe Bottom",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            pants: 76
        },
        slot: 11,
        armor: 165,
        magic: 118,
        cooldown: .05,
        min_magic: 110,
        price: 3616461
    }
}, 1);

item_base[1610] = createObject({
    b_i: 1610,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 69
        },
        slot: 0,
        armor: 88,
        magic: 58,
        cooldown: .04,
        min_magic: 105,
        enchant_id: 1611,
        price: 1224588
    }
}, 1);

item_base[1611] = createObject({
    b_i: 1611,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Cursed Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 70
        },
        slot: 0,
        armor: 110,
        magic: 78,
        cooldown: .04,
        min_magic: 105,
        price: 2265487
    }
}, 1);

item_base[1612] = createObject({
    b_i: 1612,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demonic Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 71
        },
        slot: 0,
        armor: 100,
        magic: 64,
        cooldown: .05,
        min_magic: 110,
        enchant_id: 1613,
        price: 1685485
    }
}, 1);

item_base[1613] = createObject({
    b_i: 1613,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demonic Hat",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            helmet: 72
        },
        slot: 0,
        armor: 125,
        magic: 86,
        cooldown: .05,
        min_magic: 110,
        price: 3118147
    }
}, 1);

item_base[1614] = createObject({
    b_i: 1614,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 3
        },
        slot: 6,
        armor: 70,
        magic: 60,
        min_magic: 105,
        enchant_id: 1615,
        speed: 30,
        price: 1100254
    }
}, 1);

item_base[1615] = createObject({
    b_i: 1615,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Cursed Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 3
        },
        slot: 6,
        armor: 87,
        magic: 81,
        min_magic: 105,
        speed: 35,
        price: 2035469
    }
}, 1);

item_base[1616] = createObject({
    b_i: 1616,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Demonic Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 85,
        magic: 65,
        min_magic: 110,
        enchant_id: 1617,
        speed: 35,
        price: 1348544
    }
}, 1);

item_base[1617] = createObject({
    b_i: 1617,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Demonic Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 9,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            boots: 11
        },
        slot: 6,
        armor: 106,
        magic: 88,
        min_magic: 110,
        speed: 40,
        price: 2494806
    }
}, 1);

item_base[1618] = createObject({
    b_i: 1618,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 99
        },
        slot: 2,
        armor: 115,
        magic: 83,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .3,
        enchant_id: 1619,
        min_magic: 90,
        price: 1129100
    }
}, 1);

item_base[1619] = createObject({
    b_i: 1619,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            body: 99
        },
        slot: 2,
        armor: 142,
        magic: 101,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .2,
        enchant_id: 1620,
        min_magic: 95,
        price: 1362882
    }
}, 1);

item_base[1620] = createObject({
    b_i: 1620,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 100
        },
        slot: 2,
        armor: 165,
        magic: 121,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .2,
        enchant_id: 1621,
        min_magic: 105,
        price: 1762882
    }
}, 1);

item_base[1621] = createObject({
    b_i: 1621,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            body: 100
        },
        slot: 2,
        armor: 192,
        magic: 135,
        no_present: !0,
        cooldown: .05,
        min_magic: 110,
        price: 2212992
    }
}, 1);

item_base[1622] = createObject({
    b_i: 1622,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe Bottom +10",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            pants: 71
        },
        slot: 11,
        armor: 96,
        magic: 81,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .3,
        enchant_id: 1623,
        min_magic: 90,
        price: 748200
    }
}, 1);

item_base[1623] = createObject({
    b_i: 1623,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe Bottom +11",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            pants: 71
        },
        slot: 11,
        armor: 105,
        magic: 88,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .2,
        enchant_id: 1624,
        min_magic: 95,
        price: 998292
    }
}, 1);

item_base[1624] = createObject({
    b_i: 1624,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe Bottom +12",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            pants: 72
        },
        slot: 11,
        armor: 125,
        magic: 103,
        no_present: !0,
        cooldown: .04,
        enchant_bonus: .2,
        enchant_id: 1625,
        min_magic: 105,
        price: 1435322
    }
}, 1);

item_base[1625] = createObject({
    b_i: 1625,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bard Robe Bottom +13",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            pants: 72
        },
        slot: 11,
        armor: 165,
        magic: 119,
        no_present: !0,
        cooldown: .05,
        min_magic: 110,
        price: 1762882
    }
}, 1);

item_base[1626] = createObject({
    b_i: 1626,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Power Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 212
        },
        slot: 4,
        aim: 121,
        power: 1,
        magic: 101,
        min_magic: 50,
        min_accuracy: 1,
        price: 52488
    }
}, 1);

item_base[1627] = createObject({
    b_i: 1627,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Flash Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 212
        },
        slot: 4,
        aim: 125,
        magic: 121,
        power: 1,
        min_magic: 60,
        min_accuracy: 1,
        price: 88544,
        enchant_id: 1628
    }
}, 1);

item_base[1628] = createObject({
    b_i: 1628,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Flash Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 218
        },
        slot: 4,
        aim: 144,
        magic: 139,
        power: 1,
        min_magic: 60,
        min_accuracy: 1,
        price: 163806
    }
}, 1);

item_base[1629] = createObject({
    b_i: 1629,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Air Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 213
        },
        slot: 4,
        aim: 151,
        magic: 153,
        power: 1,
        min_magic: 80,
        min_accuracy: 1,
        price: 215884,
        enchant_id: 1630
    }
}, 1);

item_base[1630] = createObject({
    b_i: 1630,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Air Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 219
        },
        slot: 4,
        aim: 174,
        magic: 176,
        power: 1,
        min_magic: 80,
        min_accuracy: 1,
        price: 399385
    }
}, 1);

item_base[1631] = createObject({
    b_i: 1631,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Earth Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 214
        },
        slot: 4,
        aim: 178,
        magic: 186,
        power: 1,
        min_magic: 90,
        min_accuracy: 1,
        price: 484484,
        enchant_id: 1632
    }
}, 1);

item_base[1632] = createObject({
    b_i: 1632,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Earth Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 214
        },
        slot: 4,
        aim: 204,
        magic: 214,
        power: 1,
        min_magic: 90,
        min_accuracy: 1,
        price: 896295
    }
}, 1);

item_base[1633] = createObject({
    b_i: 1633,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Water Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 215
        },
        slot: 4,
        aim: 202,
        magic: 232,
        power: 1,
        min_magic: 100,
        min_accuracy: 1,
        price: 984775,
        enchant_id: 1634
    }
}, 1);

item_base[1634] = createObject({
    b_i: 1634,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Water Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 215
        },
        slot: 4,
        aim: 232,
        magic: 267,
        power: 1,
        min_magic: 100,
        min_accuracy: 1,
        price: 1821833
    }
}, 1);

item_base[1635] = createObject({
    b_i: 1635,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Fire Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 216
        },
        slot: 4,
        aim: 222,
        magic: 257,
        power: 1,
        min_magic: 110,
        min_accuracy: 1,
        price: 1125448,
        enchant_id: 1636
    }
}, 1);

item_base[1636] = createObject({
    b_i: 1636,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Fire Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 220
        },
        slot: 4,
        aim: 256,
        magic: 295,
        power: 1,
        min_magic: 110,
        min_accuracy: 1,
        price: 2082078
    }
}, 1);

item_base[1637] = createObject({
    b_i: 1637,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Death Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 217
        },
        slot: 4,
        aim: 291,
        magic: 319,
        power: 1,
        min_magic: 120,
        min_accuracy: 1,
        price: 1425885,
        enchant_id: 1638
    }
}, 1);

item_base[1638] = createObject({
    b_i: 1638,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Death Blast Orb",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 221
        },
        slot: 4,
        aim: 335,
        magic: 367,
        power: 1,
        min_magic: 120,
        min_accuracy: 1,
        price: 2637887
    }
}, 1);

item_base[1639] = createObject({
    b_i: 1639,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 85,
        speed: 24,
        power: 10,
        aim: 10,
        min_defense: 100,
        price: 363332,
        enchant_id: 1640
    }
}, 1);

item_base[1640] = createObject({
    b_i: 1640,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Enchanted Bahamut Boots",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 2,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            boots: 6
        },
        slot: 6,
        armor: 106,
        speed: 28,
        power: 10,
        aim: 10,
        min_defense: 100,
        price: 672164
    }
}, 1);

item_base[1641] = createObject({
    b_i: 1641,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Scepter of Darkness",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 224
        },
        slot: 4,
        aim: 118,
        power: 1,
        magic: 124,
        cooldown: .11,
        min_magic: 90,
        min_accuracy: 1,
        price: 322242,
        enchant_id: 1642
    }
}, 1);

item_base[1642] = createObject({
    b_i: 1642,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Scepter of Darkness",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 225
        },
        slot: 4,
        aim: 148,
        power: 1,
        magic: 155,
        cooldown: .11,
        min_magic: 90,
        min_accuracy: 1,
        price: 596147
    }
}, 1);

item_base[1643] = createObject({
    b_i: 1643,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Spectral Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 247
        },
        slot: 4,
        aim: 127,
        power: 1,
        magic: 142,
        cooldown: .12,
        min_magic: 95,
        min_accuracy: 1,
        price: 419889,
        enchant_id: 1644
    }
}, 1);

item_base[1644] = createObject({
    b_i: 1644,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Spectral Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 248
        },
        slot: 4,
        aim: 158,
        power: 1,
        magic: 177,
        cooldown: .12,
        min_magic: 95,
        min_accuracy: 1,
        price: 776794
    }
}, 1);

item_base[1645] = createObject({
    b_i: 1645,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Fate Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 230
        },
        slot: 4,
        aim: 135,
        power: 1,
        magic: 155,
        cooldown: .12,
        min_magic: 105,
        min_accuracy: 1,
        price: 485488,
        enchant_id: 1646
    }
}, 1);

item_base[1646] = createObject({
    b_i: 1646,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Fate Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 231
        },
        slot: 4,
        aim: 169,
        power: 1,
        magic: 194,
        cooldown: .12,
        min_magic: 105,
        min_accuracy: 1,
        price: 898152
    }
}, 1);

item_base[1647] = createObject({
    b_i: 1647,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Amnesia Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 226
        },
        slot: 4,
        aim: 148,
        power: 1,
        magic: 171,
        cooldown: .13,
        min_magic: 110,
        min_accuracy: 1,
        price: 595484,
        enchant_id: 1648
    }
}, 1);

item_base[1648] = createObject({
    b_i: 1648,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Amnesia Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 227
        },
        slot: 4,
        aim: 185,
        power: 1,
        magic: 214,
        cooldown: .13,
        min_magic: 110,
        min_accuracy: 1,
        price: 1101645
    }
}, 1);

item_base[1649] = createObject({
    b_i: 1649,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Eclipse Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 8
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 228
        },
        slot: 4,
        aim: 174,
        power: 1,
        magic: 192,
        cooldown: .14,
        min_magic: 115,
        min_accuracy: 1,
        price: 698548,
        enchant_id: 1650
    }
}, 1);

item_base[1650] = createObject({
    b_i: 1650,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Eclipse Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 229
        },
        slot: 4,
        aim: 218,
        power: 1,
        magic: 240,
        cooldown: .14,
        min_magic: 115,
        min_accuracy: 1,
        price: 1292313
    }
}, 1);

item_base[1651] = createObject({
    b_i: 1651,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Star Diamond Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 232
        },
        slot: 4,
        aim: 194,
        power: 1,
        magic: 213,
        cooldown: .15,
        min_magic: 120,
        min_accuracy: 1,
        price: 944587,
        enchant_id: 1652
    }
}, 1);

item_base[1652] = createObject({
    b_i: 1652,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Star Diamond Scepter",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 233
        },
        slot: 4,
        aim: 243,
        power: 1,
        magic: 266,
        cooldown: .15,
        min_magic: 120,
        min_accuracy: 1,
        price: 1747485
    }
}, 1);

item_base[1653] = createObject({
    b_i: 1653,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Starfall Scepter +10",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 245
        },
        slot: 4,
        aim: 148,
        power: 1,
        magic: 155,
        cooldown: .11,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .3,
        enchant_id: 1654,
        min_magic: 90,
        price: 1129100
    }
}, 1);

item_base[1654] = createObject({
    b_i: 1654,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Reaper Scepter +11",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 245
        },
        slot: 4,
        aim: 158,
        power: 1,
        magic: 177,
        cooldown: .12,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1655,
        min_magic: 95,
        price: 1362882
    }
}, 1);

item_base[1655] = createObject({
    b_i: 1655,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Mirage Scepter +12",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 246
        },
        slot: 4,
        aim: 168,
        power: 1,
        magic: 194,
        cooldown: .12,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1656,
        min_magic: 105,
        price: 1762882
    }
}, 1);

item_base[1656] = createObject({
    b_i: 1656,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Moonlight Scepter +13",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 246
        },
        slot: 4,
        aim: 185,
        power: 1,
        magic: 214,
        cooldown: .13,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1657,
        min_magic: 110,
        price: 2212992
    }
}, 1);

item_base[1657] = createObject({
    b_i: 1657,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Nemesis Scepter +14",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 244
        },
        slot: 4,
        aim: 217,
        power: 1,
        magic: 239,
        cooldown: .14,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1658,
        min_magic: 115,
        price: 2678882
    }
}, 1);

item_base[1658] = createObject({
    b_i: 1658,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Oracle Scepter +15",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 12
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 2,
            weapon: 244
        },
        slot: 4,
        aim: 243,
        power: 1,
        magic: 266,
        cooldown: .15,
        no_present: !0,
        min_accuracy: 1,
        min_magic: 120,
        price: 3223234
    }
}, 1);

item_base[1659] = createObject({
    b_i: 1659,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Staff of Darkness",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 234
        },
        slot: 4,
        aim: 88,
        power: 1,
        magic: 92,
        cooldown: .28,
        min_magic: 90,
        min_accuracy: 1,
        price: 432548,
        enchant_id: 1660
    }
}, 1);

item_base[1660] = createObject({
    b_i: 1660,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Staff of Darkness",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 235
        },
        slot: 4,
        aim: 110,
        power: 1,
        magic: 115,
        cooldown: .28,
        min_magic: 90,
        min_accuracy: 1,
        price: 800213
    }
}, 1);

item_base[1661] = createObject({
    b_i: 1661,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Spectral Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 249
        },
        slot: 4,
        aim: 94,
        power: 1,
        magic: 105,
        cooldown: .3,
        min_magic: 95,
        min_accuracy: 1,
        price: 514842,
        enchant_id: 1662
    }
}, 1);

item_base[1662] = createObject({
    b_i: 1662,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Spectral Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 250
        },
        slot: 4,
        aim: 117,
        power: 1,
        magic: 131,
        cooldown: .3,
        min_magic: 95,
        min_accuracy: 1,
        price: 952457
    }
}, 1);

item_base[1663] = createObject({
    b_i: 1663,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Fate Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 0,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 240
        },
        slot: 4,
        aim: 100,
        power: 1,
        magic: 115,
        cooldown: .3,
        min_magic: 105,
        min_accuracy: 1,
        price: 594842,
        enchant_id: 1664
    }
}, 1);

item_base[1664] = createObject({
    b_i: 1664,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Fate Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 1,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 241
        },
        slot: 4,
        aim: 125,
        power: 1,
        magic: 143,
        cooldown: .3,
        min_magic: 105,
        min_accuracy: 1,
        price: 1100457
    }
}, 1);

item_base[1665] = createObject({
    b_i: 1665,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Amnesia Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 236
        },
        slot: 4,
        aim: 110,
        power: 1,
        magic: 127,
        cooldown: .32,
        min_magic: 110,
        min_accuracy: 1,
        price: 675425,
        enchant_id: 1666
    }
}, 1);

item_base[1666] = createObject({
    b_i: 1666,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Amnesia Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 5,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 237
        },
        slot: 4,
        aim: 137,
        power: 1,
        magic: 158,
        cooldown: .32,
        min_magic: 110,
        min_accuracy: 1,
        price: 1249536
    }
}, 1);

item_base[1667] = createObject({
    b_i: 1667,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Eclipse Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 238
        },
        slot: 4,
        aim: 129,
        power: 1,
        magic: 142,
        cooldown: .34,
        min_magic: 115,
        min_accuracy: 1,
        price: 789954,
        enchant_id: 1668
    }
}, 1);

item_base[1668] = createObject({
    b_i: 1668,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Eclipse Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 4,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 254
        },
        slot: 4,
        aim: 161,
        power: 1,
        magic: 177,
        cooldown: .34,
        min_magic: 115,
        min_accuracy: 1,
        price: 1461414
    }
}, 1);

item_base[1669] = createObject({
    b_i: 1669,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Star Diamond Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 2,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 242
        },
        slot: 4,
        aim: 144,
        power: 1,
        magic: 158,
        cooldown: .35,
        min_magic: 120,
        min_accuracy: 1,
        price: 1024852,
        enchant_id: 1670
    }
}, 1);

item_base[1670] = createObject({
    b_i: 1670,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Enchanted Star Diamond Staff",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 3,
        y: 11
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 243
        },
        slot: 4,
        aim: 180,
        power: 1,
        magic: 197,
        cooldown: .35,
        min_magic: 120,
        min_accuracy: 1,
        price: 1895976
    }
}, 1);

item_base[1671] = createObject({
    b_i: 1671,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Starfall Staff +10",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 251
        },
        slot: 4,
        aim: 110,
        power: 1,
        magic: 115,
        cooldown: .28,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .3,
        enchant_id: 1672,
        min_magic: 90,
        price: 1129100
    }
}, 1);

item_base[1672] = createObject({
    b_i: 1672,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Reaper Staff +11",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 251
        },
        slot: 4,
        aim: 117,
        power: 1,
        magic: 131,
        cooldown: .3,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1673,
        min_magic: 95,
        price: 1362882
    }
}, 1);

item_base[1673] = createObject({
    b_i: 1673,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Mirage Staff +12",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 252
        },
        slot: 4,
        aim: 125,
        power: 1,
        magic: 143,
        cooldown: .3,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1674,
        min_magic: 105,
        price: 1762882
    }
}, 1);

item_base[1674] = createObject({
    b_i: 1674,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Moonlight Staff +13",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 252
        },
        slot: 4,
        aim: 137,
        power: 1,
        magic: 158,
        cooldown: .32,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1675,
        min_magic: 110,
        price: 2212992
    }
}, 1);

item_base[1675] = createObject({
    b_i: 1675,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Nemesis Staff +14",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 253
        },
        slot: 4,
        aim: 161,
        power: 1,
        magic: 177,
        cooldown: .34,
        no_present: !0,
        min_accuracy: 1,
        enchant_bonus: .2,
        enchant_id: 1676,
        min_magic: 115,
        price: 2678882
    }
}, 1);

item_base[1676] = createObject({
    b_i: 1676,
    b_t: ITEM_CATEGORY.WEAPON,
    name: "Oracle Staff +15",
    img: {
        sheet: IMAGE_SHEET.MWEAPONS,
        x: 6,
        y: 7
    },
    params: {
        wearable: !0,
        visible: {
            left_hand: 1,
            weapon: 253
        },
        slot: 4,
        aim: 180,
        power: 1,
        magic: 197,
        cooldown: .35,
        no_present: !0,
        min_accuracy: 1,
        min_magic: 120,
        price: 3223234
    }
}, 1);

item_base[1677] = createObject({
    b_i: 1677,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Beginner Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 4,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 68
        },
        slot: 3,
        magic_slots: 1,
        cooldown: .08,
        min_magic: 30,
        min_accuracy: 1,
        price: 55500
    }
}, 1);

item_base[1678] = createObject({
    b_i: 1678,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Apprentice Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 5,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 69
        },
        slot: 3,
        magic_slots: 2,
        cooldown: .13,
        min_magic: 60,
        min_accuracy: 1,
        price: 166500
    }
}, 1);

item_base[1679] = createObject({
    b_i: 1679,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Demonic Magic Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 6,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 70
        },
        slot: 3,
        magic_slots: 3,
        cooldown: .15,
        min_magic: 75,
        min_accuracy: 1,
        price: 74e4
    }
}, 1);

item_base[1680] = createObject({
    b_i: 1680,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Cursed Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 71
        },
        slot: 3,
        magic_slots: 1,
        cooldown: .08,
        min_magic: 45,
        min_accuracy: 1,
        enchant_id: 1681,
        price: 6e4
    }
}, 1);

item_base[1681] = createObject({
    b_i: 1681,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Cursed Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 9,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 71
        },
        slot: 3,
        magic_slots: 1,
        cooldown: .11,
        min_magic: 45,
        min_accuracy: 1,
        price: 166500
    }
}, 1);

item_base[1682] = createObject({
    b_i: 1682,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Nemesis Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 72
        },
        slot: 3,
        magic_slots: 4,
        cooldown: .1,
        min_magic: 110,
        min_accuracy: 1,
        enchant_id: 1683,
        price: 1123382
    }
}, 1);

item_base[1683] = createObject({
    b_i: 1683,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Nemesis Book",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 8,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 72
        },
        slot: 3,
        magic_slots: 4,
        cooldown: .13,
        min_magic: 110,
        min_accuracy: 1,
        price: 2078256
    }
}, 1);

item_base[1684] = createObject({
    b_i: 1684,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Book of Darkness",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 7,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 73
        },
        slot: 3,
        magic_slots: 3,
        cooldown: .15,
        min_magic: 95,
        min_accuracy: 1,
        enchant_id: 1685,
        price: 78e4
    }
}, 1);

item_base[1685] = createObject({
    b_i: 1685,
    b_t: ITEM_CATEGORY.TOOL,
    name: "Enchanted Book of Darkness",
    img: {
        sheet: IMAGE_SHEET.TOOLS,
        x: 7,
        y: 6
    },
    params: {
        wearable: !0,
        visible: {
            right_hand: 0,
            shield: 73
        },
        slot: 3,
        magic_slots: 3,
        cooldown: .18,
        min_magic: 95,
        min_accuracy: 1,
        price: 1443e3
    }
}, 1);

item_base[1686] = createObject({
    b_i: 1686,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bone Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 9,
        aim: 5,
        min_defense: 10,
        price: 388
    }
}, 1);

item_base[1687] = createObject({
    b_i: 1687,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 8
        },
        slot: 5,
        armor: 65,
        aim: 50,
        min_defense: 90,
        price: 92888
    }
}, 1);

item_base[1688] = createObject({
    b_i: 1688,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 8
        },
        slot: 5,
        armor: 65,
        power: 45,
        aim: 50,
        min_defense: 90,
        price: 171842
    }
}, 1);

item_base[1689] = createObject({
    b_i: 1689,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 8
        },
        slot: 5,
        armor: 110,
        aim: 50,
        min_defense: 90,
        price: 171842
    }
}, 1);

item_base[1690] = createObject({
    b_i: 1690,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 8
        },
        slot: 5,
        armor: 65,
        magic: 45,
        aim: 50,
        min_defense: 90,
        price: 171842
    }
}, 1);

item_base[1691] = createObject({
    b_i: 1691,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Cursed Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 8
        },
        slot: 5,
        armor: 65,
        aim: 95,
        min_defense: 90,
        price: 171842
    }
}, 1);

item_base[1692] = createObject({
    b_i: 1692,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 2
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 75,
        aim: 60,
        min_defense: 100,
        price: 137222
    }
}, 1);

item_base[1693] = createObject({
    b_i: 1693,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Gloves of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 75,
        power: 50,
        aim: 60,
        min_defense: 100,
        price: 137222
    }
}, 1);

item_base[1694] = createObject({
    b_i: 1694,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Gloves of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 75,
        magic: 50,
        aim: 60,
        min_defense: 100,
        price: 137222
    }
}, 1);

item_base[1695] = createObject({
    b_i: 1695,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Gloves of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 75,
        aim: 110,
        min_defense: 100,
        price: 137222
    }
}, 1);

item_base[1696] = createObject({
    b_i: 1696,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Bahamut Gloves of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 3
    },
    params: {
        wearable: !0,
        visible: {
            hands: 3
        },
        slot: 5,
        armor: 125,
        aim: 60,
        min_defense: 100,
        price: 137222
    }
}, 1);

item_base[1697] = createObject({
    b_i: 1697,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 9
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 90,
        aim: 65,
        min_defense: 105,
        price: 273222
    }
}, 1);

item_base[1698] = createObject({
    b_i: 1698,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Gloves of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 90,
        power: 55,
        aim: 65,
        min_defense: 105,
        price: 505460
    }
}, 1);

item_base[1699] = createObject({
    b_i: 1699,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Gloves of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 145,
        aim: 65,
        min_defense: 105,
        price: 505460
    }
}, 1);

item_base[1700] = createObject({
    b_i: 1700,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Gloves of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 90,
        magic: 55,
        aim: 65,
        min_defense: 105,
        price: 505460
    }
}, 1);

item_base[1701] = createObject({
    b_i: 1701,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Ichor Gloves of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 1,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 4
        },
        slot: 5,
        armor: 90,
        aim: 110,
        min_defense: 105,
        price: 505460
    }
}, 1);

item_base[1702] = createObject({
    b_i: 1702,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 5,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 100,
        aim: 70,
        min_defense: 110,
        price: 782222
    }
}, 1);

item_base[1703] = createObject({
    b_i: 1703,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 100,
        power: 65,
        aim: 70,
        min_defense: 110,
        price: 1447110
    }
}, 1);

item_base[1704] = createObject({
    b_i: 1704,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 165,
        aim: 70,
        min_defense: 110,
        price: 1447110
    }
}, 1);

item_base[1705] = createObject({
    b_i: 1705,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 100,
        magic: 65,
        aim: 70,
        min_defense: 110,
        price: 1447110
    }
}, 1);

item_base[1706] = createObject({
    b_i: 1706,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "7 Souls Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 2
        },
        slot: 5,
        armor: 100,
        aim: 135,
        min_defense: 110,
        price: 1447110
    }
}, 1);

item_base[1707] = createObject({
    b_i: 1707,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 7,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 72,
        aim: 60,
        min_defense: 110,
        price: 146372
    }
}, 1);

item_base[1708] = createObject({
    b_i: 1708,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Gloves of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 72,
        power: 50,
        aim: 60,
        min_defense: 110,
        price: 270788
    }
}, 1);

item_base[1709] = createObject({
    b_i: 1709,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Gloves of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 122,
        aim: 60,
        min_defense: 110,
        price: 270788
    }
}, 1);

item_base[1710] = createObject({
    b_i: 1710,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Gloves of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 72,
        magic: 50,
        aim: 60,
        min_defense: 110,
        price: 270788
    }
}, 1);

item_base[1711] = createObject({
    b_i: 1711,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Dragonstone Gloves of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 8,
        y: 10
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 72,
        aim: 110,
        min_defense: 110,
        price: 270788
    }
}, 1);

item_base[1712] = createObject({
    b_i: 1712,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 4
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 110,
        aim: 80,
        min_defense: 115,
        price: 524448
    }
}, 1);

item_base[1713] = createObject({
    b_i: 1713,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Gloves of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 110,
        power: 70,
        aim: 80,
        min_defense: 115,
        price: 970228
    }
}, 1);

item_base[1714] = createObject({
    b_i: 1714,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Gloves of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 180,
        aim: 80,
        min_defense: 115,
        price: 970228
    }
}, 1);

item_base[1715] = createObject({
    b_i: 1715,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Gloves of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 110,
        magic: 70,
        aim: 80,
        min_defense: 115,
        price: 970228
    }
}, 1);

item_base[1716] = createObject({
    b_i: 1716,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Eclipse Gloves of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 3,
        y: 5
    },
    params: {
        wearable: !0,
        visible: {
            hands: 5
        },
        slot: 5,
        armor: 110,
        aim: 150,
        min_defense: 115,
        price: 970228
    }
}, 1);

item_base[1717] = createObject({
    b_i: 1717,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Gloves",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 0
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 126,
        aim: 90,
        min_defense: 120,
        price: 799926
    }
}, 1);

item_base[1718] = createObject({
    b_i: 1718,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Gloves Of Power",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 126,
        power: 80,
        aim: 90,
        min_defense: 120,
        price: 1479863
    }
}, 1);

item_base[1719] = createObject({
    b_i: 1719,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Gloves Of Defense",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 206,
        aim: 90,
        min_defense: 120,
        price: 1479863
    }
}, 1);

item_base[1720] = createObject({
    b_i: 1720,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Gloves Of Magic",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 126,
        magic: 80,
        aim: 90,
        min_defense: 120,
        price: 1479863
    }
}, 1);

item_base[1721] = createObject({
    b_i: 1721,
    b_t: ITEM_CATEGORY.ARMOR,
    name: "Star Diamond Gloves Of Accuracy",
    img: {
        sheet: IMAGE_SHEET.ARMOR2,
        x: 6,
        y: 1
    },
    params: {
        wearable: !0,
        visible: {
            hands: 6
        },
        slot: 5,
        armor: 126,
        aim: 170,
        min_defense: 120,
        price: 1479863
    }
}, 1);

var body_images = {};

function getBodyImg(context, b) {
    "undefined" == typeof body_images[context] && (body_images[context] = drawBody(context), 
    setTimeout(function() {
        delete body_images[context];
    }, 12e4));
    return body_images[context];
}

function getBodyImgNoHalo(types) {
    var a = types.split(" ");
    72 == a[4] && (a[4] = "0");
    a[12] && (a[12] = "0");
    types = a.join(" ");
    "undefined" == typeof body_images[types] && (body_images[types] = drawBody(types), 
    setTimeout(function() {
        delete body_images[types];
    }, 12e4));
    return body_images[types];
}

function drawBody(one) {
    var data = one.split(" ");
    for (one = 0; 13 > one; one++) data[one] <<= 0;
    one = data[0];
    var i = data[1], b = data[2], pos = data[3], y = data[4], min = data[5], max = data[6], count = data[7], end = data[8], r = data[9], d = data[10], j = data[11], a = data[12], data = Filters.getCanvas(64, 54), ctx = data.getContext("2d");
    Draw.clear(ctx);
    var a = BODY_PARTS.GROUND_EFFECT[a], a = a.img, img, x, y1;
    if ("undefined" != typeof a.sheet_file) {
        img = IMAGE_SHEET[a.sheet_file].sprite.imgs[a.file];
        if ("undefined" == typeof img) return data;
        ctx.drawImage(img, a.pos && a.pos._x || 0, a.pos && a.pos._y || 0);
    } else img = IMAGE_SHEET[a.sheet], x = IMAGE_SHEET[a.sheet].tile_width * a.x, y1 = IMAGE_SHEET[a.sheet].tile_height * a.y, 
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 0, 0, img.tile_width, img.tile_height);
    a = BODY_PARTS.CAPES[y];
    a = a.img;
    if ("undefined" != typeof a.sheet_file) {
        img = IMAGE_SHEET[a.sheet_file].sprite.imgs[a.file];
        if ("undefined" == typeof img) return data;
        ctx.drawImage(img, a.pos && a.pos._x || 0, a.pos && a.pos._y || 0);
    } else img = IMAGE_SHEET[a.sheet], x = IMAGE_SHEET[a.sheet].tile_width * a.x, y1 = IMAGE_SHEET[a.sheet].tile_height * a.y, 
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, -5, -6, img.tile_width, img.tile_height);
    a = BODY_PARTS.PANTS[pos];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.BOOTS[d];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.LEFT_HANDS[min];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1 + j * IMAGE_SHEET[a.sheet].tile_height, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.RIGHT_HANDS[max];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1 + j * IMAGE_SHEET[a.sheet].tile_height, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.BODIES[b];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.HEADS[one];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.FACIAL_HAIR[i];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.HELMETS[r];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.SHIELDS[count];
    a = a.img;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11, 11, img.tile_width, img.tile_height);
    a = BODY_PARTS.WEAPONS[end];
    a = a.img;
    rel_x = a.pos._x;
    rel_y = a.pos._y;
    img = IMAGE_SHEET[a.sheet];
    x = IMAGE_SHEET[a.sheet].tile_width * a.x;
    y1 = IMAGE_SHEET[a.sheet].tile_height * a.y;
    ctx.drawImage(img.img[0], x, y1, img.tile_width, img.tile_height, 11 + rel_x, 11 + rel_y, img.tile_width, img.tile_height);
    return data;
}

var Makeover = {
    last_npc_id: 0,
    validate: function(list) {
        return "number" == typeof list.head && "number" == typeof list.facial_hair && "number" == typeof list.body && "number" == typeof list.pants && BODY_PARTS.HEADS[list.head] && BODY_PARTS.FACIAL_HAIR[list.facial_hair] && BODY_PARTS.BODIES[list.body] && BODY_PARTS.PANTS[list.pants] && !(0 > list.head || list.head > BODY_PARTS.HEADS.length - 1 || 0 > list.facial_hair || list.head > BODY_PARTS.FACIAL_HAIR.length - 1 || 0 > list.body || list.body > BODY_PARTS.BODIES.length - 1 || 0 > list.pants || list.pants > BODY_PARTS.PANTS.length - 1) && BODY_PARTS.HEADS[list.head].available && BODY_PARTS.FACIAL_HAIR[list.facial_hair].available && BODY_PARTS.BODIES[list.body].available && BODY_PARTS.PANTS[list.pants].available && -1 != BODY_PARTS.HEADS[list.head].facial_hairs.indexOf(list.facial_hair) ? !0 : !1;
    },
    save: function() {
        Socket.send("makeover_save", JSON.merge(current_makeover_conf, {
            target: Makeover.last_npc_id
        }));
        document.getElementById("makeover_form").style.display = "none";
    },
    previous: function(a, b) {
        return Makeover.find(a, b, !1);
    },
    next: function(a, b) {
        return Makeover.find(a, b, !0);
    },
    find: function(target, key, val) {
        var e = void 0;
        switch (key) {
          case "head":
            e = BODY_PARTS.HEADS;
            break;

          case "facial_hair":
            e = BODY_PARTS.FACIAL_HAIR;
            break;

          case "body":
            e = BODY_PARTS.BODIES;
            break;

          case "pants":
            e = BODY_PARTS.PANTS;
        }
        if ("undefined" == typeof e) return target;
        var value = target[key];
        if ("undefined" == typeof value) return target;
        "head" == key && (target.facial_hair = 0);
        val ? value++ : value--;
        for (found_next = !1; !found_next; ) "undefined" == typeof e[value] && (value = val ? 0 : JSON.count(e) - 1), 
        e[value].available ? (target[key] = value, found_next = !0) : val ? value++ : value--;
        return target;
    }
}, BEARDS = [ 0, 1, 2, 3, 4, 5, 6, 7 ], BODY_PARTS = {
    HEADS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 0,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 1,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 3,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 4,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 5,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 6,
                y: 0
            },
            available: !0,
            facial_hairs: BEARDS
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 7,
                y: 0
            }
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 8,
                y: 0
            }
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 9,
                y: 0
            }
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 0,
                y: 1
            }
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 3,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 4,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 5,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 6,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 7,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 8,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 9,
                y: 1
            },
            available: !0,
            facial_hairs: BEARDS
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 1,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 2,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 3,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 4,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 5,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 6,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 7,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 8,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.HEADS,
                x: 9,
                y: 2
            },
            available: !0,
            facial_hairs: BEARDS
        }
    },
    BODIES: {
        0: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 0
            },
            available: !0
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 0
            },
            available: !0
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 0
            },
            available: !0
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 0
            },
            available: !0
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 0
            },
            available: !0
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 0
            },
            available: !0
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 0
            },
            available: !0
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 0
            },
            available: !0
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 0
            },
            available: !0
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 1
            },
            available: !0
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 1
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 1
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 1
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 1
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 1
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 1
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 1
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 2
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 2
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 2
            }
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 2
            }
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 2
            }
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 2
            }
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 2
            }
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 2
            }
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 2
            }
        },
        29: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 3
            }
        },
        30: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 3
            }
        },
        31: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 3
            }
        },
        32: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 3
            }
        },
        33: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 3
            }
        },
        34: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 3
            }
        },
        35: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 3
            }
        },
        36: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 3
            }
        },
        37: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 3
            }
        },
        38: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 3
            }
        },
        39: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 4
            }
        },
        40: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 4
            }
        },
        41: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 4
            }
        },
        42: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 4
            }
        },
        43: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 4
            }
        },
        44: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 4
            }
        },
        45: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 4
            }
        },
        46: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 4
            }
        },
        47: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 4
            }
        },
        48: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 4
            }
        },
        49: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 5
            }
        },
        50: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 5
            }
        },
        51: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 5
            }
        },
        52: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 5
            }
        },
        53: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 5
            }
        },
        54: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 5
            }
        },
        55: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 5
            }
        },
        56: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 5
            }
        },
        57: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 5
            }
        },
        58: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 5
            }
        },
        59: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 6
            }
        },
        60: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 6
            }
        },
        61: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 6
            }
        },
        62: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 6
            }
        },
        63: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 6
            }
        },
        64: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 6
            }
        },
        65: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 6
            }
        },
        66: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 6
            }
        },
        67: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 6
            }
        },
        68: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 6
            }
        },
        69: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 7
            }
        },
        70: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 7
            }
        },
        71: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 7
            }
        },
        72: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 7
            }
        },
        73: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 7
            }
        },
        74: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 7
            }
        },
        75: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 7
            }
        },
        76: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 7
            }
        },
        77: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 7
            }
        },
        78: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 7
            }
        },
        79: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 8
            }
        },
        80: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 8
            }
        },
        81: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 8
            }
        },
        82: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 8
            }
        },
        83: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 8
            }
        },
        84: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 8
            }
        },
        85: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 8
            }
        },
        86: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 8
            }
        },
        87: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 8
            }
        },
        88: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 8
            }
        },
        89: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 9
            }
        },
        90: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 9
            }
        },
        91: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 9
            }
        },
        92: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 9
            }
        },
        93: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 9
            }
        },
        94: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 9
            }
        },
        95: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 9
            }
        },
        96: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 9
            }
        },
        97: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 8,
                y: 9
            }
        },
        98: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 9,
                y: 9
            }
        },
        99: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 0,
                y: 10
            }
        },
        100: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 1,
                y: 10
            }
        },
        101: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 2,
                y: 10
            }
        },
        102: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 3,
                y: 10
            }
        },
        103: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 4,
                y: 10
            }
        },
        104: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 5,
                y: 10
            }
        },
        105: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 6,
                y: 10
            }
        },
        106: {
            img: {
                sheet: IMAGE_SHEET.BODIES,
                x: 7,
                y: 10
            }
        }
    },
    PANTS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 0
            },
            available: !0
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 0
            },
            available: !0
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 0
            },
            available: !0
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 0
            },
            available: !0
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 0
            },
            available: !0
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 0
            },
            available: !0
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 0
            },
            available: !0
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 0
            },
            available: !0
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 0
            },
            available: !0
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 1
            },
            available: !0
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 1
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 1
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 1
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 1
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 1
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 1
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 1
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 2
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 2
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 2
            }
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 2
            }
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 2
            }
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 2
            }
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 2
            }
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 2
            }
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 2
            }
        },
        29: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 3
            }
        },
        30: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 3
            }
        },
        31: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 3
            }
        },
        32: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 3
            }
        },
        33: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 3
            }
        },
        34: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 3
            }
        },
        35: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 3
            }
        },
        36: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 3
            }
        },
        37: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 3
            }
        },
        38: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 3
            }
        },
        39: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 4
            }
        },
        40: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 4
            }
        },
        41: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 4
            }
        },
        42: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 4
            }
        },
        43: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 4
            }
        },
        44: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 4
            }
        },
        45: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 4
            }
        },
        46: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 4
            }
        },
        47: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 4
            }
        },
        48: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 4
            }
        },
        49: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 5
            }
        },
        50: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 5
            }
        },
        51: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 5
            }
        },
        52: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 5
            }
        },
        53: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 5
            }
        },
        54: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 5
            }
        },
        55: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 5
            }
        },
        56: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 5
            }
        },
        57: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 5
            }
        },
        58: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 5
            }
        },
        59: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 6
            }
        },
        60: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 6
            }
        },
        61: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 6
            }
        },
        62: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 6
            }
        },
        63: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 6
            }
        },
        64: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 6
            }
        },
        65: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 6
            }
        },
        66: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 6
            }
        },
        67: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 6
            }
        },
        68: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 7
            }
        },
        69: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 1,
                y: 7
            }
        },
        70: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 2,
                y: 7
            }
        },
        71: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 3,
                y: 7
            }
        },
        72: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 4,
                y: 7
            }
        },
        73: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 5,
                y: 7
            }
        },
        74: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 6,
                y: 7
            }
        },
        75: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 7,
                y: 7
            }
        },
        76: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 8,
                y: 7
            }
        },
        77: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 9,
                y: 7
            }
        },
        78: {
            img: {
                sheet: IMAGE_SHEET.PANTS,
                x: 0,
                y: 8
            }
        }
    },
    FACIAL_HAIR: {
        0: {
            name: "None",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 0,
                y: 0
            },
            available: !0
        },
        1: {
            name: "Black beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 1,
                y: 0
            },
            available: !0
        },
        2: {
            name: "White beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 3,
                y: 0
            },
            available: !0
        },
        3: {
            name: "Orange beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 4,
                y: 0
            },
            available: !0
        },
        4: {
            name: "Yellow beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 5,
                y: 0
            },
            available: !0
        },
        5: {
            name: "Yellow Long beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 6,
                y: 0
            },
            available: !0
        },
        6: {
            name: "Gray Long beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 7,
                y: 0
            },
            available: !0
        },
        7: {
            name: "Green Long beard",
            img: {
                sheet: IMAGE_SHEET.FACIAL_HAIR,
                x: 8,
                y: 0
            },
            available: !0
        }
    },
    CAPES: {
        0: {
            name: "None",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 0
            }
        },
        1: {
            name: "Red Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 0
            }
        },
        2: {
            name: "Blue Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 0
            }
        },
        3: {
            name: "Devil Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 0
            }
        },
        4: {
            name: "Donator Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 0
            }
        },
        5: {
            name: "Archdevil Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 0
            }
        },
        6: {
            name: "Arcangel Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 0
            }
        },
        7: {
            name: "Angel Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 0
            }
        },
        8: {
            name: "Berserker Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 0
            }
        },
        9: {
            name: "Merlin Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 1
            }
        },
        10: {
            name: "Twilight Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 1
            }
        },
        11: {
            name: "Gandalf Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 1
            }
        },
        12: {
            name: "Warlord Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 1
            }
        },
        13: {
            name: "Donator Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 1
            }
        },
        14: {
            name: "Big Spender Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 1
            }
        },
        15: {
            name: "Welth Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 1
            }
        },
        16: {
            name: "Admin Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 1
            }
        },
        17: {
            name: "Overlord Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 1
            }
        },
        18: {
            name: "Phoenix Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 1
            }
        },
        19: {
            name: "Behemoth Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 2
            }
        },
        20: {
            name: "Valentine Cape",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 2
            }
        },
        21: {
            name: "Nephilim Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 2
            }
        },
        22: {
            name: "Thunder Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 2
            }
        },
        23: {
            name: "Ice Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 2
            }
        },
        24: {
            name: "Balance Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 2
            }
        },
        25: {
            name: "Enchanted Balance Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 2
            }
        },
        26: {
            name: "Soul Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 2
            }
        },
        27: {
            name: "Enchanted Soul Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 2
            }
        },
        28: {
            name: "Divine Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 2
            }
        },
        29: {
            name: "Divine Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 3
            }
        },
        30: {
            name: "Encanted Arcdevil Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 3
            }
        },
        31: {
            name: "Sunstorm Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 3
            }
        },
        32: {
            name: "Enchanted Sunstorm Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 3
            }
        },
        33: {
            name: "Iron Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 3
            }
        },
        34: {
            name: "Bat Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 3
            }
        },
        35: {
            name: "Enchanted Bat Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 3
            }
        },
        36: {
            name: "Enchanted Nephilim Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 3
            }
        },
        37: {
            name: "Enchanted Archangel Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 3
            }
        },
        38: {
            name: "Fire Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 3
            }
        },
        39: {
            name: "Encanted Fire Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 4
            }
        },
        40: {
            name: "Gorgon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 4
            }
        },
        41: {
            name: "Spirit Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 4
            }
        },
        42: {
            name: "Enchanted Spirit Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 4
            }
        },
        43: {
            name: "Enchanted Lightning wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 4
            }
        },
        44: {
            name: "Enchanted Ice wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 4
            }
        },
        45: {
            name: "Enchanted Iron Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 4
            }
        },
        46: {
            name: "Wings of Path",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 4
            }
        },
        47: {
            name: "Enchanted Wings of Path",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 4
            }
        },
        48: {
            name: "Core Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 4
            }
        },
        49: {
            name: "Enchanted Core Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 5
            }
        },
        50: {
            name: "Enchanted Underworld Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 5
            }
        },
        51: {
            name: "Underworld Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 5
            }
        },
        52: {
            name: "Enchanted Gorgon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 5
            }
        },
        53: {
            name: "Enchanted Saint Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 5
            }
        },
        54: {
            name: "Enchanted Ruby Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 5
            }
        },
        55: {
            name: "Enchanted Sapphire Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 5
            }
        },
        56: {
            name: "Sapphire Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 5
            }
        },
        57: {
            name: "Enchanted Angel Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 5
            }
        },
        58: {
            name: "Enchanted Devil WIngs",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 5
            }
        },
        59: {
            name: "Saint Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 6
            }
        },
        60: {
            name: "Ruby Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 6
            }
        },
        61: {
            name: "Shadow Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 6
            }
        },
        62: {
            name: "Enchanted Shadow Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 3,
                y: 6
            }
        },
        63: {
            name: "Crystal Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 4,
                y: 6
            }
        },
        64: {
            name: "Enchanted Crystal Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 6
            }
        },
        65: {
            name: "War Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 6
            }
        },
        66: {
            name: "Peace Dragon Wings",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 7,
                y: 6
            }
        },
        67: {
            name: "Peace Dragon Wings +14",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 8,
                y: 6
            }
        },
        68: {
            name: "Peace Dragon Wings +12",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 9,
                y: 6
            }
        },
        69: {
            name: "Peace Dragon Wings +11",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 0,
                y: 7
            }
        },
        70: {
            name: "Peace Dragon Wings +15",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 1,
                y: 7
            }
        },
        71: {
            name: "Peace Dragon Wings +13",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 2,
                y: 7
            }
        },
        72: {
            name: "NPC",
            img: {
                x: 0,
                y: 0,
                sheet: "guild_buildings.png",
                sheet_file: "guild_buildings.png",
                file: "npc.png",
                w: 1,
                h: 1,
                pos: {
                    _x: 0,
                    _y: 23
                }
            }
        },
        73: {
            name: "War Dragon Wings +11",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 5,
                y: 7
            }
        },
        74: {
            name: "War Dragon Wings +13",
            img: {
                sheet: IMAGE_SHEET.CAPES,
                x: 6,
                y: 7
            }
        }
    },
    LEFT_HANDS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 0,
                y: 0
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 1,
                y: 0
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 3,
                y: 0
            }
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 4,
                y: 0
            }
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 5,
                y: 0
            }
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.LEFT_HANDS,
                x: 6,
                y: 0
            }
        }
    },
    RIGHT_HANDS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.RIGHT_HANDS,
                x: 0,
                y: 0
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.RIGHT_HANDS,
                x: 1,
                y: 0
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.RIGHT_HANDS,
                x: 3,
                y: 0
            }
        }
    },
    SHIELDS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 0
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 0
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 0
            }
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 0
            }
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 0
            }
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 0
            }
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 0
            }
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 0
            }
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 0
            }
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 1
            }
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 1
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 1
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 1
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 1
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 1
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 1
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 1
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 2
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 2
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 2
            }
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 2
            }
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 2
            }
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 2
            }
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 2
            }
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 2
            }
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 2
            }
        },
        29: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 3
            }
        },
        30: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 3
            }
        },
        31: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 3
            }
        },
        32: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 3
            }
        },
        33: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 3
            }
        },
        34: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 3
            }
        },
        35: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 3
            }
        },
        36: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 3
            }
        },
        37: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 3
            }
        },
        38: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 3
            }
        },
        39: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 4
            }
        },
        40: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 4
            }
        },
        41: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 4
            }
        },
        42: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 4
            }
        },
        43: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 4
            }
        },
        44: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 4
            }
        },
        45: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 4
            }
        },
        46: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 4
            }
        },
        47: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 4
            }
        },
        48: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 4
            }
        },
        49: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 5
            }
        },
        50: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 5
            }
        },
        51: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 5
            }
        },
        52: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 5
            }
        },
        53: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 5
            }
        },
        54: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 5
            }
        },
        55: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 5
            }
        },
        56: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 5
            }
        },
        57: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 5
            }
        },
        58: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 5
            }
        },
        59: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 6
            }
        },
        60: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 6
            }
        },
        61: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 6
            }
        },
        62: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 6
            }
        },
        63: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 6
            }
        },
        64: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 6
            }
        },
        65: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 6,
                y: 6
            }
        },
        66: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 7,
                y: 6
            }
        },
        67: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 8,
                y: 6
            }
        },
        68: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 9,
                y: 6
            }
        },
        69: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 0,
                y: 7
            }
        },
        70: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 1,
                y: 7
            }
        },
        71: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 2,
                y: 7
            }
        },
        72: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 3,
                y: 7
            }
        },
        73: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 4,
                y: 7
            }
        },
        74: {
            img: {
                sheet: IMAGE_SHEET.SHIELDS,
                x: 5,
                y: 7
            }
        }
    },
    HELMETS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 0
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 0
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 0
            }
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 0
            }
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 0
            }
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 0
            }
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 0
            }
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 0
            }
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 0
            }
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 1
            }
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 1
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 1
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 1
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 1
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 1
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 1
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 1
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 2
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 2
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 2
            }
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 2
            }
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 2
            }
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 2
            }
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 2
            }
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 2
            }
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 2
            }
        },
        29: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 3
            }
        },
        30: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 3
            }
        },
        31: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 3
            }
        },
        32: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 3
            }
        },
        33: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 3
            }
        },
        34: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 3
            }
        },
        35: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 3
            }
        },
        36: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 3
            }
        },
        37: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 3
            }
        },
        38: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 3
            }
        },
        39: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 4
            }
        },
        40: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 4
            }
        },
        41: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 4
            }
        },
        42: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 4
            }
        },
        43: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 4
            }
        },
        44: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 4
            }
        },
        45: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 4
            }
        },
        46: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 4
            }
        },
        47: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 4
            }
        },
        48: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 4
            }
        },
        49: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 5
            }
        },
        50: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 5
            }
        },
        51: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 5
            }
        },
        52: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 5
            }
        },
        53: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 5
            }
        },
        54: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 5
            }
        },
        55: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 5
            }
        },
        56: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 5
            }
        },
        57: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 5
            }
        },
        58: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 5
            }
        },
        59: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 6
            }
        },
        60: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 6
            }
        },
        61: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 6
            }
        },
        62: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 6
            }
        },
        63: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 6
            }
        },
        64: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 6
            }
        },
        65: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 6
            }
        },
        66: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 7,
                y: 6
            }
        },
        67: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 8,
                y: 6
            }
        },
        68: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 9,
                y: 6
            }
        },
        69: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 0,
                y: 7
            }
        },
        70: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 1,
                y: 7
            }
        },
        71: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 2,
                y: 7
            }
        },
        72: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 3,
                y: 7
            }
        },
        73: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 4,
                y: 7
            }
        },
        74: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 5,
                y: 7
            }
        },
        75: {
            img: {
                sheet: IMAGE_SHEET.HELMETS,
                x: 6,
                y: 7
            }
        }
    },
    BOOTS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 0,
                y: 0
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 1,
                y: 0
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 3,
                y: 0
            }
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 4,
                y: 0
            }
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 5,
                y: 0
            }
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 6,
                y: 0
            }
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 7,
                y: 0
            }
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 8,
                y: 0
            }
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 9,
                y: 0
            }
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 0,
                y: 1
            }
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 1,
                y: 1
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 2,
                y: 1
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 3,
                y: 1
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 4,
                y: 1
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 5,
                y: 1
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 6,
                y: 1
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 7,
                y: 1
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 8,
                y: 1
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 9,
                y: 1
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 0,
                y: 2
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 1,
                y: 2
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 2,
                y: 2
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.BOOTS,
                x: 3,
                y: 2
            }
        }
    },
    GROUND_EFFECT: {
        0: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 0,
                pos: {
                    _x: 0,
                    _y: 0
                }
            }
        },
        1: {
            name: "NPC",
            img: {
                x: 0,
                y: 0,
                sheet: "guild_buildings.png",
                sheet_file: "guild_buildings.png",
                file: "npc.png",
                w: 1,
                h: 1,
                pos: {
                    _x: 0,
                    _y: 23
                }
            }
        }
    },
    WEAPONS: {
        0: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 0,
                pos: {
                    _x: 0,
                    _y: 0
                }
            }
        },
        1: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 0,
                pos: {
                    _x: 11,
                    _y: -2
                }
            }
        },
        2: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 0,
                pos: {
                    _x: 11,
                    _y: -2
                }
            }
        },
        3: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 0,
                pos: {
                    _x: -2,
                    _y: 2
                }
            }
        },
        4: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 0,
                pos: {
                    _x: -1,
                    _y: 2
                }
            }
        },
        5: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 0,
                pos: {
                    _x: 0,
                    _y: 1
                }
            }
        },
        6: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 0,
                pos: {
                    _x: -1,
                    _y: 2
                }
            }
        },
        7: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 0,
                pos: {
                    _x: 12,
                    _y: 3
                }
            }
        },
        8: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 0,
                pos: {
                    _x: 15,
                    _y: -3
                }
            }
        },
        9: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 1,
                pos: {
                    _x: 12,
                    _y: -4
                }
            }
        },
        10: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 1,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        11: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 0,
                y: 0,
                pos: {
                    _x: 2,
                    _y: -6
                }
            }
        },
        12: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 1,
                y: 0,
                pos: {
                    _x: 0,
                    _y: -2
                }
            }
        },
        13: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 1,
                pos: {
                    _x: 13,
                    _y: 0
                }
            }
        },
        14: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 1,
                pos: {
                    _x: 11,
                    _y: -7
                }
            }
        },
        15: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 1,
                pos: {
                    _x: 15,
                    _y: -3
                }
            }
        },
        16: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 1,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        17: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 1,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        18: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 11,
                y: 1,
                pos: {
                    _x: 2,
                    _y: 0
                }
            }
        },
        19: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 2,
                pos: {
                    _x: 11,
                    _y: -5
                }
            }
        },
        20: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 9,
                y: 0,
                pos: {
                    _x: 4,
                    _y: 7
                }
            }
        },
        21: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 2,
                pos: {
                    _x: 15,
                    _y: -5
                }
            }
        },
        22: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 2,
                pos: {
                    _x: 15,
                    _y: -5
                }
            }
        },
        23: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 9,
                y: 1,
                pos: {
                    _x: 0,
                    _y: -1
                }
            }
        },
        24: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 8,
                y: 1,
                pos: {
                    _x: 1,
                    _y: -1
                }
            }
        },
        25: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 2,
                pos: {
                    _x: -2,
                    _y: -1
                }
            }
        },
        26: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 2,
                pos: {
                    _x: 16,
                    _y: -5
                }
            }
        },
        27: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 2,
                pos: {
                    _x: 12,
                    _y: -3
                }
            }
        },
        28: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 12,
                y: 1,
                pos: {
                    _x: 2,
                    _y: -1
                }
            }
        },
        29: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 3,
                pos: {
                    _x: 18,
                    _y: -5
                }
            }
        },
        30: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 3,
                pos: {
                    _x: 14,
                    _y: -4
                }
            }
        },
        31: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 10,
                y: 1,
                pos: {
                    _x: -3,
                    _y: -2
                }
            }
        },
        32: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 2,
                y: 0,
                pos: {
                    _x: -3,
                    _y: -4
                }
            }
        },
        33: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 3,
                pos: {
                    _x: 15,
                    _y: -2
                }
            }
        },
        34: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 3,
                pos: {
                    _x: 10,
                    _y: -3
                }
            }
        },
        35: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 3,
                pos: {
                    _x: 14,
                    _y: -1
                }
            }
        },
        36: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 3,
                pos: {
                    _x: 14,
                    _y: -1
                }
            }
        },
        37: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 2,
                y: 1,
                pos: {
                    _x: 4,
                    _y: -4
                }
            }
        },
        38: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 3,
                pos: {
                    _x: 15,
                    _y: -4
                }
            }
        },
        39: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 4,
                pos: {
                    _x: 16,
                    _y: -2
                }
            }
        },
        40: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 4,
                pos: {
                    _x: 13,
                    _y: 0
                }
            }
        },
        41: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 4,
                pos: {
                    _x: 14,
                    _y: -3
                }
            }
        },
        42: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 4,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        43: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 7,
                y: 1,
                pos: {
                    _x: 2,
                    _y: 0
                }
            }
        },
        44: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 6,
                y: 1,
                pos: {
                    _x: 1,
                    _y: 1
                }
            }
        },
        45: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 4,
                pos: {
                    _x: 13,
                    _y: 1
                }
            }
        },
        46: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 4,
                pos: {
                    _x: 13,
                    _y: 1
                }
            }
        },
        47: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 4,
                pos: {
                    _x: 14,
                    _y: -1
                }
            }
        },
        48: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 4,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        49: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        50: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        51: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        52: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        53: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        54: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        55: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        56: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        57: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        58: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 5,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        59: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 6,
                pos: {
                    _x: 13,
                    _y: 0
                }
            }
        },
        60: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 6,
                pos: {
                    _x: 12,
                    _y: -1
                }
            }
        },
        61: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 6,
                pos: {
                    _x: 12,
                    _y: -1
                }
            }
        },
        62: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        63: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        64: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        65: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        66: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        67: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        68: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 6,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        69: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 7,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        70: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 7,
                pos: {
                    _x: 14,
                    _y: -1
                }
            }
        },
        71: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 7,
                pos: {
                    _x: 14,
                    _y: -2
                }
            }
        },
        72: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 7,
                pos: {
                    _x: 14,
                    _y: -2
                }
            }
        },
        73: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 7,
                pos: {
                    _x: 14,
                    _y: -2
                }
            }
        },
        74: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 7,
                pos: {
                    _x: 14,
                    _y: 0
                }
            }
        },
        75: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 7,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        76: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 7,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        77: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 7,
                pos: {
                    _x: 10,
                    _y: 0
                }
            }
        },
        78: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 7,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        79: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 8,
                pos: {
                    _x: 9,
                    _y: 0
                }
            }
        },
        80: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 8,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        81: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 8,
                pos: {
                    _x: 11,
                    _y: 2
                }
            }
        },
        82: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 8,
                pos: {
                    _x: 11,
                    _y: 2
                }
            }
        },
        83: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 8,
                pos: {
                    _x: 13,
                    _y: 1
                }
            }
        },
        84: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 8,
                pos: {
                    _x: -1,
                    _y: 2
                }
            }
        },
        85: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 8,
                pos: {
                    _x: 11,
                    _y: -4
                }
            }
        },
        86: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 8,
                pos: {
                    _x: 9,
                    _y: 0
                }
            }
        },
        87: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 8,
                pos: {
                    _x: 10,
                    _y: 4
                }
            }
        },
        88: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 8,
                pos: {
                    _x: -4,
                    _y: 1
                }
            }
        },
        89: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 9,
                pos: {
                    _x: 8,
                    _y: -1
                }
            }
        },
        90: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 9,
                pos: {
                    _x: 13,
                    _y: -2
                }
            }
        },
        91: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 9,
                pos: {
                    _x: 7,
                    _y: -2
                }
            }
        },
        92: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 9,
                pos: {
                    _x: 9,
                    _y: -2
                }
            }
        },
        93: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 9,
                pos: {
                    _x: 18,
                    _y: 2
                }
            }
        },
        94: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 7,
                y: 0,
                pos: {
                    _x: 0,
                    _y: -2
                }
            }
        },
        95: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 8,
                y: 0,
                pos: {
                    _x: -3,
                    _y: -4
                }
            }
        },
        96: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 9,
                pos: {
                    _x: 13,
                    _y: -5
                }
            }
        },
        97: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 9,
                pos: {
                    _x: 9,
                    _y: -7
                }
            }
        },
        98: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 9,
                pos: {
                    _x: 13,
                    _y: -4
                }
            }
        },
        99: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 13,
                y: 0,
                pos: {
                    _x: 3,
                    _y: -3
                }
            }
        },
        100: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 12,
                y: 0,
                pos: {
                    _x: 3,
                    _y: -4
                }
            }
        },
        101: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 10,
                pos: {
                    _x: -4,
                    _y: -1
                }
            }
        },
        102: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 10,
                pos: {
                    _x: 13,
                    _y: -2
                }
            }
        },
        103: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 10,
                pos: {
                    _x: 13,
                    _y: -3
                }
            }
        },
        104: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 10,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        105: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 10,
                pos: {
                    _x: 13,
                    _y: -3
                }
            }
        },
        106: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 1,
                y: 1,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        107: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 0,
                y: 1,
                pos: {
                    _x: -3,
                    _y: -5
                }
            }
        },
        108: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 10,
                pos: {
                    _x: 14,
                    _y: -2
                }
            }
        },
        109: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 4,
                y: 0,
                pos: {
                    _x: -3,
                    _y: -4
                }
            }
        },
        110: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 11,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        111: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 11,
                pos: {
                    _x: 15,
                    _y: -4
                }
            }
        },
        112: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 11,
                y: 0,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        113: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 10,
                y: 0,
                pos: {
                    _x: 2,
                    _y: -3
                }
            }
        },
        114: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 11,
                pos: {
                    _x: 0,
                    _y: 0
                }
            }
        },
        115: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 11,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        116: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 11,
                pos: {
                    _x: 12,
                    _y: 0
                }
            }
        },
        117: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 11,
                pos: {
                    _x: 10,
                    _y: -2
                }
            }
        },
        118: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 11,
                pos: {
                    _x: 10,
                    _y: -2
                }
            }
        },
        119: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 12,
                pos: {
                    _x: 12,
                    _y: 0
                }
            }
        },
        120: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 12,
                pos: {
                    _x: 12,
                    _y: 0
                }
            }
        },
        121: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 12,
                pos: {
                    _x: 13,
                    _y: 0
                }
            }
        },
        122: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 4,
                y: 1,
                pos: {
                    _x: 0,
                    _y: 0
                }
            }
        },
        123: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 5,
                y: 1,
                pos: {
                    _x: 4,
                    _y: 1
                }
            }
        },
        124: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 12,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        125: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 12,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        126: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 12,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        127: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 12,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        128: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 12,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        129: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 13,
                pos: {
                    _x: 8,
                    _y: 3
                }
            }
        },
        130: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 13,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        131: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 13,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        132: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 13,
                pos: {
                    _x: 12,
                    _y: 0
                }
            }
        },
        133: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 13,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        134: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 13,
                pos: {
                    _x: 9,
                    _y: 5
                }
            }
        },
        135: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 13,
                pos: {
                    _x: 9,
                    _y: 5
                }
            }
        },
        136: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 3,
                y: 1,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        137: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 6,
                y: 0,
                pos: {
                    _x: 2,
                    _y: -3
                }
            }
        },
        138: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 13,
                pos: {
                    _x: 4,
                    _y: 0
                }
            }
        },
        139: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 14,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        140: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 14,
                pos: {
                    _x: 11,
                    _y: 1
                }
            }
        },
        141: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 14,
                pos: {
                    _x: 11,
                    _y: 1
                }
            }
        },
        142: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 14,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        143: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 14,
                pos: {
                    _x: -1,
                    _y: 1
                }
            }
        },
        144: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 14,
                pos: {
                    _x: 0,
                    _y: 1
                }
            }
        },
        145: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 14,
                pos: {
                    _x: 11,
                    _y: 2
                }
            }
        },
        146: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 14,
                pos: {
                    _x: 11,
                    _y: 2
                }
            }
        },
        147: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 14,
                pos: {
                    _x: 8,
                    _y: 3
                }
            }
        },
        148: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 14,
                pos: {
                    _x: 8,
                    _y: 4
                }
            }
        },
        149: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 15,
                pos: {
                    _x: 7,
                    _y: 3
                }
            }
        },
        150: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 15,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        151: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 15,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        152: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 15,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        153: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 15,
                pos: {
                    _x: 8,
                    _y: -2
                }
            }
        },
        154: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 15,
                pos: {
                    _x: 10,
                    _y: -3
                }
            }
        },
        155: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 15,
                pos: {
                    _x: 11,
                    _y: -1
                }
            }
        },
        156: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 15,
                pos: {
                    _x: 12,
                    _y: -2
                }
            }
        },
        157: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 3,
                y: 0,
                pos: {
                    _x: -2,
                    _y: -3
                }
            }
        },
        158: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 15,
                pos: {
                    _x: 9,
                    _y: 4
                }
            }
        },
        159: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 16,
                pos: {
                    _x: 10,
                    _y: 3
                }
            }
        },
        160: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 16,
                pos: {
                    _x: 7,
                    _y: 3
                }
            }
        },
        161: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 16,
                pos: {
                    _x: 5,
                    _y: 8
                }
            }
        },
        162: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 16,
                pos: {
                    _x: 6,
                    _y: 7
                }
            }
        },
        163: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 16,
                pos: {
                    _x: 7,
                    _y: 7
                }
            }
        },
        164: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 16,
                pos: {
                    _x: 8,
                    _y: 4
                }
            }
        },
        165: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 16,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        166: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 16,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        167: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 16,
                pos: {
                    _x: 5,
                    _y: -1
                }
            }
        },
        168: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 16,
                pos: {
                    _x: 6,
                    _y: -1
                }
            }
        },
        169: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 17,
                pos: {
                    _x: 5,
                    _y: 8
                }
            }
        },
        170: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 17,
                pos: {
                    _x: 5,
                    _y: 6
                }
            }
        },
        171: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 17,
                pos: {
                    _x: 6,
                    _y: 6
                }
            }
        },
        172: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 17,
                pos: {
                    _x: 7,
                    _y: 3
                }
            }
        },
        173: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 17,
                pos: {
                    _x: 12,
                    _y: -2
                }
            }
        },
        174: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 17,
                pos: {
                    _x: 7,
                    _y: 6
                }
            }
        },
        175: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 17,
                pos: {
                    _x: 8,
                    _y: 9
                }
            }
        },
        176: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 17,
                pos: {
                    _x: 6,
                    _y: 6
                }
            }
        },
        177: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 17,
                pos: {
                    _x: 6,
                    _y: 6
                }
            }
        },
        178: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 17,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        179: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 13,
                y: 1,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        180: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 13,
                y: 1,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        181: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 0,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        182: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 1,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        183: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 2,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        184: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 3,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        185: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 4,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        186: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 5,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        187: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 6,
                y: 2,
                pos: {
                    _x: 3,
                    _y: -1
                }
            }
        },
        188: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 7,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        189: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 8,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        190: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 9,
                y: 2,
                pos: {
                    _x: 4,
                    _y: -1
                }
            }
        },
        191: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 13,
                pos: {
                    _x: 6,
                    _y: 7
                }
            }
        },
        192: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 18,
                pos: {
                    _x: 7,
                    _y: 0
                }
            }
        },
        193: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 19,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        194: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 18,
                pos: {
                    _x: 5,
                    _y: 7
                }
            }
        },
        195: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 18,
                pos: {
                    _x: 5,
                    _y: 7
                }
            }
        },
        196: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 18,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        197: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 18,
                pos: {
                    _x: 11,
                    _y: 0
                }
            }
        },
        198: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 10,
                y: 2,
                pos: {
                    _x: 2,
                    _y: 3
                }
            }
        },
        199: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 11,
                y: 2,
                pos: {
                    _x: -1,
                    _y: 4
                }
            }
        },
        200: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 12,
                y: 2,
                pos: {
                    _x: -4,
                    _y: 4
                }
            }
        },
        201: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 13,
                y: 2,
                pos: {
                    _x: -1,
                    _y: 6
                }
            }
        },
        202: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 18,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        203: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 18,
                pos: {
                    _x: 13,
                    _y: -1
                }
            }
        },
        204: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 12,
                pos: {
                    _x: 11,
                    _y: 2
                }
            }
        },
        205: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 12,
                pos: {
                    _x: 12,
                    _y: 1
                }
            }
        },
        206: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 2,
                pos: {
                    _x: 19,
                    _y: -7
                }
            }
        },
        207: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 3,
                pos: {
                    _x: 16,
                    _y: -5
                }
            }
        },
        208: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 2,
                pos: {
                    _x: 20,
                    _y: -4
                }
            }
        },
        209: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 1,
                pos: {
                    _x: 15,
                    _y: -4
                }
            }
        },
        210: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 0,
                y: 3,
                pos: {
                    _x: 2,
                    _y: 0
                }
            }
        },
        211: {
            img: {
                sheet: IMAGE_SHEET.WEPS2,
                x: 1,
                y: 3,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        212: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 18,
                pos: {
                    _x: 11,
                    _y: 5
                }
            }
        },
        213: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 18,
                pos: {
                    _x: 10,
                    _y: 5
                }
            }
        },
        214: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 18,
                pos: {
                    _x: 10,
                    _y: 5
                }
            }
        },
        215: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 18,
                pos: {
                    _x: 10,
                    _y: 4
                }
            }
        },
        216: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 0,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 6
                }
            }
        },
        217: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 1,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 5
                }
            }
        },
        218: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 2,
                y: 19,
                pos: {
                    _x: 11,
                    _y: 5
                }
            }
        },
        219: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 3,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 5
                }
            }
        },
        220: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 4,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 4
                }
            }
        },
        221: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 5,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 3
                }
            }
        },
        220: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 6,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 4
                }
            }
        },
        221: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 7,
                y: 19,
                pos: {
                    _x: 10,
                    _y: 3
                }
            }
        },
        222: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 19,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        223: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 19,
                pos: {
                    _x: 3,
                    _y: 0
                }
            }
        },
        224: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 0,
                pos: {
                    _x: 8,
                    _y: 4
                }
            }
        },
        225: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 1,
                pos: {
                    _x: 8,
                    _y: 6
                }
            }
        },
        226: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 2,
                pos: {
                    _x: 7,
                    _y: 6
                }
            }
        },
        227: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 3,
                pos: {
                    _x: 8,
                    _y: 5
                }
            }
        },
        228: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 4,
                pos: {
                    _x: 8,
                    _y: 5
                }
            }
        },
        229: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 5,
                pos: {
                    _x: 7,
                    _y: 5
                }
            }
        },
        230: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 6,
                pos: {
                    _x: 8,
                    _y: 5
                }
            }
        },
        231: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 7,
                pos: {
                    _x: 7,
                    _y: 5
                }
            }
        },
        232: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 8,
                pos: {
                    _x: 7,
                    _y: 5
                }
            }
        },
        233: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 9,
                pos: {
                    _x: 7,
                    _y: 5
                }
            }
        },
        234: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 10,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        235: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 11,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        236: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 12,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        237: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 13,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        238: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 14,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        239: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 15,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        240: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 16,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        241: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 17,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        242: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 18,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        243: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 19,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        244: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 1,
                pos: {
                    _x: 6,
                    _y: 5
                }
            }
        },
        245: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 8,
                y: 19,
                pos: {
                    _x: 6,
                    _y: 5
                }
            }
        },
        246: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 9,
                y: 19,
                pos: {
                    _x: 6,
                    _y: 5
                }
            }
        },
        247: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 0,
                pos: {
                    _x: 8,
                    _y: 4
                }
            }
        },
        248: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 1,
                pos: {
                    _x: 8,
                    _y: 5
                }
            }
        },
        249: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 2,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        250: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 3,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        },
        251: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 4,
                pos: {
                    _x: 6,
                    _y: -1
                }
            }
        },
        252: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 5,
                pos: {
                    _x: 6,
                    _y: -1
                }
            }
        },
        253: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 11,
                y: 6,
                pos: {
                    _x: 6,
                    _y: -1
                }
            }
        },
        254: {
            img: {
                sheet: IMAGE_SHEET.WEPS,
                x: 10,
                y: 15,
                pos: {
                    _x: 6,
                    _y: -2
                }
            }
        }
    }
}, ItemPacks = [ {
    id: 0,
    name: "200 MOS",
    items: [],
    coins: 0,
    mos: 200,
    price_mos: 200,
    price_usd: 1.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/1.png"
}, {
    id: 1,
    name: "500 MOS",
    items: [],
    coins: 0,
    mos: 500,
    price_mos: 500,
    price_usd: 4.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/2.png"
}, {
    id: 2,
    name: "825 MOS",
    items: [],
    coins: 0,
    mos: 825,
    price_mos: 825,
    price_usd: 7.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/3.png"
}, {
    id: 3,
    name: "1250 MOS",
    items: [],
    coins: 0,
    mos: 1250,
    price_mos: 1250,
    price_usd: 11.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/4.png"
}, {
    id: 4,
    name: "2100 MOS",
    items: [],
    coins: 0,
    mos: 2100,
    price_mos: 2100,
    price_usd: 19.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/5.png"
}, {
    id: 5,
    name: "Firelord set + Steel Harpoon",
    items: [ {
        id: 356,
        count: 1
    }, {
        id: 357,
        count: 1
    }, {
        id: 353,
        count: 1
    }, {
        id: 355,
        count: 1
    }, {
        id: 354,
        count: 1
    }, {
        id: 126,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 500,
    price_usd: 4.99,
    enabled: !0
}, {
    id: 6,
    name: "Firelord set + 400k coins",
    items: [ {
        id: 356,
        count: 1
    }, {
        id: 357,
        count: 1
    }, {
        id: 353,
        count: 1
    }, {
        id: 355,
        count: 1
    }, {
        id: 354,
        count: 1
    } ],
    coins: 4e5,
    mos: 0,
    price_mos: 600,
    price_usd: 5.99,
    enabled: !0
}, {
    id: 7,
    name: "MOS Credits",
    items: [],
    coins: 0,
    mos: 1,
    price_mos: 1,
    price_usd: .01,
    credit_pack: !0,
    enabled: !1
}, {
    id: 8,
    name: "Steel Harpoon",
    items: [ {
        id: 126,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 9,
    name: "Superior Potion Pack",
    items: [ {
        id: 337,
        count: 3
    }, {
        id: 338,
        count: 3
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0
}, {
    id: 10,
    name: "Gem Pack",
    items: [ {
        id: 200,
        count: 10
    }, {
        id: 198,
        count: 3
    }, {
        id: 196,
        count: 5
    }, {
        id: 194,
        count: 4
    }, {
        id: 250,
        count: 5
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0
}, {
    id: 11,
    name: "Magician Starter Pack",
    items: [ {
        id: 413,
        count: 10
    }, {
        id: 414,
        count: 10
    }, {
        id: 415,
        count: 10
    }, {
        id: 416,
        count: 10
    }, {
        id: 445,
        count: 1
    }, {
        id: 449,
        count: 1
    }, {
        id: 453,
        count: 1
    }, {
        id: 441,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 150,
    price_usd: 1.49,
    enabled: !0
}, {
    id: 12,
    name: "Expert Magician Pack",
    items: [ {
        id: 418,
        count: 10
    }, {
        id: 419,
        count: 10
    }, {
        id: 420,
        count: 10
    }, {
        id: 421,
        count: 10
    }, {
        id: 447,
        count: 1
    }, {
        id: 450,
        count: 1
    }, {
        id: 456,
        count: 1
    }, {
        id: 443,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 700,
    price_usd: 6.99,
    enabled: !0
}, {
    id: 13,
    name: "Expert Magician Refill",
    items: [ {
        id: 417,
        count: 12
    }, {
        id: 418,
        count: 12
    }, {
        id: 419,
        count: 12
    }, {
        id: 420,
        count: 12
    }, {
        id: 421,
        count: 12
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 1.99,
    enabled: !0
}, {
    id: 14,
    name: "1mil coins",
    items: [],
    coins: 1e6,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !1
}, {
    id: 15,
    name: "Armor Enchant Scroll Pack",
    items: [ {
        id: 178,
        count: 6
    }, {
        id: 179,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1e3,
    price_usd: 9.99,
    enabled: !0
}, {
    id: 16,
    name: "Weapon Enchant Scroll Pack",
    items: [ {
        id: 174,
        count: 6
    }, {
        id: 175,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1e3,
    price_usd: 9.99,
    enabled: !0
}, {
    id: 17,
    name: "Firelord Set",
    items: [ {
        id: 495,
        count: 1
    }, {
        id: 496,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0
}, {
    id: 18,
    name: "Monk Set",
    items: [ {
        id: 503,
        count: 1
    }, {
        id: 504,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0
}, {
    id: 19,
    name: "100k coins",
    items: [],
    coins: 1e5,
    mos: 0,
    price_mos: 50,
    price_usd: .5,
    enabled: !1
}, {
    id: 20,
    name: "250k coins",
    items: [],
    coins: 25e4,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !1
}, {
    id: 21,
    name: "Firelord Helmet",
    items: [ {
        id: 356,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 22,
    name: "Firelord Cape",
    items: [ {
        id: 357,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 23,
    name: "Firelord Shield",
    items: [ {
        id: 353,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 24,
    name: "Firelord Boots",
    items: [ {
        id: 355,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_hot: !0
}, {
    id: 25,
    name: "Firelord Keyblade",
    items: [ {
        id: 354,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_hot: !0
}, {
    id: 26,
    name: "Superior Armor Enchant Scroll",
    items: [ {
        id: 179,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0,
    is_hot: !0
}, {
    id: 27,
    name: "Superior Weapon Enchant Scroll",
    items: [ {
        id: 175,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0,
    is_hot: !0
}, {
    id: 28,
    name: "10x Superior Armor Enchant Scroll",
    items: [ {
        id: 179,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 2500,
    price_usd: 24.99,
    enabled: !0,
    is_hot: !0
}, {
    id: 29,
    name: "10x Superior Weapon Enchant Scroll",
    items: [ {
        id: 175,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 2500,
    price_usd: 24.99,
    enabled: !0
}, {
    id: 30,
    name: "3200 MOS",
    items: [],
    coins: 0,
    mos: 3200,
    price_mos: 3200,
    price_usd: 29.99,
    credit_pack: !0,
    enabled: !1
}, {
    id: 31,
    name: "Baby Red Dragon",
    items: [ {
        id: 669,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_hot: !1
}, {
    id: 32,
    name: "White Horse",
    items: [ {
        id: 680,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 500,
    price_usd: 5,
    enabled: !0
}, {
    id: 33,
    name: "Angel",
    items: [ {
        id: 688,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 600,
    price_usd: 6,
    enabled: !0
}, {
    id: 34,
    name: "Baby Dinosaur",
    items: [ {
        id: 677,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 35,
    name: "Stone of Evolution",
    items: [ {
        id: 710,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 250,
    price_usd: 2.5,
    enabled: !0,
    is_hot: !0
}, {
    id: 36,
    name: "Baby Black Dragon",
    items: [ {
        id: 702,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 250,
    price_usd: 2.5,
    enabled: !0
}, {
    id: 37,
    name: "Good Present",
    items: [ {
        id: 764,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 50,
    price_usd: .5,
    enabled: !0
}, {
    id: 38,
    name: "Great Present",
    items: [ {
        id: 765,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 39,
    name: "Best Present",
    items: [ {
        id: 766,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 350,
    price_usd: 3.5,
    enabled: !0,
    is_hot: !0
}, {
    id: 40,
    name: "5500 MOS",
    items: [],
    coins: 0,
    mos: 5500,
    price_mos: 5500,
    price_usd: 49.99,
    credit_pack: !0,
    enabled: !1,
    img: "https://rpg-de.mo.ee/img/shop/kong/6.png"
}, {
    id: 41,
    name: "Potion of Preservation",
    items: [ {
        id: 855,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_hot: !0
}, {
    id: 42,
    name: "Horror Steed",
    items: [ {
        id: 888,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 3,
    enabled: !0,
    is_hot: !0
}, {
    id: 43,
    name: "23000 MOS",
    items: [],
    coins: 0,
    mos: 23e3,
    price_mos: 23e3,
    price_usd: 199.99,
    credit_pack: !0,
    enabled: !1
}, {
    id: 44,
    name: "2x Experience Potion",
    items: [ {
        id: 1033,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 500,
    price_usd: 5,
    enabled: !0,
    is_hot: !0
}, {
    id: 45,
    name: "Orb of Luck",
    items: [ {
        id: 593,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_hot: !0
}, {
    id: 46,
    name: "10x Orb of Luck",
    items: [ {
        id: 593,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 900,
    price_usd: 9,
    enabled: !0,
    is_hot: !0
}, {
    id: 47,
    name: "Monk Wand",
    items: [ {
        id: 1043,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0
}, {
    id: 48,
    name: "Lock Pick",
    items: [ {
        id: 1060,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 150,
    price_usd: 1.5,
    enabled: !0
}, {
    id: 49,
    name: "15x Repeat Quest Permission",
    items: [ {
        id: 1031,
        count: 15
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0
}, {
    id: 50,
    name: "Potion of Oblivion",
    items: [ {
        id: 1081,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 50,
    price_usd: .5,
    enabled: !0
}, {
    id: 51,
    name: "Jewelry Enchant Scroll Pack",
    items: [ {
        id: 1127,
        count: 6
    }, {
        id: 1128,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1e3,
    price_usd: 9.99,
    enabled: !0
}, {
    id: 52,
    name: "10x Superior Jewelry Enchant Scroll",
    items: [ {
        id: 1128,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 2500,
    price_usd: 24.99,
    enabled: !0
}, {
    id: 53,
    name: "Legendary Present",
    items: [ {
        id: 1149,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1e3,
    price_usd: 10,
    enabled: !0
}, {
    id: 54,
    name: "Rare Present",
    items: [ {
        id: 1160,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1500,
    price_usd: 15,
    enabled: !0
}, {
    id: 55,
    name: "House Starter Pack",
    items: [ {
        id: 837,
        count: 1
    }, {
        id: 838,
        count: 1
    }, {
        id: 839,
        count: 1
    }, {
        id: 840,
        count: 1
    }, {
        id: 770,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 250,
    price_usd: 2.5,
    enabled: !0
}, {
    id: 56,
    name: "Farmer Starter Pack",
    items: [ {
        id: 753,
        count: 5
    } ],
    coins: 0,
    mos: 0,
    price_mos: 150,
    price_usd: 1.5,
    enabled: !0
}, {
    id: 57,
    name: "Breeder Starter Pack",
    items: [ {
        id: 1243,
        count: 2
    }, {
        id: 752,
        count: 18
    }, {
        id: 676,
        count: 2
    }, {
        id: 674,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 3,
    enabled: !0
}, {
    id: 58,
    name: "Centaur",
    items: [ {
        id: 1228,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 120,
    price_usd: 1.2,
    enabled: !0
}, {
    id: 59,
    name: "Wings Enchant Scroll Pack",
    items: [ {
        id: 1305,
        count: 6
    }, {
        id: 1306,
        count: 2
    } ],
    coins: 0,
    mos: 0,
    price_mos: 1e3,
    price_usd: 9.99,
    enabled: !0
}, {
    id: 60,
    name: "10x Superior Wings Enchant Scroll",
    items: [ {
        id: 1306,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 2500,
    price_usd: 24.99,
    enabled: !0,
    is_hot: !0
}, {
    id: 61,
    name: "Superior Wings Enchant Scroll",
    items: [ {
        id: 1306,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0
}, {
    id: 62,
    name: "Superior Jewelry Enchant Scroll",
    items: [ {
        id: 1128,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 300,
    price_usd: 2.99,
    enabled: !0,
    is_hot: !0
}, {
    id: 63,
    name: "10x 2x Experience Potion",
    items: [ {
        id: 1033,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 4200,
    price_usd: 42,
    enabled: !0,
    is_new: !0
}, {
    id: 64,
    name: "Mark of War",
    items: [ {
        id: 1312,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0,
    is_new: !0
}, {
    id: 65,
    name: "Mark of Peace",
    items: [ {
        id: 1311,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0,
    is_new: !0
}, {
    id: 66,
    name: "Boar Spear",
    items: [ {
        id: 1327,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: 1,
    enabled: !0,
    is_new: !0
}, {
    id: 67,
    name: "Fire Orb",
    items: [ {
        id: 1342,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 800,
    price_usd: 7.99,
    enabled: !0,
    is_new: !0
}, {
    id: 68,
    name: "Light Redwood Shield",
    items: [ {
        id: 1354,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0,
    is_new: !0
}, {
    id: 69,
    name: "10x Teleport Book",
    items: [ {
        id: 1365,
        count: 10
    } ],
    coins: 0,
    mos: 0,
    price_mos: 200,
    price_usd: 1.99,
    enabled: !0,
    is_new: !0
}, {
    id: 70,
    name: "Premium Account 30 Days",
    desc: premium_text,
    items: [],
    coins: 0,
    mos: 0,
    price_mos: 500,
    price_usd: 4.99,
    enabled: !0,
    is_new: !0,
    is_premium: !0
}, {
    id: 71,
    name: "Firelord Necklace of Aim",
    items: [ {
        id: 1543,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 72,
    name: "Firelord Necklace of Defense",
    items: [ {
        id: 1567,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 73,
    name: "Firelord Necklace of Magic",
    items: [ {
        id: 1559,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 74,
    name: "Firelord Necklace of Power",
    items: [ {
        id: 1551,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 75,
    name: "Firelord Ring of Aim",
    items: [ {
        id: 1511,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 76,
    name: "Firelord Ring of Defense",
    items: [ {
        id: 1535,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 77,
    name: "Firelord Ring of Magic",
    items: [ {
        id: 1527,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 78,
    name: "Firelord Ring of Power",
    items: [ {
        id: 1519,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 100,
    price_usd: .99,
    is_new: !0,
    enabled: !0
}, {
    id: 79,
    name: "Demonic Magic Book",
    items: [ {
        id: 1600,
        count: 1
    } ],
    coins: 0,
    mos: 0,
    price_mos: 175,
    price_usd: 1.75,
    is_new: !0,
    enabled: !0
} ], inventory_auto_action, Inventory = {
    add: function(a, b, c) {
        return 40 > a.temp.inventory.length ? (a.temp.inventory.push({
            id: b,
            selected: c || !1
        }), !0) : !1;
    },
    is_full: function(post) {
        return 40 == post.temp.inventory.length ? !0 : !1;
    },
    remove: function(player, item, removeAll) {
        for (var c = !1, i = player.temp.inventory.length - 1; 0 <= i; i--) if (player.temp.inventory[i].id == item && (c = !0, 
        item_base[item] && item_base[item].params && item_base[item].params.pet && player.temp.inventory[i].selected && (Pet.deinit(player), 
        Player.send_data(player.id)), player.temp.inventory.splice(i, 1), !removeAll)) return Player.update_combat_attributes(player), 
        Player.update_player_look(player), !0;
        return c ? (Player.update_combat_attributes(player), Player.update_player_look(player), 
        !0) : !1;
    },
    equip: function(item, number, target) {
        number = parseInt(number);
        if (!item_base[number] || item.temp.busy) return !1;
        var social = item_base[number].params.slot, photo = item_base[number].params.disable_slot, callback = !1;
        if (779 == number && "undefined" == typeof iamserver && (300 == current_map || 0 < Player.danger_level(item)) || "undefined" != typeof item_base[number].params.to_map && (0 < Player.danger_level(item) || 19 == item.map)) return !1;
        "undefined" == typeof iamserver && "undefined" != typeof item_base[number].params.to_map && Music.sound_effect("teleport");
        if (1081 == number) return "undefined" == typeof iamserver && BigMenu.show_remove_skill_dialog(), 
        !1;
        if (1365 == number) return "undefined" == typeof iamserver && Player.teleport_book_form(), 
        !1;
        if (1444 == number) return "undefined" == typeof iamserver && Player.secret_boss_scroll_form(), 
        !1;
        if (1143 == number) return "undefined" == typeof iamserver && (item.temp.guild ? Socket.send("guild", {
            sub: "visit"
        }) : Popup.dual_prompt("Do you want to create a guild?", thousandSeperate(Guild.price) + " coins", function() {
            Socket.send("guild", {
                sub: "create",
                type: "coins"
            });
        }, thousandSeperate(Guild.price_mos) + " MOS", function() {
            Socket.send("guild", {
                sub: "create",
                type: "mos"
            });
        })), !1;
        for (var i = 0, tnl = item.temp.inventory.length; i < tnl; i++) if (item.temp.inventory[i].id != number || callback) Inventory.occupies_any_of_slots(item_base[item.temp.inventory[i].id], social, photo) && (item.temp.inventory[i].selected = !1); else {
            if (item_base[number].params.wearable) if (Items.requirements_met(item, number)) {
                if (10 == social) return "undefined" == typeof iamserver ? !0 : Items.use(item, number);
                if (710 == number) return "undefined" != typeof iamserver && Pet.evolution_stone(item.id), 
                !0;
                if ("undefined" != typeof item_base[number].params.pet) if ("undefined" == typeof iamserver) {
                    if (players[0].pet.id && players[0].pet.id != item_base[number].params.pet && !target) {
                        var sendPacket = function() {
                            Inventory.equip(item, number, !0);
                            BigMenu.init_inventory();
                            Socket.send("equip", {
                                data: {
                                    id: number
                                }
                            });
                            Player.update_combat_attributes(players[0]);
                        };
                        pets[players[0].pet.id].params.xp_required && 0 < players[0].pet.xp ? Popup.prompt("Equipping another pet will remove the previous pet's experience! Continue?", function() {
                            sendPacket();
                        }) : sendPacket();
                        return !1;
                    }
                    players[0].pet.id = item_base[number].params.pet;
                    players[0].pet.enabled = !0;
                    Pet.client_init(players[0]);
                } else Pet.init(item, number);
                item.temp.inventory[i].selected = !0;
                "undefined" == typeof iamserver && Skills.can_perform(item, -42).status && (Music.use_item(number), 
                setTimeout(function() {
                    Socket.send("use_skill", {
                        target_id: -42
                    });
                }, 10));
            } else return !1; else Inventory.remove(item, number), Items.use(item, number), 
            tnl--;
            callback = !0;
        }
        return callback;
    },
    occupies_any_of_slots: function(a, b, c) {
        var index = a.params.slot;
        a = a.params.disable_slot;
        return index == b || index == c || "undefined" != typeof a && (a == b || a == c) ? !0 : !1;
    },
    unequip: function(item, total) {
        total = parseInt(total);
        if (!item_base[total] || item.temp.busy) return !1;
        for (var i = 0, tnl = item.temp.inventory.length; i < tnl; i++) if (item.temp.inventory[i].id == total && item.temp.inventory[i].selected) return item_base[total].params && "undefined" != typeof item_base[total].params.pet && ("undefined" == typeof iamserver ? Pet.client_deinit(item) : Pet.deinit(item)), 
        item.temp.inventory[i].selected = !1, !0;
        return !1;
    },
    has_equipped: function(data, id) {
        for (var i = 0, tnl = data.temp.inventory.length; i < tnl; i++) if (data.temp.inventory[i] && data.temp.inventory[i].id == id && data.temp.inventory[i].selected) return !0;
        return !1;
    },
    get_equipped_seed: function(post) {
        for (var i = 0, tnl = post.temp.inventory.length; i < tnl; i++) if (post.temp.inventory[i] && post.temp.inventory[i].selected && "undefined" != typeof item_base[post.temp.inventory[i].id].params.farming_id) return item_base[post.temp.inventory[i].id];
        return !1;
    },
    get_item_count: function(record, id) {
        for (var value = 0, i = 0, length = record.temp.inventory.length; i < length; i++) record.temp.inventory[i] && record.temp.inventory[i].id == id && value++;
        return value;
    },
    get_item_count_include_pet: function(a, b) {
        var atanA = Inventory.get_item_count(a, b);
        if (a.pet && 0 < a.pet.chest.length) for (var i = 0, tnl = a.pet.chest.length; i < tnl; i++) a.pet.chest[i] == b && atanA++;
        return atanA;
    },
    get_item_counts: function(base64Data) {
        for (var result = {}, i = 0, length = base64Data.temp.inventory.length; i < length; i++) if (base64Data.temp.inventory[i]) {
            var p = base64Data.temp.inventory[i].id;
            result[p] = "undefined" == typeof result[p] ? 1 : result[p] + 1;
        }
        return result;
    },
    remove_less_valuable: function(i, p) {
        if ("undefined" != typeof clients[i] && !(40 <= p)) return clients[i].temp.inventory.sort(function(a, b) {
            return item_base[a.id].params.price > item_base[b.id].params.price ? -1 : item_base[a.id].params.price < item_base[b.id].params.price ? 1 : item_base[a.id].name > item_base[b.id].name ? -1 : 1;
        }), clients[i].temp.inventory.splice(p, 40);
    }
}, timer_holder = {}, Timers = {
    set: function(name, fn, ms) {
        timer_holder[name] && Timers.clear(name);
        timer_holder[name] = setTimeout(function() {
            delete timer_holder[name];
            fn();
        }, ms);
    },
    clear: function(scope) {
        timer_holder[scope] && (clearTimeout(timer_holder[scope]), delete timer_holder[scope]);
    },
    running: function(error) {
        return timer_holder[error] ? !0 : !1;
    },
    extend: function(a, b, c) {
        timer_holder[a] && (c += getTimeLeft(timer_holder[a]));
        Timers.set(a, b, c);
    },
    earliest: function(a, b, c) {
        timer_holder[a] && (c = Math.min(c, getTimeLeft(timer_holder[a])));
        Timers.set(a, b, c);
    }
};

function getTimeLeft(item) {
    return item._idleStart.getTime() + item._idleTimeout - Date.now();
}

function beautifulTime(seconds, hprime, single) {
    seconds = Math.round(seconds / 1e3);
    var current = 0, current = current = current = current = 0, results = [];
    4 <= hprime && (current = Math.floor(seconds / 31536e3), seconds -= 31536e3 * current, 
    0 != current && results.push(current + " year" + sOrNoS(current)));
    3 <= hprime && (current = Math.floor(seconds / 86400), seconds -= 86400 * current, 
    0 != current && results.push(current + " day" + sOrNoS(current)));
    2 <= hprime && (current = Math.floor(seconds / 3600), seconds -= 3600 * current, 
    0 != current && results.push(current + " hour" + sOrNoS(current)));
    1 <= hprime && (current = Math.floor(seconds / 60), seconds -= 60 * current, 0 != current && results.push(current + " minute" + sOrNoS(current)));
    0 <= hprime && (current = seconds, 0 != current && results.push(current + " second" + sOrNoS(current)));
    return single ? results[0] : results.join(", ").trim();
}

var Shop = {
    buy: function() {
        Timers.running("shop_buy") || (Socket.send("shop_buy", {
            item_slot: selected_shop,
            target: shop_npc.id,
            t: timestamp()
        }), Timers.set("shop_buy", null_function, 50));
    },
    sell: function(obj) {
        Timers.running("shop_sell") || (Socket.send("shop_sell", {
            item_slot: selected_shop,
            target: shop_npc.id,
            all: obj,
            item_id: shop_content[selected_shop].id
        }), Timers.set("shop_sell", null_function, 50));
    },
    player_buy: function(data, scope, i) {
        var item = item_base[scope.temp.content[i].id];
        return data.temp.coins >= item.params.price && 0 < scope.temp.content[i].count ? (scope.temp.content[i].count--, 
        "undefined" != typeof scope.temp.content[i].spawn && scope.temp.content[i].spawn && setTimeout(function() {
            var data = objects_data[scope.id];
            data.temp.content[i].count < data.temp.content[i].starting_count && data.temp.content[i].count++;
        }, 3e4), {
            price: item.params.price,
            item_id: item.b_i,
            content: scope.temp.content
        }) : !1;
    },
    player_sell: function(field, scope, i, error) {
        var item = item_base[scope.temp.content[i].id], count = Inventory.get_item_count(field, item.b_i);
        return 0 < count ? (error || (count = 1), scope.temp.content[i].count += count, 
        setTimeout(function() {
            var data = objects_data[scope.id];
            0 < data.temp.content[i].count && data.temp.content[i].starting_count < data.temp.content[i].count && (data.temp.content[i].count = Math.max(data.temp.content[i].count - count, data.temp.content[i].starting_count));
        }, 18e4), {
            price: Math.floor(item.params.price / 2),
            item_id: item.b_i,
            content: scope.temp.content,
            count: count
        }) : !1;
    },
    item_info: function(sel) {
        shop_content[sel] && Items.get_info(shop_content[sel].id);
    },
    activate_update: function() {
        shop_opened = !0;
        Timers.set("shop_activate", function() {
            Socket.send("shop_open", {
                target: shop_npc.id
            });
            Shop.activate_update();
        }, 15e3);
    },
    deactivate_update: function() {
        shop_opened = !1;
        Timers.clear("shop_activate");
    }
}, Chat = {
    max_chat_history: 200,
    chat_position_up: !1,
    update_string: function() {
        document.getElementById("my_text").size = Math.max(document.getElementById("my_text").value.length, 1);
    },
    set_visible: function() {
        return "none" == document.getElementById("chat").style.display ? (document.getElementById("chat").style.display = "block", 
        document.getElementById("chat").scrollTop = document.getElementById("chat").scrollHeight, 
        !0) : !1;
    },
    set_hidden: function() {
        if (GAME_STATE == GAME_STATES.CHAT) return !1;
        document.getElementById("chat").style.display = "none";
        addClass(document.getElementById("current_channel"), "hidden");
    },
    resync: function() {
        for (var i = chat_history.length - Math.min(chat_history.length, resyncRequired); i < chat_history.length; i++) Chat.add_line(i);
        resyncRequired = 0;
    },
    add_line: function(i) {
        if ("object" == typeof chat_history[i]) {
            var div = document.createElement("div"), color = COLOR.WHITE, a = "";
            div.style.display = "block";
            div.className = "chat_text";
            chat_history[i].color && (color = chat_history[i].color);
            div.style.color = color;
            "undefined" != typeof chat_history[i].lang && (a += "[" + chat_history[i].lang + "]");
            chat_history[i].id && (div.id = "chat_" + chat_history[i].id);
            if (chat_history[i].user) {
                var name;
                chat_history[i].to && chat_history[i].to != players[0].name ? (a += "to &lt;" + chat_history[i].to.sanitizeChat() + "&gt; ", 
                name = chat_history[i].to.sanitize()) : (a += "&lt;" + chat_history[i].user.sanitizeChat() + "&gt; ", 
                name = chat_history[i].user.sanitize());
                color = function(generateForwardEvent) {
                    return function(a) {
                        document.getElementById("my_text").value = '/w "' + name + '" ';
                        Chat.update_string();
                    };
                }(name);
                bindOnPress(div, color);
                if (mod_initialized || SpectateWindow.slave && SpectateWindow.key) div.oncontextmenu = function(e) {
                    e.preventDefault();
                    e.clientX = e.clientX || e.pageX || e.touches[0].pageX;
                    e.clientY = e.clientY || e.pageY || e.touches[0].pageY;
                    var fn = function(now) {
                        Socket.send("message", {
                            data: now,
                            lang: document.getElementById("current_channel").value
                        });
                        SpectateWindow.slave && SpectateWindow.sendMessage({
                            action: "chat",
                            data: now,
                            lang: document.getElementById("current_channel").value
                        });
                    }, messages = [ {
                        name: name,
                        method: "Mute",
                        func: function() {
                            fn("/mute " + name);
                        }
                    }, {
                        name: name,
                        method: "Unmute",
                        func: function() {
                            fn("/unmute " + name);
                        }
                    }, {
                        name: name,
                        method: "Kick",
                        func: function() {
                            fn("/kick " + name);
                        }
                    }, {
                        name: name,
                        method: "Ban",
                        func: function() {
                            Popup.prompt("Ban. Are you sure?", function() {
                                fn("/ban " + name);
                            });
                        }
                    } ];
                    chat_history[i].id && messages.push({
                        name: name,
                        method: "Remove Message",
                        func: function() {
                            SpectateWindow.slave && SpectateWindow.sendMessage({
                                action: "remove_line",
                                line: chat_history[i].id
                            });
                            Socket.send("remove_line", {
                                line: chat_history[i].id
                            });
                            Popup.prompt("Also mute " + name + "?", function() {
                                fn("/mute " + name);
                            }, null_function);
                        }
                    });
                    ActionMenu.custom_create(e, messages);
                };
                Chat.set_visible();
            }
            color = chat_history[i].text.sanitizeChat();
            "EN" == chat_history[i].lang && (color = color.filterChat("EN"));
            div.innerHTML = a + color;
            addClass(div, "scrolling_allowed");
            a = !1;
            20 >= document.getElementById("chat").scrollHeight - document.getElementById("chat").offsetHeight - document.getElementById("chat").scrollTop && (a = !0);
            document.getElementById("chat").appendChild(div);
            a && (document.getElementById("chat").scrollTop = document.getElementById("chat").scrollHeight);
        }
    },
    remove_line: function(id, target) {
        SpectateWindow.iframe && SpectateWindow.sendMessage({
            action: "remove_line_slave",
            line: id,
            moderator: target
        });
        var elt = document.getElementById("chat_" + id);
        if (elt) {
            var key = /(.*?)&gt;/g.exec(elt.innerHTML)[0];
            elt.innerHTML = key + " &lt;Message removed by " + target + "&gt;";
        } else for (key in chat_history) if (chat_history[key] && chat_history[key].id && chat_history[key].id == id) {
            chat_history[key].text = "<Message removed by " + target + ">";
            break;
        }
    },
    check_for_spam: function(r, element) {
        if (-1 < [ "$$", "{M", "{M}" ].indexOf(element)) return !1;
        var ts = Private.get(r, "spam_control_time") || Private.set(r, "spam_control_time", timestamp()) && timestamp(), u = Private.get(r, "spam_control_amount") || 0;
        5e3 < timestamp() - ts && (u = 0, Private.set(r, "spam_control_time", timestamp()));
        u++;
        if (4 < u) return !0;
        Private.set(r, "spam_control_amount", u);
        return !1;
    },
    client_commands: {
        "/chat": function(selected) {
            if (mod_initialized && 1 == selected.length) {
                var val = !1;
                switch (selected[0]) {
                  case "help":
                    return addChatText("/chat commands are: alts, botting, breeding, captcha, channel, color, cursing, games, ignore, insult, magic, market, mods, spam, trade, trolling, url", void 0, COLOR.TEAL);

                  case "cursing":
                    val = "Any cursing and swearing is prohibited in the EN and E1-9 chat channels, which includes implied cursing and acronyms.";
                    break;

                  case "alts":
                    val = "A single person is allowed to have up to a maximum of 5 accounts. No interaction is allowed between those accounts, which includes trading.";
                    break;

                  case "trade":
                    val = "Trading with alts or with other people on the same IP-address is not allowed. Bypassing the mechanism that prevents it, is a bannable offense.";
                    break;

                  case "channel":
                    val = "Speak English only in the EN, ST, E2-E9 chat channels, please. To subscribe to a different language channel go to Contacts - Channels, and Subscribe.";
                    break;

                  case "games":
                    val = "Discussion of other games is prohibited in EN and E2-E9 and limited to the `18` and ST channel or whispers, any form of advertising is a bannable offense.";
                    break;

                  case "captcha":
                    val = "Captchas are there to prevent botting in the game, you must complete them to prove you are human. Ignoring them will result in you being jailed.";
                    break;

                  case "spam":
                    val = "Please do not overly use special characters, caps or repeated messages. Any form of spam can result in you being muted. ";
                    break;

                  case "mods":
                    val = 'One can enable the ingame mods by typing "/mods". The mods include many great features such as an ingame wiki and many other general improvements.';
                    break;

                  case "magic":
                    val = "Equip the magic pouch, then click the spell scroll to add it to your pouch. Attack a monster and press the magic icon on the screen to cast the spell.";
                    break;

                  case "trolling":
                    val = "Please refrain from any form of trolling. It`s up to a moderator to decide what is considered trolling.";
                    break;

                  case "ignore":
                    val = 'If a player is sending you offensive, annoying or spammy messages, you can ignore them with the following command: "/ignore playername".';
                    break;

                  case "breeding":
                    val = "A list of possible breeding outcomes can be found on: http://rpg-mo.wikia.com/wiki/Breeding";
                    break;

                  case "url":
                    val = "One can enable the clicking of links by going to Filters and disabling `Disable URL in chat` (So make sure it`s red, double negative).";
                    break;

                  case "market":
                    val = "One can access the player market by going to one`s chest and clicking `Market` in the top of the screen that opens when clicking the chest.";
                    break;

                  case "color":
                    val = "Green text means someone is a chat moderator, orange text is for game admins and blue text is for whispers.";
                    break;

                  case "botting":
                    val = "No discussions about botting, scripting, bug abuse or other game-abusing ativities is allowed. Contact a moderator to report such issues.";
                    break;

                  case "insult":
                    val = "Harassing and insulting other players is strictly forbidden. This includes discrimination, racism, sexism or general offensive conversations.";
                }
                val && (selected = document.getElementById("current_channel").value, "{M}" == selected ? addChatText(val, void 0, COLOR.GREEN) : SpectateWindow.slave ? SpectateWindow.sendMessage({
                    action: "chat",
                    data: val,
                    lang: selected
                }) : Socket.send("message", {
                    data: val,
                    lang: selected
                }));
            }
        },
        "/savemap": function() {
            if (100 <= current_map && 120 > current_map && !MapTimer.title()) return addChatText("Cannot save a search dungeon map!", void 0, COLOR.PINK);
            saveMapToFile();
        },
        "/saveplayer": function() {
            saveParamImgToFile(players[0].name, players[0].params.hash);
        },
        "/savepet": function(data) {
            data = data.join(" ");
            data = data.toLowerCase();
            for (var i = 1; i < pets.length; i++) if (pets[i].name.toLowerCase() == data) {
                data = pets[i];
                data.img.hash ? saveParamImgToFile(data.name, data.img.hash) : saveImgToFile(data.name, data.img);
                return;
            }
            addChatText("No such pet with name " + data + ", make sure you include [Common], [Rare] etc...");
        },
        "/saveitemid": function(gf) {
            gf = gf[0];
            var attr = item_base[gf];
            attr ? saveImgToFile(attr.name, attr.img) : addChatText("No such item with id " + gf);
        },
        "/saveitem": function(item) {
            item = item.join(" ");
            item = item.toLowerCase();
            for (var i = 0; i < item_base.length; i++) if (item_base[i].name.toLowerCase() == item) {
                item = item_base[i];
                saveImgToFile(item.name, item.img);
                return;
            }
            addChatText("No such item with name " + item + "");
        },
        "/savemonster": function(a) {
            Chat.client_commands["/savenpc"](a);
        },
        "/savenpc": function(data) {
            data = data.join(" ");
            data = data.toLowerCase();
            for (var i = 0; i < npc_base.length; i++) if (npc_base[i].name.toLowerCase() == data) {
                data = npc_base[i];
                data.img.hash ? saveParamImgToFile(data.name, data.img.hash) : saveImgToFile(data.name, data.img);
                return;
            }
            addChatText("No such monster/npc with name " + data);
        },
        "/ping all": function() {
            for (var functions = {}, i = 0; i < ServerList.downloaded.length; i++) {
                var node = ServerList.downloaded[i];
                functions[node.world] || (ServerList.preping(i, !0), functions[node.world] = !0);
            }
        },
        "/premium": function() {
            if (Player.has_premium(players[0].temp.premium_until)) {
                var calls = -secondsPastDelta(players[0].temp.premium_until);
                addChatText("You have " + beautifulTime(1e3 * calls, 4) + " of premium time left", void 0, COLOR.TEAL);
            } else Popup.prompt("Premium account costs 500 MOS per 30 days. Do you want to buy it?", function() {
                Socket.send("premium", {
                    accept: !0
                });
            }, null_function);
        },
        "/cathedral": function() {
            addChatText("Time left: " + Cathedral.time_left(players[0]) + " minutes", void 0, COLOR.TEAL);
        },
        "/world 1": function() {
            ServerList.use_command_connect_by_prefix("1", ServerList.auto_log);
        },
        "/world 2": function() {
            ServerList.use_command_connect_by_prefix("2", ServerList.auto_log);
        },
        "/world 3": function() {
            ServerList.use_command_connect_by_prefix("3", ServerList.auto_log);
        },
        "/world 4": function() {
            ServerList.use_command_connect_by_prefix("4", ServerList.auto_log);
        },
        "/world 5": function() {
            ServerList.use_command_connect_by_prefix("5", ServerList.auto_log);
        },
        "/world 6": function() {
            ServerList.use_command_connect_by_prefix("6", ServerList.auto_log);
        },
        "/world 7": function() {
            ServerList.use_command_connect_by_prefix("7", ServerList.auto_log);
        },
        "/mods": function() {
            "Enable mods" == document.getElementById("mods_link").innerHTML && (document.getElementById("mods_link").style.display = "none", 
            document.body.appendChild(document.createElement("script")).src = cdn_url + "mod.js?v=" + mod_version);
        },
        "/cleardata": function() {
            var $scope = {};
            $scope.user = localStorage.user;
            localStorage.clear();
            localStorage.user = $scope.user;
            location.reload(!0);
        }
    },
    has_client_command: function(key) {
        var ip = key.split(" ")[0];
        return "function" == typeof Chat.client_commands[key] ? key : "function" == typeof Chat.client_commands[ip] ? ip : !1;
    },
    execute_client_command: function(ev) {
        var key = Chat.has_client_command(ev);
        arguments = ev.split(" ");
        arguments.splice(0, 1);
        Chat.client_commands[key](arguments);
    }
}, ChatSystem = {
    toggle: function() {
        GAME_STATE == GAME_STATES.GAME || GAME_STATE == GAME_STATES.SPECTATE && SpectateWindow.player ? Chat.set_visible() || (noRender(), 
        document.getElementById("chat").style.display = "block", document.getElementById("chat").style.bottom = 40 * current_ratio_y + "px", 
        Chat.chat_position_up && (document.getElementById("chat").style.top = 55 + 80 * current_ratio_y + "px", 
        document.getElementById("chat").style.bottom = "auto", document.getElementById("my_text").style.display = "block", 
        document.getElementById("my_text").style.zIndex = 240), removeClass(document.getElementById("my_text"), "hidden"), 
        removeClass(document.getElementById("current_channel"), "hidden"), document.getElementById("my_text").value = "", 
        document.getElementById("my_text").focus(), setGameState(GAME_STATES.CHAT)) : GAME_STATE != GAME_STATES.CHAT || Chat.set_visible() || (document.getElementById("chat").style.display = "block", 
        document.getElementById("chat").style.bottom = 25 * current_ratio_y + "px", Chat.chat_position_up && (document.getElementById("chat").style.top = "auto", 
        setTimeout(function() {
            document.getElementById("my_text").style.display = "none";
        }, 50)), addClass(document.getElementById("my_text"), "hidden"), addClass(document.getElementById("current_channel"), "hidden"), 
        document.getElementById("my_text").blur(), spectator_mode || 2 != socket_status ? setGameState(GAME_STATES.SPECTATE) : setGameState(GAME_STATES.GAME), 
        Android || setTimeout(function() {
            setCanvasSize();
        }, 16));
    },
    whisper: function(n) {
        Chat.set_visible();
        document.getElementById("chat").style.display = "block";
        document.getElementById("chat").style.bottom = 40 * current_ratio_y + "px";
        removeClass(document.getElementById("my_text"), "hidden");
        removeClass(document.getElementById("current_channel"), "hidden");
        document.getElementById("my_text").value = '/w "' + n.username() + '" ';
        document.getElementById("my_text").value = '/w "' + n.username() + '" ';
        n = document.getElementById("my_text").value.length;
        document.getElementById("my_text").selectionStart = n;
        document.getElementById("my_text").selectionEnd = n;
        document.getElementById("my_text").focus();
        Chat.update_string();
        setGameState(GAME_STATES.CHAT);
    },
    filters_init: function() {
        var a = "attempt fails chat whisper join_leave loot magic".split(" "), b;
        for (b in a) {
            var element = document.getElementById("filter_" + a[b]);
            removeClass(element, "green");
            removeClass(element, "red");
            chat_filters[a[b]] ? addClass(element, "red") : addClass(element, "green");
        }
    },
    filters: function() {
        if (GAME_STATE == GAME_STATES.GAME || GAME_STATE == GAME_STATES.CHAT) {
            var ancestor = document.getElementById("filters_form");
            "block" == ancestor.style.display ? ancestor.style.display = "none" : (ChatSystem.filters_init(), 
            ancestor.style.display = "block");
        }
    },
    filter_toggle: function($namespace$$) {
        chat_filters[$namespace$$] ? delete chat_filters[$namespace$$] : chat_filters[$namespace$$] = !0;
        ChatSystem.filters_init();
        localStorage.chat_filters = JSON.stringify(chat_filters);
    }
}, COLOR = {
    BLACK: "#000000",
    WHITE: "#FFFFFF",
    PREMIUM: "#CCFFFF",
    YELLOW: "#FFFF00",
    GREEN: "#51EA30",
    PINK: "#F3A7BD",
    BLUE: "#061BB5",
    ORANGE: "#F2982A",
    TEAL: "#3BEEEE",
    PURPLE: "#560F8A",
    RED: "#FF0000",
    RANDOM: function() {
        return "#000000".replace(/0/g, function() {
            return (~~(16 * Math.random())).toString(16);
        });
    }
};

function addLog(newPath, callback) {
    addChatText(newPath, "Sys", callback || COLOR.GREEN);
}

var last_cannot_message = 0, last_ignore_message = 0;

function addChatText(data, callback, type, e, id, opts, _ref) {
    var _id = !1;
    "object" == typeof data && (callback = data.user || data.name, type = data.color, 
    e = data.type, id = data.lang, opts = data.to, _ref = data.server, _id = data.id, 
    data = data.text);
    if ("undefined" == typeof e || !chat_filters[e]) if ("undefined" == typeof id || Contacts.channels[id]) {
        if (e && "cannot" == e) {
            if (1e3 > timestamp() - last_cannot_message) return;
            last_cannot_message = timestamp();
        }
        if (-1 < Contacts.ignores.indexOf(callback)) "undefined" != typeof opts && 1e4 < timestamp() - last_ignore_message && !_ref && (last_ignore_message = timestamp(), 
        Socket.send("message", {
            data: '/w "' + callback + '" [Ignored] This player does not receive your messages.',
            lang: document.getElementById("current_channel").value,
            silent: !0
        })); else {
            if ("join_leave" == e || _ref) callback = void 0;
            chat_history.push({
                text: data,
                user: callback,
                color: type,
                lang: id,
                to: opts,
                id: _id
            });
            chat_history.length > Chat.max_chat_history && (chat_history.splice(0, 1), 0 < document.getElementById("chat").childElementCount && document.getElementById("chat").removeChild(document.getElementById("chat").firstChild));
            "whisper" == e ? Notifications.show(callback.sanitize() + " sent you a whisper!") : callback || "Current experience rate is 2x" != data ? callback || "Arena starts in 10 minutes, to join type /join and click on a table to register" != data ? !callback && /Trivia starts in 10 minutes/.test(data) && Notifications.show("Trivia starts in 10 minutes!") : Notifications.show("Arena starts in 10 minutes!") : Notifications.show("Current experience rate is 2x");
            SpectateWindow.iframe && SpectateWindow.sendMessage({
                action: "chat_message",
                text: data,
                user: callback,
                color: type,
                lang: id,
                to: opts,
                id: _id
            });
            isActive ? (t = chat_history.length - 1, Chat.add_line(t)) : resyncRequired++;
        }
    }
}

var Skills = {
    can_perform: function(item, obj, e) {
        if (item.temp.busy) {
            if (Timers.running("player_using_skill" + item.id)) return {
                status: !1,
                reason: "Cannot do that yet."
            };
            item.temp.busy = !1;
        }
        if (-42 == obj) {
            var data = object_base[42];
            data.map = item.map;
        } else "object" == typeof obj && obj ? "item" == obj.type && (data = item_base[obj.id], 
        data.map = item.map) : data = objects_data[obj];
        if ("undefined" == typeof data || "undefined" == typeof data.params || "undefined" == typeof data.params.results || "object" != typeof obj && 42 != data.b_i && 1 < distance(item.i, item.j, data.i, data.j)) return {
            status: !1,
            reason: "Cannot do that yet.!"
        };
        if (data.map != item.map) return {
            status: !1,
            reason: "Cannot do that yet."
        };
        if (40 == item.temp.inventory.length && 0 <= [ "woodcutting", "fishing", "mining" ].indexOf(data.params.results[0].skill)) return {
            status: !1,
            reason: "Your inventory is full."
        };
        obj = Inventory.get_item_counts(item);
        for (var index in data.params.results) {
            var r = data.params.results[index], results = r.requires, u = !0, k;
            for (k in results) if (!Inventory.has_equipped(item, results[k])) {
                u = !1;
                break;
            }
            if (u) for (var i in r.returns) if (r.returns[i].level <= Player.skills(item)[r.skill].current) {
                var results = !0, u = {}, key;
                for (key in r.returns[i].consumes) if (u = r.returns[i].consumes[key], "undefined" == typeof obj[u.id] || obj[u.id] < u.count) {
                    results = !1;
                    break;
                }
                if (results) return item.temp.busy = !0, Timers.set("player_using_skill" + item.id, function() {
                    item.temp.busy = !1;
                }, r.returns[i].duration || 2e3), Player.request_captcha(item.id, !1), "undefined" == typeof iamserver && data.params && data.params.results && data.params.results[index].continuous && "undefined" == typeof e && Player.auto_action(data), 
                {
                    status: !0,
                    result: index,
                    returns: i
                };
            }
        }
        return {
            status: !1,
            reason: "I think that I'm missing something."
        };
    },
    perform: function(id, data, x) {
        if (-42 == data) var e = object_base[42]; else "object" == typeof data && data ? "item" == data.type && (e = item_base[data.id]) : e = objects_data[data];
        var result = e.params.results[x.result], target = result.returns[x.returns];
        "undefined" != typeof result.requires && AREA.publish(clients[id], {
            action: "use_skill",
            position: {
                i: clients[id].i,
                j: clients[id].j
            },
            item_id: result.requires[0] || e.b_i
        }, !0);
        Timers.set("player_using_skill" + id, function() {
            var client = clients[id];
            if ("undefined" == typeof client) return !1;
            client.temp.busy = !1;
            var type = Math.random(), c = !1;
            if ("undefined" != typeof target.consumes) for (var i in target.consumes) for (var index = 0; index < target.consumes[i].count; index++) Items.take_from_player(id, target.consumes[i].id);
            for (;!c && "undefined" != typeof target; ) i = 1, target.max_chance && (i = target.max_chance), 
            Math.min(i, target.base_chance + (skills[client.id][result.skill].current - target.level) / 100) > type ? (Items.give_to_player(client, target.id), 
            Player.inc_xp(client, result.skill, target.xp || 0), c = !0) : target.next ? (x.returns++, 
            target = result.returns[x.returns]) : target = void 0, type = Math.random();
            c ? 443 <= e.b_i && 445 >= e.b_i && client.map > maps && (type = teleport_locations[map_names[client.temp.last_map]], 
            Client.teleport_position(clients[client.id], {
                i: type.to_i,
                j: type.to_j,
                map: type.to_map,
                action: "teleport",
                player_id: client.id
            })) : Player.send_message(client.id, "You failed.", COLOR.YELLOW, "fails");
        }, target.duration || 2e3);
    }
}, Chest = {
    upgrade_prices: {
        1: 5e5,
        2: 3e6,
        3: 9e6,
        4: 2e7
    },
    upgrade_prices_mos: {
        1: 50,
        2: 300,
        3: 900,
        4: 2e3
    },
    open: function(e, method, cb) {
        chest_content = e;
        chests[0] = e;
        method && Chest.change_page(chest_page);
        cb && Carpentry.init(cb);
    },
    withdraw: function(radiusFunc) {
        var x = chest_page - 1, x = parseInt(selected_chest) + 60 * x;
        chest_item_id = chest_content[x].id;
        Socket.send("chest_withdraw", {
            item_id: chest_content[x].id,
            item_slot: x,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j,
            amount: radiusFunc
        });
    },
    deposit: function(radiusFunc) {
        var x = chest_page - 1, x = parseInt(selected_chest) + 60 * x;
        chest_item_id = chest_content[x].id;
        Socket.send("chest_deposit", {
            item_id: chest_content[x].id,
            item_slot: x,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j,
            amount: radiusFunc
        });
    },
    destroy: function() {
        var i = chest_page - 1, j = parseInt(selected_chest) + 60 * i;
        chest_item_id = chest_content[j].id;
        Popup.prompt("Do you want to destroy " + item_base[chest_item_id].name + "?", function() {
            Socket.send("chest_destroy", {
                item_id: chest_content[j].id,
                item_slot: j,
                target_id: chest_npc.id,
                target_i: chest_npc.i,
                target_j: chest_npc.j
            });
        });
    },
    get_content: function(id) {
        var ret = JSON.clone(chests[id]), state = {}, item = clients[id].temp.inventory, i;
        for (i in ret) state[ret[i].id] = !0;
        for (var property in item) state[item[property].id] || (ret.length < Player.chest_size(clients[id]) && ret.push({
            id: item[property].id,
            count: 0
        }), state[item[property].id] = !0);
        return ret;
    },
    sort_player_chest: function(group) {
        "undefined" != typeof chests[group] && chests[group].sort(function(a, b) {
            if (item_base[a.id].b_t < item_base[b.id].b_t) return -1;
            if (item_base[a.id].b_t > item_base[b.id].b_t) return 1;
            if (item_base[a.id].params && item_base[b.id].params) {
                if (item_base[a.id].params.slot < item_base[b.id].params.slot) return -1;
                if (item_base[a.id].params.slot > item_base[b.id].params.slot) return 1;
                if (item_base[a.id].params.price < item_base[b.id].params.price) return -1;
                if (item_base[a.id].params.price > item_base[b.id].params.price) return 1;
                if (item_base[a.id].b_i < item_base[b.id].b_i) return -1;
                if (item_base[a.id].b_i > item_base[b.id].b_i) return 1;
            }
            return 0;
        });
    },
    player_withdraw: function(node, tag, id, i, n, attributes, pseudos) {
        if (!Chest.can_access(node, tag, id, i, !0, attributes, pseudos)) return !1;
        tag = clients[node];
        n = parseInt(n) || 1;
        n = Math.min(40 - tag.temp.inventory.length, n);
        if (40 >= tag.temp.inventory.length + n && 0 < n && (attributes = chests[node], 
        attributes.length > i && attributes[i].id == id && attributes[i].count >= n)) {
            attributes[i].count -= n;
            0 == attributes[i].count && attributes.splice(i, 1);
            for (i = 0; i < n; i++) Inventory.add(tag, id);
            Player.send_inventory(node);
            Chest.sort_player_chest(node);
            return !0;
        }
        return !1;
    },
    player_deposit: function(node, tag, id, selector, count, attributes, pseudos) {
        if (!Chest.can_access(node, tag, id, selector, !0, attributes, pseudos)) return !1;
        tag = clients[node];
        attributes = item_base[id];
        count = parseInt(count) || 1;
        attributes = Inventory.get_item_count(tag, attributes.b_i);
        count = Math.min(count, attributes);
        if (0 < attributes) {
            attributes = chests[node];
            if (attributes[selector] && attributes[selector].id == id) attributes[selector].count += count; else {
                if (attributes.length >= Player.chest_size(clients[node])) return !1;
                selector = -1;
                for (var i in attributes) if (attributes[i].id == id) {
                    selector = i;
                    break;
                }
                -1 == selector ? attributes.push({
                    id: id,
                    count: count
                }) : attributes[selector].count += count;
            }
            for (i = 0; i < count; i++) Inventory.remove(tag, id);
            Player.send_inventory(node);
            Chest.sort_player_chest(node);
            return !0;
        }
        return !1;
    },
    player_add_chest: function(k, id, n, i) {
        var data = chests[k];
        n = n || 1;
        if (data[i] && data[i].id == id) data[i].count += n; else {
            i = -1;
            for (var index in data) if (data[index].id == id) {
                i = index;
                break;
            }
            if (-1 == i) {
                if (data.length >= Player.chest_size(clients[k])) return !1;
                data.push({
                    id: id,
                    count: n
                });
            } else data[i].count += n;
        }
        Chest.sort_player_chest(k);
        return !0;
    },
    player_find_item_index: function(i, id, contacts) {
        "undefined" == typeof contacts && (contacts = chests[i]);
        for (i = 0; i < contacts.length; i++) if (contacts[i].id == id) return i;
    },
    player_chest_item_count: function(a, b) {
        var atanA = Chest.player_find_item_index(a, b);
        return "undefined" != typeof atanA ? chests[a][atanA].count : 0;
    },
    player_decrease_item_count: function(a, b, c) {
        b = Chest.player_find_item_index(a, b);
        return "undefined" != typeof b && (a = chests[a], a[b].count >= c) ? (a[b].count -= c, 
        0 == a[b].count && a.splice(b, 1), !0) : !1;
    },
    change_page: function(page) {
        page > players[0].params.chest_pages ? Chest.player_upgrade() : hasClass(document.getElementById("market"), "hidden") || hasClass(document.getElementById("market_transactions"), "hidden") ? (addClass(document.getElementById("market"), "hidden"), 
        BigMenu.open_chest(chest_content, page)) : Market.open_specific("transactions");
    },
    last_page: function() {
        1 < chest_page && Chest.change_page(chest_page - 1);
    },
    next_page: function() {
        chest_page < players[0].params.chest_pages + 1 && Chest.change_page(chest_page + 1);
    },
    player_upgrade: function() {
        Popup.dual_prompt("Do you want to upgrade your chest?", thousandSeperate(Chest.upgrade_prices[players[0].params.chest_pages]) + " coins", function() {
            Socket.send("chest_upgrade", {
                upgrade: !0,
                type: "coins"
            });
        }, thousandSeperate(Chest.upgrade_prices_mos[players[0].params.chest_pages]) + " MOS", function() {
            Socket.send("chest_upgrade", {
                upgrade: !0,
                type: "mos"
            });
        });
    },
    upgrade: function(id, done) {
        var data = clients[id];
        if ("undefined" == typeof data) return {
            status: !1,
            reason: "Player not found"
        };
        if (4 < data.params.chest_pages) return {
            status: !1,
            reason: "Already upgraded"
        };
        if ("coins" == (done || "coins")) {
            if (data.temp.coins < Chest.upgrade_prices[data.params.chest_pages]) return {
                status: !1,
                reason: "Not enough coins, need " + thousandSeperate(Chest.upgrade_prices[data.params.chest_pages]) + " to upgrade"
            };
            data.temp.coins -= Chest.upgrade_prices[data.params.chest_pages];
        } else {
            if (Private.get(data.id, "balance") < Chest.upgrade_prices_mos[data.params.chest_pages]) return {
                status: !1,
                reason: "Not enough MOS, need " + thousandSeperate(Chest.upgrade_prices_mos[data.params.chest_pages]) + " to upgrade"
            };
            Private.set(data.id, "balance", Private.get(data.id, "balance") - Chest.upgrade_prices_mos[data.params.chest_pages]);
            AREA.sql(clients[id], {
                action: "add_mos",
                player_name: clients[id].name,
                amount: -Chest.upgrade_prices_mos[data.params.chest_pages]
            });
            Timers.set("update_" + id, function() {
                clients[id] && AREA.sql(clients[id], {
                    action: "mos_balance"
                });
            }, 1e3);
        }
        data.params.chest_pages++;
        Player.chest_size(data);
        return {
            status: !0
        };
    },
    player_chest_full: function(i) {
        return chests[i].length >= Player.chest_size(clients[i]) ? !0 : !1;
    },
    player_destroy: function(a, c, r, b) {
        if (!Chest.can_access(a, c, r, b)) return !1;
        a = chests[a];
        return a.length > b && a[b].id == r && "undefined" != typeof a[b].count ? (a.splice(b, 1), 
        !0) : !1;
    },
    can_access: function(a, b, c, d, e, f, g) {
        a = clients[a];
        if ("undefined" == typeof c || "undefined" == typeof d || "undefined" == typeof a) return !1;
        if (300 == a.map) {
            if (e) {
                b = {
                    i: f - 10,
                    j: g - 10
                };
                if (!PlayerMap.can_see(a.name, a.params.island, b)) return !1;
                b = PlayerMap.get_object(a.params.island, b);
                if (!b || !b.activities || b.activities[0] != ACTIVITIES.ACCESS || 1 < distance(a.i, a.j, f, g)) return !1;
            }
            return !0;
        }
        b = objects_data[b];
        return "undefined" == typeof b || 1 < distance(a.i, a.j, b.i, b.j) || b.map != a.map || !b.activities || b.activities && b.activities[0] != ACTIVITIES.ACCESS ? !1 : !0;
    },
    save: function(obj, key) {
        "undefined" != typeof chests[obj] && store.set("chests_" + key, JSON.stringify(chests[obj]));
    },
    load: function(id) {
        store.get("chests_" + clients[id].name, function(err, data) {
            err ? (delete chests[id], console.log("Chest load error", err, id), Player.logout(id)) : "undefined" != typeof clients[id] && (data = JSON.parse(data)) && "undefined" != typeof data && (chests[id] = data, 
            SSocket.send(sockets[id], {
                action: "chest_open",
                content: Chest.get_content(id),
                open: !1
            }));
        });
    },
    item_info: function(sel) {
        sel += 60 * (chest_page - 1);
        chest_content[sel] && Items.get_info(chest_content[sel].id);
    },
    pvp_loot_put: function(a) {
        Socket.send("pvp_loot_put", {
            item_id: a,
            target_id: loot_master_id
        });
    },
    cabinet_open: function() {
        windowOpen = !0;
        var callback = object_base[last_cabinet.b_i], arr = on_map[current_map][last_cabinet.i][last_cabinet.j].params.items || [];
        document.getElementById("cabinet_form").style.display = "block";
        for (var i = 0; 16 > i; i++) callback.params.stores > i ? document.getElementById("cabinet_chest_" + i).style.display = "inline-block" : document.getElementById("cabinet_chest_" + i).style.display = "none";
        for (i = 0; 24 > i; i++) {
            var elem = document.getElementById("cabinet_inv_" + i);
            removeClass(elem, "selected");
            if ("undefined" != typeof players[0].temp.inventory[i]) {
                var shape = item_base[players[0].temp.inventory[i].id], backgroundLayer = IMAGE_SHEET[shape.img.sheet];
                elem.style.background = 'url("' + backgroundLayer.url + '") no-repeat scroll ' + -shape.img.x * backgroundLayer.tile_width + "px " + -shape.img.y * backgroundLayer.tile_height + "px transparent";
            } else elem.style.background = "";
        }
        for (i = 0; i < callback.params.stores; i++) elem = document.getElementById("cabinet_chest_" + i), 
        removeClass(elem, "selected"), "undefined" != typeof arr[i] ? (shape = item_base[arr[i]], 
        backgroundLayer = IMAGE_SHEET[shape.img.sheet], elem.style.background = 'url("' + backgroundLayer.url + '") no-repeat scroll ' + -shape.img.x * backgroundLayer.tile_width + "px " + -shape.img.y * backgroundLayer.tile_height + "px transparent") : elem.style.background = "";
    },
    cabinet_add: function(minLength) {
        var origScrollOffset = object_base[last_cabinet.b_i], scrollOffset = on_map[current_map][last_cabinet.i][last_cabinet.j].params.items || [];
        !players[0].temp.busy && origScrollOffset.params.stores > scrollOffset.length && players[0].temp.inventory.length > minLength && Socket.send("carpentry", {
            sub: "cabinet_add",
            inventory_slot: minLength,
            cabinet: {
                i: last_cabinet.i,
                j: last_cabinet.j
            }
        });
    },
    cabinet_remove: function(value) {
        var entries = on_map[current_map][last_cabinet.i][last_cabinet.j].params.items || [];
        !players[0].temp.busy && entries.length > value && 40 > players[0].temp.inventory.length && Socket.send("carpentry", {
            sub: "cabinet_remove",
            cabinet_slot: value,
            cabinet: {
                i: last_cabinet.i,
                j: last_cabinet.j
            }
        });
    }
}, Forge = {
    forge_open: function() {
        forge_selected = void 0;
        removeClass(document.getElementById("forging_menu"), "hidden");
        var i = document.getElementById("forging_drag_item");
        document.getElementById("forge_result").style.background = "";
        document.getElementById("forge_make").innerHTML = "&nbsp;";
        document.body.style.cursor = "";
        i.style.display = "none";
        forge_components = [];
        for (i = 0; 4 > i; i++) {
            forge_components[i] = [];
            for (var level = 0; 4 > level; level++) {
                var element = document.getElementById("forg_slot_" + i + "_" + level);
                element.style.background = "";
            }
        }
        forge_inventory = [];
        for (i = 0; 40 > i; i++) if (element = document.getElementById("forg_inv_" + i), 
        removeClass(element, "selected"), "undefined" != typeof players[0].temp.inventory[i]) {
            forge_inventory[i] = players[0].temp.inventory[i];
            var level = item_base[players[0].temp.inventory[i].id], w = IMAGE_SHEET[level.img.sheet];
            element.style.background = 'url("' + w.url + '") no-repeat scroll ' + -level.img.x * w.tile_width + "px " + -level.img.y * w.tile_height + "px transparent";
            players[0].temp.inventory[i].selected && addClass(element, "selected");
        } else element.style.background = "";
    },
    select: function(e, combo) {
        if (!(Android && 500 > timestamp() - lastTap)) if (lastTap = timestamp(), "undefined" != typeof forge_selected && forge_selected) Forge.switcher(forge_selected, e.target || e.srcElement, combo) && e.preventDefault(); else {
            var element = e.target || e.srcElement;
            if (/forg_/.test(element.id) && "" != element.style.background) {
                var offset = elementXY("forging_menu");
                addClass(element, "opacity_70");
                var x = e.clientX || e.touches && e.touches[0].clientX || 0, y = e.clientY || e.touches && e.touches[0].clientY || 0;
                if (combo && !Android) {
                    var elem = document.getElementById("forging_drag_item");
                    elem.style.display = "inline";
                    elem.style.left = x - offset.left - 48 + "px";
                    elem.style.top = y - offset.top - 48 + "px";
                    elem.style.background = element.style.background;
                }
                forge_selected = element;
                e.preventDefault();
            }
        }
    },
    drag: function(e) {
        if ("undefined" != typeof forge_selected && forge_selected) {
            var initialPosition = elementXY("forging_menu");
            document.body.style.cursor = "none";
            var x = e.clientX || e.touches[0].clientX;
            e = e.clientY || e.touches[0].clientY;
            var select = document.getElementById("forging_drag_item");
            select.style.left = x - initialPosition.left - 48 + "px";
            select.style.top = e - initialPosition.top - 48 + "px";
        }
    },
    drop: function(event, ui) {
        if ("undefined" != typeof forge_selected && forge_selected) {
            document.body.style.cursor = "";
            var element = event.target || event.srcElement;
            forge_selected.id != element.id && Forge.switcher(forge_selected, element, ui);
        }
    },
    switcher: function(e, body, id) {
        if ("undefined" == typeof e || "undefined" == typeof body || !/forg_/.test(e.id) || !/forg_/.test(body.id)) return !1;
        var content = e.style.background;
        e.style.background = body.style.background;
        body.style.background = content;
        document.body.style.cursor = "";
        removeClass(forge_selected, "opacity_70");
        id && Forge.hide_drag();
        forge_selected = !1;
        content = Forge.get_object(e.id);
        id = Forge.get_object(body.id);
        content = JSON.clone(content);
        Forge.set_object(e.id, id);
        Forge.set_object(body.id, content);
        Forge.check_patterns();
        return !0;
    },
    hide_drag: function() {
        document.getElementById("forging_drag_item").style.display = "none";
    },
    get_object: function(name) {
        if (/forg_inv_/.test(name)) return name = /forg_inv_([0-9]{1,2})/.exec(name)[1], 
        forge_inventory[name];
        name = /forg_slot_([0-9]{1,2})_([0-9]{1,2})/.exec(name);
        return forge_components[name[1]][name[2]];
    },
    set_object: function(node, obj) {
        if (/forg_inv_/.test(node)) {
            var id = /forg_inv_([0-9]{1,2})/.exec(node)[1];
            forge_inventory[id] = obj;
        } else id = /forg_slot_([0-9]{1,2})_([0-9]{1,2})/.exec(node), forge_components[id[1]][id[2]] = obj;
    },
    check_patterns: function() {
        var elem = document.getElementById("forge_result");
        elem.style.background = "";
        document.getElementById("forge_make").innerHTML = "&nbsp;";
        for (var a = 3, b = 3, obj = 0, c = 3; 0 <= c; c--) for (var i = 3; 0 <= i; i--) "object" == typeof forge_components[c][i] && (obj++, 
        a = Math.min(c, a), b = Math.min(i, b));
        i = -1;
        for (c in FORGE_FORMULAS) if (FORGE_FORMULAS[c].material_count == obj && Forge.match_pattern(a, b, FORGE_FORMULAS[c].pattern)) {
            i = c;
            break;
        }
        if (0 <= i) a = item_base[FORGE_FORMULAS[i].item_id], obj = IMAGE_SHEET[a.img.sheet], 
        elem.style.background = 'url("' + obj.url + '") no-repeat scroll ' + -a.img.x * obj.tile_width + "px " + -a.img.y * obj.tile_height + "px transparent", 
        FORGE_FORMULAS[i].level <= skills[0].forging.current && (elem = 100 * FORGE_FORMULAS[i].chance, 
        document.getElementById("forge_make").innerHTML = "Make " + elem + "%", forge_formula = i); else {
            for (var b = a = -1, total = 0, c = 3; 0 <= c; c--) for (i = 3; 0 <= i; i--) if ("object" == typeof forge_components[c][i] && item_base[forge_components[c][i].id].params.enchant_id) {
                if (-1 != a) return !1;
                a = item_base[item_base[forge_components[c][i].id].params.enchant_id];
                b = item_base[forge_components[c][i].id];
                total = b.params.enchant_bonus || 0;
            }
            if (-1 == a || -1 == b) return !1;
            var equip_type;
            1 == b.params.slot ? equip_type = "cape" : b.params.min_accuracy ? equip_type = "weapon" : b.params.min_defense || b.params.min_magic ? equip_type = "armor" : b.params.min_health && (equip_type = "jewelry");
            for (var x = -1, y = 0, idx = 0, c = 3; 0 <= c; c--) for (i = 3; 0 <= i; i--) if ("object" == typeof forge_components[c][i]) if (593 == forge_components[c][i].id) {
                if (idx++, 3 < idx) return !1;
            } else if ("cape" == equip_type && "undefined" != typeof Forge.enchantingChancesCapes[forge_components[c][i].id]) {
                if (-1 != x) return -1;
                x = forge_components[c][i].id;
                y = Forge.enchantingChancesCapes[x](b.params.min_defense || b.params.min_strength);
            } else if ("armor" == equip_type && "undefined" != typeof Forge.enchantingChancesArmor[forge_components[c][i].id]) {
                if (-1 != x) return -1;
                x = forge_components[c][i].id;
                y = Forge.enchantingChancesArmor[x](b.params.min_defense || b.params.min_magic);
            } else if ("weapon" == equip_type && "undefined" != typeof Forge.enchantingChancesWeapon[forge_components[c][i].id]) {
                if (-1 != x) return -1;
                x = forge_components[c][i].id;
                y = Forge.enchantingChancesWeapon[x](b.params.min_magic || b.params.min_strength || b.params.min_accuracy);
            } else if ("jewelry" == equip_type && "undefined" != typeof Forge.enchantingChancesJewelry[forge_components[c][i].id]) {
                if (-1 != x) return -1;
                x = forge_components[c][i].id;
                y = Forge.enchantingChancesJewelry[x](b.params.min_health);
            }
            if (-1 == x || obj != 2 + idx) return !1;
            c = {
                item: a.b_i,
                base_item: b.b_i,
                scroll: x,
                orbs: idx,
                chance: total + y + .1 * idx
            };
            obj = IMAGE_SHEET[a.img.sheet];
            elem.style.background = 'url("' + obj.url + '") no-repeat scroll ' + -a.img.x * obj.tile_width + "px " + -a.img.y * obj.tile_height + "px transparent";
            elem = Math.round(Math.min(100, 100 * c.chance));
            document.getElementById("forge_make").innerHTML = "Make " + elem + "%";
            forge_formula = c;
        }
    },
    enchantingChancesArmor: {
        176: function(distance) {
            return 20 > distance ? .5 : 50 > distance ? .35 : 80 > distance ? .25 : 100 > distance ? .15 : .05;
        },
        177: function(distance) {
            return 20 > distance ? .7 : 50 > distance ? .5 : 80 > distance ? .4 : 100 > distance ? .25 : .15;
        },
        178: function(distance) {
            return 20 > distance ? .9 : 50 > distance ? .6 : 80 > distance ? .45 : 100 > distance ? .35 : .25;
        },
        179: function(a) {
            return 20 > a ? 1 : 50 > a ? .75 : 80 > a ? .55 : 100 > a ? .45 : .35;
        }
    },
    enchantingChancesWeapon: {
        64: function(distance) {
            return 20 > distance ? .5 : 50 > distance ? .35 : 80 > distance ? .25 : 100 > distance ? .15 : .05;
        },
        173: function(distance) {
            return 20 > distance ? .7 : 50 > distance ? .5 : 80 > distance ? .4 : 100 > distance ? .25 : .15;
        },
        174: function(args) {
            return 20 > args ? .9 : 50 > args ? .6 : 80 > args ? .45 : 100 > args ? .35 : .25;
        },
        175: function(a) {
            return 20 > a ? 1 : 50 > a ? .75 : 80 > a ? .55 : 100 > a ? .45 : .35;
        }
    },
    enchantingChancesJewelry: {
        1125: function(distance) {
            return 20 > distance ? .5 : 50 > distance ? .35 : 80 > distance ? .25 : 100 > distance ? .15 : .05;
        },
        1126: function(distance) {
            return 20 > distance ? .7 : 50 > distance ? .5 : 80 > distance ? .4 : 100 > distance ? .25 : .15;
        },
        1127: function(distance) {
            return 20 > distance ? .9 : 50 > distance ? .6 : 80 > distance ? .45 : 100 > distance ? .35 : .25;
        },
        1128: function(a) {
            return 20 > a ? 1 : 50 > a ? .75 : 80 > a ? .55 : 100 > a ? .45 : .35;
        }
    },
    enchantingChancesCapes: {
        1303: function(distance) {
            return 20 > distance ? .5 : 50 > distance ? .35 : 80 > distance ? .25 : 100 > distance ? .15 : .05;
        },
        1304: function(distance) {
            return 20 > distance ? .7 : 50 > distance ? .5 : 80 > distance ? .4 : 100 > distance ? .25 : .15;
        },
        1305: function(distance) {
            return 20 > distance ? .9 : 50 > distance ? .6 : 80 > distance ? .45 : 100 > distance ? .35 : .25;
        },
        1306: function(a) {
            return 20 > a ? 1 : 50 > a ? .75 : 80 > a ? .55 : 100 > a ? .45 : .35;
        }
    },
    attempt: function() {
        /Make/.test(document.getElementById("forge_make").innerHTML) && (addChatText("You attempt to forge...", null, COLOR.YELLOW, "attempt"), 
        Socket.send("forge", {
            target_id: selected.id,
            formula: forge_formula
        }), Music.sound_effect("forge"));
    },
    match_pattern: function(w, h, grid) {
        for (var x = 0; x < grid.length; x++) for (var y = 0; y < grid[x].length; y++) if (0 <= grid[x][y] && ("undefined" == typeof forge_components[x + w][y + h] || forge_components[x + w][y + h].id != grid[x][y])) return !1;
        return !0;
    },
    init: function() {
        var obj = [], state = 0, s = [], found;
        for (found in FORGE_FORMULAS) {
            for (var state = 0, obj = {}, s = FORGE_FORMULAS[found].pattern, i = 0; i < s.length; i++) for (var j = 0; j < s[i].length; j++) 0 <= s[i][j] && (state++, 
            obj[s[i][j]] = "undefined" == typeof obj[s[i][j]] ? 1 : obj[s[i][j]] + 1);
            FORGE_FORMULAS[found].material_count = state;
            FORGE_FORMULAS[found].materials = obj;
            state = 0;
            for (i in obj) state += obj[i] * (FORGE_MATERIAL_XP[i] || 0);
            FORGE_FORMULAS[found].xp = state;
        }
    },
    perform: function(id, e, a) {
        var v = {
            status: !1,
            reason: "I think that I'm missing something."
        }, ret = {
            status: !1,
            reason: "Cannot do that yet."
        }, s = clients[id];
        if ("undefined" == typeof s || s.temp.busy) return ret;
        e = objects_data[e];
        if ("undefined" == typeof e || 36 != e.b_i || 1 < distance(s.i, s.j, e.i, e.j) || s.map != e.map) return ret;
        if (!Inventory.has_equipped(s, 36)) return v;
        var m;
        if ("object" == typeof a && a && item_base[a.base_item] && item_base[a.base_item].params.enchant_id) {
            var args, fn;
            1 == item_base[a.base_item].params.slot ? (args = Forge.enchantingChancesCapes[a.scroll], 
            fn = item_base[a.base_item].params.min_defense || item_base[a.base_item].params.min_strength) : item_base[a.base_item].params.min_accuracy ? (args = Forge.enchantingChancesWeapon[a.scroll], 
            fn = item_base[a.base_item].params.min_magic || item_base[a.base_item].params.min_strength || item_base[a.base_item].params.min_accuracy) : item_base[a.base_item].params.min_defense || item_base[a.base_item].params.min_magic ? (args = Forge.enchantingChancesArmor[a.scroll], 
            fn = item_base[a.base_item].params.min_defense || item_base[a.base_item].params.min_magic) : item_base[a.base_item].params.min_health && (args = Forge.enchantingChancesJewelry[a.scroll], 
            fn = item_base[a.base_item].params.min_health);
            if ("undefined" == typeof args) return v;
            ret = args(fn);
            if (3 < a.orbs) return v;
            ret += item_base[a.base_item].params.enchant_bonus || 0;
            args = {};
            args[a.base_item] = 1;
            args[a.scroll] = 1;
            0 < a.orbs && (args["593"] = a.orbs, ret += .1 * a.orbs);
            m = {
                item_id: item_base[a.base_item].params.enchant_id,
                level: 1,
                chance: ret,
                materials: args,
                xp: FORGE_MATERIAL_XP[a.scroll] || 0
            };
        }
        m = m || FORGE_FORMULAS[a];
        if ("undefined" == typeof m || skills[id].forging.current < m.level) return v;
        a = Inventory.get_item_counts(s);
        var data = m.materials, key;
        for (key in data) if ("undefined" == typeof a[key] || data[key] > a[key]) return v;
        s.temp.busy = !0;
        AREA.publish(clients[id], {
            action: "use_skill",
            position: {
                i: clients[id].i,
                j: clients[id].j
            },
            item_id: 36
        }, !0);
        Timers.set("player_using_skill" + id, function() {
            var socket = clients[id];
            if ("undefined" == typeof socket) return !1;
            socket.temp.busy = !1;
            for (var value in data) for (var i = 0; i < data[value]; i++) Items.take_from_player(id, value);
            value = Math.floor(100 * Math.random()) / 100;
            i = 1;
            m.chance && (i = m.chance);
            var c = !1;
            i >= value && (c = !0);
            c ? (Items.give_to_player(socket, m.item_id), Player.inc_xp(socket, "forging", m.xp), 
            1150 == m.item_id && Player.send_achievement(socket.id, "CRAFT_PIGLET")) : (Player.inc_xp(socket, "forging", Math.round(m.xp / 2)), 
            Player.send_message(socket.id, "You failed. (missed " + parseInt(100 * (value - i)) + "%)", COLOR.YELLOW, "fails"), 
            Player.send_inventory(socket.id));
            Player.request_captcha(socket.id, !1);
        }, 2e3);
        return {
            status: !0
        };
    }
}, FORGE_FORMULAS = {
    0: {
        item_id: 0,
        level: 1,
        chance: 1,
        pattern: [ [ 34 ], [ 34 ], [ 29 ] ]
    },
    1: {
        item_id: 37,
        level: 3,
        chance: 1,
        pattern: [ [ 34, 34 ], [ 34, 34 ] ]
    },
    2: {
        item_id: 38,
        level: 2,
        chance: 1,
        pattern: [ [ 34 ], [ 34 ], [ 34 ], [ 29 ] ]
    },
    3: {
        item_id: 27,
        level: 5,
        chance: 1,
        pattern: [ [ -1, 34, -1 ], [ 34, 34, 34 ] ]
    },
    4: {
        item_id: 1,
        level: 9,
        chance: 1,
        pattern: [ [ -1, 34, -1 ], [ 34, 29, 34 ], [ -1, 34, -1 ] ]
    },
    5: {
        item_id: 39,
        level: 7,
        chance: 1,
        pattern: [ [ 34 ], [ 34 ], [ 34 ] ]
    },
    6: {
        item_id: 40,
        level: 11,
        chance: 1,
        pattern: [ [ 34, 34 ], [ 34, 34 ], [ 34, 34 ] ]
    },
    7: {
        item_id: 41,
        level: 15,
        chance: 1,
        pattern: [ [ 34, 34, 34 ], [ 34, 34, 34 ], [ -1, 29, -1 ], [ -1, 29, -1 ] ]
    },
    8: {
        item_id: 42,
        level: 17,
        chance: .9,
        pattern: [ [ -1, 34, 34, -1 ], [ 34, 29, 29, 34 ], [ 34, 29, 29, 34 ], [ -1, 34, 34, -1 ] ]
    },
    9: {
        item_id: 43,
        level: 20,
        chance: .9,
        pattern: [ [ 34, 34, 34 ], [ 34, 34, 34 ], [ 34, 34, 34 ] ]
    },
    10: {
        item_id: 51,
        level: 20,
        chance: .6,
        pattern: [ [ 50 ], [ 50 ], [ 313 ] ]
    },
    11: {
        item_id: 25,
        level: 24,
        chance: .6,
        pattern: [ [ 50, 50 ], [ 50, 50 ] ]
    },
    12: {
        item_id: 52,
        level: 29,
        chance: .6,
        pattern: [ [ -1, 50, -1 ], [ 50, 50, 50 ] ]
    },
    13: {
        item_id: 53,
        level: 30,
        chance: .6,
        pattern: [ [ -1, 50, -1 ], [ 50, 313, 50 ], [ -1, 50, -1 ] ]
    },
    14: {
        item_id: 36,
        level: 20,
        chance: .6,
        pattern: [ [ 313, 313, 313 ], [ -1, 313, -1 ] ]
    },
    15: {
        item_id: 54,
        level: 22,
        chance: .6,
        pattern: [ [ -1, 313, -1 ], [ 50, 313, 50 ], [ -1, 50, -1 ], [ -1, 50, -1 ] ]
    },
    16: {
        item_id: 55,
        level: 31,
        chance: .6,
        pattern: [ [ -1, 50, -1 ], [ 50, 50, 50 ], [ -1, 313, -1 ], [ -1, 313, -1 ] ]
    },
    17: {
        item_id: 56,
        level: 25,
        chance: .6,
        pattern: [ [ 50, 50, -1 ], [ -1, 50, -1 ], [ 313, 313, 313 ], [ -1, 313, -1 ] ]
    },
    18: {
        item_id: 57,
        level: 23,
        chance: .6,
        pattern: [ [ 50, 50 ], [ 50, 50 ], [ 313, 313 ] ]
    },
    19: {
        item_id: 2,
        level: 32,
        chance: .6,
        pattern: [ [ 50, 50 ], [ 50, 50 ], [ 50, 50 ] ]
    },
    20: {
        item_id: 58,
        level: 26,
        chance: .6,
        pattern: [ [ 50 ], [ 50 ], [ 50 ] ]
    },
    21: {
        item_id: 59,
        level: 28,
        chance: .6,
        pattern: [ [ 50, 50, 50 ], [ 50, 50, 313 ], [ -1, -1, 313 ], [ -1, 313, 313 ] ]
    },
    22: {
        item_id: 60,
        level: 27,
        chance: .6,
        pattern: [ [ 50, 50, 50 ], [ 50, 50, 313 ], [ -1, 50, 313 ], [ -1, -1, 313 ] ]
    },
    23: {
        item_id: 61,
        level: 33,
        chance: .6,
        pattern: [ [ -1, 50, -1 ], [ 50, -1, 50 ], [ 50, -1, 50 ] ]
    },
    24: {
        item_id: 18,
        level: 35,
        chance: .6,
        pattern: [ [ 50, 50, 50 ], [ 50, 50, 50 ], [ -1, 313, -1 ], [ -1, 313, -1 ] ]
    },
    25: {
        item_id: 62,
        level: 37,
        chance: .6,
        pattern: [ [ -1, -1, 50, 50 ], [ -1, -1, 50, 50 ], [ 313, 313, 50, 50 ], [ -1, -1, 50, 50 ] ]
    },
    26: {
        item_id: 67,
        level: 40,
        chance: .1,
        pattern: [ [ 50, 50, 50, 50 ], [ 50, 50, 50, 50 ], [ 50, 50, 50, 50 ], [ 313, 313, 313, 313 ] ]
    },
    28: {
        item_id: 65,
        level: 36,
        chance: .6,
        pattern: [ [ -1, 50, 50, -1 ], [ 50, 313, 313, 50 ], [ 50, 313, 313, 50 ], [ -1, 50, 50, -1 ] ]
    },
    29: {
        item_id: 66,
        level: 39,
        chance: .1,
        pattern: [ [ 50, 50, 50 ], [ 50, 50, 50 ], [ 50, 50, 50 ] ]
    },
    30: {
        item_id: 125,
        level: 35,
        chance: .1,
        pattern: [ [ 29, 29, 29 ], [ -1, 29, -1 ], [ -1, 29, -1 ], [ -1, 29, -1 ] ]
    },
    31: {
        item_id: 188,
        level: 44,
        chance: .7,
        pattern: [ [ 291, 291 ], [ 291, 291 ] ]
    },
    32: {
        item_id: 143,
        level: 41,
        chance: .65,
        pattern: [ [ 296, 296, 296 ], [ 291, 291, 291 ], [ -1, 291, -1 ], [ 291, 291, -1 ] ]
    },
    33: {
        item_id: 142,
        level: 40,
        chance: .65,
        pattern: [ [ -1, 296, -1 ], [ 291, 296, 291 ], [ -1, 291, -1 ], [ -1, 291, -1 ] ]
    },
    34: {
        item_id: 141,
        level: 43,
        chance: .65,
        pattern: [ [ 296, 296, 296 ], [ -1, 291, 291 ], [ -1, 291, 291 ] ]
    },
    35: {
        item_id: 146,
        level: 42,
        chance: .6,
        pattern: [ [ -1, -1, 291, 291 ], [ -1, -1, 296, 291 ], [ -1, 296, -1, -1 ], [ 296, -1, -1, -1 ] ]
    },
    36: {
        item_id: 191,
        level: 48,
        chance: .5,
        pattern: [ [ 291, 291 ], [ 291, 291 ], [ 291, 291 ] ]
    },
    37: {
        item_id: 189,
        level: 54,
        chance: .5,
        pattern: [ [ -1, 291, -1 ], [ 291, -1, 291 ], [ 291, -1, 291 ] ]
    },
    38: {
        item_id: 147,
        level: 46,
        chance: .55,
        pattern: [ [ 296, 291 ], [ 296, 291 ], [ 296, 291 ], [ 296, -1 ] ]
    },
    39: {
        item_id: 144,
        level: 49,
        chance: .5,
        pattern: [ [ 291, 291, 291 ], [ -1, 296, 296 ], [ -1, 296, 296 ], [ -1, -1, 296 ] ]
    },
    40: {
        item_id: 140,
        level: 50,
        chance: .5,
        pattern: [ [ 291, 291, 291 ], [ 291, 291, 291 ], [ -1, 296, -1 ], [ -1, 296, -1 ] ]
    },
    41: {
        item_id: 139,
        level: 56,
        chance: .45,
        pattern: [ [ -1, -1, 291, 291 ], [ -1, -1, 291, 291 ], [ 296, 296, 291, 291 ], [ -1, -1, 291, 291 ] ]
    },
    42: {
        item_id: 193,
        level: 55,
        chance: .45,
        pattern: [ [ -1, 291, -1 ], [ 291, 291, 291 ], [ 291, 291, 291 ], [ -1, 291, -1 ] ]
    },
    43: {
        item_id: 190,
        level: 60,
        chance: .3,
        pattern: [ [ 291, 291, 291 ], [ 291, 291, 291 ], [ 291, 291, 291 ] ]
    },
    44: {
        item_id: 148,
        level: 52,
        chance: .2,
        pattern: [ [ -1, -1, 291, 291 ], [ -1, 291, 296, 291 ], [ -1, 296, 296, 291 ], [ 296, -1, -1, -1 ] ]
    },
    45: {
        item_id: 149,
        level: 53,
        chance: .2,
        pattern: [ [ -1, 291, 291, -1 ], [ -1, 291, 291, -1 ], [ -1, 291, 291, -1 ], [ 291, 291, 291, 291 ] ]
    },
    46: {
        item_id: 145,
        level: 58,
        chance: .1,
        pattern: [ [ -1, -1, 291, 291 ], [ -1, 291, 291, 291 ], [ 296, 291, 291, -1 ], [ 296, 296, -1, -1 ] ]
    },
    47: {
        item_id: 339,
        level: 47,
        chance: .4,
        pattern: [ [ -1, 291, -1 ], [ 291, 291, 291 ] ]
    },
    48: {
        item_id: 340,
        level: 71,
        chance: .35,
        pattern: [ [ -1, 201, -1 ], [ 216, 201, 250 ] ]
    },
    49: {
        item_id: 342,
        level: 75,
        chance: .2,
        pattern: [ [ -1, 199, -1 ], [ 231, 199, 254 ] ]
    },
    50: {
        item_id: 344,
        level: 80,
        chance: .3,
        pattern: [ [ -1, 197, -1 ], [ 224, 197, 252 ] ]
    },
    51: {
        item_id: 366,
        level: 10,
        chance: .55,
        pattern: [ [ 274, 274 ], [ 274, 274 ] ]
    },
    52: {
        item_id: 368,
        level: 15,
        chance: .5,
        pattern: [ [ 271, 273, 271 ], [ 271, 273, 271 ], [ 272, 274, 272 ] ]
    },
    53: {
        item_id: 367,
        level: 1,
        chance: .25,
        pattern: [ [ 369, 369, 369 ], [ 369, 369, 369 ], [ 369, -1, 369 ] ]
    },
    54: {
        item_id: 359,
        level: 1,
        chance: .15,
        pattern: [ [ 367, 1303, 371 ] ]
    },
    55: {
        item_id: 359,
        level: 1,
        chance: .25,
        pattern: [ [ 367, 1304, 371 ] ]
    },
    56: {
        item_id: 346,
        level: 1,
        chance: .25,
        pattern: [ [ 370, 370, 370 ], [ 370, 370, 370 ], [ 370, -1, 370 ] ]
    },
    57: {
        item_id: 360,
        level: 1,
        chance: .15,
        pattern: [ [ 346, 1303, 371 ] ]
    },
    58: {
        item_id: 360,
        level: 1,
        chance: .25,
        pattern: [ [ 346, 1304, 371 ] ]
    },
    59: {
        item_id: 35,
        level: 80,
        chance: .3,
        pattern: [ [ 384, 201, 384 ], [ 384, 201, 384 ], [ 384, 201, 384 ] ]
    },
    60: {
        item_id: 138,
        level: 65,
        chance: .4,
        pattern: [ [ -1, 201, -1 ], [ 384, 201, 384 ], [ -1, 384, -1 ], [ -1, 384, -1 ] ]
    },
    61: {
        item_id: 394,
        level: 77,
        chance: .3,
        pattern: [ [ 384, 384, 384 ], [ 384, 216, 384 ], [ -1, 201, -1 ], [ -1, 201, -1 ] ]
    },
    62: {
        item_id: 365,
        level: 1,
        chance: .3,
        pattern: [ [ 396, 397, 398, 399 ] ]
    },
    63: {
        item_id: 393,
        level: 75,
        chance: .3,
        pattern: [ [ -1, -1, 384, 384 ], [ -1, 216, 201, 384 ], [ -1, 201, 384, 384 ], [ 201, -1, -1, -1 ] ]
    },
    64: {
        item_id: 426,
        level: 10,
        chance: .8,
        pattern: [ [ 199 ], [ 313 ], [ 313 ], [ 313 ] ]
    },
    65: {
        item_id: 428,
        level: 40,
        chance: .5,
        pattern: [ [ 197 ], [ 29 ], [ 29 ], [ 29 ] ]
    },
    66: {
        item_id: 434,
        level: 1,
        chance: .8,
        pattern: [ [ 29 ], [ 29 ], [ 29 ], [ 29 ] ]
    },
    67: {
        item_id: 435,
        level: 30,
        chance: .5,
        pattern: [ [ 50 ], [ 50 ] ]
    },
    68: {
        item_id: 438,
        level: 20,
        chance: .5,
        pattern: [ [ 199, 199 ], [ 296, 296 ], [ 296, 296 ], [ 296, 296 ] ]
    },
    69: {
        item_id: 442,
        level: 40,
        chance: .4,
        pattern: [ [ 386, 386 ], [ 595, 595 ], [ 595, 595 ], [ 595, 595 ] ]
    },
    70: {
        item_id: 440,
        level: 30,
        chance: .4,
        pattern: [ [ 197, 197 ], [ 594, 594 ], [ 594, 594 ], [ 594, 594 ] ]
    },
    71: {
        item_id: 472,
        level: 40,
        chance: .15,
        pattern: [ [ 153, 176, 219 ] ]
    },
    72: {
        item_id: 472,
        level: 40,
        chance: .25,
        pattern: [ [ 153, 177, 219 ] ]
    },
    73: {
        item_id: 359,
        level: 1,
        chance: .35,
        pattern: [ [ 367, 1305, 371 ] ]
    },
    74: {
        item_id: 359,
        level: 1,
        chance: .5,
        pattern: [ [ 367, 1306, 371 ] ]
    },
    75: {
        item_id: 360,
        level: 1,
        chance: .35,
        pattern: [ [ 346, 1305, 371 ] ]
    },
    76: {
        item_id: 360,
        level: 1,
        chance: .5,
        pattern: [ [ 346, 1306, 371 ] ]
    },
    77: {
        item_id: 472,
        level: 40,
        chance: .35,
        pattern: [ [ 153, 178, 219 ] ]
    },
    78: {
        item_id: 472,
        level: 40,
        chance: .5,
        pattern: [ [ 153, 179, 219 ] ]
    },
    79: {
        item_id: 473,
        level: 13,
        chance: 1,
        pattern: [ [ -1, 34, 34, -1 ], [ -1, 34, 34, -1 ], [ 34, -1, -1, 34 ] ]
    },
    80: {
        item_id: 474,
        level: 34,
        chance: .6,
        pattern: [ [ -1, 50, 50, -1 ], [ -1, 50, 50, -1 ], [ 50, -1, -1, 50 ] ]
    },
    81: {
        item_id: 475,
        level: 51,
        chance: .35,
        pattern: [ [ -1, 291, 291, -1 ], [ -1, 291, 291, -1 ], [ 291, -1, -1, 291 ] ]
    },
    82: {
        item_id: 476,
        level: 73,
        chance: .4,
        pattern: [ [ -1, 250, 250, -1 ], [ -1, 384, 384, -1 ], [ 384, -1, -1, 384 ] ]
    },
    83: {
        item_id: 477,
        level: 76,
        chance: .5,
        pattern: [ [ -1, 371, 371, -1 ], [ -1, 384, 384, -1 ], [ 384, -1, -1, 384 ] ]
    },
    84: {
        item_id: 478,
        level: 82,
        chance: .3,
        pattern: [ [ -1, 658, 658, -1 ], [ -1, 386, 386, -1 ], [ 386, -1, -1, 386 ] ]
    },
    85: {
        item_id: 497,
        level: 45,
        chance: .4,
        pattern: [ [ 291 ], [ 291 ], [ 291 ] ]
    },
    86: {
        item_id: 498,
        level: 68,
        chance: .5,
        pattern: [ [ 250 ], [ 250 ], [ 384 ] ]
    },
    87: {
        item_id: 500,
        level: 75,
        chance: .5,
        pattern: [ [ 252 ], [ 252 ], [ 384 ] ]
    },
    88: {
        item_id: 499,
        level: 75,
        chance: .25,
        pattern: [ [ 500 ], [ 263 ], [ 197 ] ]
    },
    89: {
        item_id: 499,
        level: 75,
        chance: .45,
        pattern: [ [ 500 ], [ 258 ], [ 197 ] ]
    },
    90: {
        item_id: 499,
        level: 75,
        chance: .65,
        pattern: [ [ 500 ], [ 257 ], [ 197 ] ]
    },
    91: {
        item_id: 499,
        level: 75,
        chance: .85,
        pattern: [ [ 500 ], [ 262 ], [ 197 ] ]
    },
    92: {
        item_id: 501,
        level: 80,
        chance: .5,
        pattern: [ [ 256 ], [ 195 ], [ 195 ] ]
    },
    93: {
        item_id: 502,
        level: 80,
        chance: .25,
        pattern: [ [ 501 ], [ 263 ], [ 197 ] ]
    },
    94: {
        item_id: 502,
        level: 80,
        chance: .45,
        pattern: [ [ 501 ], [ 258 ], [ 197 ] ]
    },
    95: {
        item_id: 502,
        level: 80,
        chance: .65,
        pattern: [ [ 501 ], [ 257 ], [ 197 ] ]
    },
    96: {
        item_id: 502,
        level: 80,
        chance: .85,
        pattern: [ [ 501 ], [ 262 ], [ 197 ] ]
    },
    97: {
        item_id: 173,
        level: 1,
        chance: .7,
        pattern: [ [ 64, 64, 64, 64 ] ]
    },
    98: {
        item_id: 174,
        level: 1,
        chance: .6,
        pattern: [ [ 173, 173, 173 ] ]
    },
    99: {
        item_id: 177,
        level: 1,
        chance: .7,
        pattern: [ [ 176, 176, 176, 176 ] ]
    },
    100: {
        item_id: 178,
        level: 1,
        chance: .6,
        pattern: [ [ 177, 177, 177 ] ]
    },
    101: {
        item_id: 159,
        level: 93,
        chance: .3,
        pattern: [ [ 658, 252, 658 ], [ 658, 252, 658 ], [ 658, 252, 658 ] ]
    },
    102: {
        item_id: 664,
        level: 80,
        chance: .3,
        pattern: [ [ 658, 658 ], [ 658, 658 ] ]
    },
    103: {
        item_id: 665,
        level: 88,
        chance: .4,
        pattern: [ [ -1, 658, -1 ], [ 658, 252, 658 ], [ 658, 252, 658 ] ]
    },
    104: {
        item_id: 666,
        level: 90,
        chance: .3,
        pattern: [ [ 658, 658, 658 ], [ 658, 658, 224 ], [ -1, -1, 224 ], [ -1, 597, 224 ] ]
    },
    105: {
        item_id: 668,
        level: 95,
        chance: .4,
        pattern: [ [ 658, 224, 658 ], [ 658, 224, 658 ], [ -1, 597, -1 ], [ -1, 597, -1 ] ]
    },
    106: {
        item_id: 797,
        level: 10,
        chance: .8,
        pattern: [ [ 272 ], [ 272 ], [ 270 ] ]
    },
    107: {
        item_id: 799,
        level: 15,
        chance: .6,
        pattern: [ [ -1, 270, -1 ], [ 272, 270, 272 ], [ -1, 272, -1 ], [ -1, 272, -1 ] ]
    },
    108: {
        item_id: 801,
        level: 13,
        chance: .5,
        pattern: [ [ 273, 273, 273 ], [ -1, 272, -1 ], [ -1, 270, -1 ], [ 273, 273, 273 ] ]
    },
    109: {
        item_id: 436,
        level: 10,
        chance: .6,
        pattern: [ [ 201, 201 ], [ 29, 29 ], [ 29, 29 ], [ 29, 29 ] ]
    },
    110: {
        item_id: 910,
        level: 70,
        chance: .4,
        pattern: [ [ 911, 911 ], [ 253, 253 ], [ 253, 253 ], [ 253, 253 ] ]
    },
    111: {
        item_id: 904,
        level: 95,
        chance: .05,
        pattern: [ [ 34, 50, 291 ], [ 384, 658 ] ]
    },
    112: {
        item_id: 909,
        level: 95,
        chance: .3,
        pattern: [ [ 666, 904, 668 ], [ 904, -1, 904 ] ]
    },
    113: {
        item_id: 891,
        level: 1,
        chance: 1,
        pattern: [ [ -1, 901, -1 ], [ 900, 898, 903 ] ]
    },
    114: {
        item_id: 896,
        level: 1,
        chance: 1,
        pattern: [ [ 711, 895, 710 ] ]
    },
    115: {
        item_id: 585,
        level: 75,
        chance: .25,
        pattern: [ [ 500 ], [ 263 ], [ 201 ] ]
    },
    116: {
        item_id: 585,
        level: 75,
        chance: .45,
        pattern: [ [ 500 ], [ 258 ], [ 201 ] ]
    },
    117: {
        item_id: 585,
        level: 75,
        chance: .65,
        pattern: [ [ 500 ], [ 257 ], [ 201 ] ]
    },
    118: {
        item_id: 585,
        level: 75,
        chance: .85,
        pattern: [ [ 500 ], [ 262 ], [ 201 ] ]
    },
    119: {
        item_id: 584,
        level: 75,
        chance: .25,
        pattern: [ [ 500 ], [ 263 ], [ 195 ] ]
    },
    120: {
        item_id: 584,
        level: 75,
        chance: .45,
        pattern: [ [ 500 ], [ 258 ], [ 195 ] ]
    },
    121: {
        item_id: 584,
        level: 75,
        chance: .65,
        pattern: [ [ 500 ], [ 257 ], [ 195 ] ]
    },
    122: {
        item_id: 584,
        level: 75,
        chance: .85,
        pattern: [ [ 500 ], [ 262 ], [ 195 ] ]
    },
    123: {
        item_id: 583,
        level: 75,
        chance: .25,
        pattern: [ [ 500 ], [ 263 ], [ 199 ] ]
    },
    124: {
        item_id: 583,
        level: 75,
        chance: .45,
        pattern: [ [ 500 ], [ 258 ], [ 199 ] ]
    },
    125: {
        item_id: 583,
        level: 75,
        chance: .65,
        pattern: [ [ 500 ], [ 257 ], [ 199 ] ]
    },
    126: {
        item_id: 583,
        level: 75,
        chance: .85,
        pattern: [ [ 500 ], [ 262 ], [ 199 ] ]
    },
    127: {
        item_id: 932,
        level: 38,
        chance: .7,
        pattern: [ [ 50, 50 ], [ 50, 50 ], [ 254, 254 ] ]
    },
    128: {
        item_id: 934,
        level: 45,
        chance: .5,
        pattern: [ [ 50, 254, 50 ], [ 50, 254, 50 ], [ 50, 254, 50 ] ]
    },
    129: {
        item_id: 936,
        level: 40,
        chance: .6,
        pattern: [ [ -1, 254, 254, -1 ], [ -1, 50, 50, -1 ], [ 50, -1, -1, 50 ] ]
    },
    130: {
        item_id: 938,
        level: 31,
        chance: .6,
        pattern: [ [ -1, 231, -1 ], [ 50, 231, 50 ], [ -1, 50, -1 ], [ -1, 50, -1 ] ]
    },
    131: {
        item_id: 940,
        level: 32,
        chance: .6,
        pattern: [ [ -1, 231, 231 ], [ 231, -1, -1 ], [ 231, 50, -1 ], [ 50, 50, -1 ] ]
    },
    132: {
        item_id: 942,
        level: 33,
        chance: .5,
        pattern: [ [ 231, 231 ], [ 231, 231 ], [ 231, 231 ], [ 50, 50 ] ]
    },
    133: {
        item_id: 944,
        level: 44,
        chance: .5,
        pattern: [ [ -1, -1, 231, 231 ], [ -1, -1, 231, 231 ], [ 50, 50, 231, 231 ], [ -1, -1, 231, 231 ] ]
    },
    134: {
        item_id: 951,
        level: 55,
        chance: .3,
        pattern: [ [ 949, 949, 949 ], [ 949, 949, 949 ] ]
    },
    135: {
        item_id: 952,
        level: 70,
        chance: .3,
        pattern: [ [ 950, 950, 950 ], [ 950, 950, 950 ] ]
    },
    136: {
        item_id: 953,
        level: 1,
        chance: .4,
        pattern: [ [ 359, 947, 360 ] ]
    },
    137: {
        item_id: 969,
        level: 88,
        chance: .6,
        pattern: [ [ -1, 982, 982, -1 ], [ -1, 982, 982, -1 ], [ 982, -1, -1, 982 ] ]
    },
    138: {
        item_id: 962,
        level: 94,
        chance: .6,
        pattern: [ [ 982, 982, 982 ], [ 982, 982, 982 ], [ 982, 982, 982 ], [ 982, 982, 982 ] ]
    },
    139: {
        item_id: 977,
        level: 86,
        chance: .6,
        pattern: [ [ 982, 982 ], [ 982, 982 ] ]
    },
    140: {
        item_id: 982,
        level: 85,
        chance: .4,
        pattern: [ [ 983, 983 ], [ 983, 983 ] ]
    },
    141: {
        item_id: 974,
        level: 95,
        chance: .3,
        pattern: [ [ 981, 981, 981 ], [ 981, 981, 981 ], [ 911, -1, 911 ], [ 911, -1, 911 ] ]
    },
    142: {
        item_id: 1032,
        level: 97,
        chance: .3,
        pattern: [ [ 981, 981, 981, 981 ], [ 981, 981, 981, 981 ], [ 911, 911, 911, 911 ] ]
    },
    143: {
        item_id: 972,
        level: 99,
        chance: .3,
        pattern: [ [ 981, 981, 981, 981 ], [ 981, 981, 981, 981 ], [ -1, 981, 981, -1 ], [ 911, 911, 911, 911 ] ]
    },
    144: {
        item_id: 968,
        level: 99,
        chance: .2,
        pattern: [ [ 201, 201, 197, 197 ], [ 199, 199, 199, 195 ], [ 195, 386, 388, 390 ] ]
    },
    145: {
        item_id: 966,
        level: 99,
        chance: .3,
        pattern: [ [ 968, 35, 934, 968 ], [ 968, 159, 160, 968 ], [ -1, 158, -1, -1 ] ]
    },
    146: {
        item_id: 980,
        level: 75,
        chance: .3,
        pattern: [ [ 388, 450, 388 ], [ 388, -1, 388 ] ]
    },
    147: {
        item_id: 985,
        level: 84,
        chance: .3,
        pattern: [ [ 388, 456, 388 ], [ 388, -1, 388 ], [ 388, -1, 388 ] ]
    },
    148: {
        item_id: 987,
        level: 80,
        chance: .3,
        pattern: [ [ 388, -1, 388 ], [ 388, 482, 388 ] ]
    },
    149: {
        item_id: 976,
        level: 16,
        chance: .9,
        pattern: [ [ -1, 34, -1 ], [ 34, -1, 34 ], [ 34, -1, 34 ] ]
    },
    150: {
        item_id: 587,
        level: 80,
        chance: .25,
        pattern: [ [ 501 ], [ 263 ], [ 195 ] ]
    },
    151: {
        item_id: 587,
        level: 80,
        chance: .45,
        pattern: [ [ 501 ], [ 258 ], [ 195 ] ]
    },
    152: {
        item_id: 587,
        level: 80,
        chance: .65,
        pattern: [ [ 501 ], [ 257 ], [ 195 ] ]
    },
    153: {
        item_id: 587,
        level: 80,
        chance: .85,
        pattern: [ [ 501 ], [ 262 ], [ 195 ] ]
    },
    154: {
        item_id: 586,
        level: 80,
        chance: .25,
        pattern: [ [ 501 ], [ 263 ], [ 201 ] ]
    },
    155: {
        item_id: 586,
        level: 80,
        chance: .45,
        pattern: [ [ 501 ], [ 258 ], [ 201 ] ]
    },
    156: {
        item_id: 586,
        level: 80,
        chance: .65,
        pattern: [ [ 501 ], [ 257 ], [ 201 ] ]
    },
    157: {
        item_id: 586,
        level: 80,
        chance: .85,
        pattern: [ [ 501 ], [ 262 ], [ 201 ] ]
    },
    158: {
        item_id: 588,
        level: 80,
        chance: .25,
        pattern: [ [ 501 ], [ 263 ], [ 199 ] ]
    },
    159: {
        item_id: 588,
        level: 80,
        chance: .45,
        pattern: [ [ 501 ], [ 258 ], [ 199 ] ]
    },
    160: {
        item_id: 588,
        level: 80,
        chance: .65,
        pattern: [ [ 501 ], [ 257 ], [ 199 ] ]
    },
    161: {
        item_id: 588,
        level: 80,
        chance: .85,
        pattern: [ [ 501 ], [ 262 ], [ 199 ] ]
    },
    162: {
        item_id: 986,
        level: 92,
        chance: .4,
        pattern: [ [ 388, 867, 388 ], [ 388, 454, 388 ] ]
    },
    163: {
        item_id: 984,
        level: 86,
        chance: .4,
        pattern: [ [ 388, 863, 388 ], [ -1, 451, -1 ] ]
    },
    164: {
        item_id: 979,
        level: 89,
        chance: .4,
        pattern: [ [ 388, 859, 388 ], [ -1, 483, -1 ] ]
    },
    165: {
        item_id: 1038,
        level: 98,
        chance: .2,
        pattern: [ [ 981, 981, 981, -1 ], [ 981, 981, 981, -1 ], [ 981, 981, 981, -1 ], [ 911, 911, 911, 981 ] ]
    },
    166: {
        item_id: 1037,
        level: 96,
        chance: .3,
        pattern: [ [ 167, 904 ] ]
    },
    167: {
        item_id: 175,
        level: 1,
        chance: .8,
        pattern: [ [ 174, 174, 174 ] ]
    },
    168: {
        item_id: 179,
        level: 1,
        chance: .8,
        pattern: [ [ 178, 178, 178 ] ]
    },
    169: {
        item_id: 1053,
        level: 1,
        chance: 1,
        pattern: [ [ 710, 1048, 710 ] ]
    },
    170: {
        item_id: 1049,
        level: 1,
        chance: 1,
        pattern: [ [ 1048 ], [ 710 ], [ 710 ] ]
    },
    171: {
        item_id: 1063,
        level: 1,
        chance: 1,
        pattern: [ [ 1062, 710, 691 ], [ 710, -1, 710 ] ]
    },
    172: {
        item_id: 1064,
        level: 1,
        chance: 1,
        pattern: [ [ 895, 697, 895 ], [ 710, 710, 710 ] ]
    },
    173: {
        item_id: 1078,
        level: 72,
        chance: .3,
        pattern: [ [ 388, 1074, 388 ], [ 388, -1, 388 ] ]
    },
    174: {
        item_id: 1079,
        level: 84,
        chance: .4,
        pattern: [ [ 388, 1076, 388 ], [ -1, 1077, -1 ] ]
    },
    175: {
        item_id: 1080,
        level: 75,
        chance: .4,
        pattern: [ [ -1, 195, -1 ], [ 216, 195, 224 ] ]
    },
    176: {
        item_id: 1065,
        level: 79,
        chance: .3,
        pattern: [ [ -1, 224, -1 ], [ 386, 224, 386 ] ]
    },
    177: {
        item_id: 1066,
        level: 84,
        chance: .5,
        pattern: [ [ -1, 224, -1 ], [ 982, 224, 982 ] ]
    },
    178: {
        item_id: 1067,
        level: 90,
        chance: .3,
        pattern: [ [ 981, 911 ], [ 981, 911 ], [ 981, 911 ], [ 981, 911 ] ]
    },
    179: {
        item_id: 1068,
        level: 98,
        chance: .3,
        pattern: [ [ 968, 968 ], [ 340, 1080 ], [ 344, 1065 ], [ 342, -1 ] ]
    },
    180: {
        item_id: 1126,
        level: 1,
        chance: .7,
        pattern: [ [ 1125, 1125, 1125, 1125 ] ]
    },
    181: {
        item_id: 1127,
        level: 1,
        chance: .6,
        pattern: [ [ 1126, 1126, 1126 ] ]
    },
    182: {
        item_id: 1128,
        level: 1,
        chance: .8,
        pattern: [ [ 1127, 1127, 1127 ] ]
    },
    183: {
        item_id: 1147,
        level: 1,
        chance: .1,
        pattern: [ [ 1146, 1145, 1144 ] ]
    },
    184: {
        item_id: 1148,
        level: 1,
        chance: 1,
        pattern: [ [ 1147, 447, 1147 ] ]
    },
    185: {
        item_id: 766,
        level: 1,
        chance: 1,
        pattern: [ [ 765, 765, 765, 765 ] ]
    },
    186: {
        item_id: 1125,
        level: 1,
        chance: .9,
        pattern: [ [ 64, 176 ] ]
    },
    187: {
        item_id: 176,
        level: 1,
        chance: .9,
        pattern: [ [ 64, 1125 ] ]
    },
    188: {
        item_id: 64,
        level: 1,
        chance: .9,
        pattern: [ [ 176, 1125 ] ]
    },
    189: {
        item_id: 1126,
        level: 1,
        chance: .9,
        pattern: [ [ 173, 177 ] ]
    },
    190: {
        item_id: 177,
        level: 1,
        chance: .9,
        pattern: [ [ 173, 1126 ] ]
    },
    191: {
        item_id: 173,
        level: 1,
        chance: .9,
        pattern: [ [ 177, 1126 ] ]
    },
    192: {
        item_id: 1127,
        level: 1,
        chance: .9,
        pattern: [ [ 174, 178 ] ]
    },
    193: {
        item_id: 178,
        level: 1,
        chance: .9,
        pattern: [ [ 174, 1127 ] ]
    },
    194: {
        item_id: 174,
        level: 1,
        chance: .9,
        pattern: [ [ 178, 1127 ] ]
    },
    195: {
        item_id: 1128,
        level: 1,
        chance: .9,
        pattern: [ [ 175, 179 ] ]
    },
    196: {
        item_id: 179,
        level: 1,
        chance: .9,
        pattern: [ [ 175, 1128 ] ]
    },
    197: {
        item_id: 175,
        level: 1,
        chance: .9,
        pattern: [ [ 179, 1128 ] ]
    },
    198: {
        item_id: 1150,
        level: 1,
        chance: .01,
        pattern: [ [ 6, 6, 6, 6 ], [ 6, 6, 6, 6 ], [ -1, 6, 6, -1 ] ]
    },
    199: {
        item_id: 1174,
        level: 1,
        chance: .9,
        pattern: [ [ 1172, 1172, 1172, 1172 ], [ 1173, 1172, 1172, 1173 ], [ 1172, 1172, 1172, 1172 ] ]
    },
    200: {
        item_id: 1171,
        level: 1,
        chance: 1,
        pattern: [ [ 1172, 1174, 1174, 1172 ], [ 1173, 1172, 1172, 1173 ], [ 1172, 1172, 1172, 1172 ], [ 1172, 1173, 1173, 1172 ] ]
    },
    201: {
        item_id: 589,
        level: 68,
        chance: .25,
        pattern: [ [ 498 ], [ 263 ], [ 197 ] ]
    },
    202: {
        item_id: 589,
        level: 68,
        chance: .45,
        pattern: [ [ 498 ], [ 258 ], [ 197 ] ]
    },
    203: {
        item_id: 589,
        level: 68,
        chance: .65,
        pattern: [ [ 498 ], [ 257 ], [ 197 ] ]
    },
    204: {
        item_id: 589,
        level: 68,
        chance: .85,
        pattern: [ [ 498 ], [ 262 ], [ 197 ] ]
    },
    205: {
        item_id: 590,
        level: 68,
        chance: .25,
        pattern: [ [ 498 ], [ 263 ], [ 199 ] ]
    },
    206: {
        item_id: 590,
        level: 68,
        chance: .45,
        pattern: [ [ 498 ], [ 258 ], [ 199 ] ]
    },
    207: {
        item_id: 590,
        level: 68,
        chance: .65,
        pattern: [ [ 498 ], [ 257 ], [ 199 ] ]
    },
    208: {
        item_id: 590,
        level: 68,
        chance: .85,
        pattern: [ [ 498 ], [ 262 ], [ 199 ] ]
    },
    209: {
        item_id: 591,
        level: 68,
        chance: .25,
        pattern: [ [ 498 ], [ 263 ], [ 195 ] ]
    },
    210: {
        item_id: 591,
        level: 68,
        chance: .45,
        pattern: [ [ 498 ], [ 258 ], [ 195 ] ]
    },
    211: {
        item_id: 591,
        level: 68,
        chance: .65,
        pattern: [ [ 498 ], [ 257 ], [ 195 ] ]
    },
    212: {
        item_id: 591,
        level: 68,
        chance: .85,
        pattern: [ [ 498 ], [ 262 ], [ 195 ] ]
    },
    213: {
        item_id: 592,
        level: 68,
        chance: .25,
        pattern: [ [ 498 ], [ 263 ], [ 201 ] ]
    },
    214: {
        item_id: 592,
        level: 68,
        chance: .45,
        pattern: [ [ 498 ], [ 258 ], [ 201 ] ]
    },
    215: {
        item_id: 592,
        level: 68,
        chance: .65,
        pattern: [ [ 498 ], [ 257 ], [ 201 ] ]
    },
    216: {
        item_id: 592,
        level: 68,
        chance: .85,
        pattern: [ [ 498 ], [ 262 ], [ 201 ] ]
    },
    217: {
        item_id: 258,
        level: 1,
        chance: .7,
        pattern: [ [ 263, 263, 263, 263 ] ]
    },
    218: {
        item_id: 257,
        level: 1,
        chance: .6,
        pattern: [ [ 258, 258, 258 ] ]
    },
    219: {
        item_id: 1261,
        level: 98,
        chance: .4,
        pattern: [ [ 1201, 951 ] ]
    },
    220: {
        item_id: 1296,
        level: 90,
        chance: .5,
        pattern: [ [ 890, 1307 ] ]
    },
    221: {
        item_id: 1263,
        level: 105,
        chance: .5,
        pattern: [ [ 1308, 1232, 1308 ] ]
    },
    222: {
        item_id: 1271,
        level: 38,
        chance: .3,
        pattern: [ [ 50, 50, 50, 50 ], [ 50, 50, 50, 50 ], [ 50, 195, 195, 50 ], [ -1, -1, 195, -1 ] ]
    },
    223: {
        item_id: 1298,
        level: 56,
        chance: .35,
        pattern: [ [ 1301, 1301, 1301, 1301 ], [ 1301, 1301, 1301, 1301 ], [ 195, 195, 195, 195 ], [ -1, 195, 195, -1 ] ]
    },
    224: {
        item_id: 1284,
        level: 30,
        chance: .5,
        pattern: [ [ 197, 202, 202, 197 ], [ 197, 202, 202, 197 ], [ -1, 202, 202, 197 ] ]
    },
    225: {
        item_id: 1273,
        level: 50,
        chance: .3,
        pattern: [ [ 216, 250, 250, 216 ], [ 216, 250, 250, 216 ], [ 216, 250, 250, 216 ] ]
    },
    226: {
        item_id: 1288,
        level: 58,
        chance: .4,
        pattern: [ [ 252, 224, 252 ], [ 252, 224, 252 ], [ 252, -1, 252 ] ]
    },
    227: {
        item_id: 1259,
        level: 105,
        chance: .4,
        pattern: [ [ 1296, 1277 ] ]
    },
    228: {
        item_id: 1279,
        level: 100,
        chance: .5,
        pattern: [ [ 388, 388, 388, 388 ], [ 388, 388, 388, 388 ], [ -1, -1, -1, 1212 ] ]
    },
    229: {
        item_id: 1304,
        level: 1,
        chance: .7,
        pattern: [ [ 1303, 1303, 1303, 1303 ] ]
    },
    230: {
        item_id: 1305,
        level: 1,
        chance: .6,
        pattern: [ [ 1304, 1304, 1304 ] ]
    },
    231: {
        item_id: 1306,
        level: 1,
        chance: .8,
        pattern: [ [ 1305, 1305, 1305 ] ]
    },
    232: {
        item_id: 1309,
        level: 80,
        chance: 1,
        pattern: [ [ 608, 1312, 1312, 1312 ] ]
    },
    233: {
        item_id: 1310,
        level: 80,
        chance: 1,
        pattern: [ [ 608, 1311, 1311, 1311 ] ]
    },
    234: {
        item_id: 1339,
        level: 80,
        chance: 1,
        pattern: [ [ 1340, 1341, 1342, 1343 ], [ 447, -1, -1, -1 ] ]
    },
    235: {
        item_id: 1362,
        level: 80,
        chance: 1,
        pattern: [ [ 994, 1e3, 1004, 1009 ] ]
    },
    236: {
        item_id: 1363,
        level: 80,
        chance: 1,
        pattern: [ [ 995, 999, 1005, 1010 ] ]
    },
    237: {
        item_id: 765,
        level: 1,
        chance: 1,
        pattern: [ [ 764, 764, 764, 764 ] ]
    },
    238: {
        item_id: 1397,
        level: 1,
        chance: .1,
        pattern: [ [ 1399, 1398 ] ]
    },
    239: {
        item_id: 1437,
        level: 1,
        chance: .1,
        pattern: [ [ 1438, 1438, 1438 ], [ 1438, 1438, 1438 ], [ 1438, 1438, 1438 ] ]
    },
    240: {
        item_id: 1436,
        level: 1,
        chance: .1,
        pattern: [ [ 1438, 1438 ], [ 1438, 1438 ], [ 1438, 1438 ] ]
    },
    241: {
        item_id: 1449,
        level: 90,
        chance: .6,
        pattern: [ [ 1448 ], [ 255 ], [ 597 ] ]
    },
    242: {
        item_id: 1451,
        level: 103,
        chance: .4,
        pattern: [ [ 1448, 1448, 1448 ], [ 1448, 1448, 255 ], [ -1, 1448, 255 ], [ -1, -1, 597 ] ]
    },
    243: {
        item_id: 1453,
        level: 115,
        chance: .3,
        pattern: [ [ -1, 1448, 1448, -1 ], [ -1, 1448, 1448, -1 ], [ 597, 1448, 1448, 597 ], [ 597, 255, 255, 597 ] ]
    },
    244: {
        item_id: 1469,
        level: 110,
        chance: .15,
        pattern: [ [ -1, 1448, 1448, -1 ], [ 1448, 255, 255, 1448 ], [ 1448, 597, 597, 1448 ], [ -1, 1448, 1448, -1 ] ]
    },
    245: {
        item_id: 1478,
        level: 120,
        chance: .15,
        pattern: [ [ 1448, 255, 1448 ], [ 1448, 255, 1448 ], [ 1448, 255, 1448 ] ]
    },
    246: {
        item_id: 1489,
        level: 100,
        chance: .4,
        pattern: [ [ -1, 1448, -1 ], [ 1448, -1, 1448 ], [ 1448, -1, 1448 ] ]
    },
    247: {
        item_id: 1498,
        level: 84,
        chance: .3,
        pattern: [ [ -1, 658, 658, -1 ], [ -1, 195, 195, -1 ], [ 195, -1, -1, 195 ] ]
    },
    248: {
        item_id: 1500,
        level: 118,
        chance: .3,
        pattern: [ [ -1, 255, 255, -1 ], [ -1, 1448, 1448, -1 ], [ 1448, -1, -1, 1448 ] ]
    },
    249: {
        item_id: 1582,
        level: 106,
        chance: 1,
        pattern: [ [ -1, 1448, -1 ], [ 255, 1448, 255 ] ]
    },
    250: {
        item_id: 1266,
        level: 1,
        chance: .5,
        pattern: [ [ 1302, 1302, 1302 ], [ 1302, 1302, 1302 ], [ 1302, -1, 1302 ] ]
    },
    251: {
        item_id: 1457,
        level: 115,
        chance: .25,
        pattern: [ [ 1579, 1579 ], [ 1579, 1579 ], [ 1579, 1579 ], [ 255, 255 ] ]
    },
    252: {
        item_id: 1471,
        level: 115,
        chance: .25,
        pattern: [ [ -1, 1579, 1579, -1 ], [ 1579, 255, 255, 1579 ], [ 1579, 255, 255, 1579 ], [ -1, 1579, 1579, -1 ] ]
    },
    253: {
        item_id: 1480,
        level: 115,
        chance: .25,
        pattern: [ [ 1579, 255, 1579 ], [ 1579, 255, 1579 ], [ 1579, 255, 1579 ] ]
    },
    254: {
        item_id: 1491,
        level: 115,
        chance: .25,
        pattern: [ [ -1, 1579, -1 ], [ 1579, -1, 1579 ], [ 255, -1, 255 ] ]
    },
    255: {
        item_id: 1504,
        level: 115,
        chance: .25,
        pattern: [ [ -1, 255, 255, -1 ], [ -1, 1579, 1579, -1 ], [ 1579, -1, -1, 1579 ] ]
    },
    256: {
        item_id: 1584,
        level: 115,
        chance: .25,
        pattern: [ [ -1, 1579, -1 ], [ 255, 1579, 255 ] ]
    },
    257: {
        item_id: 1586,
        level: 120,
        chance: .2,
        pattern: [ [ -1, 1581, -1 ], [ 256, 1581, 256 ] ]
    },
    258: {
        item_id: 1459,
        level: 120,
        chance: .2,
        pattern: [ [ 1581, 1581 ], [ 1581, 1581 ], [ 1581, 1581 ], [ 256, 256 ] ]
    },
    259: {
        item_id: 1473,
        level: 120,
        chance: .2,
        pattern: [ [ -1, 1581, 1581, -1 ], [ 1581, 256, 256, 1581 ], [ 1581, 256, 256, 1581 ], [ -1, 1581, 1581, -1 ] ]
    },
    260: {
        item_id: 1482,
        level: 120,
        chance: .2,
        pattern: [ [ 1581, 256, 1581 ], [ 1581, 256, 1581 ], [ 1581, 256, 1581 ] ]
    },
    261: {
        item_id: 1493,
        level: 120,
        chance: .2,
        pattern: [ [ -1, 1581, -1 ], [ 1581, -1, 1581 ], [ 256, -1, 256 ] ]
    },
    262: {
        item_id: 1506,
        level: 120,
        chance: .2,
        pattern: [ [ -1, 256, 256, -1 ], [ -1, 1581, 1581, -1 ], [ 1581, -1, -1, 1581 ] ]
    },
    263: {
        item_id: 1627,
        level: 1,
        chance: .5,
        pattern: [ [ 1626, 1007 ] ]
    },
    264: {
        item_id: 1629,
        level: 1,
        chance: .5,
        pattern: [ [ 1626, 1008 ] ]
    },
    265: {
        item_id: 1631,
        level: 1,
        chance: .4,
        pattern: [ [ 1626, 1009 ] ]
    },
    266: {
        item_id: 1633,
        level: 1,
        chance: .4,
        pattern: [ [ 1626, 1010 ] ]
    },
    267: {
        item_id: 1635,
        level: 1,
        chance: .3,
        pattern: [ [ 1626, 1011 ] ]
    },
    268: {
        item_id: 1637,
        level: 1,
        chance: .3,
        pattern: [ [ 1626, 1362, 1363 ] ]
    },
    269: {
        item_id: 1680,
        level: 1,
        chance: .1,
        pattern: [ [ 296, 1012, 1012 ], [ 296, 1012, 1012 ], [ 296, 1012, 1012 ], [ 296, 1012, 1012 ] ]
    },
    270: {
        item_id: 1667,
        level: 115,
        chance: .25,
        pattern: [ [ 1579, 1579 ], [ 1579, 1579 ], [ 1579, 1579 ], [ 1579, 1579 ] ]
    },
    271: {
        item_id: 1649,
        level: 115,
        chance: .25,
        pattern: [ [ 1579 ], [ 1579 ], [ 1579 ], [ 1579 ] ]
    },
    272: {
        item_id: 1669,
        level: 120,
        chance: .2,
        pattern: [ [ 1581, 1581 ], [ 1581, 1581 ], [ 1581, 1581 ], [ 1581, 1581 ] ]
    },
    273: {
        item_id: 1651,
        level: 120,
        chance: .2,
        pattern: [ [ 1581 ], [ 1581 ], [ 1581 ], [ 1581 ] ]
    },
    274: {
        item_id: 1686,
        level: 8,
        chance: .55,
        pattern: [ [ 274 ], [ 274 ], [ 274 ] ]
    },
    275: {
        item_id: 1688,
        level: 90,
        chance: .25,
        pattern: [ [ 1687 ], [ 263 ], [ 197 ] ]
    },
    276: {
        item_id: 1688,
        level: 90,
        chance: .45,
        pattern: [ [ 1687 ], [ 258 ], [ 197 ] ]
    },
    277: {
        item_id: 1688,
        level: 90,
        chance: .65,
        pattern: [ [ 1687 ], [ 257 ], [ 197 ] ]
    },
    278: {
        item_id: 1688,
        level: 90,
        chance: .85,
        pattern: [ [ 1687 ], [ 262 ], [ 197 ] ]
    },
    279: {
        item_id: 1689,
        level: 90,
        chance: .25,
        pattern: [ [ 1687 ], [ 263 ], [ 201 ] ]
    },
    280: {
        item_id: 1689,
        level: 90,
        chance: .45,
        pattern: [ [ 1687 ], [ 258 ], [ 201 ] ]
    },
    281: {
        item_id: 1689,
        level: 90,
        chance: .65,
        pattern: [ [ 1687 ], [ 257 ], [ 201 ] ]
    },
    282: {
        item_id: 1689,
        level: 90,
        chance: .85,
        pattern: [ [ 1687 ], [ 262 ], [ 201 ] ]
    },
    283: {
        item_id: 1690,
        level: 90,
        chance: .25,
        pattern: [ [ 1687 ], [ 263 ], [ 199 ] ]
    },
    284: {
        item_id: 1690,
        level: 90,
        chance: .45,
        pattern: [ [ 1687 ], [ 258 ], [ 199 ] ]
    },
    285: {
        item_id: 1690,
        level: 90,
        chance: .65,
        pattern: [ [ 1687 ], [ 257 ], [ 199 ] ]
    },
    286: {
        item_id: 1690,
        level: 90,
        chance: .85,
        pattern: [ [ 1687 ], [ 262 ], [ 199 ] ]
    },
    287: {
        item_id: 1691,
        level: 90,
        chance: .25,
        pattern: [ [ 1687 ], [ 263 ], [ 195 ] ]
    },
    288: {
        item_id: 1691,
        level: 90,
        chance: .45,
        pattern: [ [ 1687 ], [ 258 ], [ 195 ] ]
    },
    289: {
        item_id: 1691,
        level: 90,
        chance: .65,
        pattern: [ [ 1687 ], [ 257 ], [ 195 ] ]
    },
    290: {
        item_id: 1691,
        level: 90,
        chance: .85,
        pattern: [ [ 1687 ], [ 262 ], [ 195 ] ]
    },
    291: {
        item_id: 1693,
        level: 90,
        chance: .25,
        pattern: [ [ 1692 ], [ 263 ], [ 197 ] ]
    },
    292: {
        item_id: 1693,
        level: 90,
        chance: .45,
        pattern: [ [ 1692 ], [ 258 ], [ 197 ] ]
    },
    293: {
        item_id: 1693,
        level: 90,
        chance: .65,
        pattern: [ [ 1692 ], [ 257 ], [ 197 ] ]
    },
    294: {
        item_id: 1693,
        level: 90,
        chance: .85,
        pattern: [ [ 1692 ], [ 262 ], [ 197 ] ]
    },
    295: {
        item_id: 1696,
        level: 90,
        chance: .25,
        pattern: [ [ 1692 ], [ 263 ], [ 201 ] ]
    },
    296: {
        item_id: 1696,
        level: 90,
        chance: .45,
        pattern: [ [ 1692 ], [ 258 ], [ 201 ] ]
    },
    297: {
        item_id: 1696,
        level: 90,
        chance: .65,
        pattern: [ [ 1692 ], [ 257 ], [ 201 ] ]
    },
    298: {
        item_id: 1696,
        level: 90,
        chance: .85,
        pattern: [ [ 1692 ], [ 262 ], [ 201 ] ]
    },
    299: {
        item_id: 1694,
        level: 90,
        chance: .25,
        pattern: [ [ 1692 ], [ 263 ], [ 199 ] ]
    },
    300: {
        item_id: 1694,
        level: 90,
        chance: .45,
        pattern: [ [ 1692 ], [ 258 ], [ 199 ] ]
    },
    301: {
        item_id: 1694,
        level: 90,
        chance: .65,
        pattern: [ [ 1692 ], [ 257 ], [ 199 ] ]
    },
    302: {
        item_id: 1694,
        level: 90,
        chance: .85,
        pattern: [ [ 1692 ], [ 262 ], [ 199 ] ]
    },
    303: {
        item_id: 1695,
        level: 90,
        chance: .25,
        pattern: [ [ 1692 ], [ 263 ], [ 195 ] ]
    },
    304: {
        item_id: 1695,
        level: 90,
        chance: .45,
        pattern: [ [ 1692 ], [ 258 ], [ 195 ] ]
    },
    305: {
        item_id: 1695,
        level: 90,
        chance: .65,
        pattern: [ [ 1692 ], [ 257 ], [ 195 ] ]
    },
    306: {
        item_id: 1695,
        level: 90,
        chance: .85,
        pattern: [ [ 1692 ], [ 262 ], [ 195 ] ]
    },
    307: {
        item_id: 1698,
        level: 95,
        chance: .25,
        pattern: [ [ 1697 ], [ 263 ], [ 197 ] ]
    },
    308: {
        item_id: 1698,
        level: 95,
        chance: .45,
        pattern: [ [ 1697 ], [ 258 ], [ 197 ] ]
    },
    309: {
        item_id: 1698,
        level: 95,
        chance: .65,
        pattern: [ [ 1697 ], [ 257 ], [ 197 ] ]
    },
    310: {
        item_id: 1698,
        level: 95,
        chance: .85,
        pattern: [ [ 1697 ], [ 262 ], [ 197 ] ]
    },
    311: {
        item_id: 1699,
        level: 95,
        chance: .25,
        pattern: [ [ 1697 ], [ 263 ], [ 201 ] ]
    },
    312: {
        item_id: 1699,
        level: 95,
        chance: .45,
        pattern: [ [ 1697 ], [ 258 ], [ 201 ] ]
    },
    313: {
        item_id: 1699,
        level: 95,
        chance: .65,
        pattern: [ [ 1697 ], [ 257 ], [ 201 ] ]
    },
    314: {
        item_id: 1699,
        level: 95,
        chance: .85,
        pattern: [ [ 1697 ], [ 262 ], [ 201 ] ]
    },
    315: {
        item_id: 1700,
        level: 95,
        chance: .25,
        pattern: [ [ 1697 ], [ 263 ], [ 199 ] ]
    },
    316: {
        item_id: 1700,
        level: 95,
        chance: .45,
        pattern: [ [ 1697 ], [ 258 ], [ 199 ] ]
    },
    317: {
        item_id: 1700,
        level: 95,
        chance: .65,
        pattern: [ [ 1697 ], [ 257 ], [ 199 ] ]
    },
    318: {
        item_id: 1700,
        level: 95,
        chance: .85,
        pattern: [ [ 1697 ], [ 262 ], [ 199 ] ]
    },
    319: {
        item_id: 1701,
        level: 95,
        chance: .25,
        pattern: [ [ 1697 ], [ 263 ], [ 195 ] ]
    },
    320: {
        item_id: 1701,
        level: 95,
        chance: .45,
        pattern: [ [ 1697 ], [ 258 ], [ 195 ] ]
    },
    321: {
        item_id: 1701,
        level: 95,
        chance: .65,
        pattern: [ [ 1697 ], [ 257 ], [ 195 ] ]
    },
    322: {
        item_id: 1701,
        level: 95,
        chance: .85,
        pattern: [ [ 1697 ], [ 262 ], [ 195 ] ]
    },
    323: {
        item_id: 1703,
        level: 99,
        chance: .25,
        pattern: [ [ 1702 ], [ 263 ], [ 197 ] ]
    },
    324: {
        item_id: 1703,
        level: 99,
        chance: .45,
        pattern: [ [ 1702 ], [ 258 ], [ 197 ] ]
    },
    325: {
        item_id: 1703,
        level: 99,
        chance: .65,
        pattern: [ [ 1702 ], [ 257 ], [ 197 ] ]
    },
    325: {
        item_id: 1703,
        level: 99,
        chance: .85,
        pattern: [ [ 1702 ], [ 262 ], [ 197 ] ]
    },
    326: {
        item_id: 1704,
        level: 99,
        chance: .25,
        pattern: [ [ 1702 ], [ 263 ], [ 201 ] ]
    },
    327: {
        item_id: 1704,
        level: 99,
        chance: .45,
        pattern: [ [ 1702 ], [ 258 ], [ 201 ] ]
    },
    328: {
        item_id: 1704,
        level: 99,
        chance: .65,
        pattern: [ [ 1702 ], [ 257 ], [ 201 ] ]
    },
    329: {
        item_id: 1704,
        level: 99,
        chance: .85,
        pattern: [ [ 1702 ], [ 262 ], [ 201 ] ]
    },
    330: {
        item_id: 1705,
        level: 99,
        chance: .25,
        pattern: [ [ 1702 ], [ 263 ], [ 199 ] ]
    },
    331: {
        item_id: 1705,
        level: 99,
        chance: .45,
        pattern: [ [ 1702 ], [ 258 ], [ 199 ] ]
    },
    332: {
        item_id: 1705,
        level: 99,
        chance: .65,
        pattern: [ [ 1702 ], [ 257 ], [ 199 ] ]
    },
    333: {
        item_id: 1705,
        level: 99,
        chance: .85,
        pattern: [ [ 1702 ], [ 262 ], [ 199 ] ]
    },
    334: {
        item_id: 1706,
        level: 99,
        chance: .25,
        pattern: [ [ 1702 ], [ 263 ], [ 195 ] ]
    },
    335: {
        item_id: 1706,
        level: 99,
        chance: .45,
        pattern: [ [ 1702 ], [ 258 ], [ 195 ] ]
    },
    336: {
        item_id: 1706,
        level: 99,
        chance: .65,
        pattern: [ [ 1702 ], [ 257 ], [ 195 ] ]
    },
    337: {
        item_id: 1706,
        level: 99,
        chance: .85,
        pattern: [ [ 1702 ], [ 262 ], [ 195 ] ]
    },
    338: {
        item_id: 1708,
        level: 94,
        chance: .25,
        pattern: [ [ 1707 ], [ 263 ], [ 197 ] ]
    },
    339: {
        item_id: 1708,
        level: 94,
        chance: .45,
        pattern: [ [ 1707 ], [ 258 ], [ 197 ] ]
    },
    340: {
        item_id: 1708,
        level: 94,
        chance: .65,
        pattern: [ [ 1707 ], [ 257 ], [ 197 ] ]
    },
    341: {
        item_id: 1708,
        level: 94,
        chance: .85,
        pattern: [ [ 1707 ], [ 262 ], [ 197 ] ]
    },
    342: {
        item_id: 1709,
        level: 94,
        chance: .25,
        pattern: [ [ 1707 ], [ 263 ], [ 201 ] ]
    },
    343: {
        item_id: 1709,
        level: 94,
        chance: .45,
        pattern: [ [ 1707 ], [ 258 ], [ 201 ] ]
    },
    344: {
        item_id: 1709,
        level: 94,
        chance: .65,
        pattern: [ [ 1707 ], [ 257 ], [ 201 ] ]
    },
    345: {
        item_id: 1709,
        level: 94,
        chance: .85,
        pattern: [ [ 1707 ], [ 262 ], [ 201 ] ]
    },
    346: {
        item_id: 1710,
        level: 94,
        chance: .25,
        pattern: [ [ 1707 ], [ 263 ], [ 199 ] ]
    },
    347: {
        item_id: 1710,
        level: 94,
        chance: .45,
        pattern: [ [ 1707 ], [ 258 ], [ 199 ] ]
    },
    348: {
        item_id: 1710,
        level: 94,
        chance: .65,
        pattern: [ [ 1707 ], [ 257 ], [ 199 ] ]
    },
    349: {
        item_id: 1710,
        level: 94,
        chance: .85,
        pattern: [ [ 1707 ], [ 262 ], [ 199 ] ]
    },
    350: {
        item_id: 1711,
        level: 94,
        chance: .25,
        pattern: [ [ 1707 ], [ 263 ], [ 195 ] ]
    },
    351: {
        item_id: 1711,
        level: 94,
        chance: .45,
        pattern: [ [ 1707 ], [ 258 ], [ 195 ] ]
    },
    352: {
        item_id: 1711,
        level: 94,
        chance: .65,
        pattern: [ [ 1707 ], [ 257 ], [ 195 ] ]
    },
    353: {
        item_id: 1711,
        level: 94,
        chance: .85,
        pattern: [ [ 1707 ], [ 262 ], [ 195 ] ]
    },
    354: {
        item_id: 1707,
        level: 94,
        chance: .15,
        pattern: [ [ 1448 ], [ 1448 ], [ 1448 ] ]
    },
    355: {
        item_id: 1702,
        level: 99,
        chance: .35,
        pattern: [ [ 968 ], [ 968 ], [ 968 ] ]
    },
    356: {
        item_id: 1712,
        level: 115,
        chance: .25,
        pattern: [ [ 1579 ], [ 1579 ], [ 1579 ] ]
    },
    357: {
        item_id: 1713,
        level: 115,
        chance: .25,
        pattern: [ [ 1712 ], [ 263 ], [ 197 ] ]
    },
    358: {
        item_id: 1713,
        level: 115,
        chance: .45,
        pattern: [ [ 1712 ], [ 258 ], [ 197 ] ]
    },
    359: {
        item_id: 1713,
        level: 115,
        chance: .65,
        pattern: [ [ 1712 ], [ 257 ], [ 197 ] ]
    },
    360: {
        item_id: 1713,
        level: 115,
        chance: .85,
        pattern: [ [ 1712 ], [ 262 ], [ 197 ] ]
    },
    361: {
        item_id: 1714,
        level: 115,
        chance: .25,
        pattern: [ [ 1712 ], [ 263 ], [ 201 ] ]
    },
    362: {
        item_id: 1714,
        level: 115,
        chance: .45,
        pattern: [ [ 1712 ], [ 258 ], [ 201 ] ]
    },
    363: {
        item_id: 1714,
        level: 115,
        chance: .65,
        pattern: [ [ 1712 ], [ 257 ], [ 201 ] ]
    },
    364: {
        item_id: 1714,
        level: 115,
        chance: .85,
        pattern: [ [ 1712 ], [ 262 ], [ 201 ] ]
    },
    365: {
        item_id: 1715,
        level: 115,
        chance: .25,
        pattern: [ [ 1712 ], [ 263 ], [ 199 ] ]
    },
    366: {
        item_id: 1715,
        level: 115,
        chance: .45,
        pattern: [ [ 1712 ], [ 258 ], [ 199 ] ]
    },
    367: {
        item_id: 1715,
        level: 115,
        chance: .65,
        pattern: [ [ 1712 ], [ 257 ], [ 199 ] ]
    },
    368: {
        item_id: 1715,
        level: 115,
        chance: .85,
        pattern: [ [ 1712 ], [ 262 ], [ 199 ] ]
    },
    369: {
        item_id: 1716,
        level: 115,
        chance: .25,
        pattern: [ [ 1712 ], [ 263 ], [ 195 ] ]
    },
    370: {
        item_id: 1716,
        level: 115,
        chance: .45,
        pattern: [ [ 1712 ], [ 258 ], [ 195 ] ]
    },
    371: {
        item_id: 1716,
        level: 115,
        chance: .65,
        pattern: [ [ 1712 ], [ 257 ], [ 195 ] ]
    },
    372: {
        item_id: 1716,
        level: 115,
        chance: .85,
        pattern: [ [ 1712 ], [ 262 ], [ 195 ] ]
    },
    373: {
        item_id: 1717,
        level: 120,
        chance: .2,
        pattern: [ [ 1581 ], [ 1581 ], [ 1581 ] ]
    },
    374: {
        item_id: 1718,
        level: 120,
        chance: .25,
        pattern: [ [ 1717 ], [ 263 ], [ 197 ] ]
    },
    375: {
        item_id: 1718,
        level: 120,
        chance: .45,
        pattern: [ [ 1717 ], [ 258 ], [ 197 ] ]
    },
    376: {
        item_id: 1718,
        level: 120,
        chance: .65,
        pattern: [ [ 1717 ], [ 257 ], [ 197 ] ]
    },
    377: {
        item_id: 1718,
        level: 120,
        chance: .85,
        pattern: [ [ 1717 ], [ 262 ], [ 197 ] ]
    },
    378: {
        item_id: 1719,
        level: 120,
        chance: .25,
        pattern: [ [ 1717 ], [ 263 ], [ 201 ] ]
    },
    379: {
        item_id: 1719,
        level: 120,
        chance: .45,
        pattern: [ [ 1717 ], [ 258 ], [ 201 ] ]
    },
    380: {
        item_id: 1719,
        level: 120,
        chance: .65,
        pattern: [ [ 1717 ], [ 257 ], [ 201 ] ]
    },
    381: {
        item_id: 1719,
        level: 120,
        chance: .85,
        pattern: [ [ 1717 ], [ 262 ], [ 201 ] ]
    },
    382: {
        item_id: 1720,
        level: 120,
        chance: .25,
        pattern: [ [ 1717 ], [ 263 ], [ 199 ] ]
    },
    383: {
        item_id: 1720,
        level: 120,
        chance: .45,
        pattern: [ [ 1717 ], [ 258 ], [ 199 ] ]
    },
    384: {
        item_id: 1720,
        level: 120,
        chance: .65,
        pattern: [ [ 1717 ], [ 257 ], [ 199 ] ]
    },
    385: {
        item_id: 1720,
        level: 120,
        chance: .85,
        pattern: [ [ 1717 ], [ 262 ], [ 199 ] ]
    },
    386: {
        item_id: 1721,
        level: 120,
        chance: .25,
        pattern: [ [ 1717 ], [ 263 ], [ 195 ] ]
    },
    387: {
        item_id: 1721,
        level: 120,
        chance: .45,
        pattern: [ [ 1717 ], [ 258 ], [ 195 ] ]
    },
    388: {
        item_id: 1721,
        level: 120,
        chance: .65,
        pattern: [ [ 1717 ], [ 257 ], [ 195 ] ]
    },
    389: {
        item_id: 1721,
        level: 120,
        chance: .85,
        pattern: [ [ 1717 ], [ 262 ], [ 195 ] ]
    },
    390: {
        item_id: 1697,
        level: 90,
        chance: .3,
        pattern: [ [ 981, 911 ], [ 981, 911 ], [ 981, 911 ] ]
    }
}, FORGE_MATERIAL_XP = {
    34: 10,
    29: 5,
    50: 20,
    291: 30,
    296: 10,
    64: 40,
    173: 80,
    174: 120,
    175: 150,
    176: 40,
    177: 80,
    178: 120,
    179: 150,
    1125: 40,
    1126: 80,
    1127: 120,
    1128: 150,
    1303: 40,
    1304: 80,
    1305: 120,
    1306: 150,
    1581: 100,
    1579: 85,
    1302: 5,
    252: 60,
    250: 40,
    199: 30,
    201: 20,
    216: 30,
    270: 2,
    271: 4,
    272: 4,
    273: 4,
    274: 2,
    371: 80,
    369: 30,
    370: 30,
    384: 45,
    396: 1,
    397: 1,
    398: 1,
    399: 1,
    197: 40,
    386: 50,
    153: 40,
    219: 20,
    1438: 10,
    263: 30,
    258: 40,
    257: 50,
    262: 60,
    195: 60,
    658: 60,
    1448: 75,
    597: 40,
    313: 8,
    224: 40,
    254: 25,
    253: 50,
    911: 100,
    231: 20,
    584: 165,
    949: 60,
    950: 70,
    947: 480,
    983: 10,
    982: 40,
    981: 30,
    968: 300,
    388: 85,
    904: 200,
    1399: 100,
    1398: 100,
    1312: 120,
    1311: 120
}, Market = {
    max_market_offers: 20,
    upgrade_prices: {
        5: 2e6,
        10: 5e6,
        15: 15e6
    },
    upgrade_prices_mos: {
        5: 200,
        10: 500,
        15: 1500
    },
    upgrade_offers_dialog: function() {
        Popup.dual_prompt("Upgrade your max market offers by 5?", thousandSeperate(Market.upgrade_prices[players[0].params.market_offers]) + " coins", function() {
            Socket.send("market_upgrade", {
                type: "coins"
            });
        }, thousandSeperate(Market.upgrade_prices_mos[players[0].params.market_offers]) + " MOS", function() {
            Socket.send("market_upgrade", {
                type: "mos"
            });
        });
    },
    upgrade: function(id, done) {
        var client = clients[id];
        if ("undefined" == typeof client) return {
            status: !1,
            reason: "Player not found"
        };
        if (client.params.market_offers >= Market.max_market_offers) return {
            status: !1,
            reason: "Already upgraded"
        };
        if ("coins" == (done || "coins")) {
            if (client.temp.coins < Market.upgrade_prices[client.params.market_offers]) return {
                status: !1,
                reason: "Not enough coins, need " + thousandSeperate(Market.upgrade_prices[client.params.market_offers]) + " to upgrade"
            };
            client.temp.coins -= Market.upgrade_prices[client.params.market_offers];
        } else {
            if (Private.get(client.id, "balance") < Market.upgrade_prices_mos[client.params.market_offers]) return {
                status: !1,
                reason: "Not enough MOS, need " + thousandSeperate(Market.upgrade_prices_mos[client.params.market_offers]) + " to upgrade"
            };
            Private.set(client.id, "balance", Private.get(client.id, "balance") - Market.upgrade_prices_mos[client.params.market_offers]);
            AREA.sql(clients[id], {
                action: "add_mos",
                player_name: clients[id].name,
                amount: -Market.upgrade_prices_mos[client.params.market_offers]
            });
            Timers.set("update_" + id, function() {
                clients[id] && AREA.sql(clients[id], {
                    action: "mos_balance"
                });
            }, 1e3);
        }
        client.params.market_offers += 5;
        return {
            status: !0
        };
    },
    open: function(e) {
        "undefined" == typeof e && (e = !1);
        addClass(document.getElementById("chest"), "hidden");
        e || (document.getElementById("market_search_category").value = -1, document.getElementById("market_search_results").innerHTML = "", 
        Market.update_search_item_list(), Market.new_offer = !0);
        removeClass(document.getElementById("market"), "hidden");
        removeClass(document.getElementById("market_search_area"), "hidden");
        addClass(document.getElementById("market_offer_area"), "hidden");
        addClass(document.getElementById("market_new_offer"), "hidden");
        addClass(document.getElementById("market_transactions"), "hidden");
        windowOpen = !0;
    },
    open_specific: function(a) {
        switch (a) {
          case "new_offer":
            Market.client_new_offer();
            break;

          case "transactions":
            Market.client_transactions();
        }
    },
    update_search_item_list: function() {
        var color = document.getElementById("market_search_category").value, container = document.getElementById("market_search_item");
        container.innerHTML = "";
        for (var i = -1; i < item_categories[color].items.length; i++) {
            var opt = document.createElement("option");
            opt.selected = -1 == i ? !0 : !1;
            opt.value = -1 == i ? -1 : item_categories[color].items[i].id;
            opt.innerHTML = -1 == i ? "-- All --" : item_categories[color].items[i].name;
            container.appendChild(opt);
        }
    },
    init_item_category: function() {
        item_categories = {};
        item_categories.length = ITEM_CATEGORY_COUNT;
        item_categories[-1] = {
            id: -1,
            name: "-- All categories --",
            items: []
        };
        for (var i = 0; i < ITEM_CATEGORY_COUNT; i++) item_categories[i] = {
            id: i,
            name: ITEM_CATEGORY[i],
            items: []
        };
        for (i = 0; i < item_base.length; i++) item_base[i].params.no_buy || (item_categories[item_base[i].b_t].items.push({
            id: i,
            count: 1e4,
            name: item_base[i].name
        }), item_categories[-1].items.push({
            id: i,
            count: 1e4,
            name: item_base[i].name
        }));
        var element = document.getElementById("market_search_category");
        if ("undefined" != typeof element) {
            for (i = -1; i < ITEM_CATEGORY_COUNT; i++) {
                item_categories[i].items = sortArrayOfObjectsByFieldValueAsc(item_categories[i].items, "name");
                var option = document.createElement("option");
                option.selected = -1 == i ? !0 : !1;
                option.value = item_categories[i].id;
                option.innerHTML = item_categories[i].name;
                element.appendChild(option);
            }
            element.value = -1;
        }
    },
    is_near: function(a, b) {
        return "undefined" == typeof a ? !1 : 300 == a.map ? !0 : "object" == typeof b && b ? 1 >= distance(a.i, a.j, b.i, b.j) && a.map == b.map ? !0 : !1 : !1;
    },
    client_search: function() {
        var a = document.getElementById("market_search_type").value, b = document.getElementById("market_search_item").value, c = document.getElementById("market_search_category").value, e = document.getElementById("market_search_max_price").value, r = document.getElementById("market_search_min_price").value;
        Timers.running("market_cooldown") || (Socket.send("market_search", {
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j,
            options: {
                type: a,
                item_id: b,
                category_id: c,
                max_price: e,
                min_price: r
            }
        }), Timers.set("market_cooldown", null_function, 200));
    },
    client_search_results: function(_readedCustomers) {
        for (var i = 0; i < _readedCustomers.length; i++) _readedCustomers[i].classes = i % 2 ? "row even" : "row";
        market_results = _readedCustomers;
        document.getElementById("market_search_results").innerHTML = Market.client_search_results_template()({
            results: _readedCustomers
        });
    },
    client_transaction_offers: function(files) {
        for (var i = 0; i < files.length; i++) files[i].available = parseInt(files[i].available), 
        files[i].classes = i % 2 ? "row even" : "row";
        market_transaction_offers = files;
        document.getElementById("market_transaction_offers").innerHTML = Market.client_transaction_offers_template()({
            results: files
        });
    },
    client_transaction_items: function(data) {
        for (var i = 0; i < data.length; i++) data[i].classes = i % 2 ? "row even" : "row", 
        0 == data[i].count && (data[i].item_id = -1, data[i].count = data[i].total_price, 
        data[i].total_price = 0);
        market_transaction_items = data;
        document.getElementById("market_transaction_items").innerHTML = Market.client_transaction_items_template()({
            results: data
        });
    },
    client_get_offer_index: function(b) {
        for (var i = 0; i < market_results.length; i++) if (market_results[i].id == b) return i;
        return -1;
    },
    client_open_offer: function(a) {
        a = Market.client_get_offer_index(a);
        "undefined" != typeof market_results[a] && (addClass(document.getElementById("market_search_area"), "hidden"), 
        addClass(document.getElementById("market_new_offer"), "hidden"), removeClass(document.getElementById("market_offer_area"), "hidden"), 
        document.getElementById("market_offer_area").innerHTML = Market.client_open_offer_template()(market_results[a]), 
        Market.client_update_coins_amount());
    },
    client_new_offer: function() {
        addClass(document.getElementById("market_search_area"), "hidden");
        addClass(document.getElementById("market_offer_area"), "hidden");
        addClass(document.getElementById("market_transactions"), "hidden");
        removeClass(document.getElementById("market_new_offer"), "hidden");
        document.getElementById("market_new_offer").innerHTML = Market.client_new_offer_template()();
        Market.client_update_new_offer_items();
        Market.client_update_coins_amount();
    },
    client_transactions: function() {
        addClass(document.getElementById("market_search_area"), "hidden");
        addClass(document.getElementById("market_offer_area"), "hidden");
        addClass(document.getElementById("market_new_offer"), "hidden");
        removeClass(document.getElementById("market_transactions"), "hidden");
        Socket.send("market_transaction", {
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        });
    },
    client_update_coins_amount: function() {
        var a = thousandSeperate(players[0].temp.coins);
        updateElementHTML("market_offer_player_coins", a);
        updateElementHTML("market_new_offer_player_coins", a);
    },
    client_accept_offer: function(c) {
        c = {
            count: parseInt(document.getElementById("market_offer_amount").value),
            id: c,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        };
        Socket.send("market_accept_offer", c);
    },
    client_accept_item: function(src) {
        Timers.running("accept_item" + src) || (Socket.send("market_accept_item", {
            id: src,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        }), Timers.set("accept_item" + src, null_function, 1e4));
    },
    client_cancel_offer: function(total) {
        Socket.send("market_cancel_offer", {
            id: total,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        });
    },
    client_extend_offer: function(total) {
        Socket.send("market_extend_offer", {
            id: total,
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        });
    },
    client_make_offer: function(event) {
        event = {
            type: parseInt(document.getElementById("market_new_offer_search_type").value),
            item_id: parseInt(document.getElementById("market_new_offer_items_item").value),
            to_player: document.getElementById("market_offer_player").value,
            price: parseInt(document.getElementById("market_new_offer_price").value),
            count: parseInt(document.getElementById("market_new_offer_amount").value),
            target_id: chest_npc.id,
            target_i: chest_npc.i,
            target_j: chest_npc.j
        };
        var req = item_base[event.item_id];
        if (!event.to_player && 1 == event.type && event.price < Math.floor(.1 * req.params.price)) return Popup.dialog("Buying price for this item must be at least " + Math.floor(.1 * req.params.price) + " (10%).", null_function);
        Socket.send("market_make_new_offer", event);
    },
    client_update_new_offer_items: function() {
        var val = document.getElementById("market_new_offer_search_type").value;
        document.getElementById("market_new_offer_items").innerHTML = "";
        "0" == val ? (document.getElementById("market_new_offer_items").innerHTML = Market.client_items_template()(chest_content), 
        sortSelect(document.getElementById("market_new_offer_items_item"))) : (val = -1, 
        0 < arguments.length && (val = arguments[0]), document.getElementById("market_new_offer_items").innerHTML = Market.client_category_template()(item_categories) + Market.client_items_template()(item_categories[val].items), 
        document.getElementById("market_new_offer_items_category").value = val);
        Market.client_update_new_offer_item_change();
    },
    client_update_new_offer_item_change: function() {
        var sel = document.getElementById("market_new_offer_items_item"), val = sel.options[sel.selectedIndex].getAttribute("data-count");
        document.getElementById("market_new_offer_price").value = item_base[sel.value].params.price;
        document.getElementById("market_new_offer_count").innerHTML = val;
        Market.client_new_offer_update_total_cost();
    },
    client_update_new_offer_category_change: function() {
        Market.client_update_new_offer_items(document.getElementById("market_new_offer_items_category").value);
    },
    client_items_template: function() {
        "undefined" == typeof market_client_items_template && (market_client_items_template = Handlebars.compile("<select class='market_select' style='min-width:140px;max-width:140px;' name='' onchange='Market.client_update_new_offer_item_change();' id='market_new_offer_items_item'>{{#each this}}{{#if this.count}}<option value='{{this.id}}' data-count='{{this.count}}'>{{item_name this.id}}</option>{{/if}}{{/each}}</select>"));
        return market_client_items_template;
    },
    client_category_template: function() {
        "undefined" == typeof market_client_category_template && (market_client_category_template = Handlebars.compile("<select style='min-width:140px;max-width:140px;' class='market_select' name='' onchange='Market.client_update_new_offer_category_change();' id='market_new_offer_items_category'><option value='-1'>-- All categories --</option>{{#each this}}<option value='{{this.id}}'>{{this.name}}</option>{{/each}}</select>"));
        return market_client_category_template;
    },
    client_update_total_cost: function(ii) {
        ii = Market.client_get_offer_index(ii);
        var count = parseInt(document.getElementById("market_offer_amount").value);
        0 < count && count <= market_results[ii].count ? document.getElementById("market_total_cost").innerHTML = thousandSeperate(market_results[ii].price * count) : document.getElementById("market_total_cost").innerHTML = "";
    },
    client_new_offer_update_total_cost: function() {
        var value = parseInt(document.getElementById("market_new_offer_price").value), value = Math.range(value, 0, 9999999999);
        document.getElementById("market_new_offer_price").value = value;
        var n = parseInt(document.getElementById("market_new_offer_amount").value), x = parseInt(document.getElementById("market_new_offer_count").innerHTML), n = Math.range(n, 1, x);
        document.getElementById("market_new_offer_amount").value = n;
        document.getElementById("market_new_offer_total_cost").innerHTML = thousandSeperate(value * n);
    },
    client_search_results_template: function() {
        "undefined" == typeof market_client_search_results_template && (market_client_search_results_template = Handlebars.compile("<table class='table scrolling_allowed'><tbody class='scrolling_allowed'><tr class='scrolling_allowed'><th>Item</th><th>Count</th><th>Price</th><th>User</th></tr>{{#each results}}<tr class='{{this.classes}} scrolling_allowed' onclick='Market.client_open_offer({{this.id}})'>  <td class='scrolling_allowed'>{{item_name this.item_id}}</td>  <td  class='scrolling_allowed'>{{this.count}}</td>  <td class='scrolling_allowed'>{{item_price this.price}}</td>  <td class='scrolling_allowed'>{{this.player}}</td></tr>{{/each}}</tbody></table>"));
        return market_client_search_results_template;
    },
    client_transaction_offers_template: function() {
        "undefined" == typeof market_client_transaction_offers_template && (market_client_transaction_offers_template = Handlebars.compile("Offers<table class='table scrolling_allowed'><tbody><tr><th>Type</th><th>Item</th><th>Count</th><th>Price</th><th></th></tr>{{#each results}}<tr class='scrolling_allowed {{this.classes}} {{#if this.available}}green{{else}}red{{/if}}' onclick='Market.client_cancel_offer({{this.id}})'>  <td class='scrolling_allowed'>{{#if this.type}}Buy{{else}}Sell{{/if}}</td>  <td class='scrolling_allowed'>{{item_name this.item_id}}</td>  <td class='scrolling_allowed'>{{this.count}}</td>  <td class='scrolling_allowed'>{{item_price this.price}}</td>  <td class='scrolling_allowed'><b>Remove</b></td></tr>{{/each}}</tbody></table>"));
        return market_client_transaction_offers_template;
    },
    client_transaction_items_template: function() {
        "undefined" == typeof market_client_transaction_items_template && (market_client_transaction_items_template = Handlebars.compile("Items<table class='table scrolling_allowed'><tbody><tr><th>Item</th><th>Count</th><th>From</th><th></th></tr>{{#each results}}<tr class='scrolling_allowed {{this.classes}}{{#if this.reason}} tooltip' title='{{this.reason}}'{{else}}'{{/if}} onclick='Market.client_accept_item({{this.id}})'>  <td class='scrolling_allowed'>{{item_name this.item_id}}</td>  <td class='scrolling_allowed'>{{this.count}}</td>  <td class='scrolling_allowed'>{{this.from_player}}</td>  <td class='scrolling_allowed'><b>Accept</b></td></tr>{{/each}}</tbody></table>"));
        return market_client_transaction_items_template;
    },
    client_open_offer_template: function() {
        "undefined" == typeof market_client_open_offer_template && (market_client_open_offer_template = Handlebars.compile("<table style='text-align: left;border: 1px #666666 solid;width: 100%;margin: 0px;margin-top: 20px;' class='table'><tbody><tr class='offer_line'><td style='width: 96px;'>Item</td><td><span style='vertical-align: bottom;margin-right: 4px;padding-bottom: -26px;line-height: 32px;'>{{item_name this.item_id}}</span><div style='{{item_image this.item_id}}width: 32px;height: 32px;display: inline-block;margin: 0px;padding: 0px;'>&nbsp;</div></td></tr><tr class='offer_line even'><td>About</td><td>{{item_stats this.item_id}}</td></tr><tr class='offer_line'><td>Dealer</td><td>{{this.player}}</td></tr><tr class='offer_line even'><td>Price</td><td>{{item_price this.price}}</td></tr><tr class='offer_line'><td>Amount</td><td><input id='market_offer_amount' type='number' autocomplete='off' style='width:85px;' value='1' class='market_select' onchange='Market.client_update_total_cost({{this.id}});'> of {{this.count}}</td></tr><tr class='offer_line even'><td>Total cost</td><td><b id='market_total_cost'>{{item_price this.price}}</b></td></tr><tr class='offer_line'><td></td><td><button onclick='javascript:Market.client_accept_offer({{this.id}})' class='market_select pointer' style='margin: 0px;font-weight: bold;'>{{#if this.type}}Sell{{else}}Buy{{/if}}</button></td></tr></tbody></table><div style='position: absolute;bottom: 2px;right: 4px;'>You have <span id='market_offer_player_coins'></span> coins</div>"));
        return market_client_open_offer_template;
    },
    client_new_offer_template: function() {
        "undefined" == typeof market_client_new_offer_template && (market_client_new_offer_template = Handlebars.compile("<table style='text-align: left;border: 1px #666666 solid;width: 100%;margin: 0px;margin-top: 20px;' class='table'><tbody><tr class='offer_line'><td>Type</td><td><select id='market_new_offer_search_type' onchange='Market.client_update_new_offer_items();' class='market_select'><option value='0'>Sell</option><option value='1'>Buy</option></select></td></tr><tr class='offer_line even'><td style='width: 96px;'>Item</td><td id='market_new_offer_items'></td></tr><tr class='offer_line'><td>To</td><td><input type='text' class='market_select' placeholder='Everybody' id='market_offer_player' list='player_datalist'/></td></tr><tr class='offer_line even'><td>Price</td><td><input type='number' id='market_new_offer_price' onchange='Market.client_new_offer_update_total_cost();' class='market_select'/></td></tr><tr class='offer_line'><td>Amount</td><td><input id='market_new_offer_amount' type='number' autocomplete='off' style='width:85px;' value='1' class='market_select' onchange='Market.client_new_offer_update_total_cost();'> of <span id='market_new_offer_count'>0</span></td></tr><tr class='offer_line even'><td>Total cost</td><td><b id='market_new_offer_total_cost'>0</b></td></tr><tr class='offer_line'><td></td><td><button onclick='javascript:Market.client_make_offer()' class='market_select pointer' style='margin: 0px;font-weight: bold;'>Make offer</button></td></tr></tbody></table><span>* Each offer lasts 24 hours. You can have {{market_offers}} active offers.{{#can_upgrade_market_offers}}<br/><button class='market_select pointer' onclick='Market.upgrade_offers_dialog();'>Upgrade</button>{{/can_upgrade_market_offers}}</span><div style='position: absolute;bottom: 2px;right: 4px;'>You have <span id='market_new_offer_player_coins'></span> coins</div>"));
        return market_client_new_offer_template;
    },
    new_offer: !0
}, CompiledTemplate = {}, HandlebarTemplate = {
    player_more_info: function() {
        "undefined" == typeof CompiledTemplate.player_more_info && (CompiledTemplate.player_more_info = Handlebars.compile("<table><tr><td>First name</td><td><input type='text' id='first_name' value='{{this.first_name}}' class='market_select'/></td></tr><tr><td>Last name</td><td><input type='text' id='last_name' value='{{this.last_name}}' class='market_select'/></td></tr><tr><td>E-mail</td><td><input type='text' id='email' value='{{this.email}}' class='market_select'/></td></tr><tr><td>Country</td><td><select id='country' class='market_select' value='{{this.country}}'>{{#each this.countries}}<option value='{{this.short}}'>{{this.name}}</option>{{/each}}</select></td></tr><tr><td>Birthday</td><td><select id='month' class='market_select' placeholder='Month'>{{#each this.months}}<option value='{{this.short}}'>{{this.name}}</option>{{/each}}</select><select id='day' class='market_select' placeholder='Day'>{{#each this.days}}<option value='{{this}}'>{{this}}</option>{{/each}}</select><select id='year' class='market_select' placeholder='Year'>{{#each this.years}}<option value='{{this}}'>{{this}}</option>{{/each}}</select></td></tr><tr><td>Newsletter</td><td><input type='checkbox' id='newsletter' {{#if this.newsletter}}checked{{/if}}/></td></tr><tr><td></td><td><button class='market_select pointer' onclick='Player.save_more_info();'>Save</button>&nbsp;&nbsp;&nbsp;<button class='market_select pointer' onclick=\"Player.save_more_info();reset_password(document.getElementById('email').value);Popup.dialog('Check your e-mail for further instructions.', null_function);\">Reset password</button></td></tr></table><br/>We won't share your data with anybody. Newsletter is only sent when the game is updated(once a week maximum). <br/>NB! E-mail is used to reset password."));
        return CompiledTemplate.player_more_info;
    },
    referral_dialog: function() {
        "undefined" == typeof CompiledTemplate.referral_dialog && (CompiledTemplate.referral_dialog = Handlebars.compile("\r\n      <h4>Thanks! Now share the love!</h4>\r\n      <span>Use the links below to spread the word.</span>\r\n      <br><br>\r\n      <span>You will earn <b>30%</b> of all MOS purchases made by people you have invited!</span>\r\n      <br><br>\r\n      <input class='market_select' type='text' value='http://rpg-de.mo.ee/?ref={{this.player}}' style='width:308px;'/>\r\n      <br><br>\r\n      <div id='social_media_32'>\r\n        <a class='facebook' href='https://www.facebook.com/sharer/sharer.php?u={{this.url}}' target='_blank' title='Facebook'></a>\r\n        <a class='twitter' href='https://twitter.com/intent/tweet?text={{this.title}}&url={{this.url}}&via=RPGMO' target='_blank' title='Twitter'></a>\r\n        <a class='googleplus' href='https://plus.google.com/share?url={{this.url}}' target='_blank' title='Google+'></a>\r\n        <a class='pinterest' href='http://www.pinterest.com/pin/create/button/?url={{this.url}}&description={{this.title}}&media=http%3A%2F%2Fmo.mo.ee%2Fimg%2Fpinterest.jpg' target='_blank' title='Pinterest'></a>\r\n        <a class='tumblr' href='http://www.tumblr.com/share/link?url={{this.url}}&name=RPG%20MO&description={{this.title}}&' target='_blank' title='Tumblr'></a>\r\n        <a class='vk' href='https://vk.com/share.php?url={{this.url}}&title=RPG%20MO&description={{this.title}}&image=http%3A%2F%2Fmo.mo.ee%2Fimg%2Ficon310x150.png&noparse=true' target='_blank' title='VK'></a>\r\n        <a class='email' href='mailto:?subject=RPG%20MO&body={{this.url}}' target='_blank' title='E-mail'></a>\r\n      </div>\r\n      <br>\r\n      <span>You've invited <b>{{this.referrals}}</b>, earned <b>{{this.total_earned}}</b> MOS</span>\r\n      "));
        return CompiledTemplate.referral_dialog;
    },
    referral_dialog_kongregate: function() {
        "undefined" == typeof CompiledTemplate.referral_dialog_kongregate && (CompiledTemplate.referral_dialog_kongregate = Handlebars.compile("\r\n      <h4>Thanks! Now share the love!</h4>\r\n      <span>Invite your Kongregate friends!</span>\r\n      <br><br>\r\n      <span>You will earn <b>30%</b> of all MOS purchases made by people you have invited!</span>\r\n      <br><br>\r\n      <button class='market_select' onclick='Player.show_kongregate_invite_box(\"{{this.player}}\")'>Start inviting</button>\r\n      <br><br>\r\n      <br>\r\n      <span>You've invited <b>{{this.referrals}}</b>, earned <b>{{this.total_earned}}</b> MOS</span>\r\n      "));
        return CompiledTemplate.referral_dialog_kongregate;
    },
    referral_dialog_mocospace: function() {
        "undefined" == typeof CompiledTemplate.referral_dialog_kongregate && (CompiledTemplate.referral_dialog_kongregate = Handlebars.compile("\r\n      <h4>Thanks! Now share the love!</h4>\r\n      <span>Invite your MocoSpace friends!</span>\r\n      <br><br>\r\n      <span>You will earn <b>30%</b> of all MOS purchases made by people you have invited!</span>\r\n      <br><br>\r\n      <button class='market_select' onclick='Player.show_mocospace_invite_box(\"{{this.player}}\")'>Start inviting</button>\r\n      <br><br>\r\n      <br>\r\n      <span>You've invited <b>{{this.referrals}}</b>, earned <b>{{this.total_earned}}</b> MOS</span>\r\n      "));
        return CompiledTemplate.referral_dialog_kongregate;
    },
    consecutive_login_dialog: function() {
        "undefined" == typeof CompiledTemplate.consecutive_login_dialog && (CompiledTemplate.consecutive_login_dialog = Handlebars.compile("\r\n      <span>Today is your no. <b>{{this.day}}</b> consecutive login day</span><br><br>\r\n      {{#each this.days}}\r\n        <div style='width: 80px;text-align: center;border: solid 1px #666666;float: left; margin-right: {{this.margin_right}}px;'>\r\n          <div style='background: rgb(97, 97, 97);'>Day {{this.day}}</div>\r\n          <div style='background: {{this.bgcolor}};height: 48px;padding-top: 16px;'>\r\n          <div style='width: 32px; height: 32px; {{reward_background this.reward}};margin-left: 23px;' onclick='addChatText(\"{{reward_description this.reward}}\", undefined, COLOR.TEAL);'>&nbsp;</div>\r\n          </div><span>{{this.message}}</span>\r\n        </div>\r\n      {{/each}}\r\n      "));
        return CompiledTemplate.consecutive_login_dialog;
    },
    magic_slots: function() {
        "undefined" == typeof CompiledTemplate.magic_slots && (CompiledTemplate.magic_slots = Handlebars.compile("{{#each this.magics}}<div class='magic_outer' style='{{magic_image this.id}}'><div class='magic_inner' id='magic_slot_{{this.i}}' onclick='Player.client_use_magic({{this.i}})' onmouseover='mouseOverMagic({{this.i}})' onmouseout='mouseOutMagic({{this.i}})'>{{this.count}}</div></div>{{/each}}"));
        return CompiledTemplate.magic_slots;
    },
    carpentry_formulas: function() {
        "undefined" == typeof CompiledTemplate.carpentry_formulas && (CompiledTemplate.carpentry_formulas = Handlebars.compile("<button class='market_select pointer scrolling_allowed' onclick='Carpentry.only_available_formulas(true);'>Only available</button><button class='market_select pointer scrolling_allowed' onclick='Carpentry.only_available_formulas(false);'>All formulas</button><br/>{{#each this}}{{#carpentry_formula_available this.id}}<span class='carpentry_formula scrolling_allowed'><span>{{item_name this.item_id}}</span><div style='width: 54px;height: 49px;margin-left: 33px;{{carpentry_image this.item_id 0}}'></div>{{#each this.consumes}}<span style='display: block;' class='scrolling_allowed'><div class='small_material_icon tooltip scrolling_allowed' title='{{item_name this.id}}' style='{{item_image this.id}}'></div><span style='{{chest_count this.id this.count \"\" \"color:red\"}}'>{{this.count}}</span></span>{{/each}}<div style='position:absolute; bottom: 5px;width: 100%;' class='scrolling_allowed'>{{#met_level_requirements \"carpentry\" this.level}}{{#if this.craftable}}{{#carpentry_has_enough_materials this.id}}<span class='common_link' onclick='Carpentry.make({{this.id}})'>Make</span>{{/carpentry_has_enough_materials}}{{/if}}{{else}}<span>{{this.level}} carpentry</span>{{/met_level_requirements}}<span class='common_link {{chest_count this.item_id 1 \"\" \"hidden\"}}' onclick='Carpentry.place({{this.id}})'>Place</span></div></span>{{/carpentry_formula_available}}{{/each}}"));
        return CompiledTemplate.carpentry_formulas;
    },
    carpentry_buildings_menu: function() {
        "undefined" == typeof CompiledTemplate.carpentry_buildings_menu && (CompiledTemplate.carpentry_buildings_menu = Handlebars.compile("{{#each this}}<span class='scrolling_allowed' style='display:block; padding-bottom: 10px;'><span class='scrolling_allowed' style='display:block; padding-bottom:2px;'>{{this.name}} {{#if this.show_level}}(current level {{this.level}}){{/if}}</span><div class='health health-red scrolling_allowed' style='width: 215px;height:22px'><div class='health-green scrolling_allowed' style='width:{{this.percent}}%;'>&nbsp;</div><span class='scrolling_allowed' style='line-height: 22px; vertical-align: middle; text-align: center; position: absolute; width: 215px;'>{{this.percent}}%</span></div>{{#if this.can_provide_materials}}<button class='market_select pointer scrolling_allowed' id='building_menu_button' onclick='Carpentry.building_button(\"{{this.name}}\");' style='line-height: 18px;padding: 1px;margin: 0px 0px 0px 255px;width:115px;'>Provide materials</button>{{/if}}</span>{{/each}}"));
        return CompiledTemplate.carpentry_buildings_menu;
    },
    small_build_menu: function() {
        "undefined" == typeof CompiledTemplate.small_build_menu && (CompiledTemplate.small_build_menu = Handlebars.compile("{{#if this.building}}<span class='common_link' style='line-height:30px;display:block;' onclick='Build.menu()'>Open build menu</span>{{/if}}{{#if this.remove}}<span class='common_link' style='line-height:30px;display:block;' onclick='Build.remove_mode()'>Remove objects</span>{{/if}}"));
        return CompiledTemplate.small_build_menu;
    },
    build_menu: function() {
        "undefined" == typeof CompiledTemplate.build_menu && (CompiledTemplate.build_menu = Handlebars.compile("<span style='border-bottom: 1px solid gray; display: block; text-align:right;margin: 0px;' class='common_link' onclick='Carpentry.place_close();'>Close</span><span style='width: 100%;display: block;'>{{item_name this.item_id}}</span><div style='width: 54px;height: 49px;margin-left: 23px;{{carpentry_image this.item_id this.rotate}}'></div><span style='border-top: 1px solid gray;width: 100%;display: block;margin: 0px;' class='common_link' onclick='Carpentry.place_rotate({{this.id}});'>Rotate</span>"));
        return CompiledTemplate.build_menu;
    },
    carpentry_remove_menu: function() {
        "undefined" == typeof CompiledTemplate.carpentry_remove_menu && (CompiledTemplate.carpentry_remove_menu = Handlebars.compile("<span style='border-bottom: 1px solid gray; display: block; text-align:right;margin: 0px;' class='common_link' onclick='Carpentry.place_close();'>Close</span><span style='width: 100%;display: block;'>Current:<br/>{{#if this}}Ground{{else}}Objects{{/if}}</span><span style='border-top: 1px solid gray;width: 100%;display: block;margin: 0px;line-height:30px;' class='common_link' onclick='Carpentry.category=\"floors\";Carpentry.remove_menu();'>Ground</span><span style='width: 100%;display: block;margin: 0px;line-height:30px;' class='common_link' onclick='Carpentry.category=\"walls\";Carpentry.remove_menu();'>Objects</span>"));
        return CompiledTemplate.carpentry_remove_menu;
    },
    contacts_friends: function() {
        "undefined" == typeof CompiledTemplate.contacts_friends && (CompiledTemplate.contacts_friends = Handlebars.compile("{{cycle_init}}<table class='table' style='min-width:300px;width:300px' id='contacts_friends'><thead><tr><th>Name</th><th>World</th><th colspan='2'>Actions</th></tr></thead><tbody>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' >  <td class='{{#if this.online}}green{{else}}red{{/if}}'>{{this.name}}</td>  <td class='{{#if this.online}}green{{else}}red{{/if}}'>{{this.world}}</td>{{#if this.friend}}  <td><button class='market_select pointer' onclick='ChatSystem.whisper(\"{{this.name}}\");'>Whisper</button></td>  <td><button class='market_select pointer' onclick='Contacts.remove_friend(\"{{this.name}}\");'>Remove</button></td>{{else}}  <td><button class='market_select pointer' onclick='Contacts.add_friend(\"{{this.name}}\");'>Accept</button></td>  <td><button class='market_select pointer' onclick='Contacts.reject_friend(\"{{this.name}}\");'>Reject</button></td>{{/if}}</tr>{{/each}}</tbody></table><button class='market_select pointer' onclick='Popup.input_prompt(\"Insert username\", Contacts.add_friend, \"player_datalist\");'>Add a new friend</button>"));
        return CompiledTemplate.contacts_friends;
    },
    contacts_ignore: function() {
        "undefined" == typeof CompiledTemplate.contacts_ignore && (CompiledTemplate.contacts_ignore = Handlebars.compile("{{cycle_init}}<table class='table' style='min-width:300px;width:300px'><tbody><tr><th>Name</th><th>Actions</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' >  <td>{{this}}</td>  <td><button class='market_select pointer' onclick='Contacts.remove_ignore(\"{{this}}\");'>Remove</button></td></tr>{{/each}}</tbody></table><button class='market_select pointer' onclick='Popup.input_prompt(\"Insert username\", Contacts.ignore_player, \"player_datalist\");'>Ignore a player</button>"));
        return CompiledTemplate.contacts_ignore;
    },
    contacts_channels: function() {
        "undefined" == typeof CompiledTemplate.contacts_channels && (CompiledTemplate.contacts_channels = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:300px;width:300px'><tbody><tr><th>Channel</th><th>Action</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' >  <td class='scrolling_allowed'>{{this}} - {{channel_description this}}</td>{{#subscribed_to_channel this}}  <td class='scrolling_allowed'><button class='market_select pointer' onclick='Contacts.remove_channel(\"{{this}}\");'>Unsubscribe</button></td>{{else}}  <td class='scrolling_allowed'><button class='market_select pointer' onclick='Contacts.add_channel(\"{{this}}\");'>Subscribe</button></td>{{/subscribed_to_channel}}</tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.contacts_channels;
    },
    quests_active: function() {
        "undefined" == typeof CompiledTemplate.quests_active && (CompiledTemplate.quests_active = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr class='scrolling_allowed'><th>Task</th><th>Progress</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed tooltip' title='Location: {{this.location}}'>  <td class='scrolling_allowed' style='padding:0px;margin:0px;'><div style='width:32px;height:32px;display:inline-block;margin:0;padding:0;{{npc_image this.npc_id}}'></div><span style='line-height:32px;padding:0px;margin:0px;vertical-align:bottom;'>{{this.name}}</span></td>  <td class='scrolling_allowed'>{{this.progress}}/{{this.amount}}</td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.quests_active;
    },
    quests_completed: function() {
        "undefined" == typeof CompiledTemplate.quests_completed && (CompiledTemplate.quests_completed = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr><th>Task</th><th></th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed tooltip' title='Reward {{quest_reward this.id this.reward_result}}'>  <td class='scrolling_allowed' style='padding:0px;margin:0px;'><div style='width:32px;height:32px;display:inline-block;margin:0;padding:0;{{npc_image this.npc_id}}'></div><span style='line-height:32px;padding:0px;margin:0px;vertical-align:bottom;'>{{this.name}}</span></td>  <td class='scrolling_allowed'><button class='market_select pointer' onclick='Quests.restart(\"{{this.id}}\");'>Restart</button></td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.quests_completed;
    },
    quests_party_list: function() {
        "undefined" == typeof CompiledTemplate.quests_party_list && (CompiledTemplate.quests_party_list = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed'>  <td class='scrolling_allowed' style='max-width: 140px;text-overflow: ellipsis;overflow: hidden;'>   <span class='scrolling_allowed'>{{this.name}}</span></td>  <td class='scrolling_allowed tooltip' title='Difficulty' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.difficulty}}</span></td>  <td class='scrolling_allowed tooltip' title='Players' style='min-width:30px;'>   <span class='scrolling_allowed'>{{this.players}}/4</span></td>  <td class='scrolling_allowed tooltip' title='Combat level' style='min-width:55px;'>   <span class='scrolling_allowed'>{{this.levels_min}}-{{this.levels_max}}</span></td>  <td class='scrolling_allowed' style='min-width:48px;'><button class='market_select pointer' onclick='Socket.send(\"party_quest\",{sub: \"join_party\", party_id:{{this.id}} });'>Join{{this.extra}}</button></td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.quests_party_list;
    },
    quests_hall_of_fame: function() {
        "undefined" == typeof CompiledTemplate.quests_hall_of_fame && (CompiledTemplate.quests_hall_of_fame = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr><th></th><th>Player</th><th>Points</th><th>Wins</th><th>Plays</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' {{#if this.me}}style='font-weight:bold'{{/if}}>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.position}}</span></td>  <td class='scrolling_allowed' style='max-width: 140px;text-overflow: ellipsis;overflow: hidden;'>   <span class='scrolling_allowed'>{{this.player}}</span></td>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.points}}</span></td>  <td class='scrolling_allowed' style='min-width:30px;'>   <span class='scrolling_allowed'>{{this.wins}}</span></td>  <td class='scrolling_allowed' style='min-width:55px;'>   <span class='scrolling_allowed'>{{this.plays}}</span></td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.quests_hall_of_fame;
    },
    quests_new: function() {
        "undefined" == typeof CompiledTemplate.quests_new && (CompiledTemplate.quests_new = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr class='scrolling_allowed'><td colspan='2'><font color='" + COLOR.PINK + "' style='font-weight:bold;text-shadow:0px 0px 2px #000000;'>Items are NOT safe if you die in a party dungeon.</font></td></tr><tr class='{{cycle_table}} scrolling_allowed'>  <td class='scrolling_allowed' style='vertical-align:middle'>   <span class='scrolling_allowed'>Difficulty</span></td>  <td class='scrolling_allowed'> <select id='quest_difficulty' class='market_select' onchange='PartyQuests.update_difficulty_cooldown();' style='min-width:100px'> <option value='0'>Easy</option> <option value='1' {{#if this.normal_disabled}}disabled{{/if}}>Normal</option> <option value='2' {{#if this.hell_disabled}}disabled{{/if}}>Hell</option> </select>   </td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>Cooldown  </td>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><span id='difficulty_cooldown'></span></td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>   <input type='checkbox' id='quest_friends_only' onclick='void(0);'><label for='quest_friends_only'>Friends only</label>  </td>  <td class='scrolling_allowed'>   </td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{#if timer}}Time remaining  </td>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><span id='quest_new_time_remaining'>{{this.time_remaining}} minutes</span></td><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>-1x Repeat Quest Permission</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><button onclick='javascript:PartyQuests.reduce_time();' class='market_select pointer' style='margin: 0px;font-weight: bold;'>-60 minutes</button>{{else}}</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><button onclick='javascript:PartyQuests.create_new();' class='market_select pointer' style='margin: 0px;font-weight: bold;'>Create</button>{{/if}}  </td></tr></tbody></table>"));
        return CompiledTemplate.quests_new;
    },
    quests_active_party: function() {
        "undefined" == typeof CompiledTemplate.quests_active_party && (CompiledTemplate.quests_active_party = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr class='{{cycle_table}} scrolling_allowed'>  <td class='scrolling_allowed' style='vertical-align:middle'>   <span class='scrolling_allowed'>Difficulty</span></td>  <td class='scrolling_allowed'>{{this.difficulty}}</td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>   Combat levels  </td>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{this.levels_min}}-{{this.levels_max}}   </td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>Players</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{this.player_count}}/4</td></tr>{{#each this.players}}<tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{this.name}}</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{#if this.owner}}<button class='market_select pointer' onclick='Socket.send(\"party_quest\",{sub: \"kick_party\", party_id:{{this.id}}, player: \"{{this.name}}\" });'>Kick</button>{{/if}}</td></tr>{{/each}}<tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><button class='market_select pointer' onclick='Socket.send(\"party_quest\",{sub: \"leave_party\", party_id:{{this.id}} });'>Leave</button></td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{#if this.owner}}<button class='market_select pointer' onclick='Socket.send(\"party_quest\",{sub: \"start_party\", party_id:{{this.id}} });'>Start</button>{{/if}}</td></tr></tbody></table>"));
        return CompiledTemplate.quests_active_party;
    },
    loot_master_results: function() {
        "undefined" == typeof CompiledTemplate.loot_master_results && (CompiledTemplate.loot_master_results = Handlebars.compile("{{cycle_init}}<table class='table' style='min-width:100%'><tbody><tr><th>Item</th><th>Count</th></tr>{{#each results}}<tr class='{{cycle_table}} scrolling_allowed' onclick='Chest.pvp_loot_put({{this.item_id}})'>  <td>{{item_name this.item_id}}</td>  <td>{{this.count}}</td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.loot_master_results;
    },
    pet_nest: function() {
        "undefined" == typeof CompiledTemplate.pet_nest && (CompiledTemplate.pet_nest = Handlebars.compile('<span class="common_border_bottom"><span style="float:left; font-weight: bold;color:#FFFF00;">Pet Nest</span>{{#if this.other_nest}}<span class="common_link" style="margin: 0px;margin-bottom: 2px;margin-right: 107px;" onclick="javascript:Breeding.other({{this.other_nest.i}},{{this.other_nest.j}});">Access mate\'s nest</span>{{/if}}<span class="common_link" style="margin:0px;margin-bottom:2px;" onclick="addClass(document.getElementById(\'pet_nest_form\'),\'hidden\');">Close</span></span><span style="float:right;line-height:20px;width:180px;">Inventory</span><span style="line-height:20px;">{{#if this.pet_item_id}}{{item_name this.pet_item_id}}{{else}}No pet{{/if}}</span><br/><div class="inv_item" style="display:inline-block;width:32px;height:32px;margin: 2px;{{item_image this.pet_item_id}}">&nbsp;</div>{{#if this.pet_id}}<button class="market_select pointer" onclick="Breeding.cancel();" style="margin-left:3px;">Remove pet</button>{{/if}}{{#if this.breed}}<button class="market_select pointer" onclick="Breeding.breed();" style="margin-left:20px;">Breed</button>{{/if}}<div id="pet_nest_inventory" style="float:right;width:180px;">{{#each this.inventory}}<div class="inv_item" style="{{item_image this.id}}" onclick="Breeding.inventory_click({{#if this.i}}{{this.i}}{{else}}false{{/if}}, {{#if ../pet_id}}true{{else}}false{{/if}});">&nbsp;</div>{{/each}}</div><br/>{{#if this.pet_id}}<span>Happiness</span><div class="health health-red scrolling_allowed tooltip" style="width: 180px;height:22px;margin-top: 5px;" title="Happy in {{this.happiness_time}} minutes"><div class="health-green scrolling_allowed" style="width:{{this.happiness}}%;">&nbsp;</div><span class="scrolling_allowed" style="line-height: 22px; vertical-align: middle; text-align: center; position: absolute; width: 180px;">{{this.happiness}}%</span></div><span style="display:block; padding-top: 2px;">Hunger</span><div class="health health-green scrolling_allowed tooltip" style="width: 180px;height:22px;position:relative;margin-top: 5px;" title="Dies from famine in {{this.hunger_time}} minutes"><div class="health-red scrolling_allowed" style="width:{{this.hunger}}%;position:absolute;height:100%;max-width:100%;min-width:0%;">&nbsp;</div><span class="scrolling_allowed" style="line-height: 22px; vertical-align: middle; text-align: center; position: absolute; width: 180px;">{{this.hunger}}%</span></div>{{#if this.insure}}<button class="market_select pointer" onclick="Breeding.insure({{this.pet_id}})" style="float:right; color:rgb(255, 116, 116);">Insure pet</button>{{/if}}<span style="line-height: 34px;margin-right: 5px;">Likes</span>{{#each this.likes}}<div class="inv_item tooltip" title="{{item_name this}}" style="display:inline-block;width:32px;height:32px;margin: 2px;{{item_image this}}">&nbsp;</div>{{/each}}<br/><span style="line-height: 34px;margin-right: 5px;">Eats</span>{{#each this.eats}}<div class="inv_item tooltip" title="{{item_name this}}" style="display:inline-block;width:32px;height:32px;margin: 2px;{{item_image this}}">&nbsp;</div>{{/each}}{{/if}}'));
        return CompiledTemplate.pet_nest;
    },
    trivia_host: function() {
        "undefined" == typeof CompiledTemplate.trivia_host && (CompiledTemplate.trivia_host = Handlebars.compile("\r\n      <table class='scrolling_allowed'>\r\n        {{#each this}}\r\n        <tr class='scrolling_allowed'>\r\n          <td class='scrolling_allowed'>\r\n          Question {{inc @index}}&nbsp;&nbsp;&nbsp;<span class='common_link' onclick='Minigames.trivia.remove_question({{@index}})'>Remove</span>\r\n          </td></tr><tr class='scrolling_allowed'><td class='scrolling_allowed'>\r\n            <input type='text' id='trivia_host_question_{{@index}}' onchange='Minigames.trivia.update_question({{@index}})' value='{{this.question}}' style='width:100%'/>\r\n          </td></tr><tr class='scrolling_allowed'><td class='scrolling_allowed'>\r\n            Answers<i>(Separate possible right answers by a semicolon)</i>\r\n          </td></tr><tr class='scrolling_allowed'><td class='scrolling_allowed'>\r\n            <input type='text' id='trivia_host_question_answers_{{@index}}' onchange='Minigames.trivia.update_question({{@index}})' value='{{this.answers}}' style='width:100%'/>\r\n          </td>\r\n        </tr><tr class='scrolling_allowed' style='line-height:10px;'><td>&nbsp;</td></tr>\r\n        {{/each}}\r\n          <tr style='line-height: 22px;'><td><span class='common_link' onclick='Minigames.trivia.add_question()'>Add question</span></td></tr>\r\n        </table>\r\n      "));
        return CompiledTemplate.trivia_host;
    },
    trivia_client: function() {
        "undefined" == typeof CompiledTemplate.trivia_client && (CompiledTemplate.trivia_client = Handlebars.compile("\r\n      <table class='scrolling_allowed' style='width:100%'>\r\n        <tr>\r\n          <td style='width:50%; vertical-align: top;'>\r\n            <h3>Top players:</h3>\r\n            {{#each this.scores}}\r\n              {{#if this.visible}}\r\n                {{#if this.bold}}<b>{{else}}<span>{{/if}}\r\n                {{this.name}} - {{this.score}}\r\n                {{#if this.bold}}</b>{{else}}</span>{{/if}}\r\n                <br>\r\n              {{/if}}\r\n            {{/each}}\r\n          </td>\r\n          <td style='vertical-align: top;'>\r\n            <b>{{this.question}}</b><br><br>\r\n            {{#if this.button}}\r\n              <input type='text' placeholder='Your answer' class='market_select' style='width:171px;' id='trivia_answer'/>\r\n            <br>\r\n            <input type='submit' value='Answer' style='float:right' class='market_select pointer' onclick='Minigames.trivia.submit_answer();'/>\r\n            {{/if}}\r\n            <br><br>\r\n            <span style='float: right;bottom: 2px;position: absolute;right: 2px;'>Time remaining: <b id='trivia_time_remaining'>1:00</b></span>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      "));
        return CompiledTemplate.trivia_client;
    },
    arena_host_skills: function() {
        "undefined" == typeof CompiledTemplate.arena_host_skills && (CompiledTemplate.arena_host_skills = Handlebars.compile("\r\n      <table class='scrolling_allowed' style='width:100%'>\r\n        <tr><th>Skill</th><th>Level</th><th>Xp rate</th></tr>\r\n        {{#each this}}\r\n        <tr>\r\n          <td style='text-align: center'>{{text_capitalise @key}}</td>\r\n          <td style='text-align: center'><input type='number' style='width:100px' class='market_select' id='arena_host_skill_{{@key}}' value='{{this.level}}' onchange='Minigames.arena.update_skills(this)'/></td>\r\n          <td style='text-align: center'><input type='number' style='width:100px' class='market_select' id='arena_host_multiplier_{{@key}}' value='{{this.multiplier}}' onchange='Minigames.arena.update_skills(this)'/></td>\r\n        </tr>\r\n        {{/each}}\r\n      </table>\r\n      "));
        return CompiledTemplate.arena_host_skills;
    },
    arena_host_inventory: function() {
        "undefined" == typeof CompiledTemplate.arena_host_inventory && (CompiledTemplate.arena_host_inventory = Handlebars.compile("\r\n        {{item_categories_select 'arena_host_inventory' '1'}}\r\n        <select id='arena_host_inventory_items' class='market_select' style='max-width:150px;' onchange='Minigames.arena.host_inventory_update_description();'></select>\r\n        <button class='market_select' onclick='Minigames.arena.host_inventory_add_item()'>Add</button>\r\n        <div id='arena_host_inventory_item_img' class='inv_item'>&nbsp;</div><span id='arena_host_inventory_item_description'></span>\r\n        <br><br>Inventory:<br>\r\n        {{#each this}}\r\n        <div onclick='Minigames.arena.host_inventory_remove_item({{@index}})' oncontextmenu='Items.get_info({{this.id}})' class='inv_item tooltip' title='{{item_name this.id}}' style='border:solid 1px #666666;display:inline-block;width:32px;height:32px;margin: 0px; margin-top: 3px;{{item_image this.id}}'>&nbsp;</div>\r\n        {{/each}}\r\n      "));
        return CompiledTemplate.arena_host_inventory;
    },
    arena_host_start: function() {
        "undefined" == typeof CompiledTemplate.arena_host_start && (CompiledTemplate.arena_host_start = Handlebars.compile("\r\n        <div style='line-height: 20px;'>\r\n        <table>\r\n        <tr><td style='width: 150px;'>Preparation time</td><td style='width:60px;'><input id='arena_host_start_preparation_time' onchange='Minigames.arena.host_start_update(this)' value='{{this.preparation_time}}' style='width: 50px' class='market_select' type='number'/></td><td>min</td></tr>\r\n        <tr><td>Maximum arena time</td><td><input id='arena_host_start_maximum_time' onchange='Minigames.arena.host_start_update(this)' value='{{this.maximum_arena_time}}' style='width: 50px' class='market_select' type='number'/></td><td>min</td></tr>\r\n        <tr><td>Bet amount</td><td><input id='arena_host_start_bet_amount' onchange='Minigames.arena.host_start_update(this)' value='{{this.bet_amount}}' style='width: 50px' class='market_select' type='number'/></td><td>coins</td></tr>\r\n        <tr><td>Maximum allowed bets</td><td><input id='arena_host_start_maximum_bets' onchange='Minigames.arena.host_start_update(this)' value='{{this.maximum_bets}}' style='width: 50px' class='market_select' type='number'/></td><td></td></tr>\r\n        <tr><td>Keep items on death</td><td><input id='arena_host_start_keep_items' onchange='Minigames.arena.host_start_update(this)' {{#if this.keep_items}}checked{{/if}} type='checkbox' /></td><td></td></tr>\r\n        <tr><td>Victory condition</td><td colspan='2'><select id='arena_host_start_victory_condition' onchange='Minigames.arena.host_start_update(this)' value='{{this.victory_condition}}' style='width: 140px' class='market_select'>\r\n        <option value='0'>Last man standing</option>\r\n        <option value='1'>Most kills</option>\r\n        <option value='2'>Total experience</option>\r\n        </select></td><td></td></tr>\r\n        <tr><td>Maximum respawns</td><td><input id='arena_host_start_maximum_respawns' onchange='Minigames.arena.host_start_update(this)' value='{{this.maximum_respawns}}' style='width: 50px' class='market_select' type='number'/></td><td></td></tr>\r\n        </table>\r\n        </div>\r\n        <button class='market_select' onclick='Minigames.arena.host_start_start()'>Start</button>\r\n      "));
        return CompiledTemplate.arena_host_start;
    },
    arena_client_join: function() {
        "undefined" == typeof CompiledTemplate.arena_client_join && (CompiledTemplate.arena_client_join = Handlebars.compile("\r\n        <div style='line-height: 20px;'>\r\n        Players {{this.players}}/{{this.max_players}}<br>\r\n        {{#if this.join_button}}\r\n          <button class='market_select' onclick='Minigames.arena.client_join_button();'>Join</button>\r\n        {{/if}}\r\n        </div>\r\n      "));
        return CompiledTemplate.arena_client_join;
    },
    arena_client_bet: function() {
        "undefined" == typeof CompiledTemplate.arena_client_bet && (CompiledTemplate.arena_client_bet = Handlebars.compile("\r\n        <div style='line-height: 20px;'>\r\n        {{cycle_init}}\r\n        <table class='table scrolling_allowed' style='min-width:330px;width:330px;'><tr><th>Name</th><th>Total bets</th><th>Your bet</th><th></th></tr>\r\n          {{#each this.bets}}\r\n            {{#if this.name}}\r\n            <tr class='{{cycle_table}} scrolling_allowed'>\r\n            <td>{{this.name}}</td>\r\n            <td>{{this.total}}</td>\r\n            <td>{{this.my}}</td>\r\n            <td>\r\n              <button class='market_select' onclick='Minigames.arena.client_bet_make_bet({{this.id}})'>\r\n              Bet {{../bet_amount}}\r\n              </button></td>\r\n            </tr>\r\n            {{/if}}\r\n          {{/each}}\r\n        </table>\r\n        </div>\r\n        <br><div>Winnings will only be paid out if you are online</div>\r\n      "));
        return CompiledTemplate.arena_client_bet;
    },
    arena_client_rules: function() {
        "undefined" == typeof CompiledTemplate.arena_client_rules && (CompiledTemplate.arena_client_rules = Handlebars.compile("\r\n        <div style='line-height: 20px;'>\r\n        {{cycle_init}}\r\n        <table class='table' style='min-width:330px;width:330px;'>\r\n          <tr class='{{cycle_table}}'><td>Preparation time</td><td>{{this.preparation_time}} min</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Maximum arena time</td><td>{{this.maximum_arena_time}} min</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Bet amount</td><td>{{this.bet_amount}} coins</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Maximum bets</td><td>{{this.maximum_bets}}</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Keep items on death</td><td>{{#if this.keep_items}}Yes{{else}}No{{/if}}</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Maximum respawns:</td><td>{{this.maximum_respawns}}</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Victory condition:</td><td>{{this.victory_condition}}</td></tr>\r\n          <tr class='{{cycle_table}}'><td>Host</td><td>{{this.host}}</td></tr>\r\n          <tr class='{{cycle_table}}'><td colspan='2'>Be on the arena map when the arena starts!</td></tr>\r\n        </table>\r\n        </div>\r\n      "));
        return CompiledTemplate.arena_client_rules;
    },
    arena_client_stats: function() {
        "undefined" == typeof CompiledTemplate.arena_client_stats && (CompiledTemplate.arena_client_stats = Handlebars.compile("\r\n        <div style='line-height: 20px;'>\r\n        {{#if this.available}}\r\n        <div style='float:left;'><table class='table scrolling_allowed' style='width: 100%;min-width: 100%;'><tr><th>Skill</th><th>Level</th><th>Xp rate</th></tr>\r\n        {{cycle_init}}\r\n        {{#each this.data.skills}}\r\n        <tr class='{{cycle_table}} scrolling_allowed'>\r\n          <td>{{text_capitalise @key}}</td>\r\n          <td>{{this.level}}</td>\r\n          <td>{{this.multiplier}}</td>\r\n        </tr>\r\n        {{/each}}</table></div>\r\n        <div style='float:right;width:45%;'>Inventory:<br>\r\n        {{#each this.data.inventory}}\r\n        <div onclick='Items.get_info({{this.id}})' oncontextmenu='Items.get_info({{this.id}})' class='inv_item tooltip scrolling_allowed' title='{{item_name this.id}}' style='border:solid 1px #666666;display:inline-block;width:32px;height:32px;margin: 0px; margin-top: 3px;{{item_image this.id}}'>&nbsp;</div>\r\n        {{/each}}</div>\r\n        {{else}}\r\n        Stats and inventory will be available after arena has begun.\r\n        {{/if}}\r\n        </div>\r\n      "));
        return CompiledTemplate.arena_client_stats;
    },
    permissions_form: function() {
        "undefined" == typeof CompiledTemplate.permissions_form && (CompiledTemplate.permissions_form = Handlebars.compile("{{cycle_init}}<table class='table' style='min-width:280px;width:280px'><tbody>{{#foreach this.allowed}}{{#if $first}}<tr><th>Name</th><th>&nbsp;</th></tr>{{/if}}<tr class='{{cycle_table}} scrolling_allowed' >  <td>{{this}}</td>  <td><button class='market_select pointer' onclick='Carpentry.permissions_remove(\"{{this}}\");'>Remove</button></td></tr>{{/foreach}}</tbody></table>{{#if this.add_button_visible}}<button class='market_select pointer' onclick='Popup.input_prompt(\"Insert username\", Carpentry.permissions_add, \"player_datalist\");'>Add a new player {{this.current}}/{{this.maximum}}</button>{{/if}}"));
        return CompiledTemplate.permissions_form;
    },
    mailbox_form: function() {
        "undefined" == typeof CompiledTemplate.mailbox_form && (CompiledTemplate.mailbox_form = Handlebars.compile("{{cycle_init}}{{#if this.owner}}<input type='checkbox' id='mailbox_friends_toggle' {{#if this.friends_only}}checked{{/if}} onclick='Mailbox.friends_toggle();' id='mailbox_friends_toggle' /><label for='mailbox_friends_toggle'>Only friends can see and post</label><hr style='margin: 0.5em 0'>{{/if}}<span>My message</span><div style='float:right'><button class='market_select hidden' onclick='Mailbox.save_message();' id='mailbox_save_button'>Save</button><button class='market_select' onclick='Mailbox.delete_message(\"{{this.me}}\");'>Delete</button></div><textarea style='width:300px;margin-top:10px;' id='mailbox_my_message' onkeyup='Mailbox.change_my_message();' onchange='Mailbox.change_my_message();'>{{this.my_message}}</textarea><hr style='margin: 0.5em 0'>{{#each this.messages}}<div class='{{cycle_table}} scrolling_allowed' style='padding-top: 10px; padding-bottom: 10px;'><b>{{this.from_player}}</b> - {{this.date}}{{#if ../owner}}<div style='float:right'><button class='market_select' onclick='Mailbox.delete_message(\"{{this.from_player}}\");'>Delete</button></div>{{/if}}<div>{{this.message}}</div></div>{{/each}}"));
        return CompiledTemplate.mailbox_form;
    },
    streams_form: function() {
        "undefined" == typeof CompiledTemplate.streams_form && (CompiledTemplate.streams_form = Handlebars.compile("{{cycle_init}}<input type='text' class='market_select' style='margin-top:-8px;width:100%' placeholder='Search' oninput='Spectate.filter_window(this.value)' value=''><table class='table scrolling_allowed' style='min-width:330px;width:330px'><thead><tr><th>Player</th><th>Location</th><th>Idle time</th><th>Combat lvl</th></tr></thead><tbody>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed spectate_row' onclick='Spectate.watch({{this.server}}, \"{{this.name}}\");'>  <td class='scrolling_allowed {{#if this.red}}red{{/if}}'>{{this.name}}</td>  <td class='scrolling_allowed'>{{this.location}}</td>  <td class='scrolling_allowed' data-sortvalue='{{this.idle_value}}'>{{this.idle}}</td>  <td class='scrolling_allowed'>{{this.combat_level}}</td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.streams_form;
    },
    teleport_book_form: function() {
        "undefined" == typeof CompiledTemplate.teleport_book_form && (CompiledTemplate.teleport_book_form = Handlebars.compile("<div style='margin-top: 12px; line-height: 20px;text-align: center;'>Teleport to <select id='teleport_book_location' class='market_select'>{{#each this}}<option value=\"{{this}}\">{{this}}</option>{{/each}}</select><br><button style='margin-top: 14px;' class='market_select pointer' onclick='Player.teleport_book_call();'>OK</button></div>"));
        return CompiledTemplate.teleport_book_form;
    },
    secret_boss_scroll_form: function() {
        "undefined" == typeof CompiledTemplate.secret_boss_scroll_form && (CompiledTemplate.secret_boss_scroll_form = Handlebars.compile("<div style='margin-top: 12px; line-height: 20px;text-align: center;'>Teleport to <select id='secret_boss_scroll_location' class='market_select'>{{#each this}}<option value=\"{{this}}\">{{this}}</option>{{/each}}</select><br><button style='margin-top: 14px;' class='market_select pointer' onclick='Player.secret_boss_scroll_call();'>OK</button></div>"));
        return CompiledTemplate.secret_boss_scroll_form;
    },
    cathedral_hall_of_fame: function() {
        "undefined" == typeof CompiledTemplate.cathedral_hall_of_fame && (CompiledTemplate.cathedral_hall_of_fame = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr><th></th><th>Player</th><th>Level</th><th>Time</th><th>Plays</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' {{#if this.me}}style='font-weight:bold'{{/if}}>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.position}}</span></td>  <td class='scrolling_allowed' style='max-width: 140px;text-overflow: ellipsis;overflow: hidden;'>   <span class='scrolling_allowed'>{{this.player}}</span></td>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.level}}</span></td>  <td class='scrolling_allowed' style='min-width:30px;'>   <span class='scrolling_allowed'>{{time this.time}}</span></td>  <td class='scrolling_allowed' style='min-width:55px;'>   <span class='scrolling_allowed'>{{this.plays}}</span></td></tr>{{/each}}</tbody></table>"));
        return CompiledTemplate.cathedral_hall_of_fame;
    },
    cathedral_new: function() {
        "undefined" == typeof CompiledTemplate.cathedral_new && (CompiledTemplate.cathedral_new = Handlebars.compile("{{cycle_init}}<table class='table scrolling_allowed' style='min-width:320px;width:320px'><tbody><tr class='scrolling_allowed'><td colspan='2'><font color='" + COLOR.TEAL + "' style='font-weight:bold;text-shadow:0px 0px 2px #000000;'>Items are safe if you die in a cathedral run.</font></td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>Cooldown  </td>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>48 hours</td></tr><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>{{#if timer}}Time remaining  </td>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><span id='cathedral_time_remaining'>{{this.time_remaining}} minutes</span></td><tr class='{{cycle_table}} scrolling_allowed' style='vertical-align:middle'>  <td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'>-1x Repeat Quest Permission</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><button onclick='javascript:Cathedral.client_reduce_time();' class='market_select pointer' style='margin: 0px;font-weight: bold;'>-60 minutes</button>{{else}}</td><td class='scrolling_allowed' style='vertical-align:middle;height: 24px;'><button onclick='javascript:Cathedral.client_start();' class='market_select pointer' style='margin: 0px;font-weight: bold;'>Start</button>{{/if}}  </td></tr></tbody></table>"));
        return CompiledTemplate.cathedral_new;
    },
    steam_highscores_options: function() {
        "undefined" == typeof CompiledTemplate.steam_highscores_options && (CompiledTemplate.steam_highscores_options = Handlebars.compile("<div><select id='steam_highscores_skill' onchange='Steam.highscore.fetch()' class='market_select'>{{#each this.skills}}<option value='{{this.value}}'>{{this.name}}</option>{{/each}}</select>{{#each this.types}}<a class='common_link' onclick='Steam.highscore.update_type(\"{{this.value}}\")'>{{this.name}}</a>{{/each}}</div><div id='steam_highscores_data' style='margin-top:10px;'>Loading...</div>"));
        return CompiledTemplate.steam_highscores_options;
    },
    steam_highscores: function() {
        "undefined" == typeof CompiledTemplate.steam_highscores && (CompiledTemplate.steam_highscores = Handlebars.compile("{{cycle_init}}<div style='height:380px;display:block;overflow-x:hidden;'><table class='table scrolling_allowed' style='min-width:500px;width:500px;'><tbody><tr><th></th><th>Screenname</th><th>Player</th><th>Points</th></tr>{{#each this}}<tr class='{{cycle_table}} scrolling_allowed' {{#if this.me}}style='font-weight:bold'{{/if}}>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.rank}}</span></td>  <td class='scrolling_allowed' style='max-width: 240px;text-overflow: ellipsis;overflow: hidden;'>   <span class='scrolling_allowed'>{{this.screenname}}</span></td>  <td class='scrolling_allowed' style='max-width: 140px;text-overflow: ellipsis;overflow: hidden;'>   <span class='scrolling_allowed'>{{this.player}}</span></td>  <td class='scrolling_allowed' style='min-width:58px;'>   <span class='scrolling_allowed'>{{this.score}}</span></td></tr>{{/each}}</tbody></table></div>"));
        return CompiledTemplate.steam_highscores;
    }
}, handlebars_cycle_table = !1, handlebars_numbers = 0, handlebar_helper_initialized = !1;

function initHandlebars() {
    handlebar_helper_initialized || (handlebar_helper_initialized = !0, Handlebars.registerHelper("foreach", function(array, block) {
        return block.inverse && !array.length ? block.inverse(this) : array.map(function(item, index) {
            item.$index = index;
            item.$first = 0 === index;
            item.$last = index === array.length - 1;
            return block.fn(item);
        }).join("");
    }), Handlebars.registerHelper("inc", function(v) {
        return v + 1;
    }), Handlebars.registerHelper("time", function(context) {
        return MapTimer.format_time(context);
    }), Handlebars.registerHelper("text_capitalise", function(context) {
        return capitaliseFirstLetter(context);
    }), Handlebars.registerHelper("reward_background", function(fn) {
        if (fn.item_id) fn = Items.get_background_image(fn.item_id); else {
            var i = IMAGE_SHEET[fn.sheet];
            fn = 'background:url("' + i.url + '") no-repeat scroll ' + -fn.x * i.tile_width + "px " + -fn.y * i.tile_height + "px transparent;";
        }
        return fn;
    }), Handlebars.registerHelper("item_categories_select", function(id, nameFn) {
        var c = document.getElementById(id + "_category"), ret = -1;
        c && (ret = c.value);
        for (var c = "<select value='" + ret + "' id='" + id + "_category' class='market_select' onchange='FormHelper.update_item_list_select(\"" + id + '", ' + nameFn + ")'>", d = -1; d < ITEM_CATEGORY_COUNT; d++) c += "<option " + (d == ret ? "selected='true'" : "") + " value='" + item_categories[d].id + "'>" + item_categories[d].name + "</option>";
        return new Handlebars.SafeString(c + "</select>");
    }), Handlebars.registerHelper("reward_description", function(list) {
        return list.item_id ? item_base[list.item_id].name + Items.info(list.item_id) : list.desc;
    }), Handlebars.registerHelper("item_name", function(context) {
        return -1 == context ? "Coins" : "undefined" == typeof context ? "" : item_base[context].name;
    }), Handlebars.registerHelper("cycle_init", function() {
        handlebars_cycle_table = !1;
        return "";
    }), Handlebars.registerHelper("cycle_table", function() {
        return (handlebars_cycle_table = !handlebars_cycle_table) ? "row even" : "row";
    }), Handlebars.registerHelper("item_stats", function(arg) {
        return 0 <= arg ? Items.info(arg).trim() : "";
    }), Handlebars.registerHelper("quest_reward", function(a, b) {
        return Quests.show_reward(a, b);
    }), Handlebars.registerHelper("item_price", function(context) {
        return thousandSeperate(context);
    }), Handlebars.registerHelper("item_image", Items.get_background_image), Handlebars.registerHelper("npc_image", function(msg) {
        msg = npc_base[msg];
        var i = IMAGE_SHEET[msg.img.sheet];
        return 'background:url("' + i.url + '") no-repeat scroll ' + -msg.img.x * i.tile_width + "px " + -msg.img.y * i.tile_height + "px transparent;";
    }), Handlebars.registerHelper("magic_image", function(msg) {
        msg = Magic[msg];
        var i = IMAGE_SHEET[msg.img.sheet];
        return 'background:url("' + i.url + '") no-repeat scroll ' + -msg.img.x * i.tile_width + "px " + -msg.img.y * i.tile_height + "px transparent;";
    }), Handlebars.registerHelper("carpentry_image", function(context, block) {
        var params = item_base[context], params = BASE_TYPE[params.params.carpentry_type][params.params.carpentry_id], params = params.top || params.img;
        if ("undefined" != typeof params.sheet_file) {
            var img = IMAGE_SHEET[params.sheet_file].sprite.imgs[params.file];
            return "background-image:url(" + img.toDataURL("image/png") + ");background-repeat:no-repeat;";
        }
        img = IMAGE_SHEET[params.sheet];
        return 'background:url("' + img.url + '") no-repeat scroll ' + -(params.x + block) * img.tile_width + "px " + -params.y * img.tile_height + "px transparent;";
    }), Handlebars.registerHelper("chest_count", function(fn, min, max, step) {
        return Chest.player_chest_item_count(0, fn) < min ? step : max;
    }), Handlebars.registerHelper("level_requirement", function(context, block) {
        return skills[0][context].current >= block ? !0 : !1;
    }), Handlebars.registerHelper("carpentry_formula_available", function(context, block) {
        var fn = function() {
            if (!params.craftable || skills[0].carpentry.current < params.level) return !1;
            for (var item in params.consumes) {
                var d = params.consumes[item], e = Chest.player_chest_item_count(0, d.id);
                if (d.count > e) return !1;
            }
            return !0;
        }, params = CARPENTRY_FORMULAS[Carpentry.category][context];
        return !Carpentry.only_available || params && (0 < Chest.player_chest_item_count(0, params.item_id) || fn()) ? block.fn(this) : block.inverse(this);
    }), Handlebars.registerHelper("carpentry_has_enough_materials", function(a, b) {
        var o = CARPENTRY_FORMULAS[Carpentry.category][a];
        return o && function() {
            if (!o.craftable || skills[0].carpentry.current < o.level) return !1;
            for (var i in o.consumes) {
                var d = o.consumes[i], e = Chest.player_chest_item_count(0, d.id);
                if (d.count > e) return !1;
            }
            return !0;
        }() ? b.fn(this) : b.inverse(this);
    }), Handlebars.registerHelper("met_level_requirements", function(context, fn, inverse) {
        return skills[0][context].current >= fn ? inverse.fn(this) : inverse.inverse(this);
    }), Handlebars.registerHelper("subscribed_to_channel", function(name, block) {
        return Contacts.channels[name] ? block.fn(this) : block.inverse(this);
    }), Handlebars.registerHelper("market_offers", function() {
        return players[0].params.market_offers;
    }), Handlebars.registerHelper("channel_description", function(context) {
        return channel_descriptions[context];
    }), Handlebars.registerHelper("can_upgrade_market_offers", function(context) {
        return players[0].params.market_offers < Market.max_market_offers ? context.fn(this) : context.inverse(this);
    }), Market.client_search_results_template(), Market.client_open_offer_template());
}

var Popup = {
    prompt: function(message, title, callback) {
        removeClass(document.getElementById("prompt"), "hidden");
        document.getElementById("prompt_question").innerHTML = message;
        Popup.active_popup_text = message;
        Popup.prompt_callback_variable = title;
        Popup.prompt_callback_no_variable = "function" == typeof callback ? callback : function() {};
        windowOpen = !0;
    },
    prompt_close: function() {
        Popup.active_popup_text = "";
        addClass(document.getElementById("prompt"), "hidden");
    },
    prompt_confirm: function() {
        Popup.prompt_close();
        Popup.prompt_callback_variable();
    },
    prompt_decline: function() {
        Popup.prompt_close();
        Popup.prompt_callback_no_variable();
    },
    dual_prompt: function(s, pattern, repl, n, text, override) {
        Popup.active_popup_text = s;
        removeClass(document.getElementById("dual_prompt"), "hidden");
        document.getElementById("dual_prompt_question").innerHTML = s;
        Popup.prompt_callback_variable1 = repl;
        document.getElementById("dual_prompt_choice1").innerHTML = pattern;
        Popup.prompt_callback_variable2 = text;
        document.getElementById("dual_prompt_choice2").innerHTML = n;
        Popup.prompt_callback_no_variable = "function" == typeof override ? override : function() {};
        windowOpen = !0;
    },
    dual_prompt_close: function() {
        Popup.active_popup_text = "";
        addClass(document.getElementById("dual_prompt"), "hidden");
    },
    dual_prompt_confirm_first: function() {
        Popup.dual_prompt_close();
        Popup.prompt_callback_variable1();
    },
    dual_prompt_confirm_second: function() {
        Popup.dual_prompt_close();
        Popup.prompt_callback_variable2();
    },
    dual_prompt_decline: function() {
        Popup.dual_prompt_close();
        Popup.prompt_callback_no_variable();
    },
    input_prompt: function(rotation, scaleX, scaleY) {
        Popup.active_popup_text = rotation;
        supports.datalist && (document.getElementById("input_prompt_answer").setAttribute("list", ""), 
        "string" == typeof scaleY && document.getElementById("input_prompt_answer").setAttribute("list", scaleY));
        removeClass(document.getElementById("input_prompt"), "hidden");
        document.getElementById("input_prompt_question").innerHTML = rotation;
        document.getElementById("input_prompt_answer").value = "";
        GAME_STATE == GAME_STATES.CHAT && ChatSystem.toggle();
        document.getElementById("input_prompt_answer").focus();
        Popup.input_prompt_callback_variable = scaleX;
        windowOpen = Popup.input_prompt_active = !0;
    },
    input_prompt_confirm: function() {
        Popup.input_prompt_close();
        Popup.input_prompt_callback_variable(document.getElementById("input_prompt_answer").value);
    },
    input_prompt_close: function() {
        Popup.active_popup_text = "";
        addClass(document.getElementById("input_prompt"), "hidden");
        Popup.input_prompt_active = !1;
    },
    input_prompt_active: !1,
    prompt_callback_variable: !1,
    prompt_callback_no_variable: !1,
    dialog_no_force: !1,
    dialog: function(s, table, cell, cellIndex) {
        Popup.active_popup_text = s;
        removeClass(document.getElementById("dialog"), "dialog_big");
        removeClass(document.getElementById("dialog"), "dialog_biggest");
        "undefined" != typeof cell && addClass(document.getElementById("dialog"), "dialog_" + cell);
        removeClass(document.getElementById("dialog"), "hidden");
        document.getElementById("dialog_text").innerHTML = s;
        Popup.dialog_callback_variable = table;
        Popup.dialog_no_force = cellIndex || !1;
        windowOpen = !0;
    },
    on_top_dialog: function(box, h, d) {
        document.getElementById("dialog").style.zIndex = 1e4;
        Popup.dialog(box, function() {
            document.getElementById("dialog").style.zIndex = 500;
            h();
        }, d);
    },
    dialog_close: function(a) {
        Popup.active_popup_text = "";
        addClass(document.getElementById("dialog"), "hidden");
        if (!a || Popup.dialog_no_force) Popup.dialog_callback_variable(), Popup.dialog_no_force && (Popup.dialog_callback_variable = null_function);
    },
    accept: function() {
        hasClass(document.getElementById("prompt"), "hidden") ? hasClass(document.getElementById("dialog"), "hidden") ? hasClass(document.getElementById("input_prompt"), "hidden") || Popup.input_prompt_confirm() : Popup.dialog_close() : Popup.prompt_confirm();
    },
    dialog_callback_variable: !1,
    input_prompt_callback_variable: !1,
    active_popup_text: ""
}, Magic = {
    0: {
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 1,
            speed: 16,
            length: 8
        },
        params: {}
    },
    1: {
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 2,
            speed: 16,
            length: 8
        },
        params: {}
    },
    2: {
        name: "Flash Bolt",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 0,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 2,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 5,
            min_level: 1,
            penetration: 3,
            uses: 75
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 0,
            y: 0
        }
    },
    3: {
        name: "Air Bolt",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 12,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 3,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 6,
            min_level: 3,
            penetration: 4,
            uses: 75
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 1,
            y: 0
        }
    },
    4: {
        name: "Earth Bolt",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 10,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 3,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 6,
            min_level: 5,
            penetration: 5,
            uses: 75
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 2,
            y: 0
        }
    },
    5: {
        name: "Water Bolt",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 11,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 4,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 6,
            min_level: 7,
            penetration: 6,
            uses: 75
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 3,
            y: 0
        }
    },
    6: {
        name: "Fire Bolt",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 5,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 5,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 6,
            min_level: 9,
            penetration: 7,
            uses: 75
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 4,
            y: 0
        }
    },
    7: {
        name: "Flash Missile",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 6,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 5,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 3500,
            xp: 8,
            min_level: 10,
            penetration: 8,
            uses: 70
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 0,
            y: 1
        }
    },
    8: {
        name: "Air Missile",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 15,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 6,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 3500,
            xp: 12,
            min_level: 13,
            penetration: 9,
            uses: 70
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 1,
            y: 1
        }
    },
    9: {
        name: "Water Missile",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 14,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 6,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 3500,
            xp: 12,
            min_level: 16,
            penetration: 10,
            uses: 70
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 3,
            y: 1
        }
    },
    10: {
        name: "Earth Missile",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 13,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 8,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 3500,
            xp: 16,
            min_level: 18,
            penetration: 11,
            uses: 70
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 2,
            y: 1
        }
    },
    11: {
        name: "Fire Missile",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 16,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 8,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 3500,
            xp: 17,
            min_level: 20,
            penetration: 12,
            uses: 70
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 4,
            y: 1
        }
    },
    12: {
        name: "Flash Wave",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 17,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 8,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 5e3,
            xp: 17,
            min_level: 24,
            penetration: 13,
            uses: 65
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 0,
            y: 2
        }
    },
    13: {
        name: "Air Wave",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 19,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 9,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 5e3,
            xp: 18,
            min_level: 28,
            penetration: 14,
            uses: 65
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 1,
            y: 2
        }
    },
    14: {
        name: "Earth Wave",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 18,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 9,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 5e3,
            xp: 18,
            min_level: 32,
            penetration: 15,
            uses: 65
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 2,
            y: 2
        }
    },
    15: {
        name: "Water Wave",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 7,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 10,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 5e3,
            xp: 20,
            min_level: 36,
            penetration: 16,
            uses: 65
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 3,
            y: 2
        }
    },
    16: {
        name: "Fire Wave",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 20,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 10,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 5e3,
            xp: 20,
            min_level: 40,
            penetration: 17,
            uses: 65
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 4,
            y: 2
        }
    },
    17: {
        name: "Flash Blast",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 9,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 10,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 6500,
            xp: 18,
            min_level: 45,
            penetration: 18,
            uses: 60
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 0,
            y: 3
        }
    },
    18: {
        name: "Air Blast",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 21,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 11,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 6500,
            xp: 19,
            min_level: 50,
            penetration: 19,
            uses: 60
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 1,
            y: 3
        }
    },
    19: {
        name: "Earth Blast",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 22,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 11,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 6500,
            xp: 20,
            min_level: 55,
            penetration: 20,
            uses: 60
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 2,
            y: 3
        }
    },
    20: {
        name: "Water Blast",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 23,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 11,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 6500,
            xp: 20,
            min_level: 60,
            penetration: 21,
            uses: 60
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 3,
            y: 3
        }
    },
    21: {
        name: "Fire Blast",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 24,
            speed: 8,
            length: 8
        },
        params: {
            basic_damage: 12,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 6500,
            xp: 21,
            min_level: 62,
            penetration: 22,
            uses: 60
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 4,
            y: 3
        }
    },
    22: {
        name: "Poison Rain",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 26,
            speed: 24,
            length: 24
        },
        params: {
            basic_damage: 13,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 9e3,
            xp: 23,
            min_level: 65,
            penetration: 23,
            uses: 50
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 2,
            y: 4
        }
    },
    23: {
        name: "Blizzard",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 25,
            speed: 24,
            length: 24
        },
        params: {
            basic_damage: 13,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 9e3,
            xp: 25,
            min_level: 69,
            penetration: 24,
            uses: 50
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 3,
            y: 4
        }
    },
    24: {
        name: "Zeus Rage",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 27,
            speed: 24,
            length: 24
        },
        params: {
            basic_damage: 14,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 9e3,
            xp: 29,
            min_level: 74,
            penetration: 25,
            uses: 50
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 0,
            y: 4
        }
    },
    25: {
        name: "Meteor Storm",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 8,
            speed: 24,
            length: 24
        },
        params: {
            basic_damage: 14,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 9e3,
            xp: 35,
            min_level: 80,
            penetration: 26,
            uses: 50
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 4,
            y: 4
        }
    },
    26: {
        name: "Firecracker",
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 28,
            speed: 16,
            length: 16
        },
        params: {
            basic_damage: 8,
            fire_damage: 0,
            water_damage: 0,
            earth_damage: 0,
            air_damage: 0,
            cooldown: 2e3,
            xp: 1,
            min_level: 1,
            penetration: 10,
            uses: 20
        },
        img: {
            sheet: IMAGE_SHEET.SICOS,
            x: 1,
            y: 5
        }
    },
    27: {
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 29,
            speed: 8,
            length: 4
        },
        params: {}
    },
    28: {
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 30,
            speed: 8,
            length: 4
        },
        params: {}
    },
    29: {
        animation: {
            sheet: IMAGE_SHEET.MAGIC,
            row: 3,
            speed: 8,
            length: 8
        },
        params: {}
    }
}, WebPayment = {
    init: function() {},
    open: function(results) {
        if ("Name" != players[0].name) {
            var i = document.getElementById("payment_form");
            if ("block" != i.style.display || results) {
                results || _gaq.push([ "_trackPageview", "/open_mos_market" ]);
                document.getElementById("payment_aol").style.display = "none";
                document.getElementById("payment_credit_card").style.display = "none";
                document.getElementById("payment_bitcoin").style.display = "none";
                document.getElementById("payment_mocospace").style.display = "none";
                document.getElementById("payment_kongregate").style.display = "none";
                document.getElementById("payment_steam").style.display = "none";
                document.getElementById("payment_item_preview").style.display = "none";
                document.getElementById("payment_form").style.display = "block";
                document.getElementById("payment_main").style.display = "block";
                results = JSON.clone(ItemPacks);
                for (i = 0; i < results.length; i++) results[i].enabled ? results[i].is_premium && Player.has_premium(players[0].temp.premium_until) && (results.splice(i, 1), 
                --i) : (results.splice(i, 1), --i);
                sortArrayOfObjectsByFieldValueAsc(results, "price_mos");
                for (i = 0; i < results.length; i++) results[i].classes = i % 2 ? "row even" : "row";
                document.getElementById("payment_items").innerHTML = WebPayment.items_template()({
                    results: results
                });
            } else i.style.display = "none";
        }
    },
    open_gamescom: function(_args) {
        document.getElementById("regular_payment_options").style.display = "none";
        document.getElementById("gamescom_payment_options").style.display = "inline";
        WebPayment.open(_args);
    },
    open_kongregate: function(_args) {
        document.getElementById("regular_payment_options").style.display = "none";
        document.getElementById("kongregate_payment_options").style.display = "inline";
        WebPayment.open(_args);
    },
    open_steam: function(_args) {
        document.getElementById("regular_payment_options").style.display = "none";
        document.getElementById("steam_payment_options").style.display = "inline";
        WebPayment.open(_args);
    },
    open_mocospace: function(_args) {
        document.getElementById("regular_payment_options").style.display = "none";
        document.getElementById("mocospace_payment_options").style.display = "inline";
        WebPayment.open(_args);
    },
    update: function() {
        var op = document.getElementById("payment_item_pack_id");
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        document.getElementById("paypal_hash").value = players[0].name + "|" + op.value + "|1";
        document.getElementById("paypal_amount").value = ItemPacks[op.value].price_usd.toFixed(2);
        document.getElementById("payment_sum").innerHTML = ItemPacks[op.value].price_usd.toFixed(2);
        for (var str = "", i = 0; i < ItemPacks[op.value].items.length; i++) {
            var id = WebPayment.item_img(ItemPacks[op.value].items[i].id), mode = item_base[ItemPacks[op.value].items[i].id].name;
            1 < ItemPacks[op.value].items[i].count && (str += ItemPacks[op.value].items[i].count + "x");
            str += '<span style="' + id + 'width: 32px;height: 32px;display: inline-block;margin: 0px;padding: 0px;" class="tooltip" title="' + mode + '" onclick="Items.get_info(' + ItemPacks[op.value].items[i].id + ')">&nbsp;</span>';
        }
        0 < ItemPacks[op.value].coins && (str += "<div>+ " + thousandSeperate(ItemPacks[op.value].coins) + " coins</div>");
        document.getElementById("payment_content").innerHTML = str;
    },
    update_credit: function(service) {
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        var s = ItemPacks[service];
        document.getElementById("paypal_hash").value = players[0].name + "|" + service + "|1";
        document.getElementById("paypal_amount").value = s.price_usd.toFixed(2);
        document.getElementById("payment_sum").innerHTML = s.price_usd.toFixed(2);
    },
    aol_update_credit: function(service) {
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        var s = ItemPacks[service];
        document.getElementById("aol_start_payment_link").onclick = function() {
            WebPayment.aol_start(s.price_usd.toFixed(2), players[0].name + "|" + service + "|1");
        };
        document.getElementById("aol_payment_sum").innerHTML = s.price_usd.toFixed(2);
    },
    kongregate_update_credit: function(next) {
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        var c = ItemPacks[next];
        document.getElementById("kongregate_start_payment_link").onclick = function() {
            WebPayment.kongregate_start(next);
        };
        document.getElementById("kongregate_payment_sum").innerHTML = 13 * Math.round(c.price_usd.toFixed(2));
    },
    mocospace_update_credit: function(next) {
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        var c = ItemPacks[next];
        document.getElementById("mocospace_start_payment_link").onclick = function() {
            WebPayment.mocospace_start(c);
        };
        document.getElementById("mocospace_payment_sum").innerHTML = 161 * Math.round(c.price_usd.toFixed(2));
    },
    steam_update_credit: function(next) {
        "Name" == players[0].name && (document.getElementById("payment_form").style.display = "none");
        document.getElementById("steam_error").style.display = "none";
        document.getElementById("steam_options").style.display = "block";
        document.getElementById("steam_loading").style.display = "none";
        var c = ItemPacks[next];
        document.getElementById("steam_start_payment_link").onclick = function() {
            WebPayment.steam_start(c);
        };
        document.getElementById("steam_payment_sum").innerHTML = c.price_usd.toFixed(2);
        document.getElementById("steam_payment_vat").innerHTML = "";
        Country.vat_required(players[0].temp.country) && (document.getElementById("steam_payment_vat").innerHTML = " + " + Country.abbr(players[0].temp.country) + " ");
    },
    update_bitcoin: function(factories) {
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_bitcoin").style.display = "block";
        document.getElementById("btc_options").style.display = "block";
        document.getElementById("btc_loading").style.display = "none";
        var b = [ 30, 40, 4, 2 ], c;
        for (c in b) {
            var e = b[c], stats = document.getElementById("btc_" + e);
            factories[e] ? (document.getElementById("btc_" + e + "_link").href = "https://coinbase.com/checkouts/" + factories[e], 
            stats.style.display = "block") : stats.style.display = "none";
        }
    },
    item_img: function(shape) {
        shape = item_base[shape];
        var q1 = IMAGE_SHEET[shape.img.sheet];
        return "background:url('" + q1.url + "') no-repeat scroll " + -shape.img.x * q1.tile_width + "px " + -shape.img.y * q1.tile_height + "px transparent;";
    },
    mobile: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_mobile" ]);
        isMobile() && (document.getElementById("payment_form").style.display = "none");
        window.open("http://fortumo.com/mobile_payments/b6e3084243736cfc5568a026abffe0a9?cuid=" + encodeURIComponent(players[0].name), "_blank");
    },
    bitcoin: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_bitcoin" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_bitcoin").style.display = "block";
        document.getElementById("btc_options").style.display = "none";
        document.getElementById("btc_loading").style.display = "block";
        Socket.send("btc_open");
    },
    other: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_paymentwall" ]);
        window.open("https://api.paymentwall.com/api/ps/?key=e20340eef8f99c10151ed523382907fb&uid=" + encodeURIComponent(players[0].name) + "&widget=p10_1", "_blank");
    },
    credit_card: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_credit_card" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_credit_card").style.display = "block";
        document.getElementById("credits_2100").checked = !0;
        document.getElementById("payment_vat").innerHTML = "";
        Country.vat_required(players[0].temp.country) && (document.getElementById("payment_vat").innerHTML = " + " + Country.abbr(players[0].temp.country));
        WebPayment.update_credit(4);
    },
    kongregate: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_kongregate" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_kongregate").style.display = "block";
        document.getElementById("kongregate_credits_2100").checked = !0;
        WebPayment.kongregate_update_credit(4);
    },
    kongregate_start: function(o) {
        kongregate.api.mtx.purchaseItems([ o + "" ], function(call_arguments) {
            call_arguments.success && WebPayment.check_kongregate_payment();
        });
    },
    mocospace: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_mocospace" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_mocospace").style.display = "block";
        document.getElementById("mocospace_credits_2100").checked = !0;
        WebPayment.mocospace_update_credit(4);
    },
    mocospace_start: function(obj) {
        var loc = 161 * Math.round(obj.price_usd.toFixed(2));
        MocoSpace.goldTransaction(loc, obj.name, {
            onSuccess: function(n, r, load) {
                LazyLoad.js("https://rpg-de.mo.ee/payments/mocospace/?player=" + encodeURIComponent(players[0].name.toLowerCase()) + "&token=" + encodeURIComponent(load) + "&timestamp=" + encodeURIComponent(r) + "&amount=" + encodeURIComponent(loc) + "&item=" + encodeURIComponent(obj.id) + "&id=" + encodeURIComponent(n), function() {});
            },
            onError: function(error) {
                alert("Error getting item: " + error);
                WebPayment.open(!0);
            },
            onAbort: function() {
                WebPayment.open(!0);
            },
            onAsync: function() {}
        }, obj.img);
    },
    aol: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_aol" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_aol").style.display = "block";
        document.getElementById("aol_credits_2100").checked = !0;
        WebPayment.aol_update_credit(4);
    },
    aol_start: function(path, data) {
        GAMESAPI.TRANSACTION.startTransaction(path, data, "RPGMO_MOS_CREDITS", function(data) {
            data && data.data && data.data.assetId && data.data.amount && data.data.orderId && WebPayment.report_aol_payment(data.data.amount, data.data.assetId, data.data.orderId);
        }, function(error) {});
    },
    steam: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_steam" ]);
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_steam").style.display = "block";
        document.getElementById("steam_options").style.display = "none";
        document.getElementById("steam_error").style.display = "none";
        document.getElementById("steam_loading").style.display = "block";
        if ("undefined" == typeof greenworks || !greenworks || !greenworks.initAPI() || !greenworks.getSteamId()) return WebPayment.steam_failed();
        Socket.send("steam", {
            sub: "open",
            steamid: greenworks.getSteamId().staticAccountId
        });
    },
    steam_failed: function() {
        _gaq.push([ "_trackPageview", "/open_mos_market_failed_steam" ]);
        document.getElementById("steam_error").style.display = "block";
        document.getElementById("steam_options").style.display = "none";
        document.getElementById("steam_loading").style.display = "none";
    },
    steam_start: function(pageContext) {
        Socket.send("steam", {
            sub: "start_payment",
            steamid: greenworks.getSteamId().staticAccountId,
            item_pack_id: pageContext.id,
            web: "linux" == process.platform || Steam.payment_issues
        });
    },
    items_template: function() {
        "undefined" == typeof web_payment_items_template && (web_payment_items_template = Handlebars.compile("<table class='table scrolling_allowed'><tbody class='scrolling_allowed'><tr><th></th><th>Item</th><th>Price</th><th></th></tr>{{#each results}}<tr class='{{this.classes}} scrolling_allowed' onclick='WebPayment.open_offer({{this.id}})'>  <td></td>  <td class='scrolling_allowed'>{{#if this.is_hot}}<font color='red'>HOT! </font>{{/if}}{{#if this.is_new}}<font color='yellow'>NEW! </font>{{/if}}{{this.name}}</td>  <td>{{this.price_mos}}</td>  <td class='scrolling_allowed'><button onclick='WebPayment.buy({{this.id}})' class='market_select pointer'>Buy</button></td></tr>{{/each}}</tbody></table>"));
        return web_payment_items_template;
    },
    open_offer: function(key) {
        web_payment_active = key;
        var str = "";
        ItemPacks[key].desc && (str = "<p>" + ItemPacks[key].desc + "</p>");
        for (var i = 0; i < ItemPacks[key].items.length; i++) {
            var id = WebPayment.item_img(ItemPacks[key].items[i].id), mode = item_base[ItemPacks[key].items[i].id].name;
            1 < ItemPacks[key].items[i].count && (str += ItemPacks[key].items[i].count + "x");
            str += '<span style="' + id + 'width: 32px;height: 32px;display: inline-block;margin: 0px;padding: 0px;" class="tooltip" title="' + mode + '" onclick="Items.get_info(' + ItemPacks[key].items[i].id + ')">&nbsp;</span>';
        }
        0 < ItemPacks[key].coins && (str += "<div>+ " + thousandSeperate(ItemPacks[key].coins) + " coins</div>");
        document.getElementById("payment_main").style.display = "none";
        document.getElementById("payment_item_preview").style.display = "block";
        loadSpecificImage("market_example_small");
        document.getElementById("payment_content").innerHTML = str;
    },
    buy: function(callback) {
        "undefined" == typeof callback ? callback = web_payment_active : web_payment_active = callback;
        last_mos_balance < ItemPacks[callback].price_mos ? Popup.dialog("You do not have enough MOS points!", function() {
            WebPayment.open(!0);
            "undefined" != typeof kongregate && WebPayment.kongregate();
        }) : Popup.prompt("Are you sure?", function() {
            ItemPacks[callback].is_premium ? Socket.send("premium", {
                accept: !0
            }) : Socket.send("web_payment_buy", {
                item_pack_id: callback
            });
        });
    },
    set_balance: function(html) {
        document.getElementById("payment_mos_amount").innerHTML = html;
    },
    report_aol_payment: function(name, value, minutes, delay) {
        setTimeout(function() {
            LazyLoad.js("https://rpg-de.mo.ee/payments/gamescom/?price=" + encodeURIComponent(name) + "&assetid=" + encodeURIComponent(value) + "&orderid=" + encodeURIComponent(minutes) + "&sessionid=" + encodeURIComponent(gamescom.sessionid) + "&access_token=" + encodeURIComponent(gamescom.access_token) + "&t=" + timestamp(), function() {});
        }, delay || 1e3);
    },
    check_kongregate_payment: function() {
        "name" == players[0].name.toLowerCase() ? setTimeout(function() {
            WebPayment.check_kongregate_payment();
        }, 1e3) : setTimeout(function() {
            LazyLoad.js("https://rpg-de.mo.ee/payments/kongregate/?user_id=" + encodeURIComponent(kongregate.api.services.getUserId()) + "&player=" + encodeURIComponent(players[0].name.toLowerCase()) + "&game_auth_token=" + encodeURIComponent(kongregate.api.services.getGameAuthToken()) + "&t=" + timestamp(), function() {});
        }, 1e3);
    }
}, mtgox = !1;

function detectMobile(string) {
    return /android|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(string) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(string.substr(0, 4));
}

function isMobile() {
    return detectMobile(navigator.userAgent || navigator.vendor || window.opera);
}

var Pet = {
    init: function(item, from) {
        var req = item_base[from];
        if (!Items.requirements_met(item, from)) return !1;
        clients[item.id].pet.id != req.params.pet && (clients[item.id].pet = JSON.merge({
            id: 0,
            enabled: !1,
            chest: [],
            xp: 0
        }, clients[item.id].pet), clients[item.id].pet.xp = 0);
        clients[item.id].pet.id = req.params.pet;
        clients[item.id].pet.enabled = !0;
        Player.send_pet_data(item.id);
    },
    inc_xp: function(item, selected) {
        clients[item.id].pet.enabled && Inventory.has_equipped(item, pets[clients[item.id].pet.id].params.item_id) && (clients[item.id].pet.xp += selected, 
        pets[clients[item.id].pet.id].params.xp_required && clients[item.id].pet.xp >= pets[clients[item.id].pet.id].params.xp_required && Pet.to_next_level(item));
    },
    evolution_stone: function(client) {
        client = clients[client];
        if (clients[client.id].pet.enabled && Inventory.has_equipped(client, pets[clients[client.id].pet.id].params.item_id)) {
            var id1 = pets[clients[client.id].pet.id];
            if (id1 && id1.params.requires_stone) if (Inventory.get_item_count(client, 710) >= id1.params.stones) {
                Pet.to_next_level(client);
                for (var minesPushed = 0; minesPushed < id1.params.stones; minesPushed++) Items.take_from_player(client.id, 710);
            } else Player.send_message(client.id, "You need " + id1.params.stones + " evolution stones to upgrade your pet.", COLOR.PINK);
        }
    },
    to_next_level: function(client) {
        var id1 = pets[clients[client.id].pet.id];
        if (id1.params.next_pet_item_id) {
            var key = id1.params.next_pet_item_id;
            Items.take_from_player(client.id, id1.params.item_id);
            Items.give_to_player(clients[client.id], key);
            Pet.init(clients[client.id], key);
            Pet.deinit(clients[client.id]);
        }
    },
    client_init: function(req) {
        if ("undefined" != typeof req.pet.id && req.pet.enabled) {
            if ("undefined" != typeof players[req.id + "pet"]) if (req.pet.id != players[req.id + "pet"].id) delete players[req.id + "pet"]; else return;
            players[req.id + "pet"] = getPlayersPet(req);
            req.me && GAME_STATE != GAME_STATES.SPECTATE && TopIcons.show("pet");
            Timers.set("move_pet" + req.id + "pet", function() {
                Pet.walk(req);
            }, parseInt(5e3 * Math.random()));
        }
    },
    client_init_breeding: function(petId, msg) {
        var i = "300_" + msg.i + "_" + msg.j;
        players[i] = getPlayersPet(players[0]);
        players[i].name = extract_island_owner() + "'s pet";
        players[i].img = pets[petId].img;
        players[i].i = msg.i;
        players[i].j = msg.j;
        players[i].params.orig_i = msg.i;
        players[i].params.orig_j = msg.j;
        players[i].temp.to.i = msg.i;
        players[i].temp.to.j = msg.j;
        players[i].temp.dest.i = msg.i;
        players[i].temp.dest.j = msg.j;
        Timers.set("move_pet" + i + "pet", function() {
            Pet.walk_breeder(i);
        }, parseInt(1e3 * Math.random()));
    },
    deinit: function(client) {
        clients[client.id].pet.enabled = !1;
        Player.send_pet_data(client.id);
    },
    client_deinit: function(attrs) {
        attrs.me && TopIcons.hide("pet");
        delete players[attrs.id + "pet"];
        Timers.clear("move_pet" + attrs.id + "pet");
    },
    walk: function(msg) {
        var p = msg.me ? 0 : msg.id;
        if ("undefined" == typeof players[p]) Pet.client_deinit(msg); else if (0 == p && msg.id != players[0].id) msg.me = !1, 
        Pet.client_deinit(msg); else if (players[p].pet.enabled) if ("undefined" == typeof players[msg.id + "pet"]) Pet.client_init(players[p]); else {
            var p = players[p], data = players[msg.id + "pet"];
            12 < distance(p.i, p.j, data.i, data.j) && (data.i = p.i, data.j = p.j, data.temp.to.i = p.i, 
            data.temp.to.j = p.j);
            data.map = p.map;
            data.temp.dest.i = p.i - 2 + (4 * Math.random() << 0);
            data.temp.dest.j = p.j - 2 + (4 * Math.random() << 0);
            Timers.set("move_pet" + msg.id + "pet", function() {
                Pet.walk(msg);
            }, 5e3 + 5e3 * Math.random() << 0);
        } else Pet.client_deinit(msg);
    },
    walk_breeder: function(i) {
        if ("undefined" != typeof players[i]) {
            var p = players[i];
            if ("undefined" == typeof on_map[p.map][p.params.orig_i][p.params.orig_j] || "undefined" == typeof on_map[p.map][p.params.orig_i][p.params.orig_j].params.pet_id) delete players[i]; else if (100 <= Breeding.get_pet_hunger(null, {
                i: players[i].params.orig_i,
                j: players[i].params.orig_j
            })) delete players[i]; else {
                var length = 3 * Math.random() << 0, n = 2 * Math.random() << 0;
                0 != length && (2 == length && (length = -1), p.temp.dest.i = p.i, p.temp.dest.j = p.j, 
                n ? p.temp.dest.i += length : p.temp.dest.j += length);
                map_walkable(p.map, p.temp.dest.i, p.temp.dest.j) || (p.temp.to.i = p.i, p.temp.to.j = p.j, 
                p.temp.dest.i = p.i, p.temp.dest.j = p.j);
                Timers.set("move_pet" + i + "pet", function() {
                    Pet.walk_breeder(i);
                }, 1e3 + 500 * Math.random() << 0);
            }
        }
    },
    init_menu: function() {
        BigMenu.show(-1);
        document.getElementById("pet_form").style.display = "block";
        for (var i = 0; 16 > i; i++) pets[players[0].pet.id].params.inventory_slots > i ? document.getElementById("pet_chest_" + i).style.display = "inline-block" : document.getElementById("pet_chest_" + i).style.display = "none";
        for (i = 0; 24 > i; i++) {
            var elem = document.getElementById("pet_inv_" + i);
            removeClass(elem, "selected");
            if ("undefined" != typeof players[0].temp.inventory[i]) {
                var o = item_base[players[0].temp.inventory[i].id], method = IMAGE_SHEET[o.img.sheet];
                elem.style.background = 'url("' + method.url + '") no-repeat scroll ' + -o.img.x * method.tile_width + "px " + -o.img.y * method.tile_height + "px transparent";
            } else elem.style.background = "";
        }
        for (i = 0; i < pets[players[0].pet.id].params.inventory_slots; i++) elem = document.getElementById("pet_chest_" + i), 
        removeClass(elem, "selected"), "undefined" != typeof players[0].pet.chest[i] ? (o = item_base[players[0].pet.chest[i]], 
        method = IMAGE_SHEET[o.img.sheet], elem.style.background = 'url("' + method.url + '") no-repeat scroll ' + -o.img.x * method.tile_width + "px " + -o.img.y * method.tile_height + "px transparent") : elem.style.background = "";
        i = "";
        i = pets[players[0].pet.id];
        i = i.params.xp_required ? "Pet experience " + Math.round(players[0].pet.xp) + " / " + i.params.xp_required + " (" + Math.floor(players[0].pet.xp / i.params.xp_required * 100) + "%)" : i.params.requires_stone ? "Pet needs Stone of Evolution to evolve." : "Pet has reached its maximum level.";
        document.getElementById("pet_settings").innerHTML = i;
    },
    add: function(id, i) {
        var client = clients[id];
        "undefined" != typeof client && (i = parseInt(i), client.temp.busy || !(0 <= i) || !client.pet.id || pets[client.pet.id].params.inventory_slots - 1 < client.pet.chest.length || client.temp.inventory.length <= i || (client = client.temp.inventory[i].id, 
        item_base[client].params && 12 == item_base[client].params.slot || !Inventory.remove(clients[id], client) || (clients[id].pet.chest.push(client), 
        Player.send_inventory(id), Player.send_pet_data(id))));
    },
    menu_add: function(minLength) {
        !Timers.running("pet_chest_add") && !players[0].temp.busy && pets[players[0].pet.id].params.inventory_slots > players[0].pet.chest.length && players[0].temp.inventory.length > minLength && (Socket.send("pet_chest_add", {
            inventory_slot: minLength
        }), Timers.set("pet_chest_add", null_function, 80));
    },
    remove: function(i, n) {
        var post = clients[i];
        "undefined" != typeof post && (n = parseInt(n), post.temp.busy || !post.pet.id || !(0 <= n) || n >= post.pet.chest.length || 40 <= post.temp.inventory.length || !Inventory.add(clients[i], post.pet.chest[n]) || (clients[i].pet.chest.splice(n, 1), 
        Player.send_inventory(i), Player.send_pet_data(i)));
    },
    menu_remove: function(minLength) {
        !Timers.running("pet_chest_remove") && !players[0].temp.busy && players[0].pet.chest.length > minLength && 40 > players[0].temp.inventory.length && (Socket.send("pet_chest_remove", {
            slot: minLength
        }), Timers.set("pet_chest_remove", null_function, 80));
    }
}, pets = [];

pets[1] = createObject({
    b_i: 1,
    b_t: BASE_TYPE.PET,
    name: "Baby Ruby Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 0
    },
    params: {
        item_id: 669,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 671,
        level: 1
    }
}, 1);

pets[2] = createObject({
    b_i: 2,
    b_t: BASE_TYPE.PET,
    name: "Gray Dog [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 9,
        y: 0
    },
    params: {
        item_id: 670,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 674,
        level: 1
    }
}, 1);

pets[3] = createObject({
    b_i: 3,
    b_t: BASE_TYPE.PET,
    name: "Ruby Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 5,
        y: 2
    },
    params: {
        item_id: 671,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 672,
        level: 2
    }
}, 1);

pets[4] = createObject({
    b_i: 4,
    b_t: BASE_TYPE.PET,
    name: "King Ruby Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 0,
        y: 4
    },
    params: {
        item_id: 672,
        inventory_slots: 12,
        requires_stone: !0,
        stones: 2,
        next_pet_item_id: 673,
        level: 3,
        eats: {
            285: .075,
            494: .025
        },
        eat_interval: 8,
        happiness: 20,
        insurance_cost: [ 97500, 70 ],
        breeding_level: 58,
        likes: [ {
            pet_id: 5,
            xp: 868,
            returns: [ {
                pet_id: 117,
                base_chance: .6,
                max_chance: .85
            } ]
        }, {
            pet_id: 38,
            xp: 1388,
            returns: [ {
                pet_id: 114,
                base_chance: .6,
                max_chance: .83
            }, {
                pet_id: 116,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 42,
            xp: 859,
            returns: [ {
                pet_id: 106,
                base_chance: .6,
                max_chance: .83
            }, {
                pet_id: 105,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[5] = createObject({
    b_i: 5,
    b_t: BASE_TYPE.PET,
    name: "Chaotic Ruby Dragon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 3
    },
    params: {
        item_id: 673,
        inventory_slots: 16,
        level: 4,
        eats: {
            283: .05,
            238: .25
        },
        eat_interval: 10,
        happiness: 30,
        insurance_cost: [ 397500, 270 ],
        breeding_level: 80
    }
}, 1);

pets[6] = createObject({
    b_i: 6,
    b_t: BASE_TYPE.PET,
    name: "Gray Wolf [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 17,
        y: 0
    },
    params: {
        item_id: 674,
        inventory_slots: 8,
        level: 2,
        eats: {
            8: .25,
            271: .3
        },
        eat_interval: 6,
        happiness: 12,
        insurance_cost: [ 19500, 15 ],
        breeding_level: 1,
        likes: [ {
            pet_id: 6,
            xp: 136,
            returns: [ {
                pet_id: 62,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 63,
                base_chance: .05,
                max_chance: .08
            } ]
        } ]
    }
}, 1);

pets[7] = createObject({
    b_i: 7,
    b_t: BASE_TYPE.PET,
    name: "Brown Dog [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 0
    },
    params: {
        item_id: 675,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 676,
        level: 1
    }
}, 1);

pets[8] = createObject({
    b_i: 8,
    b_t: BASE_TYPE.PET,
    name: "Brown Wolf [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 18,
        y: 0
    },
    params: {
        item_id: 676,
        inventory_slots: 8,
        level: 2,
        eats: {
            8: .25,
            272: .5
        },
        eat_interval: 6,
        happiness: 12,
        insurance_cost: [ 19500, 14 ],
        breeding_level: 1,
        likes: [ {
            pet_id: 8,
            xp: 136,
            returns: [ {
                pet_id: 72,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 63,
                base_chance: .06,
                max_chance: .08
            } ]
        } ]
    }
}, 1);

pets[9] = createObject({
    b_i: 9,
    b_t: BASE_TYPE.PET,
    name: "Baby Dinosaur [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 12,
        y: 0
    },
    params: {
        item_id: 677,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 678,
        level: 1
    }
}, 1);

pets[10] = createObject({
    b_i: 10,
    b_t: BASE_TYPE.PET,
    name: "Dinosaur [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 2,
        y: 7
    },
    params: {
        item_id: 678,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 679,
        level: 2
    }
}, 1);

pets[11] = createObject({
    b_i: 11,
    b_t: BASE_TYPE.PET,
    name: "Spiky Dinosaur [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 4,
        y: 8
    },
    params: {
        item_id: 679,
        inventory_slots: 12,
        level: 3,
        eats: {
            760: .1,
            271: .15,
            274: .2
        },
        eat_interval: 5,
        happiness: 20,
        insurance_cost: [ 97500, 70 ],
        breeding_level: 60,
        likes: [ {
            pet_id: 11,
            xp: 342,
            returns: [ {
                pet_id: 127,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 128,
                base_chance: .06,
                max_chance: .1
            } ]
        }, {
            pet_id: 32,
            xp: 294,
            returns: [ {
                pet_id: 99,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 100,
                base_chance: .06,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[12] = createObject({
    b_i: 12,
    b_t: BASE_TYPE.PET,
    name: "White Horse [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 19,
        y: 0
    },
    params: {
        item_id: 680,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 681,
        level: 1,
        eats: {
            757: .05,
            758: .15
        },
        eat_interval: 8,
        happiness: 24,
        insurance_cost: [ 3e5, 210 ],
        breeding_level: 75
    }
}, 1);

pets[13] = createObject({
    b_i: 13,
    b_t: BASE_TYPE.PET,
    name: "Unicorn [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 1
    },
    params: {
        item_id: 681,
        inventory_slots: 12,
        next_pet_item_id: 886,
        requires_stone: !0,
        stones: 2,
        level: 2
    }
}, 1);

pets[14] = createObject({
    b_i: 14,
    b_t: BASE_TYPE.PET,
    name: "Baby Beholder [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 1
    },
    params: {
        item_id: 682,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 683,
        level: 1
    }
}, 1);

pets[15] = createObject({
    b_i: 15,
    b_t: BASE_TYPE.PET,
    name: "Beholder [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 4,
        y: 1
    },
    params: {
        item_id: 683,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 684,
        level: 2
    }
}, 1);

pets[16] = createObject({
    b_i: 16,
    b_t: BASE_TYPE.PET,
    name: "King Beholder [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 5,
        y: 1
    },
    params: {
        item_id: 684,
        inventory_slots: 12,
        next_pet_item_id: 685,
        requires_stone: !0,
        stones: 2,
        level: 3,
        eats: {
            268: .05,
            269: .08
        },
        eat_interval: 6,
        happiness: 28,
        insurance_cost: [ 90675, 65 ],
        breeding_level: 45,
        likes: [ {
            pet_id: 16,
            xp: 477,
            returns: [ {
                pet_id: 119,
                base_chance: .7,
                max_chance: .85
            } ]
        }, {
            pet_id: 52,
            xp: 1890,
            returns: [ {
                pet_id: 97,
                base_chance: .65,
                max_chance: .83
            }, {
                pet_id: 75,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[17] = createObject({
    b_i: 17,
    b_t: BASE_TYPE.PET,
    name: "Demonic Beholder [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 0,
        y: 2
    },
    params: {
        item_id: 685,
        inventory_slots: 16,
        level: 4,
        eats: {
            268: .15,
            269: .2
        },
        eat_interval: 8,
        happiness: 30,
        insurance_cost: [ 390675, 280 ],
        breeding_level: 77,
        likes: [ {
            pet_id: 55,
            xp: 3212,
            returns: [ {
                pet_id: 78,
                base_chance: .6,
                max_chance: .86
            } ]
        } ]
    }
}, 1);

pets[18] = createObject({
    b_i: 18,
    b_t: BASE_TYPE.PET,
    name: "Ghost [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 2
    },
    params: {
        item_id: 686,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 687,
        level: 1
    }
}, 1);

pets[19] = createObject({
    b_i: 19,
    b_t: BASE_TYPE.PET,
    name: "Nightmare Ghost [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 3
    },
    params: {
        item_id: 687,
        inventory_slots: 8,
        level: 2,
        eats: {
            269: .15,
            233: .2,
            1300: .3,
            1301: .4
        },
        eat_interval: 6,
        happiness: 16,
        insurance_cost: [ 23400, 20 ],
        breeding_level: 5,
        likes: [ {
            pet_id: 19,
            xp: 164,
            returns: [ {
                pet_id: 137,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 122,
                base_chance: .05,
                max_chance: .1
            } ]
        }, {
            pet_id: 42,
            xp: 1094,
            returns: [ {
                pet_id: 65,
                base_chance: .58,
                max_chance: .75
            }, {
                pet_id: 129,
                base_chance: .06,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[20] = createObject({
    b_i: 20,
    b_t: BASE_TYPE.PET,
    name: "Angel [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 0,
        y: 9
    },
    params: {
        item_id: 688,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 689,
        level: 1
    }
}, 1);

pets[21] = createObject({
    b_i: 21,
    b_t: BASE_TYPE.PET,
    name: "Archangel [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 6
    },
    params: {
        item_id: 689,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 690,
        level: 2
    }
}, 1);

pets[22] = createObject({
    b_i: 22,
    b_t: BASE_TYPE.PET,
    name: "Sacred Archangel [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 3,
        y: 6
    },
    params: {
        item_id: 690,
        inventory_slots: 12,
        next_pet_item_id: 691,
        requires_stone: !0,
        stones: 4,
        level: 3,
        eats: {
            225: .15,
            1150: .5
        },
        eat_interval: 10,
        happiness: 30,
        insurance_cost: [ 585e3, 420 ],
        breeding_level: 82,
        likes: [ {
            pet_id: 53,
            xp: 2558,
            returns: [ {
                pet_id: 131,
                base_chance: .38,
                max_chance: .58
            }, {
                pet_id: 132,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[23] = createObject({
    b_i: 23,
    b_t: BASE_TYPE.PET,
    name: "Saint Archangel [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 7,
        y: 7
    },
    params: {
        item_id: 691,
        inventory_slots: 16,
        level: 4,
        eats: {
            1150: .25,
            225: .05
        },
        eat_interval: 20,
        happiness: 50,
        insurance_cost: [ 1185e3, 850 ],
        breeding_level: 95,
        likes: [ {
            pet_id: 23,
            xp: 4157,
            returns: [ {
                pet_id: 83,
                base_chance: .6,
                max_chance: .836
            }, {
                pet_id: 82,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 26,
            xp: 2185,
            returns: [ {
                pet_id: 85,
                base_chance: .55,
                max_chance: .72
            }, {
                pet_id: 84,
                base_chance: .06,
                max_chance: .1
            }, {
                pet_id: 125,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[24] = createObject({
    b_i: 24,
    b_t: BASE_TYPE.PET,
    name: "Skeleton [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 0,
        y: 4
    },
    params: {
        item_id: 692,
        xp_required: 2e5,
        inventory_slots: 4,
        next_pet_item_id: 693,
        level: 1
    }
}, 1);

pets[25] = createObject({
    b_i: 25,
    b_t: BASE_TYPE.PET,
    name: "Skeleton Warrior [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNDEAD,
        x: 6,
        y: 5
    },
    params: {
        item_id: 693,
        xp_required: 8e5,
        inventory_slots: 8,
        next_pet_item_id: 694,
        level: 2
    }
}, 1);

pets[26] = createObject({
    b_i: 26,
    b_t: BASE_TYPE.PET,
    name: "Skeleton King [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 7
    },
    params: {
        item_id: 694,
        inventory_slots: 12,
        next_pet_item_id: 711,
        requires_stone: !0,
        stones: 4,
        level: 3,
        eats: {
            233: .15,
            1300: .3,
            1301: .4,
            221: .5
        },
        eat_interval: 6,
        happiness: 16,
        insurance_cost: [ 60450, 45 ],
        breeding_level: 12
    }
}, 1);

pets[27] = createObject({
    b_i: 27,
    b_t: BASE_TYPE.PET,
    name: "Skeleton Overlord [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 10,
        y: 0
    },
    params: {
        item_id: 711,
        inventory_slots: 16,
        level: 4,
        eats: {
            270: .1,
            271: .15
        },
        eat_interval: 12,
        happiness: 35,
        insurance_cost: [ 660450, 450 ],
        breeding_level: 85
    }
}, 1);

pets[28] = createObject({
    b_i: 28,
    b_t: BASE_TYPE.PET,
    name: "Baby Gryffin [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER232,
        x: 5,
        y: 9
    },
    params: {
        item_id: 695,
        xp_required: 15e4,
        inventory_slots: 4,
        next_pet_item_id: 696,
        level: 1
    }
}, 1);

pets[29] = createObject({
    b_i: 29,
    b_t: BASE_TYPE.PET,
    name: "Gryffin [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 4,
        y: 1
    },
    params: {
        item_id: 696,
        xp_required: 3e5,
        inventory_slots: 8,
        next_pet_item_id: 697,
        level: 2
    }
}, 1);

pets[30] = createObject({
    b_i: 30,
    b_t: BASE_TYPE.PET,
    name: "Royal Gryffin [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 5,
        y: 1
    },
    params: {
        item_id: 697,
        inventory_slots: 12,
        level: 3,
        eats: {
            762: .15,
            80: .05,
            1300: .3,
            1301: .4
        },
        eat_interval: 6,
        happiness: 20,
        insurance_cost: [ 94575, 68 ],
        breeding_level: 50
    }
}, 1);

pets[31] = createObject({
    b_i: 31,
    b_t: BASE_TYPE.PET,
    name: "Emerald Geko [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 3,
        y: 1
    },
    params: {
        item_id: 698,
        xp_required: 7e5,
        inventory_slots: 8,
        next_pet_item_id: 699,
        level: 1
    }
}, 1);

pets[32] = createObject({
    b_i: 32,
    b_t: BASE_TYPE.PET,
    name: "Moss Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 10
    },
    params: {
        item_id: 699,
        inventory_slots: 12,
        level: 2,
        eats: {
            268: .05,
            267: .5
        },
        eat_interval: 6,
        happiness: 16,
        insurance_cost: [ 70200, 50 ],
        breeding_level: 30,
        likes: [ {
            pet_id: 16,
            xp: 340,
            returns: [ {
                pet_id: 87,
                base_chance: .55,
                max_chance: .72
            }, {
                pet_id: 88,
                base_chance: .06,
                max_chance: .1
            }, {
                pet_id: 108,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 32,
            xp: 295,
            returns: [ {
                pet_id: 144,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 102,
                base_chance: .06,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[33] = createObject({
    b_i: 33,
    b_t: BASE_TYPE.PET,
    name: "Ruby Geko [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER532,
        x: 2,
        y: 1
    },
    params: {
        item_id: 700,
        xp_required: 7e5,
        inventory_slots: 8,
        next_pet_item_id: 701,
        level: 1
    }
}, 1);

pets[34] = createObject({
    b_i: 34,
    b_t: BASE_TYPE.PET,
    name: "Flame Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER432,
        x: 3,
        y: 11
    },
    params: {
        item_id: 701,
        inventory_slots: 12,
        level: 2,
        eats: {
            94: .05,
            206: .15,
            1300: .3,
            1301: .4
        },
        eat_interval: 6,
        happiness: 16,
        insurance_cost: [ 70200, 50 ],
        breeding_level: 25,
        likes: [ {
            pet_id: 34,
            xp: 369,
            returns: [ {
                pet_id: 145,
                base_chance: .6,
                max_chance: .75
            }, {
                pet_id: 93,
                base_chance: .06,
                max_chance: .1
            } ]
        }, {
            pet_id: 32,
            xp: 369,
            returns: [ {
                pet_id: 101,
                base_chance: .6,
                max_chance: .73
            }, {
                pet_id: 146,
                base_chance: .06,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[35] = createObject({
    b_i: 35,
    b_t: BASE_TYPE.PET,
    name: "Baby Black Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 6,
        y: 0
    },
    params: {
        item_id: 702,
        xp_required: 2e5,
        inventory_slots: 4,
        next_pet_item_id: 703,
        level: 1
    }
}, 1);

pets[36] = createObject({
    b_i: 36,
    b_t: BASE_TYPE.PET,
    name: "Black Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 2
    },
    params: {
        item_id: 703,
        xp_required: 6e5,
        inventory_slots: 8,
        next_pet_item_id: 704,
        level: 2
    }
}, 1);

pets[37] = createObject({
    b_i: 37,
    b_t: BASE_TYPE.PET,
    name: "King Black Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 4
    },
    params: {
        item_id: 704,
        inventory_slots: 12,
        next_pet_item_id: 705,
        requires_stone: !0,
        stones: 3,
        level: 3,
        eats: {
            285: .15,
            494: .05
        },
        eat_interval: 6,
        happiness: 24,
        insurance_cost: [ 243750, 200 ],
        breeding_level: 73,
        likes: [ {
            pet_id: 5,
            xp: 1125,
            returns: [ {
                pet_id: 113,
                base_chance: .6,
                max_chance: .83
            }, {
                pet_id: 96,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 38,
            xp: 1644,
            returns: [ {
                pet_id: 107,
                base_chance: .56,
                max_chance: .832
            }, {
                pet_id: 86,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 42,
            xp: 1116,
            returns: [ {
                pet_id: 115,
                base_chance: .6,
                max_chance: .86
            } ]
        } ]
    }
}, 1);

pets[38] = createObject({
    b_i: 38,
    b_t: BASE_TYPE.PET,
    name: "Blood Black Dragon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 7,
        y: 5
    },
    params: {
        item_id: 705,
        inventory_slots: 16,
        level: 4,
        eats: {
            1150: .25,
            239: .05
        },
        eat_interval: 12,
        happiness: 35,
        insurance_cost: [ 693750, 470 ],
        breeding_level: 86
    }
}, 1);

pets[39] = createObject({
    b_i: 39,
    b_t: BASE_TYPE.PET,
    name: "Baby Emerald Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 2,
        y: 0
    },
    params: {
        item_id: 706,
        xp_required: 1e5,
        inventory_slots: 4,
        next_pet_item_id: 707,
        level: 1
    }
}, 1);

pets[40] = createObject({
    b_i: 40,
    b_t: BASE_TYPE.PET,
    name: "Emerald Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 3,
        y: 2
    },
    params: {
        item_id: 707,
        xp_required: 5e5,
        inventory_slots: 8,
        next_pet_item_id: 708,
        level: 2
    }
}, 1);

pets[41] = createObject({
    b_i: 41,
    b_t: BASE_TYPE.PET,
    name: "King Emerald Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 4,
        y: 4
    },
    params: {
        item_id: 708,
        inventory_slots: 12,
        next_pet_item_id: 709,
        requires_stone: !0,
        stones: 2,
        level: 3,
        eats: {
            285: .1,
            760: .08,
            494: .03
        },
        eat_interval: 8,
        happiness: 25,
        insurance_cost: [ 92625, 65 ],
        breeding_level: 48,
        likes: [ {
            pet_id: 5,
            xp: 1288,
            returns: [ {
                pet_id: 118,
                base_chance: .6,
                max_chance: .835
            }, {
                pet_id: 94,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 38,
            xp: 2068,
            returns: [ {
                pet_id: 80,
                base_chance: .5,
                max_chance: .86
            } ]
        }, {
            pet_id: 42,
            xp: 1276,
            returns: [ {
                pet_id: 81,
                base_chance: .6,
                max_chance: .835
            }, {
                pet_id: 95,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[42] = createObject({
    b_i: 42,
    b_t: BASE_TYPE.PET,
    name: "Cursed Dragon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.DRAGONS,
        x: 6,
        y: 5
    },
    params: {
        item_id: 709,
        inventory_slots: 16,
        level: 4,
        eats: {
            274: .05,
            275: .1
        },
        eat_interval: 8,
        happiness: 30,
        insurance_cost: [ 392625, 280 ],
        breeding_level: 79
    }
}, 1);

pets[43] = createObject({
    b_i: 43,
    b_t: BASE_TYPE.PET,
    name: "Pegasus [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 18,
        y: 1
    },
    params: {
        item_id: 886,
        inventory_slots: 16,
        level: 3,
        eats: {
            100: .05,
            106: .08
        },
        eat_interval: 20,
        happiness: 40,
        insurance_cost: [ 84e4, 600 ],
        breeding_level: 90,
        likes: [ {
            pet_id: 45,
            xp: 1789,
            returns: [ {
                pet_id: 143,
                base_chance: .5,
                max_chance: .721
            }, {
                pet_id: 142,
                base_chance: .06,
                max_chance: .1
            }, {
                pet_id: 112,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 43,
            xp: 2947,
            returns: [ {
                pet_id: 120,
                base_chance: .6,
                max_chance: .834
            }, {
                pet_id: 130,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[44] = createObject({
    b_i: 44,
    b_t: BASE_TYPE.PET,
    name: "Donkey [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 13,
        y: 1
    },
    params: {
        item_id: 887,
        inventory_slots: 4,
        level: 1,
        eats: {
            757: .25,
            758: .4,
            760: .6
        },
        eat_interval: 6,
        happiness: 12,
        insurance_cost: [ 19500, 13 ],
        breeding_level: 3,
        likes: [ {
            pet_id: 44,
            xp: 125,
            returns: [ {
                pet_id: 138,
                base_chance: .5,
                max_chance: .58
            }, {
                pet_id: 139,
                base_chance: .06,
                max_chance: .1
            } ]
        }, {
            pet_id: 12,
            xp: 1114,
            returns: [ {
                pet_id: 141,
                base_chance: .55,
                max_chance: .72
            }, {
                pet_id: 109,
                base_chance: .06,
                max_chance: .1
            }, {
                pet_id: 135,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 45,
            xp: 694,
            returns: [ {
                pet_id: 136,
                base_chance: .65,
                max_chance: .84
            }, {
                pet_id: 134,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[45] = createObject({
    b_i: 45,
    b_t: BASE_TYPE.PET,
    name: "Horror Steed [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 19,
        y: 1
    },
    params: {
        item_id: 888,
        xp_required: 8e5,
        inventory_slots: 4,
        next_pet_item_id: 889,
        level: 1,
        eats: {
            757: .05,
            758: .15,
            760: .2
        },
        eat_interval: 6,
        happiness: 24,
        insurance_cost: [ 18e4, 130 ],
        breeding_level: 68
    }
}, 1);

pets[46] = createObject({
    b_i: 46,
    b_t: BASE_TYPE.PET,
    name: "Nightmare Steed [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 0,
        y: 2
    },
    params: {
        item_id: 889,
        inventory_slots: 8,
        next_pet_item_id: 890,
        requires_stone: !0,
        stones: 4,
        level: 2
    }
}, 1);

pets[47] = createObject({
    b_i: 47,
    b_t: BASE_TYPE.PET,
    name: "Underworld Steed [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 1,
        y: 2
    },
    params: {
        item_id: 890,
        inventory_slots: 16,
        level: 3,
        eats: {
            757: .05,
            758: .25
        },
        eat_interval: 20,
        happiness: 40,
        insurance_cost: [ 834e3, 600 ],
        breeding_level: 88,
        likes: [ {
            pet_id: 47,
            xp: 2926,
            returns: [ {
                pet_id: 89,
                base_chance: .5,
                max_chance: .833
            }, {
                pet_id: 74,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 56,
            xp: 2639,
            returns: [ {
                pet_id: 73,
                base_chance: .6,
                max_chance: .73
            }, {
                pet_id: 110,
                base_chance: .06,
                max_chance: .09
            }, {
                pet_id: 111,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[48] = createObject({
    b_i: 48,
    b_t: BASE_TYPE.PET,
    name: "Baby Cupid [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 2,
        y: 2
    },
    params: {
        item_id: 891,
        xp_required: 7e5,
        inventory_slots: 4,
        next_pet_item_id: 892,
        level: 1
    }
}, 1);

pets[49] = createObject({
    b_i: 49,
    b_t: BASE_TYPE.PET,
    name: "Cupid [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 3,
        y: 2
    },
    params: {
        item_id: 892,
        xp_required: 1e6,
        inventory_slots: 8,
        next_pet_item_id: 893,
        level: 2
    }
}, 1);

pets[50] = createObject({
    b_i: 50,
    b_t: BASE_TYPE.PET,
    name: "Cupid Archer [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 4,
        y: 2
    },
    params: {
        item_id: 893,
        xp_required: 13e5,
        inventory_slots: 12,
        next_pet_item_id: 894,
        level: 3
    }
}, 1);

pets[51] = createObject({
    b_i: 51,
    b_t: BASE_TYPE.PET,
    name: "Lady-Killer [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 5,
        y: 2
    },
    params: {
        item_id: 894,
        inventory_slots: 16,
        level: 4
    }
}, 1);

pets[52] = createObject({
    b_i: 52,
    b_t: BASE_TYPE.PET,
    name: "Efreet [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 6,
        y: 3
    },
    params: {
        item_id: 895,
        inventory_slots: 8,
        level: 1,
        eats: {
            245: .15,
            244: .2
        },
        eat_interval: 10,
        happiness: 35,
        insurance_cost: [ 627900, 430 ],
        breeding_level: 83,
        likes: [ {
            pet_id: 52,
            xp: 2203,
            returns: [ {
                pet_id: 98,
                base_chance: .25,
                max_chance: .36
            }, {
                pet_id: 92,
                base_chance: .25,
                max_chance: .35
            }, {
                pet_id: 147,
                base_chance: .05,
                max_chance: .1
            }, {
                pet_id: 76,
                base_chance: .02,
                max_chance: .02
            } ]
        }, {
            pet_id: 27,
            xp: 2260,
            returns: [ {
                pet_id: 77,
                base_chance: .54,
                max_chance: .831
            }, {
                pet_id: 79,
                base_chance: .02,
                max_chance: .02
            } ]
        } ]
    }
}, 1);

pets[53] = createObject({
    b_i: 53,
    b_t: BASE_TYPE.PET,
    name: "Diablo [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 1,
        y: 0
    },
    params: {
        item_id: 896,
        inventory_slots: 16,
        level: 5,
        eats: {
            122: .1,
            222: .2
        },
        eat_interval: 20,
        happiness: 50,
        insurance_cost: [ 873402, 600 ],
        breeding_level: 93
    }
}, 1);

pets[54] = createObject({
    b_i: 54,
    b_t: BASE_TYPE.PET,
    name: "Nephilim Slave [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 5,
        y: 8
    },
    params: {
        item_id: 1062,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[55] = createObject({
    b_i: 55,
    b_t: BASE_TYPE.PET,
    name: "Nephilim Protector [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 0,
        y: 8
    },
    params: {
        item_id: 1063,
        inventory_slots: 16,
        level: 5,
        eats: {
            229: .1,
            244: .2
        },
        eat_interval: 20,
        happiness: 60,
        insurance_cost: [ 1440600, 1e3 ],
        breeding_level: 98
    }
}, 1);

pets[56] = createObject({
    b_i: 56,
    b_t: BASE_TYPE.PET,
    name: "Flame Phoenix [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.UNIQUES,
        x: 8,
        y: 5
    },
    params: {
        item_id: 1064,
        inventory_slots: 16,
        level: 5,
        eats: {
            245: .1,
            244: .2
        },
        eat_interval: 10,
        happiness: 38,
        insurance_cost: [ 670479, 450 ],
        breeding_level: 85
    }
}, 1);

pets[57] = createObject({
    b_i: 57,
    b_t: BASE_TYPE.PET,
    name: "Angry Witch [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 6,
        y: 2
    },
    params: {
        item_id: 1139,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[58] = createObject({
    b_i: 58,
    b_t: BASE_TYPE.PET,
    name: "Rudolph [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 8,
        y: 0
    },
    params: {
        item_id: 1147,
        inventory_slots: 16,
        level: 4
    }
}, 1);

pets[59] = createObject({
    b_i: 59,
    b_t: BASE_TYPE.PET,
    name: "Piglet [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 7,
        y: 2
    },
    params: {
        item_id: 1150,
        inventory_slots: 8,
        next_pet_item_id: 1151,
        requires_stone: !0,
        stones: 3,
        level: 1
    }
}, 1);

pets[60] = createObject({
    b_i: 60,
    b_t: BASE_TYPE.PET,
    name: "Pig [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 8,
        y: 2
    },
    params: {
        item_id: 1151,
        inventory_slots: 16,
        next_pet_item_id: 1155,
        requires_stone: !0,
        stones: 3,
        level: 2
    }
}, 1);

pets[61] = createObject({
    b_i: 61,
    b_t: BASE_TYPE.PET,
    name: "Armored Pig [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 9,
        y: 2
    },
    params: {
        item_id: 1155,
        inventory_slots: 16,
        level: 3
    }
}, 1);

pets[62] = createObject({
    b_i: 62,
    b_t: BASE_TYPE.PET,
    name: "Gray Werewolf [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 7,
        y: 1
    },
    params: {
        item_id: 1166,
        inventory_slots: 12,
        level: 1
    }
}, 1);

pets[63] = createObject({
    b_i: 63,
    b_t: BASE_TYPE.PET,
    name: "Warg [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 1,
        y: 1
    },
    params: {
        item_id: 1167,
        inventory_slots: 12,
        level: 1
    }
}, 1);

pets[64] = createObject({
    b_i: 64,
    b_t: BASE_TYPE.PET,
    name: "Swamp Guru [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 2,
        y: 1
    },
    params: {
        item_id: 1168,
        inventory_slots: 12,
        level: 1
    }
}, 1);

pets[65] = createObject({
    b_i: 65,
    b_t: BASE_TYPE.PET,
    name: "Ghost Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 4,
        y: 0
    },
    params: {
        item_id: 1169,
        inventory_slots: 12,
        level: 1
    }
}, 1);

pets[66] = createObject({
    b_i: 66,
    b_t: BASE_TYPE.PET,
    name: "Kobalos [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 11,
        y: 2
    },
    params: {
        item_id: 1170,
        inventory_slots: 12,
        level: 1,
        eats: {
            220: .15,
            236: .35
        },
        eat_interval: 6,
        happiness: 8,
        insurance_cost: [ 16200, 12 ],
        breeding_level: 1,
        likes: [ {
            pet_id: 6,
            xp: 124,
            returns: [ {
                pet_id: 64,
                base_chance: .65,
                max_chance: .85
            } ]
        }, {
            pet_id: 8,
            xp: 124,
            returns: [ {
                pet_id: 64,
                base_chance: .65,
                max_chance: .85
            } ]
        } ]
    }
}, 1);

pets[67] = createObject({
    b_i: 67,
    b_t: BASE_TYPE.PET,
    name: "Leprechaun [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 10,
        y: 2
    },
    params: {
        item_id: 1171,
        inventory_slots: 12,
        level: 1
    }
}, 1);

pets[68] = createObject({
    b_i: 68,
    b_t: BASE_TYPE.PET,
    name: "Lion [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.ANIMALS,
        x: 6,
        y: 0
    },
    params: {
        item_id: 1175,
        inventory_slots: 8,
        level: 1,
        eats: {
            494: .05,
            78: .2
        },
        eat_interval: 6,
        happiness: 16,
        insurance_cost: [ 55620, 40 ],
        breeding_level: 8,
        likes: [ {
            pet_id: 71,
            xp: 768,
            returns: [ {
                pet_id: 91,
                base_chance: .5,
                max_chance: .86
            } ]
        } ]
    }
}, 1);

pets[69] = createObject({
    b_i: 69,
    b_t: BASE_TYPE.PET,
    name: "Desert Scorpion [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 5,
        y: 12
    },
    params: {
        item_id: 1176,
        xp_required: 75e4,
        inventory_slots: 4,
        next_pet_item_id: 1177,
        level: 1
    }
}, 1);

pets[70] = createObject({
    b_i: 70,
    b_t: BASE_TYPE.PET,
    name: "Deathstalker Scorpion [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 2,
        y: 12
    },
    params: {
        item_id: 1177,
        inventory_slots: 8,
        next_pet_item_id: 1178,
        requires_stone: !0,
        stones: 1,
        level: 2
    }
}, 1);

pets[71] = createObject({
    b_i: 71,
    b_t: BASE_TYPE.PET,
    name: "Emperor Scorpion [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.MONSTER632,
        x: 1,
        y: 12
    },
    params: {
        item_id: 1178,
        inventory_slots: 16,
        level: 3,
        eats: {
            8: .05,
            10: .1
        },
        eat_interval: 6,
        happiness: 24,
        insurance_cost: [ 236482, 165 ],
        breeding_level: 70
    }
}, 1);

pets[72] = createObject({
    b_i: 72,
    b_t: BASE_TYPE.PET,
    name: "Brown Werewolf [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 4,
        y: 1
    },
    params: {
        item_id: 1179,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[73] = createObject({
    b_i: 73,
    b_t: BASE_TYPE.PET,
    name: "Dark Pegasus [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 7,
        y: 1
    },
    params: {
        item_id: 1180,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[74] = createObject({
    b_i: 74,
    b_t: BASE_TYPE.PET,
    name: "Sleipnir [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 8,
        y: 1
    },
    params: {
        item_id: 1181,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[75] = createObject({
    b_i: 75,
    b_t: BASE_TYPE.PET,
    name: "HellKyte [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 9,
        y: 1
    },
    params: {
        item_id: 1182,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[76] = createObject({
    b_i: 76,
    b_t: BASE_TYPE.PET,
    name: "Ifrit [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 6,
        y: 1
    },
    params: {
        item_id: 1183,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[77] = createObject({
    b_i: 77,
    b_t: BASE_TYPE.PET,
    name: "Death Knight [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 11,
        y: 1
    },
    params: {
        item_id: 1184,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[78] = createObject({
    b_i: 78,
    b_t: BASE_TYPE.PET,
    name: "Shiva [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 9,
        y: 0
    },
    params: {
        item_id: 1185,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[79] = createObject({
    b_i: 79,
    b_t: BASE_TYPE.PET,
    name: "Fire Overlord [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 6,
        y: 1
    },
    params: {
        item_id: 1186,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[80] = createObject({
    b_i: 80,
    b_t: BASE_TYPE.PET,
    name: "Lionhead Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 9,
        y: 1
    },
    params: {
        item_id: 1187,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[81] = createObject({
    b_i: 81,
    b_t: BASE_TYPE.PET,
    name: "Horntail [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 6,
        y: 2
    },
    params: {
        item_id: 1188,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[82] = createObject({
    b_i: 82,
    b_t: BASE_TYPE.PET,
    name: "Rael [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 3,
        y: 2
    },
    params: {
        item_id: 1189,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[83] = createObject({
    b_i: 83,
    b_t: BASE_TYPE.PET,
    name: "Cursed Archangel [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 5,
        y: 1
    },
    params: {
        item_id: 1190,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[84] = createObject({
    b_i: 84,
    b_t: BASE_TYPE.PET,
    name: "Jophiel the archangel [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 4,
        y: 1
    },
    params: {
        item_id: 1191,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[85] = createObject({
    b_i: 85,
    b_t: BASE_TYPE.PET,
    name: "Michael the archangel [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 0,
        y: 2
    },
    params: {
        item_id: 1192,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[86] = createObject({
    b_i: 86,
    b_t: BASE_TYPE.PET,
    name: "Obsidian Dragon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 6,
        y: 0
    },
    params: {
        item_id: 1193,
        inventory_slots: 16,
        level: 1,
        eats: {
            275: .05,
            276: .1
        },
        eat_interval: 20,
        happiness: 80,
        insurance_cost: [ 1756687, 1700 ],
        breeding_level: 103
    }
}, 1);

pets[87] = createObject({
    b_i: 87,
    b_t: BASE_TYPE.PET,
    name: "Ancient Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 3,
        y: 1
    },
    params: {
        item_id: 1194,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[88] = createObject({
    b_i: 88,
    b_t: BASE_TYPE.PET,
    name: "Hydra [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 8,
        y: 0
    },
    params: {
        item_id: 1195,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[89] = createObject({
    b_i: 89,
    b_t: BASE_TYPE.PET,
    name: "Wildfire Steed [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 3,
        y: 0
    },
    params: {
        item_id: 1196,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[90] = createObject({
    b_i: 90,
    b_t: BASE_TYPE.PET,
    name: "Giant Troll [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 4,
        y: 2
    },
    params: {
        item_id: 1197,
        inventory_slots: 8,
        level: 1
    }
}, 1);

pets[91] = createObject({
    b_i: 91,
    b_t: BASE_TYPE.PET,
    name: "Manticore [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 5,
        y: 2
    },
    params: {
        item_id: 1198,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[92] = createObject({
    b_i: 92,
    b_t: BASE_TYPE.PET,
    name: "Fire Elemental [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 4,
        y: 0
    },
    params: {
        item_id: 1199,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[93] = createObject({
    b_i: 93,
    b_t: BASE_TYPE.PET,
    name: "Rathalos [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 5,
        y: 1
    },
    params: {
        item_id: 1200,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[94] = createObject({
    b_i: 94,
    b_t: BASE_TYPE.PET,
    name: "Saint Dragon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 7,
        y: 0
    },
    params: {
        item_id: 1201,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[95] = createObject({
    b_i: 95,
    b_t: BASE_TYPE.PET,
    name: "Ancient Ironbelly [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 5,
        y: 0
    },
    params: {
        item_id: 1202,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[96] = createObject({
    b_i: 96,
    b_t: BASE_TYPE.PET,
    name: "Archsky Dragon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 10,
        y: 2
    },
    params: {
        item_id: 1203,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[97] = createObject({
    b_i: 97,
    b_t: BASE_TYPE.PET,
    name: "Flame Beholder [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 11,
        y: 2
    },
    params: {
        item_id: 1204,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[98] = createObject({
    b_i: 98,
    b_t: BASE_TYPE.PET,
    name: "Efreet Sultan [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 2,
        y: 1
    },
    params: {
        item_id: 1205,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[99] = createObject({
    b_i: 99,
    b_t: BASE_TYPE.PET,
    name: "Spiked Emerald Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 2,
        y: 1
    },
    params: {
        item_id: 1206,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[100] = createObject({
    b_i: 100,
    b_t: BASE_TYPE.PET,
    name: "Spiked Ruby Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 6,
        y: 0
    },
    params: {
        item_id: 1207,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[101] = createObject({
    b_i: 101,
    b_t: BASE_TYPE.PET,
    name: "Magma Wyvern [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 7,
        y: 0
    },
    params: {
        item_id: 1208,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[102] = createObject({
    b_i: 102,
    b_t: BASE_TYPE.PET,
    name: "Swamp Wyvern [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 6,
        y: 0
    },
    params: {
        item_id: 1209,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[103] = createObject({
    b_i: 103,
    b_t: BASE_TYPE.PET,
    name: "Naga [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 0,
        y: 1
    },
    params: {
        item_id: 1210,
        inventory_slots: 8,
        level: 2,
        eats: {
            230: .1,
            228: .05
        },
        eat_interval: 6,
        happiness: 28,
        insurance_cost: [ 82500, 60 ],
        breeding_level: 38,
        likes: [ {
            pet_id: 103,
            xp: 578,
            returns: [ {
                pet_id: 148,
                base_chance: .58,
                max_chance: .77
            }, {
                pet_id: 104,
                base_chance: .04,
                max_chance: .08
            } ]
        } ]
    }
}, 1);

pets[104] = createObject({
    b_i: 104,
    b_t: BASE_TYPE.PET,
    name: "Gorgon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 9,
        y: 0
    },
    params: {
        item_id: 1211,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[105] = createObject({
    b_i: 105,
    b_t: BASE_TYPE.PET,
    name: "Rubysoul Dragon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 1,
        y: 2
    },
    params: {
        item_id: 1212,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[106] = createObject({
    b_i: 106,
    b_t: BASE_TYPE.PET,
    name: "Crystal Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 3,
        y: 0
    },
    params: {
        item_id: 1213,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[107] = createObject({
    b_i: 107,
    b_t: BASE_TYPE.PET,
    name: "Undead Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 1,
        y: 3
    },
    params: {
        item_id: 1214,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[108] = createObject({
    b_i: 108,
    b_t: BASE_TYPE.PET,
    name: "Beholder Worm [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 2,
        y: 3
    },
    params: {
        item_id: 1215,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[109] = createObject({
    b_i: 109,
    b_t: BASE_TYPE.PET,
    name: "Royal Horse [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 3,
        y: 3
    },
    params: {
        item_id: 1216,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[110] = createObject({
    b_i: 110,
    b_t: BASE_TYPE.PET,
    name: "Lava Pegasus [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 4,
        y: 1
    },
    params: {
        item_id: 1217,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[111] = createObject({
    b_i: 111,
    b_t: BASE_TYPE.PET,
    name: "Nightmare Pegasus [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 5,
        y: 0
    },
    params: {
        item_id: 1218,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[112] = createObject({
    b_i: 112,
    b_t: BASE_TYPE.PET,
    name: "Sun Pegasus [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 6,
        y: 3
    },
    params: {
        item_id: 1219,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[113] = createObject({
    b_i: 113,
    b_t: BASE_TYPE.PET,
    name: "Flaming Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 8,
        y: 1
    },
    params: {
        item_id: 1220,
        inventory_slots: 16,
        level: 1,
        eats: {
            220: .03,
            236: .1
        },
        eat_interval: 20,
        happiness: 80,
        insurance_cost: [ 890055, 855 ],
        breeding_level: 102,
        likes: [ {
            pet_id: 86,
            xp: 4643,
            returns: [ {
                pet_id: 153,
                base_chance: .3,
                max_chance: .35
            }, {
                pet_id: 154,
                base_chance: .05,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[114] = createObject({
    b_i: 114,
    b_t: BASE_TYPE.PET,
    name: "Lava Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 9,
        y: 0
    },
    params: {
        item_id: 1221,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[115] = createObject({
    b_i: 115,
    b_t: BASE_TYPE.PET,
    name: "White Belly Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 3,
        y: 1
    },
    params: {
        item_id: 1222,
        inventory_slots: 16,
        level: 1,
        eats: {
            230: .03,
            228: .03
        },
        eat_interval: 20,
        happiness: 74,
        insurance_cost: [ 883288, 850 ],
        breeding_level: 100,
        likes: [ {
            pet_id: 116,
            xp: 4150,
            returns: [ {
                pet_id: 151,
                base_chance: .3,
                max_chance: .35
            }, {
                pet_id: 152,
                base_chance: .05,
                max_chance: .1
            } ]
        } ]
    }
}, 1);

pets[116] = createObject({
    b_i: 116,
    b_t: BASE_TYPE.PET,
    name: "Underworld Dragon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 3,
        y: 1
    },
    params: {
        item_id: 1223,
        inventory_slots: 16,
        level: 1,
        eats: {
            8: .01,
            10: .02
        },
        eat_interval: 20,
        happiness: 74,
        insurance_cost: [ 1482643, 1300 ],
        breeding_level: 101
    }
}, 1);

pets[117] = createObject({
    b_i: 117,
    b_t: BASE_TYPE.PET,
    name: "Fire Heart Dragon [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 1,
        y: 1
    },
    params: {
        item_id: 1224,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[118] = createObject({
    b_i: 118,
    b_t: BASE_TYPE.PET,
    name: "Dragonite [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 0,
        y: 1
    },
    params: {
        item_id: 1225,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[119] = createObject({
    b_i: 119,
    b_t: BASE_TYPE.PET,
    name: "Ice Beholder [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 6,
        y: 1
    },
    params: {
        item_id: 1226,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[120] = createObject({
    b_i: 120,
    b_t: BASE_TYPE.PET,
    name: "Cloudcaller [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 1,
        y: 1
    },
    params: {
        item_id: 1227,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[121] = createObject({
    b_i: 121,
    b_t: BASE_TYPE.PET,
    name: "Centaur [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 0,
        y: 1
    },
    params: {
        item_id: 1228,
        inventory_slots: 4,
        level: 1,
        eats: {
            264: .05,
            760: .1,
            239: .2
        },
        eat_interval: 6,
        happiness: 28,
        insurance_cost: [ 77076, 55 ],
        breeding_level: 33,
        likes: [ {
            pet_id: 30,
            xp: 602,
            returns: [ {
                pet_id: 126,
                base_chance: .6,
                max_chance: .86
            } ]
        } ]
    }
}, 1);

pets[122] = createObject({
    b_i: 122,
    b_t: BASE_TYPE.PET,
    name: "Demon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 4,
        y: 1
    },
    params: {
        item_id: 1229,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[123] = createObject({
    b_i: 123,
    b_t: BASE_TYPE.PET,
    name: "Dark Guru [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 3,
        y: 1
    },
    params: {
        item_id: 1230,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[124] = createObject({
    b_i: 124,
    b_t: BASE_TYPE.PET,
    name: "Shadow Werewolf [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 10,
        y: 1
    },
    params: {
        item_id: 1231,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[125] = createObject({
    b_i: 125,
    b_t: BASE_TYPE.PET,
    name: "Raguel the archangel [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 1,
        y: 0
    },
    params: {
        item_id: 1232,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[126] = createObject({
    b_i: 126,
    b_t: BASE_TYPE.PET,
    name: "Winged Centaur [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 0,
        y: 3
    },
    params: {
        item_id: 1233,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[127] = createObject({
    b_i: 127,
    b_t: BASE_TYPE.PET,
    name: "Ankylosaurus [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 4,
        y: 3
    },
    params: {
        item_id: 1234,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[128] = createObject({
    b_i: 128,
    b_t: BASE_TYPE.PET,
    name: "Tyrannosaurus [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 6,
        y: 2
    },
    params: {
        item_id: 1235,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[129] = createObject({
    b_i: 129,
    b_t: BASE_TYPE.PET,
    name: "Shadow Dragon [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 2,
        y: 0
    },
    params: {
        item_id: 1236,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[130] = createObject({
    b_i: 130,
    b_t: BASE_TYPE.PET,
    name: "Marble Unicorn [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 8,
        y: 2
    },
    params: {
        item_id: 1237,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[131] = createObject({
    b_i: 131,
    b_t: BASE_TYPE.PET,
    name: "Underworld Lord [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 7,
        y: 2
    },
    params: {
        item_id: 1238,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[132] = createObject({
    b_i: 132,
    b_t: BASE_TYPE.PET,
    name: "Lord Of Destruction [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 3,
        y: 0
    },
    params: {
        item_id: 1239,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[133] = createObject({
    b_i: 133,
    b_t: BASE_TYPE.PET,
    name: "Game Master [Ancient]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 2,
        y: 0
    },
    params: {
        item_id: 1240,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[134] = createObject({
    b_i: 134,
    b_t: BASE_TYPE.PET,
    name: "Ruby Horse [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 8,
        y: 0
    },
    params: {
        item_id: 1241,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[135] = createObject({
    b_i: 135,
    b_t: BASE_TYPE.PET,
    name: "Winged Sapphire Demon [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 0,
        y: 1
    },
    params: {
        item_id: 1242,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[136] = createObject({
    b_i: 136,
    b_t: BASE_TYPE.PET,
    name: "Bone Horse [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 5,
        y: 1
    },
    params: {
        item_id: 1244,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[137] = createObject({
    b_i: 137,
    b_t: BASE_TYPE.PET,
    name: "Disembodied Spirit [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 7,
        y: 1
    },
    params: {
        item_id: 1245,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[138] = createObject({
    b_i: 138,
    b_t: BASE_TYPE.PET,
    name: "Royal Donkey [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 12,
        y: 2
    },
    params: {
        item_id: 1246,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[139] = createObject({
    b_i: 139,
    b_t: BASE_TYPE.PET,
    name: "Undead Donkey [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 13,
        y: 2
    },
    params: {
        item_id: 1247,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[140] = createObject({
    b_i: 140,
    b_t: BASE_TYPE.PET,
    name: "Shadow Guru [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 2,
        y: 2
    },
    params: {
        item_id: 1248,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[141] = createObject({
    b_i: 141,
    b_t: BASE_TYPE.PET,
    name: "Hinny [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 9,
        y: 0
    },
    params: {
        item_id: 1249,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[142] = createObject({
    b_i: 142,
    b_t: BASE_TYPE.PET,
    name: "Crystallized Pegasus [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 2,
        y: 1
    },
    params: {
        item_id: 1250,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[143] = createObject({
    b_i: 143,
    b_t: BASE_TYPE.PET,
    name: "Demonic Unicorn [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 14,
        y: 2
    },
    params: {
        item_id: 1251,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[144] = createObject({
    b_i: 144,
    b_t: BASE_TYPE.PET,
    name: "Lindworm [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 5,
        y: 0
    },
    params: {
        item_id: 1252,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[145] = createObject({
    b_i: 145,
    b_t: BASE_TYPE.PET,
    name: "Soul Trapper [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 4,
        y: 0
    },
    params: {
        item_id: 1253,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[146] = createObject({
    b_i: 146,
    b_t: BASE_TYPE.PET,
    name: "Dream Collector [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 7,
        y: 0
    },
    params: {
        item_id: 1254,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[147] = createObject({
    b_i: 147,
    b_t: BASE_TYPE.PET,
    name: "Genie [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 15,
        y: 2
    },
    params: {
        item_id: 1255,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[148] = createObject({
    b_i: 148,
    b_t: BASE_TYPE.PET,
    name: "Euryale [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 8,
        y: 0
    },
    params: {
        item_id: 1256,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[149] = createObject({
    b_i: 149,
    b_t: BASE_TYPE.PET,
    name: "Medusa [Common]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS4,
        x: 1,
        y: 1
    },
    params: {
        item_id: 1257,
        xp_required: 15e4,
        inventory_slots: 8,
        next_pet_item_id: 1210,
        level: 1
    }
}, 1);

pets[150] = createObject({
    b_i: 150,
    b_t: BASE_TYPE.PET,
    name: "Giant Bunny [Rare]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.PETS,
        x: 16,
        y: 2
    },
    params: {
        item_id: 1258,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[151] = createObject({
    b_i: 151,
    b_t: BASE_TYPE.PET,
    name: "Mylanth [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 4,
        y: 0
    },
    params: {
        item_id: 1344,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[152] = createObject({
    b_i: 152,
    b_t: BASE_TYPE.PET,
    name: "Tesselth [Ancient]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS,
        x: 5,
        y: 0
    },
    params: {
        item_id: 1345,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[153] = createObject({
    b_i: 153,
    b_t: BASE_TYPE.PET,
    name: "Xirador [Legendary]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS2,
        x: 5,
        y: 1
    },
    params: {
        item_id: 1346,
        inventory_slots: 16,
        level: 1
    }
}, 1);

pets[154] = createObject({
    b_i: 154,
    b_t: BASE_TYPE.PET,
    name: "Xalanth [Ancient]",
    type: OBJECT_TYPE.DUMMY,
    img: {
        sheet: IMAGE_SHEET.BOSS3,
        x: 0,
        y: 0
    },
    params: {
        item_id: 1347,
        inventory_slots: 16,
        level: 1
    }
}, 1);

function copyPetLikes() {
    for (var i = 1; i < pets.length; i++) if (pets[i].name != item_base[pets[i].params.item_id].name && console.log("Name mismatch? pets[" + i + "] is " + pets[i].name + " and item_base[" + pets[i].params.item_id + "] is " + item_base[pets[i].params.item_id].name), 
    i != item_base[pets[i].params.item_id].params.pet && console.log("Pet " + i + " points to item_base[" + pets[i].params.item_id + "] that does not have same pet id"), 
    pets[i].params.likes) for (var n in pets[i].params.likes) {
        var id = pets[i].params.likes[n].pet_id;
        if (pets[id]) {
            pets[id].params.likes || (pets[id].params.likes = []);
            var a = [ "eats", "eat_interval", "happiness", "insurance_cost", "breeding_level" ], b;
            for (b in a) "undefined" == typeof pets[id].params[a[b]] && console.log("Pet " + i + " likes pet " + id + " that has no " + a[b] + "!");
            var a = !1, k;
            for (k in pets[id].params.likes) if (pets[id].params.likes[k].pet_id == i) {
                a = !0;
                break;
            }
            a || (pets[id].params.likes.push(JSON.clone(pets[i].params.likes[n])), pets[id].params.likes[pets[id].params.likes.length - 1].pet_id = i);
        } else console.log("Pet " + i + " likes invalid pet " + id);
    }
    calculateBreedingValues();
}

function calculateBreedingValues() {
    if (1338 == config.http_port && "undefined" == typeof iamserver) for (var i = 1; i < pets.length; i++) if (pets[i].params.breeding_level) {
        var item = item_base[pets[i].params.item_id], height = pets[i].params.insurance_cost[0];
        .01 < Math.abs(height / item.params.price - .6) && console.log(item.name, "Price", item.params.price, "Insurance price", height, "Does not equal 0.6", height / item.params.price);
        if (pets[i].params.likes) for (var n = 0; n < pets[i].params.likes.length; n++) {
            for (var k = 0, scope = pets[i].params.likes[n].returns, attr = pets[pets[i].params.likes[n].pet_id].params.insurance_cost[0], a = 0; a < scope.length; a++) k += scope[a].max_chance * item_base[pets[scope[a].pet_id].params.item_id].params.price * .5;
            scope = k - item.params.price / 2;
            console.log("Average profit ", k - height - attr, pets[i].name, "and", pets[pets[i].params.likes[n].pet_id].name);
            0 < scope && console.log("Average profit (no insurance) ", scope, pets[i].name, "and", pets[pets[i].params.likes[n].pet_id].name);
        } else console.log("Missing likes from pet", pets[i].name);
    }
}

"undefined" == typeof iamserver && copyPetLikes();

var Build = {
    menu: function() {
        document.getElementById("building_form").style.display = "block";
        var c, data;
        300 == current_map ? (data = document.getElementsByClassName("guild_map"), c = document.getElementsByClassName("player_map")) : (c = document.getElementsByClassName("guild_map"), 
        data = document.getElementsByClassName("player_map"));
        for (var i = 0; i < data.length; i++) data[i].style.display = "none";
        for (i = 0; i < c.length; i++) c[i].style.display = "inline";
        c = "none";
        if (300 == current_map || 0 <= guild_data.permissions.indexOf(players[0].name)) c = "inline";
        data = document.getElementsByClassName("permissions_enabled");
        for (i = 0; i < data.length; i++) data[i].style.display = c;
        "inline" == c ? Carpentry.init() : Carpentry.show_buildings();
    },
    remove_mode: function() {
        Carpentry.remove_menu();
    }
}, Carpentry = {
    init: function(size) {
        BigMenu.show(-1);
        "undefined" == typeof size && (size = "floors");
        var content = document.getElementById("carpentry_formulas");
        Carpentry.category = size;
        for (var buffer = [], i = 0; i < CARPENTRY_FORMULAS[size].length; i++) {
            var line = CARPENTRY_FORMULAS[size][i];
            (!line.island || line.island && 300 == current_map) && buffer.push(line);
        }
        content.innerHTML = HandlebarTemplate.carpentry_formulas()(buffer);
    },
    only_available_formulas: function(a) {
        Carpentry.only_available = a;
        Carpentry.init(Carpentry.category);
    },
    show_buildings: function() {
        var element = document.getElementById("carpentry_formulas"), data;
        data = 300 == current_map ? [ {
            name: "Ship",
            percent: Math.round((Carpentry.player_map.ship || 0) / 8 * 100)
        } ] : [ {
            name: "Shrine",
            percent: 23,
            show_level: !0,
            level: 0
        }, {
            name: "Hall",
            percent: 10,
            show_level: !0,
            level: 0
        }, {
            name: "Barracks",
            percent: 0,
            show_level: !0,
            level: 0
        }, {
            name: "Mine",
            percent: 0,
            show_level: !0,
            level: 0
        } ];
        for (var i in data) data[i].can_provide_materials = 100 > data[i].percent ? !0 : !1;
        element.innerHTML = HandlebarTemplate.carpentry_buildings_menu()(data);
    },
    travel_to: function(a) {
        Socket.send("message", {
            data: "/sailto " + a,
            lang: "EN"
        });
    },
    ship_upgrades: {
        0: {
            items: {
                29: 300
            },
            mos: 20
        },
        1: {
            items: {
                314: 150
            },
            mos: 20
        },
        2: {
            items: {
                313: 100
            },
            mos: 20
        },
        3: {
            items: {
                296: 75
            },
            mos: 20
        },
        4: {
            items: {
                594: 50
            },
            mos: 20
        },
        5: {
            items: {
                595: 25
            },
            mos: 20
        },
        6: {
            items: {
                265: 50
            },
            mos: 20
        },
        7: {
            items: {
                266: 30
            },
            mos: 20
        }
    },
    building_button: function(type) {
        switch (type) {
          case "Ship":
            var doc = Carpentry.ship_upgrades[Carpentry.player_map.ship || 0], s = [], i;
            for (i in doc.items) s.push(doc.items[i] + " " + item_base[i].name);
            Popup.dual_prompt("Add additional materials to the ship?", s.join(", "), function() {
                Socket.send("player_map_build", {
                    name: type,
                    type: "items"
                });
            }, doc.mos + " MOS", function() {
                Socket.send("player_map_build", {
                    name: type,
                    type: "mos"
                });
            }, null_function);
        }
    },
    show_map_upgrade: function() {
        var x = Carpentry.player_map.size.x, z = x + 1;
        BigMenu.show(-1);
        document.getElementById("carpentry_formulas");
        x == Carpentry.map_max_size ? Popup.dialog("Maximum size reached!", function() {}) : Popup.dual_prompt("Upgrade your island to " + z + "x" + z + "?", thousandSeperate(Carpentry.upgrade_prices[x]) + " coins", function() {
            Socket.send("player_map_upgrade", {
                upgrade: !0,
                type: "coins"
            });
        }, thousandSeperate(Carpentry.upgrade_prices_mos[x]) + " MOS", function() {
            Socket.send("player_map_upgrade", {
                upgrade: !0,
                type: "mos"
            });
        });
    },
    map_max_size: 25,
    upgrade_prices: {
        13: 25e4,
        14: 5e5,
        15: 1e6,
        16: 2e6,
        17: 4e6,
        18: 8e6,
        19: 16e6,
        20: 2e7,
        21: 22e6,
        22: 24e6,
        23: 26e6,
        24: 28e6
    },
    upgrade_prices_mos: {
        13: 25,
        14: 50,
        15: 100,
        16: 200,
        17: 400,
        18: 800,
        19: 1600,
        20: 2e3,
        21: 2200,
        22: 2400,
        23: 2600,
        24: 2800
    },
    remove_menu: function() {
        BigMenu.show(-1);
        var elem = document.getElementById("carpentry_remove_menu");
        elem.innerHTML = HandlebarTemplate.carpentry_remove_menu()("floors" == Carpentry.category);
        elem.style.display = "block";
        building_mode_enabled = !0;
        Carpentry.mode = "remove";
    },
    make: function(messageData) {
        Music.sound_effect("carpentry");
        Socket.send("carpentry", {
            sub: "make",
            category: Carpentry.category,
            id: messageData
        });
    },
    server_make: function(id, settings, o) {
        var p = clients[id];
        if (!(300 != p.map && 120 > p.map && p.map > 120 + Guild.max_allowed)) if (p.temp.busy) Player.send_message(id, "Cannot do that yet", COLOR.WHITE); else if ("undefined" != typeof CARPENTRY_FORMULAS[settings] && "undefined" != typeof CARPENTRY_FORMULAS[settings][o]) if (o = CARPENTRY_FORMULAS[settings][o], 
        skills[id].carpentry.current < o.level) Player.send_message(id, "Requires level " + o.level + " carpentry", COLOR.WHITE); else if (Chest.player_chest_full(id)) Player.send_message(id, "Your chest is full!", COLOR.WHITE); else {
            var data = 0;
            if ("undefined" != typeof o.consumes) {
                for (var i in o.consumes) {
                    var d = o.consumes[i], e = Chest.player_chest_item_count(id, d.id);
                    if (d.count > e) {
                        Player.send_message(id, "Not enough materials!", COLOR.WHITE);
                        return;
                    }
                    data += d.count * CARPENTRY_MATERIAL_XP[d.id] || 0;
                }
                p.temp.busy = !0;
                Timers.set("player_using_skill" + p.id, function() {
                    p.temp.busy = !1;
                }, 2e3);
                for (i in o.consumes) d = o.consumes[i], Chest.player_decrease_item_count(id, d.id, d.count);
                Player.inc_xp(clients[id], "carpentry", data);
                Chest.player_add_chest(id, o.item_id);
                AREA.publish(clients[id], {
                    action: "use_skill",
                    position: {
                        i: clients[id].i,
                        j: clients[id].j
                    },
                    item_id: 1401
                }, !0);
                Player.send_message(id, "Chest loot: " + item_base[o.item_id].name, COLOR.YELLOW, "loot");
                SSocket.send(sockets[id], {
                    action: "chest_open",
                    content: Chest.get_content(id),
                    open: !1,
                    carpentry: settings
                });
                Timers.set("chest_save" + id, function() {
                    Chest.save(id, clients[id].name);
                }, 3e3);
            }
        }
    },
    place: function(name, value) {
        document.getElementById("building_form").style.display = "none";
        "undefined" == typeof value && (value = 0);
        Carpentry.rotate = value;
        var elem = document.getElementById("build_menu");
        elem.innerHTML = HandlebarTemplate.build_menu()({
            category: Carpentry.category,
            id: name,
            item_id: CARPENTRY_FORMULAS[Carpentry.category][name].item_id,
            rotate: value
        });
        elem.style.display = "block";
        Carpentry.id = name;
        building_mode_enabled = !0;
        Carpentry.mode = "add";
    },
    place_close: function() {
        var page = document.getElementById("build_menu");
        page.style.display = "none";
        page = document.getElementById("carpentry_remove_menu");
        page.style.display = "none";
        building_mode_enabled = !1;
    },
    place_rotate: function(character) {
        var fn = item_base[CARPENTRY_FORMULAS[Carpentry.category][character].item_id], counter = 0;
        Carpentry.rotate < (BASE_TYPE[fn.params.carpentry_type][fn.params.carpentry_id].params.img_rotates || 0) && (counter = Carpentry.rotate + 1);
        Carpentry.place(character, counter);
    },
    build_regular_click: function(data) {
        if (300 != current_map || !(10 > data.i || 10 > data.j || "undefined" == typeof map[current_map][data.i] || "undefined" == typeof map[current_map][data.i][data.j] || 10 == data.i && 10 == data.j)) switch (Carpentry.mode) {
          case "add":
            for (var c = CARPENTRY_FORMULAS[Carpentry.category][Carpentry.id], d = item_base[c.item_id], d = BASE_TYPE[d.params.carpentry_type][d.params.carpentry_id], r = 1; "undefined" != typeof objects_data[r]; ) r++;
            data.id = r;
            data.map = current_map;
            data.params = {
                rotate: Carpentry.rotate
            };
            if (300 == current_map && (d = createObject(JSON.merge(d, data)), updateObjectImage(d), 
            objects_data[data.id] = d, "floors" != Carpentry.category)) try {
                var req = on_map[current_map][data.i][data.j];
                if (0 < req.params.items.length) {
                    addChatText("Remove items from object first!", null, COLOR.PINK);
                    break;
                }
            } catch (g) {}
            1 == Chest.player_chest_item_count(0, c.item_id) && Carpentry.place_close();
            Socket.send("carpentry", {
                sub: "add",
                category: Carpentry.category,
                id: Carpentry.id,
                position: {
                    i: data.i - (300 == current_map ? 10 : 0),
                    j: data.j - (300 == current_map ? 10 : 0),
                    r: Carpentry.rotate || void 0
                }
            });
            break;

          case "remove":
            if (300 == current_map) {
                if ("floors" == Carpentry.category) if ((req = map[current_map][data.i] && map[current_map][data.i][data.j]) && ground_base[req.b_i].params && ground_base[req.b_i].params.carpentry_item_id) {
                    d = ground_base[Carpentry.random_grass[Math.floor(Math.random() * Carpentry.random_grass.length)]];
                    for (r = 1; "undefined" != typeof objects_data[r]; ) r++;
                    data.id = r;
                    d = createObject(JSON.merge(d, data));
                    objects_data[data.id] = d;
                    map[current_map][data.i][data.j] = obj_s(d);
                } else return !1; else {
                    req = on_map[current_map][data.i] && on_map[current_map][data.i][data.j];
                    try {
                        if (0 < req.params.items.length) {
                            addChatText("Remove items from object first!", null, COLOR.PINK);
                            break;
                        }
                    } catch (k) {}
                    if (req && object_base[req.b_i].params && object_base[req.b_i].params.carpentry_item_id) {
                        if (332 == req.b_i || 333 == req.b_i) {
                            d = ground_base[Carpentry.random_grass[Math.floor(Math.random() * Carpentry.random_grass.length)]];
                            for (r = 1; "undefined" != typeof objects_data[r]; ) r++;
                            data.id = r;
                            d = createObject(JSON.merge(d, data));
                            objects_data[data.id] = d;
                            map[current_map][data.i][data.j] = obj_s(d);
                        }
                    } else return !1;
                }
                drawMap();
            }
            Socket.send("carpentry", {
                sub: "remove",
                category: Carpentry.category,
                position: {
                    i: data.i - (300 == current_map ? 10 : 0),
                    j: data.j - (300 == current_map ? 10 : 0)
                }
            });
        }
    },
    server_build: function(id, x, y, data) {
        var socket = clients[id];
        if (120 <= socket.map && socket.map <= 120 + Guild.max_allowed) GuildMap.place(id, x, y, data); else if (300 == socket.map && "undefined" != typeof CARPENTRY_FORMULAS[x] && "undefined" != typeof CARPENTRY_FORMULAS[x][y]) {
            y = CARPENTRY_FORMULAS[x][y];
            var o = item_base[y.item_id];
            if (0 != Chest.player_chest_item_count(id, y.item_id) && (o = BASE_TYPE[o.params.carpentry_type][o.params.carpentry_id], 
            PlayerMap.can_edit(socket.name, socket.params.island, data))) {
                var width = data.r || 0;
                if (!(width > (o.params.img_rotates || 0) || 0 > width)) {
                    if ("floors" == x) {
                        if (!PlayerMap.edit.add_ground(socket.name, data, o.b_i)) {
                            if (Chest.player_chest_full(id)) {
                                Player.send_message(id, "Chest full!", COLOR.PINK);
                                return;
                            }
                            var name = PlayerMap.edit.remove_ground(socket.name, data);
                            name && (Chest.player_add_chest(id, name), Player.send_message(id, "Chest loot: " + item_base[name].name, COLOR.YELLOW, "loot"));
                            PlayerMap.edit.add_ground(socket.name, data, o.b_i);
                        }
                    } else {
                        var width = PlayerMap.get_breeding_grid(socket.name), hasListeners = PlayerMap.get_object(socket.name, data);
                        if (305 != o.b_i && hasListeners && 305 == hasListeners.b_i) {
                            var transEndEventNames = [ {
                                i: 1,
                                j: 0
                            }, {
                                i: 0,
                                j: 1
                            }, {
                                i: -1,
                                j: 0
                            }, {
                                i: 0,
                                j: -1
                            } ];
                            for (name in transEndEventNames) {
                                var instance = sizeOfEnclosure(data.i + transEndEventNames[name].i, data.j + transEndEventNames[name].j, 1, width);
                                if (!instance.status && "same_type_limit" == instance.error) {
                                    Player.send_message(id, "Cannot remove this fence, remove nest first!", COLOR.PINK);
                                    return;
                                }
                            }
                        }
                        if (479 == o.b_i) {
                            if (hasListeners && 479 == hasListeners.b_i) return;
                            instance = sizeOfEnclosure(data.i, data.j, 2, width);
                            if (!instance.status) {
                                "out_of_border" == instance.error ? Player.send_message(id, "Needs to be inside a fence!", COLOR.PINK) : "same_type_limit" == instance.error && Player.send_message(id, "Only 2 nests per fence!", COLOR.PINK);
                                return;
                            }
                            if (2 > instance.area + instance.same_type) {
                                Player.send_message(id, "Area too small!", COLOR.PINK);
                                return;
                            }
                        } else if (instance = sizeOfEnclosure(data.i, data.j, 3, width), instance.status) {
                            Player.send_message(id, "Only nests allowed inside a fence!", COLOR.PINK);
                            return;
                        }
                        if (!PlayerMap.edit.add_object(socket.name, data, o.b_i)) {
                            if (Chest.player_chest_full(id)) {
                                Player.send_message(id, "Chest full!", COLOR.PINK);
                                return;
                            }
                            if (name = PlayerMap.edit.remove_object(socket.name, data)) Chest.player_add_chest(id, name), 
                            Player.send_message(id, "Chest loot: " + item_base[name].name, COLOR.YELLOW, "loot"), 
                            PlayerMap.edit.add_object(socket.name, data, o.b_i); else {
                                Player.send_message(id, "Cannot do that", COLOR.WHITE);
                                return;
                            }
                        }
                    }
                    AREA.publish(clients[id], {
                        action: "guild",
                        sub: "place",
                        map: 300,
                        type: x,
                        id: o.b_i,
                        i: data.i + 10,
                        j: data.j + 10,
                        r: data.r,
                        ot_n: PlayerMap.get_packed_object(socket.name, data).ot_n
                    }, !0);
                    Chest.player_decrease_item_count(id, y.item_id, 1);
                    SSocket.send(sockets[id], {
                        action: "chest_open",
                        content: Chest.get_content(id),
                        open: !1,
                        carpentry: x
                    });
                }
            }
        }
    },
    server_remove: function(id, callback, e) {
        var p = clients[id];
        if (120 <= p.map && p.map <= 120 + Guild.max_allowed) GuildMap.remove(id, callback, e); else if (300 == p.map && PlayerMap.can_edit(p.name, p.params.island, e)) if (Chest.player_chest_full(id)) Player.send_message(id, "Chest full!", COLOR.PINK); else {
            if ("floors" == callback) {
                var name = PlayerMap.edit.remove_ground(p.name, e);
                if (name) Chest.player_add_chest(id, name), Player.send_message(id, "Chest loot: " + item_base[name].name, COLOR.YELLOW, "loot"); else {
                    Player.send_message(id, "Cannot do that", COLOR.WHITE);
                    return;
                }
            } else {
                var name = PlayerMap.get_breeding_grid(p.name), value = PlayerMap.get_object(p.name, e);
                if (value && 305 == value.b_i) {
                    var target = [ {
                        i: 1,
                        j: 0
                    }, {
                        i: 0,
                        j: 1
                    }, {
                        i: -1,
                        j: 0
                    }, {
                        i: 0,
                        j: -1
                    } ], property;
                    for (property in target) {
                        var data = sizeOfEnclosure(e.i + target[property].i, e.j + target[property].j, 1, name);
                        if (!data.status && "same_type_limit" == data.error) {
                            Player.send_message(id, "Cannot remove this fence, remove nest first!", COLOR.PINK);
                            return;
                        }
                    }
                } else if (value && 479 == value.b_i && "undefined" != typeof PlayerMap.get_packed_object(p.name, e).pet_id) {
                    Player.send_message(id, "Cannot remove nest, remove pet first!", COLOR.PINK);
                    return;
                }
                if (name = PlayerMap.edit.remove_object(p.name, e)) Chest.player_add_chest(id, name), 
                Player.send_message(id, "Chest loot: " + item_base[name].name, COLOR.YELLOW, "loot"), 
                value.b_i == Mailbox.id && AREA.sql(p, {
                    action: "mailbox",
                    sub: "delete_all",
                    island: p.params.island,
                    position: e.i + "-" + e.j
                }); else {
                    Player.send_message(id, "Cannot do that", COLOR.WHITE);
                    return;
                }
            }
            AREA.publish(clients[id], {
                action: "guild",
                sub: "remove",
                map: 300,
                type: callback,
                i: e.i + 10,
                j: e.j + 10
            }, !0);
            SSocket.send(sockets[id], {
                action: "chest_open",
                content: Chest.get_content(id),
                open: !1,
                carpentry: callback
            });
        }
    },
    server_cabinet_add: function(id, i, msg) {
        var data = clients[id];
        if (msg && !data.temp.busy && !(120 <= data.map && data.map <= 120 + Guild.max_allowed) && 300 == data.map && (msg.i -= 10, 
        msg.j -= 10, PlayerMap.can_edit(data.name, data.params.island, msg))) try {
            var o = object_base[player_maps[data.name].data.on_map[msg.i][msg.j].i], s = player_maps[data.name].data.on_map[msg.i][msg.j].it || [];
            if (o.params.stores && o.params.stores > s.length && data.temp.inventory.length > i) {
                var key = data.temp.inventory[i].id;
                Inventory.remove(clients[id], key) && (s.push(key), player_maps[data.name].data.on_map[msg.i][msg.j].it = s, 
                player_maps[data.name].saved = !1, PlayerMap.save(data.name, function() {}), Player.send_inventory(id), 
                Player.send_cabinet_items(id, msg));
            }
        } catch (arg3) {
            console.log(arg3);
        }
    },
    server_cabinet_remove: function(i, n, object) {
        var data = clients[i];
        if (object && !(120 <= data.map && data.map <= 120 + Guild.max_allowed) && 300 == data.map && (object.i -= 10, 
        object.j -= 10, PlayerMap.can_edit(data.name, data.params.island, object))) try {
            var nodes = player_maps[data.name].data.on_map[object.i][object.j].it || [];
            object_base[player_maps[data.name].data.on_map[object.i][object.j].i].params.stores && nodes.length > n && 40 > data.temp.inventory.length && Inventory.add(clients[i], nodes[n]) && (nodes.splice(n, 1), 
            player_maps[data.name].data.on_map[object.i][object.j].it = nodes, player_maps[data.name].saved = !1, 
            PlayerMap.save(data.name, function() {}), Player.send_inventory(i), Player.send_cabinet_items(i, object));
        } catch (arg3) {
            console.log(arg3);
        }
    },
    sleep: function(id, x, y) {
        var p = clients[id];
        if ("undefined" != typeof x && "undefined" != typeof y && !p.temp.busy) {
            var req;
            (req = 300 == p.map ? PlayerMap.get_object(p.params.island, {
                i: x - 10,
                j: y - 10
            }) : on_map[p.map][x] && on_map[p.map][x][y] && object_base[on_map[p.map][x][y].b_i]) && req.params && req.params.heals && 1 >= distance(p.i, p.j, x, y) && (p.temp.busy = !0, 
            Timers.set("player_using_skill" + p.id, function() {
                p.temp.busy = !1;
                Player.heal(id, req.params.heals);
            }, 2e3), x = {
                action: "use_skill",
                position: {
                    i: clients[id].i,
                    j: clients[id].j
                },
                item_id: Math.floor(Math.random() * item_base.length)
            }, AREA.publish(clients[id], x, !0), Player.send_message(id, "Sleeping in " + req.name + " healed " + req.params.heals + " health", COLOR.WHITE, "loot"));
        }
    },
    permissions_open: function() {
        windowOpen = !0;
        var c = on_map[current_map][last_permissions.i][last_permissions.j].params.allowed || [], h = FormHelper.get_form("permissions"), d = c.length;
        h.content.innerHTML = HandlebarTemplate.permissions_form()({
            allowed: c,
            current: d,
            maximum: 5,
            add_button_visible: 5 > d
        });
    },
    permissions_remove: function(a) {
        Socket.send("carpentry", {
            sub: "access_remove",
            position: {
                i: last_permissions.i - (300 == current_map ? 10 : 0),
                j: last_permissions.j - (300 == current_map ? 10 : 0)
            },
            name: a
        });
    },
    server_permissions_remove: function(i, a, item) {
        var p = clients[i];
        if (300 == p.map && "object" == typeof a && "undefined" != typeof a.i && "undefined" != typeof a.j && "undefined" != typeof item && PlayerMap.can_edit(p.name, p.params.island, a) && "string" == typeof item) {
            item = item.toLowerCase().username().substr(0, 16);
            var p = p.params.island, b = PlayerMap.get_packed_object(p, a);
            b && 497 == b.i && (b = {
                al: b.al || []
            }, -1 != b.al.indexOf(item) && (b.al.splice(b.al.indexOf(item), 1), PlayerMap.edit.change_object_params(p, a, b), 
            b = PlayerMap.get_packed_object(p, a), AREA.publish(clients[i], JSON.merge(b, {
                action: "guild",
                sub: "place",
                map: 300,
                type: "walls",
                id: b.i,
                i: a.i + 10,
                j: a.j + 10
            }), !0)));
        }
    },
    permissions_add: function(a) {
        Socket.send("carpentry", {
            sub: "access_add",
            position: {
                i: last_permissions.i - (300 == current_map ? 10 : 0),
                j: last_permissions.j - (300 == current_map ? 10 : 0)
            },
            name: a
        });
    },
    server_permissions_add: function(i, x, val) {
        var p = clients[i];
        if (300 == p.map && "undefined" != typeof x && "undefined" != typeof x.i && "undefined" != typeof x.j && "undefined" != typeof val && PlayerMap.can_edit(p.name, p.params.island, x) && "string" == typeof val) {
            val = val.toLowerCase().username().substr(0, 16);
            var p = p.params.island, b = PlayerMap.get_packed_object(p, x);
            b && 497 == b.i && (b = {
                al: b.al || []
            }, 5 <= b.al.length || (b.al.push(val), PlayerMap.edit.change_object_params(p, x, b), 
            b = PlayerMap.get_packed_object(p, x), AREA.publish(clients[i], JSON.merge(b, {
                action: "guild",
                sub: "place",
                map: 300,
                type: "walls",
                id: b.i,
                i: x.i + 10,
                j: x.j + 10
            }), !0)));
        }
    },
    category: "floors",
    only_available: !0,
    rotate: 0,
    id: 0,
    mode: "add",
    random_grass: [ 0, 0, 0, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 0, 0, 0, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 67, 68, 69, 190, 2 ]
}, CARPENTRY_FORMULAS = {
    floors: [ {
        id: 0,
        item_id: 730,
        level: 1,
        consumes: [ {
            id: 29,
            count: 100
        } ]
    }, {
        id: 1,
        item_id: 731,
        level: 10,
        consumes: [ {
            id: 314,
            count: 200
        } ]
    }, {
        id: 2,
        item_id: 732,
        level: 25,
        consumes: [ {
            id: 313,
            count: 300
        } ]
    }, {
        id: 3,
        item_id: 825,
        level: 35,
        consumes: [ {
            id: 296,
            count: 400
        } ]
    }, {
        id: 4,
        item_id: 830,
        level: 45,
        consumes: [ {
            id: 594,
            count: 500
        } ]
    }, {
        id: 5,
        item_id: 836,
        level: 55,
        consumes: [ {
            id: 595,
            count: 600
        } ]
    }, {
        id: 6,
        item_id: 842,
        level: 65,
        consumes: [ {
            id: 596,
            count: 700
        } ]
    }, {
        id: 7,
        item_id: 848,
        level: 80,
        consumes: [ {
            id: 597,
            count: 800
        } ]
    } ],
    walls: [ {
        id: 0,
        item_id: 734,
        level: 1,
        consumes: [ {
            id: 29,
            count: 200
        } ]
    }, {
        id: 1,
        item_id: 740,
        level: 13,
        consumes: [ {
            id: 314,
            count: 300
        } ]
    }, {
        id: 2,
        item_id: 746,
        level: 33,
        consumes: [ {
            id: 313,
            count: 400
        }, {
            id: 34,
            count: 200
        } ]
    }, {
        id: 3,
        item_id: 752,
        level: 45,
        island: !0,
        consumes: [ {
            id: 50,
            count: 10
        }, {
            id: 29,
            count: 50
        } ]
    }, {
        id: 4,
        item_id: 824,
        level: 42,
        consumes: [ {
            id: 296,
            count: 600
        }, {
            id: 34,
            count: 400
        } ]
    }, {
        id: 5,
        item_id: 829,
        level: 52,
        consumes: [ {
            id: 594,
            count: 500
        }, {
            id: 50,
            count: 300
        } ]
    }, {
        id: 6,
        item_id: 835,
        level: 62,
        consumes: [ {
            id: 595,
            count: 600
        }, {
            id: 50,
            count: 400
        } ]
    }, {
        id: 7,
        item_id: 841,
        level: 74,
        consumes: [ {
            id: 596,
            count: 600
        }, {
            id: 291,
            count: 300
        } ]
    }, {
        id: 8,
        item_id: 847,
        level: 93,
        consumes: [ {
            id: 597,
            count: 500
        }, {
            id: 384,
            count: 300
        } ]
    }, {
        id: 9,
        item_id: 1357,
        level: 53,
        consumes: [ {
            id: 29,
            count: 300
        }, {
            id: 313,
            count: 300
        }, {
            id: 594,
            count: 300
        } ]
    } ],
    furniture: [ {
        id: 0,
        item_id: 753,
        level: 1,
        island: !0,
        consumes: [ {
            id: 287,
            count: 35
        } ]
    }, {
        id: 1,
        item_id: 753,
        level: 1,
        island: !0,
        consumes: [ {
            id: 288,
            count: 25
        } ]
    }, {
        id: 2,
        item_id: 733,
        level: 1,
        consumes: [ {
            id: 29,
            count: 20
        } ]
    }, {
        id: 3,
        item_id: 735,
        level: 3,
        consumes: [ {
            id: 29,
            count: 75
        } ]
    }, {
        id: 4,
        item_id: 736,
        level: 10,
        consumes: [ {
            id: 29,
            count: 30
        } ]
    }, {
        id: 5,
        item_id: 737,
        level: 6,
        island: !0,
        consumes: [ {
            id: 29,
            count: 140
        } ]
    }, {
        id: 6,
        item_id: 738,
        level: 8,
        consumes: [ {
            id: 29,
            count: 150
        } ]
    }, {
        id: 7,
        item_id: 739,
        level: 10,
        consumes: [ {
            id: 314,
            count: 20
        } ]
    }, {
        id: 8,
        item_id: 741,
        level: 14,
        consumes: [ {
            id: 314,
            count: 75
        } ]
    }, {
        id: 9,
        item_id: 742,
        level: 25,
        consumes: [ {
            id: 314,
            count: 50
        } ]
    }, {
        id: 10,
        item_id: 743,
        level: 24,
        island: !0,
        consumes: [ {
            id: 314,
            count: 200
        } ]
    }, {
        id: 11,
        item_id: 744,
        level: 20,
        consumes: [ {
            id: 314,
            count: 150
        } ]
    }, {
        id: 12,
        item_id: 745,
        level: 25,
        consumes: [ {
            id: 313,
            count: 20
        } ]
    }, {
        id: 13,
        item_id: 747,
        level: 28,
        consumes: [ {
            id: 313,
            count: 75
        } ]
    }, {
        id: 14,
        item_id: 748,
        level: 35,
        consumes: [ {
            id: 313,
            count: 60
        } ]
    }, {
        id: 15,
        item_id: 749,
        level: 34,
        island: !0,
        consumes: [ {
            id: 313,
            count: 200
        } ]
    }, {
        id: 16,
        item_id: 750,
        level: 30,
        consumes: [ {
            id: 313,
            count: 150
        } ]
    }, {
        id: 17,
        item_id: 768,
        level: 35,
        consumes: [ {
            id: 296,
            count: 30
        } ]
    }, {
        id: 18,
        item_id: 769,
        level: 45,
        consumes: [ {
            id: 594,
            count: 30
        } ]
    }, {
        id: 19,
        item_id: 770,
        level: 55,
        consumes: [ {
            id: 595,
            count: 30
        } ]
    }, {
        id: 20,
        item_id: 771,
        level: 65,
        consumes: [ {
            id: 596,
            count: 40
        } ]
    }, {
        id: 21,
        item_id: 772,
        level: 80,
        consumes: [ {
            id: 597,
            count: 50
        } ]
    }, {
        id: 22,
        item_id: 826,
        level: 37,
        consumes: [ {
            id: 296,
            count: 75
        } ]
    }, {
        id: 23,
        item_id: 853,
        level: 40,
        consumes: [ {
            id: 296,
            count: 150
        } ]
    }, {
        id: 24,
        item_id: 827,
        level: 45,
        consumes: [ {
            id: 296,
            count: 70
        } ]
    }, {
        id: 25,
        item_id: 828,
        level: 44,
        island: !0,
        consumes: [ {
            id: 296,
            count: 250
        } ]
    }, {
        id: 26,
        item_id: 831,
        level: 49,
        consumes: [ {
            id: 594,
            count: 105
        } ]
    }, {
        id: 27,
        item_id: 832,
        level: 55,
        consumes: [ {
            id: 594,
            count: 80
        } ]
    }, {
        id: 28,
        item_id: 833,
        level: 54,
        island: !0,
        consumes: [ {
            id: 594,
            count: 300
        } ]
    }, {
        id: 29,
        item_id: 834,
        level: 50,
        consumes: [ {
            id: 594,
            count: 210
        } ]
    }, {
        id: 30,
        item_id: 837,
        level: 58,
        consumes: [ {
            id: 595,
            count: 105
        } ]
    }, {
        id: 31,
        item_id: 840,
        level: 60,
        consumes: [ {
            id: 595,
            count: 210
        } ]
    }, {
        id: 32,
        item_id: 839,
        level: 64,
        island: !0,
        consumes: [ {
            id: 595,
            count: 400
        } ]
    }, {
        id: 33,
        item_id: 838,
        level: 65,
        consumes: [ {
            id: 595,
            count: 90
        } ]
    }, {
        id: 34,
        item_id: 843,
        level: 70,
        consumes: [ {
            id: 596,
            count: 150
        } ]
    }, {
        id: 35,
        item_id: 844,
        level: 80,
        consumes: [ {
            id: 596,
            count: 100
        } ]
    }, {
        id: 36,
        item_id: 845,
        level: 78,
        island: !0,
        consumes: [ {
            id: 596,
            count: 500
        } ]
    }, {
        id: 37,
        item_id: 846,
        level: 70,
        consumes: [ {
            id: 596,
            count: 300
        } ]
    }, {
        id: 38,
        item_id: 849,
        level: 83,
        consumes: [ {
            id: 597,
            count: 180
        } ]
    }, {
        id: 39,
        item_id: 850,
        level: 95,
        consumes: [ {
            id: 597,
            count: 120
        } ]
    }, {
        id: 40,
        item_id: 851,
        level: 98,
        island: !0,
        consumes: [ {
            id: 597,
            count: 800
        } ]
    }, {
        id: 41,
        item_id: 852,
        level: 90,
        consumes: [ {
            id: 597,
            count: 360
        } ]
    }, {
        id: 42,
        item_id: 1129,
        level: 1
    }, {
        id: 43,
        item_id: 1130,
        level: 1
    }, {
        id: 44,
        item_id: 1131,
        level: 1,
        consumes: [ {
            id: 31,
            count: 250
        }, {
            id: 1138,
            count: 1
        } ]
    }, {
        id: 45,
        item_id: 1132,
        level: 1
    }, {
        id: 46,
        item_id: 1133,
        level: 1
    }, {
        id: 47,
        item_id: 1134,
        level: 1
    }, {
        id: 48,
        item_id: 1135,
        level: 1
    }, {
        id: 49,
        item_id: 1136,
        level: 1
    }, {
        id: 50,
        item_id: 1137,
        level: 1
    }, {
        id: 51,
        item_id: 1165,
        level: 1,
        consumes: [ {
            id: 1014,
            count: 10
        }, {
            id: 50,
            count: 50
        } ]
    }, {
        id: 52,
        item_id: 1165,
        level: 1,
        consumes: [ {
            id: 1012,
            count: 30
        }, {
            id: 50,
            count: 50
        } ]
    }, {
        id: 53,
        item_id: 1243,
        level: 50,
        island: !0,
        consumes: [ {
            id: 29,
            count: 300
        }, {
            id: 758,
            count: 100
        }, {
            id: 760,
            count: 100
        } ]
    }, {
        id: 54,
        item_id: 1360,
        level: 48,
        island: !0,
        consumes: [ {
            id: 594,
            count: 50
        }, {
            id: 50,
            count: 100
        } ]
    }, {
        id: 55,
        item_id: 753,
        level: 1,
        island: !0,
        consumes: [ {
            id: 289,
            count: 15
        } ]
    } ]
}, CARPENTRY_MATERIAL_XP = {
    29: .1,
    314: 1,
    313: 1.5,
    296: 5,
    34: 3,
    288: 2,
    287: 1.5,
    289: 2.5,
    594: 10,
    595: 18,
    596: 25,
    597: 35,
    50: 6,
    31: 3,
    291: 10,
    384: 15,
    1014: 25
}, type;

for (type in CARPENTRY_FORMULAS) for (var id in CARPENTRY_FORMULAS[type]) {
    var formula = CARPENTRY_FORMULAS[type][id], item = item_base[formula.item_id];
    formula.craftable = !0;
    "undefined" == typeof formula.consumes && (formula.craftable = !1);
    "floors" == type ? (ground_base[item.params.carpentry_id].params = ground_base[item.params.carpentry_id].params || {}, 
    ground_base[item.params.carpentry_id].params.carpentry_item_id = formula.item_id) : (object_base[item.params.carpentry_id].params = object_base[item.params.carpentry_id].params || {}, 
    object_base[item.params.carpentry_id].params.carpentry_item_id = formula.item_id);
}

var Farming = {
    server_rake: function(i, position) {
        if ("undefined" != typeof clients[i]) {
            var data = clients[i].params.island, item = clients[i];
            if (item.temp.busy || 1 < distance(item.i, item.j, position.i + 10, position.j + 10)) return !1;
            if (PlayerMap.can_edit(clients[i].name, data, position)) {
                var g = PlayerMap.get_object(data, position);
                g && 332 == g.b_i && (PlayerMap.edit.remove_object(data, position), PlayerMap.edit.add_object(data, position, 333) && (Player.request_captcha(item.id, !1), 
                clients[i].temp.busy = !0, setTimeout(function() {
                    "undefined" != typeof clients[i] && (clients[i].temp.busy = !1);
                }, 500), AREA.publish(clients[i], {
                    action: "use_skill",
                    position: {
                        i: clients[i].i,
                        j: clients[i].j
                    },
                    item_id: 767
                }, !0), AREA.publish(clients[i], {
                    action: "guild",
                    sub: "place",
                    map: 300,
                    type: "furniture",
                    id: 333,
                    i: position.i + 10,
                    j: position.j + 10
                }, !0)));
            }
        }
    },
    server_seed: function(i, h, args) {
        if ("undefined" != typeof clients[i]) {
            var item = clients[i], name = clients[i].params.island;
            if ("undefined" == typeof item_base[args] || "undefined" == typeof item_base[args].params.farming_id || !Inventory.has_equipped(item, args) || 1 < distance(item.i, item.j, h.i + 10, h.j + 10) || item.temp.busy) return !1;
            if (PlayerMap.can_edit(clients[i].name, name, h)) {
                var output = PlayerMap.get_object(name, h);
                output && 333 == output.b_i && (PlayerMap.edit.remove_object(name, h), PlayerMap.edit.add_seed(name, h, args) && (Items.take_from_player(i, args), 
                AREA.publish(clients[i], {
                    action: "use_skill",
                    position: {
                        i: clients[i].i,
                        j: clients[i].j
                    },
                    item_id: args
                }, !0), AREA.publish(clients[i], {
                    action: "guild",
                    sub: "place",
                    map: 300,
                    type: "furniture",
                    id: item_base[args].params.farming_id,
                    i: h.i + 10,
                    j: h.j + 10,
                    t: secondstamp(),
                    a: 0
                }, !0), Player.request_captcha(item.id, !1), clients[i].temp.busy = !0, setTimeout(function() {
                    "undefined" != typeof clients[i] && (clients[i].temp.busy = !1);
                }, 500)));
            }
        }
    },
    server_harvest: function(i, msg) {
        if ("undefined" != typeof clients[i]) {
            var data = clients[i], type = clients[i].params.island;
            if (1 < distance(data.i, data.j, msg.i + 10, msg.j + 10) || data.temp.busy) return !1;
            if (PlayerMap.can_edit(clients[i].name, type, msg)) {
                var e = PlayerMap.get_object(type, msg);
                if (e && e.type == OBJECT_TYPE.FARMING) if (0 >= e.params.duration - minutesPastDelta(player_maps[type].data.on_map[msg.i][msg.j].t)) {
                    var canvas_id = e.params.results[0].returns[0].id;
                    Player.inc_xp(data, "farming", e.params.results[0].returns[0].xp);
                    Items.give_to_player(data, canvas_id);
                    Player.request_captcha(data.id, !1);
                    PlayerMap.edit.remove_object(type, msg, !0);
                    PlayerMap.edit.add_object(type, msg, 332);
                    clients[i].temp.busy = !0;
                    AREA.publish(clients[i], {
                        action: "use_skill",
                        position: {
                            i: clients[i].i,
                            j: clients[i].j
                        },
                        item_id: canvas_id
                    }, !0);
                    AREA.publish(clients[i], {
                        action: "guild",
                        sub: "place",
                        map: 300,
                        type: "furniture",
                        id: 332,
                        i: msg.i + 10,
                        j: msg.j + 10
                    }, !0);
                    setTimeout(function() {
                        "undefined" != typeof clients[i] && (clients[i].temp.busy = !1);
                    }, 500);
                } else return !1;
            }
        }
    }
}, Contacts = {
    friends: [],
    ignores: [],
    channels: {},
    list_add: function(am_regUpdateAlarmEnableState, handler) {
        "ignores" == am_regUpdateAlarmEnableState ? (Contacts.ignores.push(handler), ArrayHelper.unique(Contacts.ignores)) : Contacts.friends.push({
            name: handler,
            online: !1,
            world: "Offline",
            friend: !0
        });
    },
    list_remove: function(objectType, id) {
        if ("ignores" == objectType) {
            var i = Contacts.ignores.indexOf(id);
            -1 < i && Contacts.ignores.splice(i, 1);
        } else for (i in Contacts.friends) if (Contacts.friends[i] && Contacts.friends[i].name == id) {
            Contacts.friends.splice(i, 1);
            break;
        }
    },
    merge_kongregate_friends: function(a, b) {
        var o = [], i;
        for (i in a) "friends" == a[i].status && o.push(a[i].with_player);
        for (i in b) o.push(b[i].usernamify());
        o = ArrayHelper.unique(o);
        for (i in o) o[i] = {
            status: "friends",
            with_player: o[i]
        };
        return o;
    },
    toggle: function() {
        if (GAME_STATE == GAME_STATES.GAME || GAME_STATE == GAME_STATES.CHAT) {
            var childElement = document.getElementById("contacts_form");
            "block" == childElement.style.display ? childElement.style.display = "none" : (Contacts.show_friends(), 
            childElement.style.display = "block");
        }
    },
    show_friends: function() {
        for (var i in Contacts.friends) Contacts.friends[i] && (Contacts.friends[i].online = online_players[Contacts.friends[i].name] || !1, 
        Contacts.friends[i].world = online_players[Contacts.friends[i].name] ? "World " + online_players[Contacts.friends[i].name] : "Offline");
        document.getElementById("contacts_form_content").innerHTML = HandlebarTemplate.contacts_friends()(Contacts.friends);
        TableSorter.init(document.getElementById("contacts_friends"));
    },
    show_ignore: function() {
        document.getElementById("contacts_form_content").innerHTML = HandlebarTemplate.contacts_ignore()(Contacts.ignores);
    },
    update_channel_list: function() {
        var i = document.getElementById("current_channel").selectedIndex;
        document.getElementById("current_channel").innerHTML = "";
        channel_names = ArrayHelper.unique(channel_names);
        sortChannels(channel_names);
        for (var j = 0; j < channel_names.length; j++) if (Contacts.channels[channel_names[j]]) {
            var option = new Option(channel_names[j], channel_names[j]);
            document.getElementById("current_channel").appendChild(option);
        }
        document.getElementById("current_channel").selectedIndex = Math.range(i, 0, document.getElementById("current_channel").length - 1);
    },
    show_channels: function() {
        Contacts.update_channel_list();
        document.getElementById("contacts_form_content").innerHTML = HandlebarTemplate.contacts_channels()(channel_names);
    },
    can_join_channel: function(a) {
        return "18" == a && 18 > Player.age ? (Player.request_more_info(), document.getElementById("contacts_form").style.display = "none", 
        !1) : !0;
    },
    add_channel: function(val) {
        Contacts.can_join_channel(val) && (Socket.send("contacts", {
            sub: "add_channel",
            channel: val
        }), Contacts.channels[val] = !0, Contacts.show_channels());
    },
    remove_channel: function(nid) {
        Socket.send("contacts", {
            sub: "remove_channel",
            channel: nid
        });
        delete Contacts.channels[nid];
        Contacts.show_channels();
    },
    new_channels: [],
    save_channel: function(val) {
        Contacts.new_channels.push(val);
        Contacts.clean_channels();
        Contacts.channels[val] || (Contacts.channels[val] = !0, channel_names.unshift(val), 
        Contacts.show_channels());
    },
    delete_channel: function(n) {
        Contacts.channels[n] && (delete Contacts.channels[n], n = channel_names.indexOf(n), 
        -1 < n && channel_names.splice(n, 1), Contacts.show_channels());
    },
    clean_channels: function() {
        for (var elementKey in Contacts.new_channels) Contacts.delete_channel(Contacts.new_channels[elementKey]);
    },
    add_friend: function(s) {
        s = s.toLowerCase();
        Socket.send("contacts", {
            sub: "add_friend",
            name: s.username()
        });
        Contacts.list_add("friends", s.username());
        Contacts.show_friends();
    },
    remove_friend: function(fbUserMetadata) {
        Popup.prompt("Remove friend?", function() {
            Socket.send("contacts", {
                sub: "remove_friend",
                name: fbUserMetadata.username()
            });
            Contacts.list_remove("friends", fbUserMetadata.username());
            Contacts.show_friends();
        });
    },
    reject_friend: function(fbUserMetadata) {
        Contacts.list_remove("friends", fbUserMetadata.username());
        Contacts.show_friends();
    },
    ignore_player: function(data) {
        data = data.toLowerCase();
        Player.is_admin(data) || Player.is_mod(data) ? addChatText("Cannot ignore a moderator or an admin.", null, COLOR.PINK) : (Socket.send("contacts", {
            sub: "ignore_player",
            name: data.username()
        }), Contacts.list_add("ignores", data.username()), Contacts.show_ignore());
    },
    remove_ignore: function(fbUserMetadata) {
        Popup.prompt("Remove ignore?", function() {
            Socket.send("contacts", {
                sub: "remove_ignore",
                name: fbUserMetadata.username()
            });
            Contacts.list_remove("ignores", fbUserMetadata.username());
            Contacts.show_ignore();
        });
    }
}, Music = {
    initialized: !1,
    music_allowed: !0,
    sfx_allowed: !0,
    playing: -1,
    type: ".mp3",
    init: function() {
        0 <= [ "desura", "torrent", "steam" ].indexOf(getParameterByName("inapp")) && (Music.type = ".ogg");
        for (var dots in map_music_files) map_music_files[dots] += Music.type;
        for (dots in sound_effect_files) sound_effect_files[dots] += Music.type;
        "undefined" != typeof localStorage.music_allowed && (Music.music_allowed = JSON.parse(localStorage.music_allowed));
        "undefined" != typeof localStorage.sfx_allowed && (Music.sfx_allowed = JSON.parse(localStorage.sfx_allowed));
        soundManager.setup({
            url: "swf/",
            debugMode: !1,
            debugFlash: !1,
            preferFlash: !1,
            onready: function() {
                Music.initialized = !0;
            }
        });
        Music.toggle(!0);
        Music.toggle_sfx(!0);
    },
    toggle: function(headers) {
        headers || (Music.music_allowed = !Music.music_allowed, (localStorage.music_allowed = Music.music_allowed) ? (Music.playing = -1, 
        Music.play(players[0].map), _gaq.push([ "_trackPageview", "/music_on" ])) : (Music.stop(), 
        _gaq.push([ "_trackPageview", "/music_off" ])));
        headers = [ {
            name: "settings_music",
            text: "Music(" + (Music.music_allowed ? "on" : "off") + ")"
        } ];
        for (var index in headers) {
            var curr = document.getElementsByClassName(headers[index].name), i;
            for (i in curr) curr[i].innerHTML = headers[index].text;
        }
    },
    toggle_sfx: function(settings) {
        settings || (Music.sfx_allowed = !Music.sfx_allowed, (localStorage.sfx_allowed = Music.sfx_allowed) ? _gaq.push([ "_trackPageview", "/sfx_on" ]) : _gaq.push([ "_trackPageview", "/sfx_off" ]));
        settings = [ {
            name: "settings_sfx",
            text: "Sound effects(" + (Music.sfx_allowed ? "on" : "off") + ")"
        } ];
        for (var count in settings) {
            var curr = document.getElementsByClassName(settings[count].name), i;
            for (i in curr) curr[i].innerHTML = settings[count].text;
        }
    },
    allowed: function() {
        return Music.music_allowed ? Music.initialized ? !0 : (Music.init(), !1) : !1;
    },
    play: function(url, loop) {
        if (!Music.allowed() || Music.playing == url && 1 != loop) return !1;
        Music.playing = url;
        soundManager.stopAll();
        if ("undefined" == typeof map_music_files[url]) return !1;
        map_music[url] ? map_music[url].loaded && map_music[url].music.play() : Music.load(url);
    },
    sound_effect: function(id) {
        if (!Music.sfx_allowed) return !1;
        if (!Music.initialized) return Music.init(), !1;
        if (SpectateWindow.slave && SpectateWindow.active) return !1;
        if ("undefined" == typeof sound_effect_files[id]) return console.log("Invalid sound effect", id), 
        !1;
        sound_effects[id] || Music.load_sfx(id, !0);
        5e3 < timestamp() - sound_effects[id].started_playing && (sound_effects[id].playing = !1);
        if (sound_effects[id].playing) return !1;
        sound_effects[id].loaded && (sound_effects[id].playing = !0, sound_effects[id].started_playing = timestamp(), 
        sound_effects[id].music.play());
    },
    get_url_host: function() {
        return "included" == getParameterByName("music") ? (require("path"), "file://" + process.cwd() + "/music/") : "https://1033141278.rsc.cdn77.org/";
    },
    load: function(id) {
        map_music[id] = {};
        map_music[id].loaded = !1;
        map_music[id].music = soundManager.createSound({
            id: "level" + id,
            url: Music.get_url_host() + map_music_files[id],
            autoLoad: !0,
            autoPlay: !0,
            onload: function() {
                map_music[id].loaded = !0;
            },
            onfinish: function() {
                Music.play(id, !0);
            },
            volume: 50
        });
    },
    load_sfx: function(id, rev) {
        sound_effects[id] && sound_effects[id].loaded || (sound_effects[id] = {}, sound_effects[id].loaded = !1, 
        sound_effects[id].music = soundManager.createSound({
            id: "sfx" + id,
            url: "https://1033141278.rsc.cdn77.org/sfx/" + sound_effect_files[id],
            autoLoad: !0,
            autoPlay: rev || !1,
            onload: function() {
                sound_effects[id].loaded = !0;
                sound_effects[id].started_playing = 0;
                sound_effects[id].playing = !1;
            },
            onfinish: function() {
                sound_effects[id].started_playing = 0;
                sound_effects[id].playing = !1;
            },
            volume: 25
        }));
    },
    preload_sfx: function() {
        if (Music.sfx_allowed && -1 == [ "android" ].indexOf(getParameterByName("inapp"))) for (var a in sound_effect_files) Music.load_sfx(a);
    },
    stop: function() {
        soundManager.stopAll();
    },
    use_item: function(n) {
        var oppSide = item_base[n];
        if (0 <= [ 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 401, 795, 796, 1023, 1024, 1033, 1081, 1367, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420 ].indexOf(parseInt(n))) return Music.sound_effect("drink");
        if (oppSide.b_t == ITEM_CATEGORY.FOOD) return Music.sound_effect("eat");
        if (0 <= [ 194, 196, 198, 200, 385, 387, 389, 297, 1300 ].indexOf(parseInt(n))) return Music.sound_effect("cut_gem");
    },
    use_object: function(a) {}
}, Quests = {
    last_opened: "active",
    toggle: function() {
        if (GAME_STATE == GAME_STATES.GAME || GAME_STATE == GAME_STATES.CHAT) {
            var childElement = document.getElementById("quests_form");
            "block" == childElement.style.display ? childElement.style.display = "none" : (Quests.show_active(), 
            childElement.style.display = "block");
        }
    },
    show_active: function() {
        Quests.last_opened = "active";
        for (var data = [], i = 0; i < player_quests.length; i++) player_quests[i].progress < quests[i].amount && data.push(JSON.merge(quests[i], player_quests[i]));
        document.getElementById("quests_form_content").innerHTML = HandlebarTemplate.quests_active()(data);
    },
    show_completed: function() {
        Quests.last_opened = "completed";
        for (var data = [], i = 0; i < player_quests.length; i++) player_quests[i].progress == quests[i].amount && data.push(JSON.merge(quests[i], player_quests[i]));
        document.getElementById("quests_form_content").innerHTML = HandlebarTemplate.quests_completed()(data);
    },
    increase_monster_quest: function(element, valueAccessor) {
        var classes = Private.get(element, "quests");
        if ("undefined" != typeof classes) for (var i = classes.length - 1; 0 <= i; i--) if (quests[i].npc_id == valueAccessor) if (classes[i].progress < quests[i].amount) classes[i].progress++, 
        classes[i].progress == quests[i].amount ? Quests.give_reward(element, i) : Quests.update_quest(element, i, classes[i].progress); else break;
    },
    update_quest: function(i, newValue, oldValue) {
        AREA.sql(clients[i], {
            action: "update_quest",
            id: newValue,
            progress: oldValue,
            reward_result: 0
        });
        "undefined" != typeof sockets[i] && SSocket.send(sockets[i], {
            action: "update_quest",
            quest_id: newValue,
            progress: oldValue
        });
    },
    give_reward: function(id, i) {
        var side = Math.round(2 * Math.random());
        AREA.sql(clients[id], {
            action: "update_quest",
            id: i,
            progress: quests[i].amount,
            reward_result: side
        });
        if ("undefined" != typeof sockets[id]) {
            SSocket.send(sockets[id], {
                action: "quest_complete",
                quest_id: i,
                reward_result: side
            });
            var children = Private.get(id, "quests");
            children.length - 1 == i && i + 1 < quests.length && (children.push({
                quest_id: i + 1,
                progress: 0,
                reward_result: 0
            }), Quests.update_quest(id, i + 1, 0));
            switch (side) {
              case 0:
                Player.inc_xp(clients[id], "combat", quests[i].reward[0]);
                break;

              case 1:
                clients[id].temp.coins += quests[i].reward[1];
                Player.send_data(id);
                break;

              case 2:
                AREA.sql(clients[id], {
                    action: "add_mos",
                    player_name: clients[id].name,
                    amount: quests[i].reward[2]
                }), Timers.set("update_" + id, function() {
                    clients[id] && AREA.sql(clients[id], {
                        action: "mos_balance"
                    });
                }, 1e3);
            }
        }
    },
    show_reward: function(key, value) {
        switch (value) {
          case 0:
            return quests[key].reward[0] + " experience";

          case 1:
            return quests[key].reward[1] + " coins";

          case 2:
            return quests[key].reward[2] + " MOS";
        }
    },
    restart: function(silent) {
        0 < Inventory.get_item_count(players[0], 1031) ? (Socket.send("reset_quest", {
            quest_id: silent
        }), player_quests[silent].progress = 0, Quests.show_active()) : addChatText("You need a Repeat Quest Permission to reset a quest", void 0, COLOR.PINK);
    },
    refresh: function() {
        if ("block" == document.getElementById("quests_form").style.display) switch (Quests.last_opened) {
          case "active":
            Quests.show_active();
            break;

          case "completed":
            Quests.show_completed();
        }
    }
}, quests = [ {
    id: 0,
    name: "Journey Begins",
    type: 0,
    npc_id: 1,
    amount: 5,
    location: "Tutorial Island, Dorpat",
    reward: [ 15, 49, 1 ]
}, {
    id: 1,
    name: "Poultry Slaughtering",
    type: 0,
    npc_id: 101,
    amount: 20,
    location: "Dorpat",
    reward: [ 20, 65, 1 ]
}, {
    id: 2,
    name: "Slay Greybeards",
    type: 0,
    npc_id: 0,
    amount: 15,
    location: "Dorpat",
    reward: [ 30, 98, 1 ]
}, {
    id: 3,
    name: "Need Some Meat",
    type: 0,
    npc_id: 102,
    amount: 20,
    location: "Dorpat",
    reward: [ 32, 105, 1 ]
}, {
    id: 4,
    name: "Wizards Gaining Skill",
    type: 0,
    npc_id: 3,
    amount: 20,
    location: "Dorpat",
    reward: [ 68, 223, 1 ]
}, {
    id: 5,
    name: "Have Some Shroom",
    type: 0,
    npc_id: 32,
    amount: 25,
    location: "Whiland",
    reward: [ 70, 230, 1 ]
}, {
    id: 6,
    name: "Learn To Hunt",
    type: 0,
    npc_id: 103,
    amount: 20,
    location: "Whiland",
    reward: [ 90, 295, 1 ]
}, {
    id: 7,
    name: "Orcs Invasion Part 1",
    type: 0,
    npc_id: 4,
    amount: 25,
    location: "Dorpat",
    reward: [ 125, 411, 1 ]
}, {
    id: 8,
    name: "Orcs Invasion Part 2",
    type: 0,
    npc_id: 13,
    amount: 24,
    location: "Dorpat",
    reward: [ 144, 472, 1 ]
}, {
    id: 9,
    name: "Mining Some Golems Part 1",
    type: 0,
    npc_id: 60,
    amount: 27,
    location: "Rakblood",
    reward: [ 183, 603, 2 ]
}, {
    id: 10,
    name: "Ghostbuster",
    type: 0,
    npc_id: 9,
    amount: 30,
    location: "Walco",
    reward: [ 186, 611, 2 ]
}, {
    id: 11,
    name: "Too Many Bears",
    type: 0,
    npc_id: 104,
    amount: 30,
    location: "Whiland",
    reward: [ 228, 749, 2 ]
}, {
    id: 12,
    name: "Explore Explorers",
    type: 0,
    npc_id: 187,
    amount: 35,
    location: "Rakblood",
    reward: [ 266, 874, 2 ]
}, {
    id: 13,
    name: "Small Ones Can Burn",
    type: 0,
    npc_id: 47,
    amount: 40,
    location: "Reval",
    reward: [ 364, 1200, 2 ]
}, {
    id: 14,
    name: "Twilight",
    type: 0,
    npc_id: 11,
    amount: 40,
    location: "Dungeon",
    reward: [ 422, 1388, 2 ]
}, {
    id: 15,
    name: "Shadow Land",
    type: 0,
    npc_id: 134,
    amount: 50,
    location: "Walco",
    reward: [ 540, 1755, 2 ]
}, {
    id: 16,
    name: "Mining Some Golems Part 2",
    type: 0,
    npc_id: 62,
    amount: 50,
    location: "Rakblood",
    reward: [ 624, 2501, 2 ]
}, {
    id: 17,
    name: "Undead Domination",
    type: 0,
    npc_id: 135,
    amount: 65,
    location: "Walco",
    reward: [ 702, 2308, 2 ]
}, {
    id: 18,
    name: "What Animal Is That",
    type: 0,
    npc_id: 16,
    amount: 70,
    location: "Dungeon",
    reward: [ 907, 2983, 2 ]
}, {
    id: 19,
    name: "World Is Weird",
    type: 0,
    npc_id: 199,
    amount: 70,
    location: "Dungeon",
    reward: [ 1042, 3424, 2 ]
}, {
    id: 20,
    name: "Go Fishing",
    type: 0,
    npc_id: 49,
    amount: 100,
    location: "Blood River",
    reward: [ 1152, 3788, 2 ]
}, {
    id: 21,
    name: "Dont Look Into The Eyes",
    type: 0,
    npc_id: 109,
    amount: 85,
    location: "Cesis",
    reward: [ 1183, 3890, 2 ]
}, {
    id: 22,
    name: "More Than 100 Legs",
    type: 0,
    npc_id: 157,
    amount: 90,
    location: "Pernau",
    reward: [ 1620, 5326, 3 ]
}, {
    id: 23,
    name: "Angels Deserve To Die",
    type: 0,
    npc_id: 18,
    amount: 120,
    location: "Clouds",
    reward: [ 1987, 6534, 3 ]
}, {
    id: 24,
    name: "Floating Eyes",
    type: 0,
    npc_id: 114,
    amount: 200,
    location: "Clouds",
    reward: [ 2592, 8523, 3 ]
}, {
    id: 25,
    name: "Some Strong Hits",
    type: 0,
    npc_id: 200,
    amount: 200,
    location: "Dungeon",
    reward: [ 3840, 12626, 3 ]
}, {
    id: 26,
    name: "There Is A Boss",
    type: 0,
    npc_id: 124,
    amount: 10,
    location: "Reval",
    reward: [ 5500, 18085, 4 ]
}, {
    id: 27,
    name: "Need Some Fire",
    type: 0,
    npc_id: 71,
    amount: 250,
    location: "Narwa",
    reward: [ 5320, 17493, 3 ]
}, {
    id: 28,
    name: "Two Head, Still Dead",
    type: 0,
    npc_id: 115,
    amount: 250,
    location: "Clouds",
    reward: [ 5740, 18874, 3 ]
}, {
    id: 29,
    name: "World Is Alive",
    type: 0,
    npc_id: 64,
    amount: 250,
    location: "Rakblood",
    reward: [ 6440, 21176, 3 ]
}, {
    id: 30,
    name: "Big Cat",
    type: 0,
    npc_id: 190,
    amount: 300,
    location: "Pernau",
    reward: [ 7560, 24858, 3 ]
}, {
    id: 31,
    name: "Wow, Shiny",
    type: 0,
    npc_id: 27,
    amount: 250,
    location: "Blood River",
    reward: [ 7700, 25319, 3 ]
}, {
    id: 32,
    name: "Crystals Are Alive",
    type: 0,
    npc_id: 126,
    amount: 250,
    location: "Cesis",
    reward: [ 8400, 27620, 3 ]
}, {
    id: 33,
    name: "Merged Elements",
    type: 0,
    npc_id: 74,
    amount: 270,
    location: "Narwa",
    reward: [ 9072, 29830, 3 ]
}, {
    id: 34,
    name: "Ice Ice Baby",
    type: 0,
    npc_id: 54,
    amount: 300,
    location: "Narwa",
    reward: [ 9240, 30382, 3 ]
}, {
    id: 35,
    name: "Wish I Could Use A Pickaxe",
    type: 0,
    npc_id: 184,
    amount: 250,
    location: "Hell",
    reward: [ 9750, 32059, 3 ]
}, {
    id: 36,
    name: "Like Fire",
    type: 0,
    npc_id: 88,
    amount: 250,
    location: "Hell",
    reward: [ 10200, 33539, 4 ]
}, {
    id: 37,
    name: "One Hit, Two Deaths",
    type: 0,
    npc_id: 172,
    amount: 250,
    location: "Pernau",
    reward: [ 10500, 34526, 4 ]
}, {
    id: 38,
    name: "Satan's Job",
    type: 0,
    npc_id: 105,
    amount: 250,
    location: "Heaven",
    reward: [ 16500, 54255, 4 ]
}, {
    id: 39,
    name: "Must Be High",
    type: 0,
    npc_id: 245,
    amount: 320,
    location: "Heaven",
    reward: [ 17280, 56820, 4 ]
}, {
    id: 40,
    name: "Like A Rainbow",
    type: 0,
    npc_id: 75,
    amount: 350,
    location: "Narwa",
    reward: [ 16800, 72041, 4 ]
}, {
    id: 41,
    name: "Battle Of Gods",
    type: 0,
    npc_id: 99,
    amount: 300,
    location: "Heaven",
    reward: [ 18e3, 59187, 4 ]
}, {
    id: 42,
    name: "No Turning Back",
    type: 0,
    npc_id: 251,
    amount: 250,
    location: "Dragon Cave",
    reward: [ 18750, 61653, 4 ]
}, {
    id: 43,
    name: "Death Through Metal",
    type: 0,
    npc_id: 252,
    amount: 300,
    location: "Dragon Cave",
    reward: [ 22500, 73984, 4 ]
}, {
    id: 44,
    name: "Nothing But Darkness",
    type: 0,
    npc_id: 254,
    amount: 300,
    location: "Dragon Cave",
    reward: [ 27e3, 88781, 4 ]
}, {
    id: 45,
    name: "Hope Is Strongest",
    type: 0,
    npc_id: 155,
    amount: 30,
    location: "Hell",
    reward: [ 36e3, 118375, 5 ]
}, {
    id: 46,
    name: "Death Lord",
    type: 0,
    npc_id: 255,
    amount: 20,
    location: "Pernau",
    reward: [ 41400, 136131, 5 ]
}, {
    id: 47,
    name: "Grinding Continues",
    type: 0,
    npc_id: 284,
    amount: 300,
    location: "Green Dungeon",
    reward: [ 42400, 141131, 5 ]
}, {
    id: 48,
    name: "A Little More",
    type: 0,
    npc_id: 286,
    amount: 300,
    location: "Green Dungeon",
    reward: [ 46400, 151131, 5 ]
}, {
    id: 49,
    name: "Stop the Demons",
    type: 0,
    npc_id: 156,
    amount: 20,
    location: "Heaven",
    reward: [ 48600, 152131, 5 ]
}, {
    id: 50,
    name: "Big and Red",
    type: 0,
    npc_id: 256,
    amount: 20,
    location: "Dragon's Lair",
    reward: [ 56800, 176320, 5 ]
}, {
    id: 51,
    name: "Got Wings?",
    type: 0,
    npc_id: 257,
    amount: 20,
    location: "Heaven",
    reward: [ 67800, 189720, 5 ]
}, {
    id: 52,
    name: "Woodcutting",
    type: 0,
    npc_id: 278,
    amount: 5,
    location: "No Man's Land",
    reward: [ 35e3, 1e5, 5 ]
}, {
    id: 53,
    name: "The End",
    type: 0,
    npc_id: 154,
    amount: 10,
    location: "Clouds",
    reward: [ 65e3, 125e3, 5 ]
} ], PartyQuests = {
    difficulty_names: {
        0: "Easy",
        1: "Normal",
        2: "Hell"
    },
    show_list: function(list) {
        Timers.clear("quest_show_new");
        document.getElementById("quests_party_form").style.display = "block";
        document.getElementById("quests_party_form_content").innerHTML = "Loading data...";
        if ("undefined" == typeof list) Socket.send("party_quest", {
            sub: "party_list"
        }); else {
            for (var i in list) null == list[i] ? list.splice(i, 1) : (list[i].difficulty = PartyQuests.difficulty_names[list[i].difficulty], 
            list[i].players = list[i].players.length, list[i].extra = list[i].friends_only ? "♥" : "");
            0 == list.length ? document.getElementById("quests_party_form_content").innerHTML = "No active parties available!" : (document.getElementById("quests_party_form").style.display = "block", 
            document.getElementById("quests_party_form_content").innerHTML = HandlebarTemplate.quests_party_list()(list));
        }
    },
    show_hall_of_fame: function(e) {
        Timers.clear("quest_show_new");
        document.getElementById("quests_party_form").style.display = "block";
        document.getElementById("quests_party_form_content").innerHTML = "Loading data...";
        if ("undefined" == typeof e) Socket.send("party_quest", {
            sub: "hall_of_fame"
        }); else {
            e = e.reverse();
            for (var property in e) e[property].player == players[0].name && (e[property].me = !0);
            switch (e.length) {
              case 13:
                e.splice(8, 2);
                break;

              case 12:
                e.splice(9, 1);
            }
            document.getElementById("quests_party_form_content").innerHTML = HandlebarTemplate.quests_hall_of_fame()(e);
        }
    },
    show_new: function() {
        var counter = {};
        counter.normal_disabled = 1 > players[0].temp.quest_diff;
        counter.hell_disabled = 2 > players[0].temp.quest_diff;
        counter.timer = 0 > minutesPastDelta(players[0].temp.quest_cooldown);
        counter.time_remaining = -minutesPastDelta(players[0].temp.quest_cooldown);
        document.getElementById("quests_party_form").style.display = "block";
        document.getElementById("quests_party_form_content").innerHTML = HandlebarTemplate.quests_new()(counter);
        PartyQuests.update_difficulty_cooldown();
        counter.timer && Timers.set("quest_show_new", function() {
            "block" == document.getElementById("quests_party_form").style.display && PartyQuests.show_new();
        }, 500);
    },
    difficulty_cooldowns: {
        0: 3,
        1: 6,
        2: 12
    },
    difficulty_durations: {
        0: 35,
        1: 45,
        2: 50
    },
    update_difficulty_cooldown: function() {
        var template = PartyQuests.difficulty_cooldowns[document.getElementById("quest_difficulty").value];
        document.getElementById("difficulty_cooldown").innerHTML = template + " hour" + sOrNoS(template);
    },
    reduce_time: function() {
        0 < Inventory.get_item_count(players[0], 1031) ? Socket.send("party_quest", {
            sub: "reduce_time"
        }) : addChatText("You need a Repeat Quest Permission to reduce cooldown time", void 0, COLOR.PINK);
    },
    create_new: function() {
        if (!PartyQuests.creation_in_progress) {
            PartyQuests.creation_in_progress = !0;
            Timers.set("creation_in_progress", function() {
                PartyQuests.creation_in_progress = !1;
            }, 5e3);
            var a = document.getElementById("quest_difficulty").value, b = document.getElementById("quest_friends_only").checked, c = [];
            if (b) {
                for (var i in Contacts.friends) c.push(Contacts.friends[i].name);
                c.push(players[0].name);
            }
            Socket.send("party_quest", {
                sub: "create_new",
                settings: {
                    difficulty: a,
                    friends_only: b,
                    whitelist: c
                }
            });
        }
    },
    show_active_party: function(room) {
        room.difficulty = PartyQuests.difficulty_names[room.difficulty];
        room.player_count = room.players.length;
        room.owner = !1;
        room.name == players[0].name && (room.owner = !0);
        for (var p in room.players) room.players[p] = {
            name: room.players[p],
            owner: room.owner && room.players[p] != players[0].name,
            id: room.id
        };
        Contacts.save_channel(room.channel);
        document.getElementById("quests_party_form_content").innerHTML = HandlebarTemplate.quests_active_party()(room);
    },
    leave_party: function(message) {
        Contacts.delete_channel(message.channel);
        "block" == document.getElementById("quests_party_form").style.display && PartyQuests.show_list();
    },
    dungeon_start: function(data) {
        var r = parseInt(data.difficulty) || 0, d = 400 + 50 * r, e = 0, s = 0, i;
        for (i in data.players) {
            var client = users_list[data.players[i]];
            clients[client] && (e++, s += clients[client].params.combat_level, clients[client].temp.quest_cooldown = Math.max(clients[client].temp.quest_cooldown + 3600, secondstamp() + 3600), 
            clients[client].name == data.name && (clients[client].temp.quest_cooldown = secondstamp() + 3600 * PartyQuests.difficulty_cooldowns[r]));
        }
        client = clients[users_list[data.name]];
        if (0 == e || "undefined" == typeof client) delete activeParties[data.id]; else {
            var h = Math.round((s / e + 20 * r) * (1.3 + .2 * r)), e = JSON.clone(random_map_seeds[Math.floor(Math.random() * random_map_seeds.length)]), id = data.id, s = 100 + id;
            e.rotate = Math.floor(4 * Math.random());
            e.theme = r;
            e.monster_level = h;
            e.monsters = d;
            e.monsters_left = d;
            e.dungeon_id = id;
            e.difficulty = r;
            e.channel = data.channel;
            e.type = 7 > 10 * Math.random() ? 0 : 1;
            e.start_time = secondstamp();
            e.end_time = secondstamp() + 60 * PartyQuests.difficulty_durations[r] - 600 * e.type;
            e.players = data.players;
            AREA.npc(client, {
                action: "random_map",
                options: e,
                map_id: s
            });
            for (i in data.players) SSocket.send(sockets[users_list[data.players[i]]], {
                action: "random_map",
                options: e,
                map_id: s
            });
            activeDungeons[id] = {
                options: e,
                players: data.players,
                kills: {}
            };
            r = loadCustomMap(s, e);
            r = {
                i: r.points.begin.x,
                j: r.points.begin.y,
                map: s
            };
            for (i in data.players) clients[users_list[data.players[i]]] && (0 == e.type && PartyQuests.update_party_quest_score(data.players[i], -1, 0, 1), 
            Client.teleport_position(clients[users_list[data.players[i]]], r));
            Timers.set("dungeon_end_" + e.dungeon_id, function() {
                PartyQuests.time_is_up(id);
            }, 1e3 * (e.end_time - secondstamp()));
            activeDungeons[id].interval = setInterval(function() {
                PartyQuests.check_result(id);
            }, 5e3);
        }
    },
    reduce_monster_count: function(s) {
        var a = s.map - 100;
        activeDungeons[a] && 0 == activeDungeons[a].options.type && (activeDungeons[a].options.monsters_left--, 
        activeDungeons[a].kills = activeDungeons[a].kills || {}, activeDungeons[a].kills[s.name] = activeDungeons[a].kills[s.name] + 1 || 1, 
        0 >= activeDungeons[a].options.monsters_left && (PartyQuests.give_rewards(a), PartyQuests.finish_quest(a, !0)));
    },
    check_result: function(b) {
        activeDungeons[b] && 0 == activeDungeons[b].options.type && 0 >= activeDungeons[b].options.monsters_left && PartyQuests.finish_quest(b, !1);
    },
    give_rewards: function(i) {
        if (activeDungeons[i]) for (var id in activeDungeons[i].players) {
            var n = activeDungeons[i].players[id];
            if (users_list[n] && clients[users_list[n]] && clients[users_list[n]].map - 100 == i) {
                PartyQuests.update_party_quest_score(n, 2 + activeDungeons[i].options.difficulty, 1, 0);
                var k = users_list[n];
                0 == id && (n = clients[k].temp.quest_diff, clients[k].temp.quest_diff = Math.min(2, Math.max(activeDungeons[i].options.difficulty + 1, clients[k].temp.quest_diff)), 
                n != clients[k].temp.quest_diff && (Player.send_message(k, "New difficulty unlocked!", COLOR.GREEN), 
                Player.send_achievement(k, "PARTY_QUEST_" + (1 == clients[k].temp.quest_diff ? "NORMAL" : "HELL"))));
                var n = Math.min(9, Math.floor(skills[k].health.level / 10) - 1), r = Math.round(2 * Math.random()), s = activeDungeons[i].options.difficulty + 1;
                switch (r) {
                  case 0:
                    Player.send_message(k, "Reward: " + PartyQuests.kill_all_rewards[n].reward[0] * s + " experience", COLOR.GREEN);
                    Player.inc_xp(clients[k], "combat", PartyQuests.kill_all_rewards[n].reward[0] * s);
                    break;

                  case 1:
                    Player.send_message(k, "Reward: " + PartyQuests.kill_all_rewards[n].reward[1] * s + " coins", COLOR.GREEN);
                    clients[k].temp.coins += PartyQuests.kill_all_rewards[n].reward[1] * s;
                    Player.send_data(k);
                    break;

                  case 2:
                    Player.send_message(k, "Reward: " + PartyQuests.kill_all_rewards[n].reward[2] * s + " MOS", COLOR.GREEN), 
                    AREA.sql(clients[k], {
                        action: "add_mos",
                        player_name: clients[k].name,
                        amount: PartyQuests.kill_all_rewards[n].reward[2] * s
                    }), Timers.set("update_" + k, function() {
                        clients[k] && AREA.sql(clients[k], {
                            action: "mos_balance"
                        });
                    }, 1e3);
                }
            }
        }
    },
    time_is_up: function(i) {
        if (activeDungeons[i]) {
            if (0 == activeDungeons[i].options.type) for (var id in activeDungeons[i].players) {
                var player = activeDungeons[i].players[id];
                users_list[player] && clients[users_list[player]] && clients[users_list[player]].map - 100 == i && Player.send_message(users_list[player], "Time is up! Quest failed.", COLOR.ORANGE);
            }
            PartyQuests.finish_quest(i, !1);
        }
    },
    update_party_quest_score: function(a, b, c, opt_d) {
        AREA.sql(null, {
            action: "update_party_quests",
            name: a,
            points: b,
            wins: c,
            plays: opt_d
        });
        if (users_list[a] && clients[users_list[a]] && Private.get(users_list[a], "steam")) {
            var visible = Private.get(users_list[a], "steam");
            Timers.set("update_party_quest_score" + a, function() {
                AREA.sql(null, {
                    action: "update_steam_stats",
                    sub: "party_quest",
                    name: a,
                    steamid: visible
                });
            }, 5e3);
        }
    },
    finish_quest: function(i, elem) {
        Timers.clear("dungeon_end_" + i);
        if (activeDungeons[i]) {
            !elem && 0 == activeDungeons[i].options.type && 0 >= activeDungeons[i].options.monsters_left && PartyQuests.give_rewards(i);
            var result = "Kill counts: ";
            if (0 == activeDungeons[i].options.type) {
                var data = [], j;
                for (j in activeDungeons[i].kills) data.push({
                    name: j,
                    score: activeDungeons[i].kills[j]
                });
                data = sortArrayOfObjectsByFieldValueDesc(data, "score");
                for (j = 0; j < data.length; j++) result += data[j].name + " - " + data[j].score + " ";
            }
            for (j in activeDungeons[i].players) if (data = activeDungeons[i].players[j], users_list[data] && clients[users_list[data]] && clients[users_list[data]].map - 100 == i) {
                var data = users_list[data], opts = clients[data];
                0 == activeDungeons[i].options.type && Player.send_message(data, result, COLOR.GREEN);
                SSocket.send(sockets[data], {
                    action: "leave_party",
                    data: activeDungeons[i].options
                });
                opts = teleport_locations[map_names[opts.temp.last_map]];
                Client.teleport_position(clients[data], {
                    i: opts.to_i,
                    j: opts.to_j,
                    map: opts.to_map,
                    action: "teleport",
                    player_id: data
                });
            }
            AREA.npc({}, {
                action: "random_map_cleanup",
                dungeon_id: i
            });
            clearInterval(activeDungeons[i].interval);
            delete activeDungeons[i];
            randomMapCleanup(i);
        }
    },
    broadcast: function(msg) {
        if (!Timers.running("party_broadcast" + msg.key)) {
            Timers.set("party_broadcast" + msg.key, function() {}, 6e4);
            var id = "Player " + msg.key + " started " + PartyQuests.difficulty_names[msg.difficulty] + " (" + msg.min + "-" + msg.max + ") party quest in World " + msg.world;
            if (msg.to && Array.isArray(msg.to)) for (var i = 0; i < msg.to.length; i++) {
                if (users_list[msg.to[i]] && msg.key != msg.to[i]) {
                    var client = clients[users_list[msg.to[i]]];
                    client && client.params.combat_level >= msg.min && client.params.combat_level <= msg.max && Player.send_message(client.id, id, COLOR.TEAL);
                }
            } else for (i in clients) (client = clients[i]) && client.params.combat_level >= msg.min && client.params.combat_level <= msg.max && msg.key != client.name && Player.send_message(client.id, id, COLOR.TEAL);
        }
    },
    kill_all_rewards: [ {
        health: 10,
        reward: [ 50, 50, 1 ]
    }, {
        health: 20,
        reward: [ 200, 200, 1 ]
    }, {
        health: 30,
        reward: [ 400, 400, 1 ]
    }, {
        health: 40,
        reward: [ 800, 800, 1 ]
    }, {
        health: 50,
        reward: [ 1600, 1600, 1 ]
    }, {
        health: 60,
        reward: [ 3200, 3200, 2 ]
    }, {
        health: 70,
        reward: [ 6400, 6400, 2 ]
    }, {
        health: 80,
        reward: [ 12800, 12800, 2 ]
    }, {
        health: 90,
        reward: [ 20800, 20800, 2 ]
    }, {
        health: 100,
        reward: [ 30800, 30800, 3 ]
    } ],
    max_allowed: 20
}, PlayerQuests = {
    positions: {
        menu_by_name: function(a) {
            return {
                x: width - (bigIcons ? 64 : 32) - TopIcons.get_x(a) - 12,
                y: TopIcons.bottom_y() + 12
            };
        }
    },
    fetch_player: function(client) {
        client = clients[client];
        return "undefined" == typeof client ? !1 : client;
    },
    set_quest_step: function(client, i, done) {
        client = clients[client];
        "undefined" == typeof client.quests[i] && (client.quests[i] = {
            step: 1
        });
        client.quests[i].step = done;
    },
    1: {
        positions: {
            gate_1: {
                i: 32,
                j: 22,
                map: 12
            },
            makeover: {
                i: 31,
                j: 19,
                map: 12
            },
            quest_instructor: {
                i: 31,
                j: 28,
                map: 12,
                id: 2477
            },
            combat_instructor: {
                i: 34,
                j: 25,
                map: 12,
                id: 2484
            },
            gate_2: {
                i: 32,
                j: 33,
                map: 12
            },
            magic_instructor: {
                i: 31,
                j: 38,
                map: 12,
                id: 2737
            },
            fishing_instructor: {
                i: 38,
                j: 48,
                map: 12,
                id: 2468
            },
            cooking_instructor: {
                i: 40,
                j: 40,
                map: 12,
                id: 2466
            },
            fishing_shop: {
                i: 39,
                j: 43,
                map: 12,
                id: 2465
            },
            fishing_spot: {
                i: 35,
                j: 52,
                map: 12,
                id: 2532
            },
            campfire: {
                i: 39,
                j: 40,
                map: 12,
                id: 9308
            },
            mining_instructor: {
                i: 43,
                j: 42,
                map: 12,
                id: 7791
            },
            clay: {
                i: 45,
                j: 44,
                map: 12,
                id: 3601
            },
            jewelry_instructor: {
                i: 49,
                j: 41,
                map: 12,
                id: 2489
            },
            furnace: {
                i: 49,
                j: 45,
                map: 12,
                id: 7663
            },
            forging_instructor: {
                i: 58,
                j: 42,
                map: 12,
                id: 7797
            },
            anvil: {
                i: 58,
                j: 40,
                map: 12,
                id: 9310
            },
            furnace_forging: {
                i: 59,
                j: 47,
                map: 12,
                id: 9318
            },
            alchemy_instructor: {
                i: 66,
                j: 42,
                map: 12,
                id: 595
            },
            woodcutting_instructor: {
                i: 70,
                j: 51,
                map: 12,
                id: 2703
            },
            chest_instructor: {
                i: 79,
                j: 46,
                map: 12,
                id: 7800
            },
            chest: {
                i: 81,
                j: 50,
                map: 12,
                id: 2705
            }
        },
        client: function(method) {
            if (12 != current_map) return !0;
            switch (method.params.quest_step) {
              case 1:
                if (players[0].quests[1] && 1 == players[0].quests[1].step && 0 == players[0].params.d_head && 0 == players[0].params.d_facial_hair && 0 == players[0].params.d_body && 0 == players[0].params.d_pants) return addChatText("You need to change your look at Makeover Guy before continuing.", null, COLOR.TEAL), 
                interactiveArrow("makeover", function() {
                    var error = "block" == document.getElementById("makeover_form").style.display || 1 < players[0].quests[1].step;
                    error && setTimeout(function() {
                        interactiveArrow("gate", function() {
                            return 1 < players[0].quests[1].step;
                        }, PlayerQuests[1].positions.gate_1, "down", 6e4);
                    }, 5e3);
                    return error;
                }, PlayerQuests[1].positions.makeover, "down", 3e4), !1;
                interactiveArrow("quest_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.quest_instructor.id;
                }, PlayerQuests[1].positions.quest_instructor, "down", 6e4);
                break;

              case 2:
                if (5 > player_quests[0].progress) return addChatText("You need to kill " + (5 - player_quests[0].progress) + " more rats to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 0) && (addChatText("Talk to the combat instructor to get a bronze dagger.", null, COLOR.TEAL), 
                interactiveArrow("combat_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.combat_instructor.id;
                }, PlayerQuests[1].positions.combat_instructor, "down", 6e4)), !1;
                interactiveArrow("magic_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.magic_instructor.id;
                }, PlayerQuests[1].positions.magic_instructor, "down", 6e4);
                break;

              case 3:
                if (0 == skills[0].magic.xp) return addChatText("You need to use magic on a training dummy to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 444) && addChatText("Talk to the magic instructor to get a pouch and spells.", null, COLOR.TEAL), 
                !1;
                interactiveArrow("fishing_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.fishing_instructor.id;
                }, PlayerQuests[1].positions.fishing_instructor, "down", 6e4);
                break;

              case 4:
                if (0 == skills[0].fishing.xp) return addChatText("You need to catch a fish to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 7) && addChatText("Talk to the fishing instructor to get a free fishing rod.", null, COLOR.TEAL), 
                !1;
                if (0 == skills[0].cooking.xp) return addChatText("You need to cook a raw fish or a raw rat meat to pass this gate.", null, COLOR.TEAL), 
                !1;
                interactiveArrow("mining_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.mining_instructor.id;
                }, PlayerQuests[1].positions.mining_instructor, "down", 6e4);
                break;

              case 5:
                if (0 == skills[0].mining.xp) return addChatText("You need to mine clay to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 23) && (addChatText("Talk to the mining instructor to get a free iron pickaxe.", null, COLOR.TEAL), 
                interactiveArrow("mining_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.mining_instructor.id;
                }, PlayerQuests[1].positions.mining_instructor, "down", 6e4)), !1;
                if (0 == skills[0].jewelry.xp) return addChatText("You need to make a clay mould. Talk to jewelry instructor for instructions.", null, COLOR.TEAL), 
                interactiveArrow("jewelry_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.jewelry_instructor.id;
                }, PlayerQuests[1].positions.jewelry_instructor, "down", 6e4), !1;
                interactiveArrow("forging_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.forging_instructor.id;
                }, PlayerQuests[1].positions.forging_instructor, "down", 6e4);
                break;

              case 6:
                interactiveArrow("alchemy_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.alchemy_instructor.id;
                }, PlayerQuests[1].positions.alchemy_instructor, "down", 6e4);
                break;

              case 7:
                if (0 == skills[0].alchemy.xp) return addChatText("You need to mine sand and make a vial in a furnace to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 286) && (addChatText("Talk to the alchemy instructor to get a free spade.", null, COLOR.TEAL), 
                interactiveArrow("alchemy_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.alchemy_instructor.id;
                }, PlayerQuests[1].positions.alchemy_instructor, "down", 6e4)), !1;
                interactiveArrow("woodcutting_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.woodcutting_instructor.id;
                }, PlayerQuests[1].positions.woodcutting_instructor, "down", 6e4);
                break;

              case 8:
                if (0 == skills[0].woodcutting.xp) return addChatText("You need to cut a tree to pass this gate.", null, COLOR.TEAL), 
                0 == Inventory.get_item_count(players[0], 22) && (addChatText("Talk to the woodcutting instructor to get a free woodcutter´s axe.", null, COLOR.TEAL), 
                interactiveArrow("woodcutting_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.woodcutting_instructor.id;
                }, PlayerQuests[1].positions.woodcutting_instructor, "down", 6e4)), !1;
                interactiveArrow("chest_instructor", function() {
                    return selected_object && selected_object.id == PlayerQuests[1].positions.chest_instructor.id;
                }, PlayerQuests[1].positions.chest_instructor, "down", 6e4);
                break;

              case 9:
                chat_filters.chat = !1;
            }
            return !0;
        },
        server: function(a, callback) {
            var mat = PlayerQuests.fetch_player(a);
            if (!mat || 12 != mat.map) return !0;
            switch (callback.params.quest_step) {
              case 1:
                PlayerQuests.set_quest_step(a, "1", 2);
                break;

              case 2:
                PlayerQuests.set_quest_step(a, "1", 3);
                break;

              case 3:
                PlayerQuests.set_quest_step(a, "1", 4);
                break;

              case 4:
                PlayerQuests.set_quest_step(a, "1", 5);
                break;

              case 5:
                PlayerQuests.set_quest_step(a, "1", 6);
                break;

              case 6:
                PlayerQuests.set_quest_step(a, "1", 7);
                break;

              case 7:
                PlayerQuests.set_quest_step(a, "1", 8);
                break;

              case 8:
                PlayerQuests.set_quest_step(a, "1", 9);
                break;

              case 9:
                clients[a].quests[1] = {
                    finished: !0
                };
            }
            return !0;
        }
    }
}, dungeon_size = 100, dungeon_side_width = 8;

function randomCoords() {
    return {
        x: dungeon_side_width + Math.random2() * (dungeon_size - dungeon_side_width) << 0,
        y: dungeon_side_width + Math.random2() * (dungeon_size - dungeon_side_width) << 0
    };
}

function randomSize() {
    return Math.round(2 * Math.random2()) + 20;
}

function beginCenter(uniqueBoard) {
    for (var starbox = {
        x: Math.round(dungeon_size / 2),
        y: Math.round(dungeon_size / 2)
    }; !uniqueBoard[starbox.x][starbox.y]; ) if (--starbox.x, --starbox.y, starbox.x < dungeon_side_width && starbox.y < dungeon_side_width) return !1;
    return starbox;
}

var _random_numbers = [];

function randomFill() {
    _random_numbers = [];
    for (var row = 0; 256 > row; row++) _random_numbers.push(Math.random2());
}

function random256() {
    return _random_numbers.pop();
}

function generateAccessibilityGraph(grid, d) {
    for (var i = 0, x = [ d ], world = [], cell = 0; cell < dungeon_size; cell++) world[cell] = [];
    for (;0 < x.length; ) cell = x.splice(0, 1)[0], grid[cell.x] && grid[cell.x][cell.y] && !world[cell.x][cell.y] && (i++, 
    world[cell.x][cell.y] = !0, x.push({
        x: cell.x - 1,
        y: cell.y
    }), x.push({
        x: cell.x + 1,
        y: cell.y
    }), x.push({
        x: cell.x,
        y: cell.y - 1
    }), x.push({
        x: cell.x,
        y: cell.y + 1
    }));
    return {
        area: i,
        graph: world
    };
}

function generateMap(cell) {
    var j = map_increase;
    map_increase = 400;
    var z = Math.random;
    timestamp();
    var c, p, e = [], data = {}, map = [];
    Math.seedrandom(cell.map_seed);
    Math.random2 = Math.random;
    Math.random = z;
    randomFill();
    for (var l = new SimplexNoise(random256), d = 0; d < dungeon_size; d++) e[d] = [];
    for (var a = 0; a < dungeon_size; a++) for (var k = 0; k < dungeon_size; k++) {
        var b = 1 > 8 * l.noise2D(a / randomSize(), k / randomSize()) ? 256 : 0;
        if (a < dungeon_side_width || k < dungeon_side_width || a > dungeon_size - dungeon_side_width || k > dungeon_size - dungeon_side_width) b = 0;
        e[a][k] = b && 1;
        b && (c = c || {
            x: a,
            y: k
        }, p = {
            x: a,
            y: k
        });
    }
    var graph = new Graph(e);
    cell.center && (c = beginCenter(e) || c);
    var i = graph.nodes[c.x][c.y], obj = graph.nodes[p.x][p.y], l = astar.search(graph.nodes, i, obj);
    200 < l.length && (map = generateAccessibilityGraph(e, c));
    if (200 < l.length && 3500 < map.area) {
        map = map.graph;
        for (d = 0; d < dungeon_size; d++) data[d] = {};
        map[c.x][c.y] = !1;
        map[p.x][p.y] = !1;
        Math.seedrandom(cell.game_seed);
        Math.random2 = Math.random;
        Math.random = z;
        z = [];
        for (a = {
            x: 0,
            y: 0
        }; 50 > z.length || 20 > distance(obj.x, obj.y, a.x, a.y); ) d = randomCoords(), 
        map[d.x][d.y] && (a = graph.nodes[d.x][d.y], z = astar.search(graph.nodes, i, a));
        map[a.x][a.y] = !1;
        k = [];
        for (b = {
            x: 0,
            y: 0
        }; 50 > k.length || 20 > distance(a.x, a.y, b.x, b.y) || 20 > distance(obj.x, obj.y, b.x, b.y); ) d = randomCoords(), 
        map[d.x][d.y] && (b = graph.nodes[d.x][d.y], k = astar.search(graph.nodes, i, b));
        map[b.x][b.y] = !1;
        for (var results = [], coords = {
            x: 0,
            y: 0
        }; 50 > results.length || 20 > distance(b.x, b.y, coords.x, coords.y) || 20 > distance(a.x, a.y, coords.x, coords.y) || 20 > distance(obj.x, obj.y, coords.x, coords.y); ) d = randomCoords(), 
        map[d.x][d.y] && (coords = graph.nodes[d.x][d.y], results = astar.search(graph.nodes, i, coords));
        map[coords.x][coords.y] = !1;
        for (i = graph = 0; graph < cell.monsters + 5 || 5e3 < i; ) d = randomCoords(), 
        map[d.x][d.y] && !data[d.x][d.y] && (data[d.x][d.y] = !0, graph++), i++;
        for (d = 0; d < dungeon_size; d++) 0 == JSON.count(data[d]) && delete data[d];
        map_increase = j;
        return {
            grid: e,
            enemies: data,
            points: {
                begin: {
                    x: c.x,
                    y: c.y,
                    path: l
                },
                end: p,
                1: {
                    x: a.x,
                    y: a.y,
                    path: z
                },
                2: {
                    x: b.x,
                    y: b.y,
                    path: k
                },
                3: {
                    x: coords.x,
                    y: coords.y,
                    path: results
                }
            }
        };
    }
    map_increase = j;
    return !1;
}

function rotateMap(e, params) {
    if (0 != params.rotate) {
        var toXY = rotate90;
        switch (params.rotate) {
          case 1:
            toXY = rotate90;
            break;

          case 2:
            toXY = rotate180;
            break;

          case 3:
            toXY = rotate270;
        }
        for (var cols = [], i = 0; i < dungeon_size; i++) cols[i] = [];
        for (i = 0; i < dungeon_size; i++) for (var j = 0; j < dungeon_size; j++) {
            var cell = toXY({
                x: i,
                y: j
            });
            cols[cell.x][cell.y] = e.grid[i][j];
        }
        var grid = {};
        for (i in e.enemies) for (j in e.enemies[i]) cell = toXY({
            x: parseInt(i),
            y: parseInt(j)
        }), grid[cell.x] = grid[cell.x] || {}, grid[cell.x][cell.y] = !0;
        for (i in e.points) cell = toXY(e.points[i]), e.points[i] = cell, e.points[i].path = [ cell ];
        e.grid = cols;
        e.enemies = grid;
    }
    return e;
}

var rotate90 = function(coord) {
    return {
        x: dungeon_size - 1 - coord.y,
        y: coord.x
    };
}, rotate180 = function(coord) {
    return {
        x: dungeon_size - 1 - coord.x,
        y: dungeon_size - 1 - coord.y
    };
}, rotate270 = function(coord) {
    return {
        x: coord.y,
        y: dungeon_size - 1 - coord.x
    };
};

function loadCustomMap(z, event, e) {
    randomMapCleanup(event.dungeon_id);
    map_names[z] = event.name || "Dungeon quest";
    var row = generateMap(event), row = rotateMap(row, event), x = Math.random;
    Math.seedrandom("reset");
    Math.seedrandom(event.map_seed);
    Math.random2 = Math.random;
    Math.random = x;
    map_graphs[z] = [];
    map[z] = [];
    on_map[z] = [];
    map_settings[z] = {};
    map_settings[z].respawn = !!parseInt(event.type);
    map_settings[z].monsters = event.monsters;
    map_settings[z].monsters_left = event.monsters_left;
    for (x = 0; x <= dungeon_size; x++) {
        map_graphs[z][x] = [];
        map[z][x] = [];
        on_map[z][x] = [];
        for (var y = 0; y <= dungeon_size; y++) if (100 == y || 100 == x) map_graphs[z][x][y] = 1, 
        map[z][x][y] = !1, on_map[z][x][y] = !1; else {
            map_graphs[z][x][y] = row.grid[x][y];
            var tiles = 0;
            try {
                tiles = row.grid[x - 1][y] + row.grid[x + 1][y] + row.grid[x - 1][y - 1] + row.grid[x + 1][y - 1] + row.grid[x][y - 1] + row.grid[x - 1][y + 1] + row.grid[x + 1][y + 1] + row.grid[x][y + 1];
            } catch (l) {
                tiles = 0;
            }
            map[z][x][y] = {
                b_t: BASE_TYPE.GROUND,
                b_i: groundTileFor(event.theme, !row.grid[x][y], tiles)
            };
            on_map[z][x][y] = objectTileFor(event.theme, !row.grid[x][y], tiles);
        }
    }
    node_graphs[z] = new Graph(map_graphs[z]);
    if (0 == event.type) placeObjectDungeon({
        i: row.points["1"].x,
        j: row.points["1"].y,
        map: z
    }, 446), node_graphs[z].nodes[row.points["1"].x][row.points["1"].y].type = 0, 2 > event.difficulty && (placeObjectDungeon({
        i: row.points["2"].x,
        j: row.points["2"].y,
        map: z
    }, 446), node_graphs[z].nodes[row.points["2"].x][row.points["2"].y].type = 0, 1 > event.difficulty && (placeObjectDungeon({
        i: row.points["3"].x,
        j: row.points["3"].y,
        map: z
    }, 446), node_graphs[z].nodes[row.points["3"].x][row.points["3"].y].type = 0)); else if (1 == event.type) {
        y = [ 1057, 1058, 1059 ];
        tiles = [ row.points["1"], row.points["2"], row.points["3"] ];
        for (x = 0; x < tiles.length; x++) {
            var tile = tiles[x];
            placeObjectDungeon({
                i: tile.x,
                j: tile.y,
                map: z,
                params: {
                    contains_id: y.pop()
                }
            }, 442);
            node_graphs[z].nodes[tile.x][tile.y].type = 0;
        }
        placeObjectDungeon({
            i: row.points.end.x,
            j: row.points.end.y,
            map: z
        }, 443 + event.difficulty);
        node_graphs[z].nodes[row.points.end.x][row.points.end.y].type = 0;
    } else 2 == event.type && (placeObjectDungeon({
        i: row.points["1"].x,
        j: row.points["1"].y,
        map: z
    }, 471), node_graphs[z].nodes[row.points["1"].x][row.points["1"].y].type = 0);
    tiles = "undefined" != typeof iamserver;
    for (x = 0; x <= dungeon_size; x++) if (row.enemies[x]) for (y = 0; y <= dungeon_size; y++) row.enemies[x][y] && placeNPC({
        i: parseInt(x),
        j: parseInt(y),
        map: z
    }, chooseEnemy(event.monster_level), tiles);
    if ("undefined" == typeof e) return row;
    console.log(e);
    for (x = 0; x <= dungeon_size; x++) for (y = 0; y <= dungeon_size; y++) e.map[x] && e.map[x][y] && (map[z][x][y] = {
        b_t: BASE_TYPE.GROUND,
        b_i: e.map[x][y].i
    }), e.on_map[x] && e.on_map[x][y] && (placeObjectDungeon({
        i: x,
        j: y,
        map: z,
        r: e.on_map[x][y].r
    }, e.on_map[x][y].i), node_graphs[z].nodes[x][y].type = 0);
    return row;
}

function groundTileFor(keys, index, i) {
    if (index && 8 > i) switch (keys) {
      case 0:
        return 303;

      case 1:
        return 6;

      case 2:
        return [ 23 ][Math.floor(1 * Math.random2())];

      case 3:
        return 1;
    } else switch (keys) {
      case 0:
        return keys = [ 4, 5, 8, 21, 4, 5, 8, 21, 4, 5, 8, 21, 98, 99, 100, 100, 101, 98, 99, 100, 100, 101, 98, 99, 100, 100, 101, 311, 312, 313, 314, 315 ], 
        0 == i && keys.push(329, 330, 329, 330, 329, 330, 329, 330, 329, 330), keys[Math.floor(Math.random() * keys.length)];

      case 1:
        return [ 14, 16, 17, 14, 16, 17, 14, 16, 17, 103, 104, 105, 106, 107, 103, 104, 105, 106, 107, 103, 104, 105, 106, 107, 316, 317, 318, 319, 320 ][Math.floor(29 * Math.random2())];

      case 2:
        return [ 12, 20, 22 ][Math.floor(3 * Math.random2())];

      case 3:
        return [ 0, 62, 63, 64, 65, 66, 67, 68, 69, 190, 195, 196, 197, 198, 199, 200, 201 ][Math.floor(17 * Math.random2())];
    }
}

function objectTileFor(i, endIndex, l) {
    if (!endIndex || 8 > l) {
        switch (i) {
          case 1:
            i = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 128
            };
            var left = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 129
            }, top = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 177
            }, width = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 178
            }, s = [ !1, !1, !1, !1, !1, !1 ];
            0 != l || endIndex || s.push(i, left, top, width);
            return s[Math.floor(Math.random2() * s.length)];

          case 2:
            return i = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 182
            }, left = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 179
            }, top = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 146
            }, width = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 177
            }, s = [ !1, !1, !1, !1, !1, !1 ], 0 != l || endIndex || s.push(i, left, top, width), 
            s[Math.floor(Math.random2() * s.length)];

          case 3:
            i = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 235
            };
            var left = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 236
            }, top = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 237
            }, width = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 1
            }, height = {
                b_t: BASE_TYPE.OBJECT,
                b_i: 14
            }, s = [ !1, !1, !1, !1, !1, !1 ];
            0 != l || endIndex || s.push(i, left, top, width, height);
            return s[Math.floor(Math.random2() * s.length)];
        }
        return !1;
    }
    switch (i) {
      case 0:
        left = [ 375, 376, 377, 378 ][Math.floor(4 * Math.random2())];
        break;

      case 1:
        left = [ 394, 395, 396, 397, 421, 422, 423 ][Math.floor(7 * Math.random2())];
        break;

      case 2:
        left = [ 122, 123, 124, 122, 123, 124, 122, 123, 124, 126 ][Math.floor(10 * Math.random2())];
        break;

      case 3:
        left = [ 238, 239, 240, 241, 242, 243, 251, 252, 253, 254, 255 ][Math.floor(11 * Math.random2())];
    }
    return {
        b_t: BASE_TYPE.OBJECT,
        b_i: left
    };
}

function chooseEnemy(index) {
    if (!(325 < index)) for (;;) {
        var y = Math.max(1, index - Math.floor(30 * Math.random2()));
        if (monsters_by_level[y]) return monsters_by_level[y][Math.floor(Math.random2() * monsters_by_level[y].length)];
    }
}

function randomMapCleanup(start) {
    var i = 2e4, j;
    20 > start ? (i += 1e3 * start, j = i + 1e3) : 20 <= start && (i = i + 2e4 + 5e3 * (start - 20), 
    j = i + 5e3);
    for (;i < j; i++) delete objects_data[i];
    delete map_graphs[start + 100];
    delete node_graphs[start + 100];
    delete map[start + 100];
    delete on_map[start + 100];
}

var guild_ids = {}, Guild = {
    guild_deed_id: 1143,
    price: 1e7,
    price_mos: 1e3,
    max_allowed: 9,
    msg: {
        not_available: "Sorry, maximum of 10 active guilds allowed per server. Try again in a few minutes.",
        already_in_guild: "You already belong to a guild. You need to leave that guild first.",
        combat_70_to_create_guild: "You need to have at least level 70 combat to start a guild.",
        not_inside_town: "Need to be inside a town to use the guild deed.",
        guild_deed_required: "You don't seem to have a Guild Deed!",
        not_enough_coins_for_guild: "Not enough coins, need " + thousandSeperate(1e7) + " to create a guild.",
        not_enough_mos_for_guild: "Not enough MOS, need " + thousandSeperate(1e3) + " to create a guild.",
        not_in_a_guild: "You are not in any guild!"
    },
    handle: function(client, data) {
        var socket = clients[client.id];
        if ("undefined" != typeof socket) switch (data.action = "guild", data.sub) {
          case "create":
            Guild.create(socket, data);
            break;

          case "unjoin":
            Guild.unjoin(socket, data);
            break;

          case "join":
            Guild.join(socket, data);
            break;

          case "visit":
            Guild.visit(socket, data);
            break;

          case "leave":
            Guild.leave(socket, data);
        }
    },
    create: function(data, test) {
        if (canUseHouseDeed(data)) if (data.temp.guild) Player.send_message(data.id, Guild.msg.already_in_guild, COLOR.ORANGE); else {
            var channel = Guild.get_free_id();
            if (!1 === channel) Player.send_message(data.id, Guild.msg.not_available, COLOR.ORANGE); else if (70 > data.params.combat_level) Player.send_message(data.id, Guild.msg.combat_70_to_create_guild, COLOR.ORANGE); else if (Inventory.get_item_count(data, Guild.guild_deed_id)) {
                if ("coins" == test.type) {
                    if (data.temp.coins < Guild.price) {
                        Player.send_message(data.id, Guild.msg.not_enough_coins_for_guild, COLOR.ORANGE);
                        return;
                    }
                    data.temp.coins -= Guild.price;
                } else {
                    if (Private.get(data.id, "balance") < Guild.price_mos) {
                        Player.send_message(data.id, Guild.msg.not_enough_mos_for_guild, COLOR.ORANGE);
                        return;
                    }
                    Private.set(data.id, "balance", Private.get(data.id, "balance") - Guild.price_mos);
                    AREA.sql(clients[data.id], {
                        action: "add_mos",
                        player_name: clients[data.id].name,
                        amount: -Guild.price_mos
                    });
                    Timers.set("update_" + data.id, function() {
                        clients[data.id] && AREA.sql(clients[data.id], {
                            action: "mos_balance"
                        });
                    }, 1e3);
                }
                data.temp.guild = data.name;
                AREA.sql(clients[data.id], test);
                GuildMap.create(data, channel);
                var time = 100 + PartyQuests.max_allowed + channel;
                GuildMap.save(data.name, !0, function(err) {
                    GuildMap.load_map(data.name, channel);
                    SSocket.send(sockets[data.id], {
                        action: "random_map",
                        packed: !0,
                        options: err,
                        map_id: time
                    });
                    Client.teleport_position(clients[data.id], {
                        i: guild_maps_data[data.name].points["1"].x + 1,
                        j: guild_maps_data[data.name].points["1"].y,
                        map: time
                    });
                });
                guild_ids[channel] = data.name;
            } else Player.send_message(data.id, Guild.msg.guild_deed_required, COLOR.ORANGE);
        } else Player.send_message(data.id, Guild.msg.not_inside_town, COLOR.ORANGE);
    },
    unjoin: function(bei, agoi) {},
    join: function(a, b) {},
    visit: function(item, f) {
        if (canUseHouseDeed(item)) if (item.temp.guild) {
            var path = item.temp.guild, opts;
            opts = "undefined" == typeof guild_maps[path] ? Guild.get_free_id() : Guild.find_id(path);
            if (!1 === opts) Player.send_message(item.id, Guild.msg.not_available, COLOR.ORANGE); else if (Inventory.get_item_count(item, Guild.guild_deed_id)) {
                clients[item.id].temp.last_map = item.map;
                var time = 100 + PartyQuests.max_allowed + opts;
                GuildMap.load_data(path, opts, function(res) {
                    guild_maps[path].reinit && (GuildMap.load_map(path, opts), AREA.publish({
                        i: 0,
                        j: 0,
                        map: time
                    }, {
                        action: "random_map",
                        packed: !0,
                        options: res,
                        map_id: time
                    }), guild_maps[path].reinit = !1);
                    SSocket.send(sockets[item.id], {
                        action: "random_map",
                        packed: !0,
                        options: res,
                        map_id: time
                    });
                    Client.teleport_position(clients[item.id], {
                        i: guild_maps_data[path].points["1"].x + 1,
                        j: guild_maps_data[path].points["1"].y,
                        map: time
                    });
                });
                guild_ids[opts] = path;
            } else Player.send_message(item.id, Guild.msg.guild_deed_required, COLOR.ORANGE);
        } else Player.send_message(item.id, Guild.msg.not_in_a_guild, COLOR.ORANGE); else Player.send_message(item.id, Guild.msg.not_inside_town, COLOR.ORANGE);
    },
    leave: function(data, fn) {
        if (fn && "object" == typeof fn) {
            var obj = objects_data[fn.target_id];
            obj && obj.b_i == Guild.guild_buildings.crystal[0].obj_id && 1 >= distance(data.i, data.j, obj.i, obj.j) && (obj = teleport_locations[map_names[clients[data.id].temp.last_map || 0]], 
            Client.teleport_position(clients[data.id], {
                map: obj.to_map,
                i: obj.to_i,
                j: obj.to_j
            }), clients[data.id].temp.busy = !1);
        }
    },
    get_free_id: function() {
        for (var failed = 0; "undefined" != typeof guild_ids[failed]; ) {
            if (failed > Guild.max_allowed) return !1;
            failed++;
        }
        return failed;
    },
    find_id: function(x) {
        for (var i = 0; guild_ids[i] != x; ) {
            if (i > Guild.max_allowed) return !1;
            i++;
        }
        return i;
    },
    find_map_id_by_name: function(defaultCenturyStart) {
        return Guild.find_id(defaultCenturyStart) + 100 + PartyQuests.max_allowed;
    },
    guild_buildings: {
        crystal: [ {
            obj_id: 471
        } ],
        hall: [ {
            obj_id: 473
        } ],
        shrine: [ {
            obj_id: 472
        } ],
        barracks: [ {
            obj_id: 475
        } ],
        mine: [ {
            obj_id: 474
        } ]
    }
}, guild_maps = {}, guild_maps_data = {}, guild_map_saves = {}, GuildMap = {
    create: function(values, cb) {
        guild_maps[values.name] = {
            saved: !1,
            reinit: !1,
            data: {
                map: {},
                on_map: {}
            },
            buildings: {
                crystal: !0,
                hall: !1,
                shrine: !1,
                barracks: !1,
                mine: !1
            },
            upgrades: {},
            owner: values.name,
            members: [ values.name ],
            admins: [ values.name ],
            permissions: [ values.name ],
            options: {
                theme: 3,
                type: 2,
                rotate: Math.floor(4 * Math.random()),
                monster_level: 8,
                monsters: 0,
                monsters_left: 0,
                center: !1,
                name: "Unnamed guild"
            }
        };
        var defaults = JSON.clone(guild_map_seeds[Math.floor(Math.random() * guild_map_seeds.length)]);
        guild_maps[values.name].options.map_seed = defaults.map_seed;
        guild_maps[values.name].options.game_seed = defaults.game_seed;
    },
    save: function(id, src, callback) {
        "undefined" == typeof guild_maps[id] || guild_maps[id].saved ? process.nextTick(function() {
            callback(guild_map_saves[id]);
        }) : Timers.set("guild_map_save" + id, function() {
            guild_maps[id].saved = !0;
            try {
                guild_map_saves[id] = lzw_encode(JSON.stringify(guild_maps[id])), store.set("guilds_" + id, guild_map_saves[id]), 
                callback(guild_map_saves[id]);
            } catch (profile) {
                console.log("ERROR save guild_maps", id, profile);
            }
        }, src ? 100 : 8e3);
    },
    load_data: function(id, params, callback) {
        if ("undefined" == typeof guild_maps[id]) try {
            store.get("guilds_" + id, function(error, value) {
                if (error) return console.log("ERROR load2 guild_maps ", id), !1;
                if (!value) return !1;
                guild_maps[id] = JSON.parse(lzw_decode(value));
                guild_map_saves[id] = value;
                GuildMap.load_map(id, params);
                return callback(value);
            });
        } catch (profile) {
            console.log("ERROR load guild_maps", id, profile);
        } else return guild_maps[id].saved ? callback(guild_map_saves[id]) : callback(lzw_encode(JSON.stringify(guild_maps[id])));
    },
    load_map: function(i, x) {
        var o = guild_maps[i], v = o.options, f = 100 + PartyQuests.max_allowed + x;
        v.dungeon_id = PartyQuests.max_allowed + x;
        guild_maps_data[i] = loadCustomMap(f, v, o.data);
        "undefined" != typeof iamserver && (AREA.npc({
            id: 0
        }, {
            action: "random_map",
            options: v,
            map_id: f
        }), guild_maps[i].reinit = !1);
    },
    unload: function(arg1, handler) {
        var len = handler + PartyQuests.max_allowed;
        randomMapCleanup(len);
        AREA.npc({}, {
            action: "random_map_cleanup",
            dungeon_id: len
        });
        "undefined" != typeof guild_maps[arg1] && (guild_maps[arg1].saved ? (delete guild_maps[arg1], 
        delete guild_maps_data[arg1], delete guild_map_saves[arg1], delete guild_ids[handler]) : GuildMap.save(arg1, function() {
            delete guild_maps[arg1];
            delete guild_maps_data[arg1];
            delete guild_map_saves[arg1];
            delete guild_ids[handler];
        }));
    },
    place: function(id, x, y, c) {
        var r = clients[id], e = r.temp.guild, u = guild_maps[r.temp.guild];
        if ("undefined" != typeof u && "undefined" != typeof CARPENTRY_FORMULAS[x] && "undefined" != typeof CARPENTRY_FORMULAS[x][y]) {
            y = CARPENTRY_FORMULAS[x][y];
            var o = item_base[y.item_id];
            if (!y.island && 0 != Chest.player_chest_item_count(id, y.item_id)) if (o = BASE_TYPE[o.params.carpentry_type][o.params.carpentry_id], 
            GuildMap.can_edit(e, r, c, "floors" != x, !1)) {
                if (r = c.r || 0, !(r > (o.params.img_rotates || 0) || 0 > r)) {
                    if ("floors" == x) {
                        if (r = GuildMap.edit.remove_ground(e, c)) Chest.player_add_chest(id, r), Player.send_message(id, "Chest loot: " + item_base[r].name, COLOR.YELLOW, "loot");
                        GuildMap.edit.add_ground(e, c, o.b_i);
                    } else {
                        if (r = GuildMap.edit.remove_object(e, c)) Chest.player_add_chest(id, r), Player.send_message(id, "Chest loot: " + item_base[r].name, COLOR.YELLOW, "loot");
                        GuildMap.edit.add_object(e, c, o.b_i);
                        u.reinit = !0;
                    }
                    Chest.player_decrease_item_count(id, y.item_id, 1);
                    SSocket.send(sockets[id], {
                        action: "chest_open",
                        content: Chest.get_content(id),
                        open: !1,
                        carpentry: x
                    });
                }
            } else console.log("Failed!");
        }
    },
    remove: function(id, rev, data) {
        var p = clients[id], type = p.temp.guild, q = guild_maps[p.temp.guild];
        if ("undefined" != typeof q && "undefined" != typeof CARPENTRY_FORMULAS[rev]) if (GuildMap.can_edit(type, p, data, !1, !0)) {
            if ("floors" == rev) {
                if (p = GuildMap.edit.remove_ground(type, data)) Chest.player_add_chest(id, p), 
                Player.send_message(id, "Chest loot: " + item_base[p].name, COLOR.YELLOW, "loot"), 
                data.map = Guild.find_map_id_by_name(type), AREA.publish(data, JSON.merge(data, {
                    action: "guild",
                    sub: "place",
                    type: "floors",
                    id: map[data.map][data.i][data.j].b_i
                }));
            } else {
                if (p = GuildMap.edit.remove_object(type, data)) Chest.player_add_chest(id, p), 
                Player.send_message(id, "Chest loot: " + item_base[p].name, COLOR.YELLOW, "loot"), 
                data.map = Guild.find_map_id_by_name(type), AREA.publish(data, JSON.merge(data, {
                    action: "guild",
                    sub: "remove",
                    type: "objects"
                }));
                q.reinit = !0;
            }
            SSocket.send(sockets[id], {
                action: "chest_open",
                content: Chest.get_content(id),
                open: !1,
                carpentry: rev
            });
        } else console.log("Failed!");
    },
    can_edit: function(a, i, b, r, type) {
        if ("undefined" == typeof guild_maps[a] || "undefined" == typeof b || 0 > b.i || 0 > b.j || 99 < b.i || 99 < b.j) return !1;
        if (0 > guild_maps[a].permissions.indexOf(i.name)) return Player.send_message(i.id, "You don't have permissions to alter objects on this map.", COLOR.ORANGE), 
        !1;
        var e = Guild.find_map_id_by_name(a);
        if (!map_walkable(e, b.i, b.j) && !type) return console.log("Not walkable!", e, b), 
        !1;
        if (!r) return !0;
        r = map_increase;
        map_increase = 400;
        type = node_graphs[e].nodes[b.i][b.j].type;
        node_graphs[e].nodes[b.i][b.j].type = 0;
        var node = guild_maps_data[a].points.begin, node = node_graphs[e].nodes[node.x][node.y], attr = guild_maps_data[a].points.end, attr = node_graphs[e].nodes[attr.x][attr.y];
        a = guild_maps_data[a].points["1"];
        a = node_graphs[e].nodes[a.x + 1][a.y];
        var colliding = !0;
        if (0 == astar.search(node_graphs[e].nodes, node, a).length || 0 == astar.search(node_graphs[e].nodes, attr, a).length) colliding = !1;
        node_graphs[e].nodes[b.i][b.j].type = type;
        map_increase = r;
        colliding || Player.send_message(i.id, "Cannot block the way to the guild crystal", COLOR.ORANGE);
        return colliding;
    },
    edit: {
        add_ground: function(type, data, bNoDetach) {
            guild_maps[type].data.map[data.i] = guild_maps[type].data.map[data.i] || {};
            guild_maps[type].data.map[data.i][data.j] = {
                i: bNoDetach,
                r: data.r || void 0
            };
            guild_maps[type].saved = !1;
            GuildMap.save(type, !1, function() {});
            data.map = Guild.find_map_id_by_name(type);
            AREA.publish(data, JSON.merge(data, {
                action: "guild",
                sub: "place",
                type: "floors",
                id: bNoDetach
            }));
            return !0;
        },
        add_object: function(m, object, o) {
            guild_maps[m].data.on_map[object.i] = guild_maps[m].data.on_map[object.i] || {};
            guild_maps[m].data.on_map[object.i][object.j] = {
                i: o,
                r: object.r || void 0
            };
            guild_maps[m].saved = !1;
            GuildMap.save(m, !1, function() {});
            m = Guild.find_map_id_by_name(m);
            placeObjectDungeon({
                i: object.i,
                j: object.j,
                map: m,
                r: object.r || void 0
            }, o);
            node_graphs[m].nodes[object.i][object.j].type = 0;
            object.map = m;
            AREA.publish(object, JSON.merge(object, {
                action: "guild",
                sub: "place",
                type: "objects",
                id: o
            }));
            return !0;
        },
        add_seed: function(type, object, target) {
            return PlayerMap.get_object(type, object) ? !1 : (target = item_base[target].params.farming_id, 
            player_maps[type].data.on_map[object.i] = player_maps[type].data.on_map[object.i] || [], 
            player_maps[type].data.on_map[object.i][object.j] = {
                i: target,
                t: secondstamp(),
                a: 0
            }, player_maps[type].saved = !1, PlayerMap.save(type, function() {}), !0);
        },
        remove_ground: function(type, data) {
            var req = guild_maps[type].data.map[data.i] && guild_maps[type].data.map[data.i][data.j] && ground_base[guild_maps[type].data.map[data.i][data.j].i];
            if (req = req && req.params && req.params.carpentry_item_id || !1) {
                delete guild_maps[type].data.map[data.i][data.j];
                guild_maps[type].saved = !1;
                var name = Guild.find_map_id_by_name(type);
                map[name][data.i][data.j].b_i = Carpentry.random_grass[Math.floor(Math.random() * Carpentry.random_grass.length)];
                GuildMap.save(type, !1, function() {});
            }
            return req;
        },
        remove_object: function(type, data) {
            var req = guild_maps[type].data.on_map[data.i] && guild_maps[type].data.on_map[data.i][data.j] && object_base[guild_maps[type].data.on_map[data.i][data.j].i];
            if (req = req && req.params && req.params.carpentry_item_id || !1) {
                delete guild_maps[type].data.on_map[data.i][data.j];
                guild_maps[type].saved = !1;
                GuildMap.save(type, !1, function() {});
                var ffi_type = Guild.find_map_id_by_name(type);
                node_graphs[ffi_type].nodes[data.i][data.j].type = 1;
            }
            return req;
        }
    }
};

Guild.guild_buildings_by_id = {};

for (i in Guild.guild_buildings) for (j in Guild.guild_buildings[i]) Guild.guild_buildings_by_id[Guild.guild_buildings[i][j].obj_id] = JSON.merge(Guild.guild_buildings[i][j], {
    category: i,
    level: parseInt(j) + 1
});

var Breeding = {
    open_nest: function() {
        windowOpen = !0;
        var i = (pet_nest = on_map[pet_nest.map][pet_nest.i][pet_nest.j]) && pet_nest.params && pet_nest.params.pet_id, anchor = document.getElementById("pet_nest_form");
        anchor.innerHTML = "";
        addClass(anchor, "hidden");
        var width = void 0;
        pet_nest.params.other_nest && on_map[pet_nest.map][pet_nest.params.other_nest.i + 10][pet_nest.params.other_nest.j + 10] && (width = pet_nest.params.other_nest);
        var object = {
            pet_item_id: "undefined" == typeof i ? void 0 : pets[i].params.item_id,
            pet_id: "undefined" == typeof i ? void 0 : i,
            inventory: Breeding.inventory_get_pets(),
            other_nest: width,
            happiness: 0,
            hunger: 0,
            breed: !1,
            insure: !1
        };
        if ("undefined" != typeof i) {
            object.likes = [];
            for (var k in pets[i].params.likes) object.likes.push(pets[pets[i].params.likes[k].pet_id].params.item_id);
            object.eats = [];
            for (k in pets[i].params.eats) object.eats.push(k);
            object.insure = !0;
            object.inventory = Breeding.inventory_get_foods(object.pet_id);
            object.hunger_time = pets[i].params.eat_interval;
            object.hunger = Breeding.get_pet_hunger(null, pet_nest);
            object.happiness_time = pets[i].params.happiness;
            object.happiness = Breeding.get_pet_happiness(null, pet_nest);
            100 <= object.hunger && (object.insure = !1);
            pet_nest.params.insured && (object.insure = !1);
            Breeding.ready_to_breed(null, pet_nest) && (object.breed = !0);
        }
        Breeding.activate_pet_alert(pet_nest);
        var text = HandlebarTemplate.pet_nest()(object);
        Timers.set("draw_pet_nest", function() {
            anchor.innerHTML = text;
            removeClass(anchor, "hidden");
            Timers.set("refresh_pet_nest", function() {
                hasClass(document.getElementById("pet_nest_form"), "hidden") || Breeding.open_nest();
            }, Math.max(1e4, (object.hunger_time || 1) / 100 * 6e4));
        }, 1);
    },
    other: function(next, name) {
        (pet_nest = on_map[300][next + 10][name + 10]) && Breeding.open_nest();
    },
    inventory_get_pets: function() {
        var subs = [], i;
        for (i in players[0].temp.inventory) item_base[players[0].temp.inventory[i].id].b_t == ITEM_CATEGORY.PET && subs.push({
            id: players[0].temp.inventory[i].id,
            i: i
        });
        return Breeding.inventory_format(subs);
    },
    inventory_get_foods: function(i) {
        var self_effects = [];
        if ("undefined" != typeof i && pets[i]) for (var category in pets[i].params.eats) for (var item in players[0].temp.inventory) item_base[players[0].temp.inventory[item].id].b_i == category && self_effects.push({
            id: players[0].temp.inventory[item].id,
            i: item
        });
        return Breeding.inventory_format(self_effects);
    },
    inventory_format: function(buffer) {
        if (15 < buffer.length) return buffer.slice(0, 15);
        for (var pad = 15 - buffer.length, i = 0; i < pad; i++) buffer.push({
            id: void 0,
            i: !1
        });
        return buffer;
    },
    inventory_click: function(i, elem) {
        if ("undefined" != typeof i && !1 !== i) {
            var req = item_base[players[0].temp.inventory[i].id];
            if (elem) Socket.send("breeding", {
                sub: "feed_pet",
                position: Breeding.get_nest_position(),
                item_id: req.b_i
            }); else {
                var id1 = pets[req.params.pet];
                id1.params.breeding_level <= skills[0].breeding.current ? Socket.send("breeding", {
                    sub: "place_pet",
                    position: Breeding.get_nest_position(),
                    item_id: req.b_i
                }) : "undefined" == typeof id1.params.breeding_level ? addChatText("This pet cannot be used for breeding!", null, COLOR.PINK, "cannot") : addChatText("You need " + id1.params.breeding_level + " breeding for " + id1.name, null, COLOR.PINK, "cannot");
            }
        }
    },
    cancel: function() {
        var now = function() {
            Socket.send("breeding", {
                sub: "cancel",
                position: Breeding.get_nest_position()
            });
        };
        100 == Breeding.get_pet_hunger(null, Breeding.get_nest_position()) ? now() : Popup.prompt("Cancel breeding? Progress will be lost.", function() {
            now();
        }, function() {});
        Breeding.open_nest();
    },
    breed: function() {
        Socket.send("breeding", {
            sub: "breed",
            position: Breeding.get_nest_position()
        });
        Breeding.open_nest();
    },
    breed_server: function(id, data) {
        var socket = clients[id];
        if ("undefined" == typeof socket) return {
            status: !1,
            reason: "Player not found"
        };
        if (!PlayerMap.can_edit(socket.name, socket.name, data)) return {
            status: !1,
            reason: "No permissions"
        };
        var field = JSON.clone(PlayerMap.get_packed_object(socket.name, data));
        if (!field || !field.pet_id) return {
            status: !1,
            reason: "Pet not found"
        };
        if (!Breeding.ready_to_breed(socket.name, data)) return {
            status: !1,
            reason: "Not ready to breed"
        };
        if (38 <= socket.temp.inventory.length) return {
            status: !1,
            reason: "3 free inventory spaces are required."
        };
        for (var ret = PlayerMap.get_breeding_grid(socket.name), ret = sizeOfEnclosure(data.i, data.j, 2, ret).area, index = JSON.clone(PlayerMap.get_packed_object(socket.name, field.ot_n)), j = !!Math.round(Math.random()), l = !!Math.round(Math.random()), n, x = pets[field.pet_id], y = pets[index.pet_id], i = 0; i < x.params.likes.length; i++) if (x.params.likes[i].pet_id == index.pet_id) {
            n = i;
            break;
        }
        for (var test = !1, out = 0, i = 0; i < x.params.likes[n].returns.length; i++) {
            var a = Math.random(), b = 1, c = x.params.likes[n].returns[i];
            c.max_chance && (b = c.max_chance);
            var exp = c.base_chance + (skills[socket.id].breeding.current - Math.max(x.params.breeding_level, y.params.breeding_level) + ret) / 100;
            if (Math.min(b, exp) > a) {
                test = pets[c.pet_id].params.item_id;
                out = x.params.likes[n].xp;
                break;
            }
        }
        "number" == typeof test ? (Items.give_to_player(clients[socket.id], test), Player.inc_xp(clients[socket.id], "breeding", out), 
        Player.request_captcha(socket.id, !1)) : Player.send_message(socket.id, "Breeding failed.", COLOR.YELLOW, "fails");
        l ? j ? (field.insu ? Items.give_to_player(clients[socket.id], x.params.item_id) : Player.send_message(socket.id, "Mother " + x.name + " died giving birth.", COLOR.YELLOW, "fails"), 
        PlayerMap.edit.remove_object(socket.name, data), PlayerMap.edit.add_object(socket.name, data, Breeding.nest_id), 
        Items.give_to_player(clients[socket.id], y.params.item_id)) : index.insu ? (Items.give_to_player(clients[socket.id], x.params.item_id), 
        PlayerMap.edit.remove_object(socket.name, data), PlayerMap.edit.add_object(socket.name, data, Breeding.nest_id), 
        Items.give_to_player(clients[socket.id], y.params.item_id)) : (Player.send_message(socket.id, "Mother " + y.name + " died giving birth.", COLOR.YELLOW, "fails"), 
        Items.give_to_player(clients[socket.id], x.params.item_id), PlayerMap.edit.remove_object(socket.name, data), 
        PlayerMap.edit.add_object(socket.name, data, Breeding.nest_id)) : (Items.give_to_player(clients[socket.id], x.params.item_id), 
        PlayerMap.edit.remove_object(socket.name, data), PlayerMap.edit.add_object(socket.name, data, Breeding.nest_id), 
        Items.give_to_player(clients[socket.id], y.params.item_id));
        PlayerMap.edit.remove_object(socket.name, field.ot_n);
        PlayerMap.edit.add_object(socket.name, field.ot_n, Breeding.nest_id);
        return {
            status: !0,
            position: data,
            other_position: field.ot_n
        };
    },
    insure: function(i) {
        Popup.dual_prompt("Do you want to insure your pet from death?", thousandSeperate(pets[i].params.insurance_cost[0]) + " coins", function() {
            Socket.send("breeding", {
                sub: "insure",
                type: "coins",
                position: Breeding.get_nest_position()
            });
            Timers.set("refresh_pet_nest", function() {
                hasClass(document.getElementById("pet_nest_form"), "hidden") || Breeding.open_nest();
            }, 1e3);
        }, thousandSeperate(pets[i].params.insurance_cost[1]) + " MOS", function() {
            Socket.send("breeding", {
                sub: "insure",
                type: "mos",
                position: Breeding.get_nest_position()
            });
            Timers.set("refresh_pet_nest", function() {
                hasClass(document.getElementById("pet_nest_form"), "hidden") || Breeding.open_nest();
            }, 1e3);
        });
    },
    insure_server: function(id, msg, value) {
        value = value || "coins";
        var e = clients[id];
        if ("undefined" == typeof e) return {
            status: !1,
            reason: "Player not found"
        };
        if (!PlayerMap.can_edit(e.name, e.name, msg)) return {
            status: !1,
            reason: "No permissions"
        };
        var h = PlayerMap.get_packed_object(e.name, msg);
        if (!h || !h.pet_id) return {
            status: !1,
            reason: "Pet not found"
        };
        var id1 = pets[h.pet_id];
        if (h.insu) return {
            status: !1,
            reason: "Already insured"
        };
        if (100 <= Breeding.get_pet_hunger(e.name, msg)) return {
            status: !1,
            reason: "Cannot insure a dead pet"
        };
        if ("coins" == value) {
            value = id1.params.insurance_cost[0];
            if (e.temp.coins < value) return {
                status: !1,
                reason: "Not enough coins, need " + thousandSeperate(value) + " to upgrade"
            };
            e.temp.coins -= value;
        } else {
            value = id1.params.insurance_cost[1];
            if (Private.get(e.id, "balance") < value) return {
                status: !1,
                reason: "Not enough MOS, need " + thousandSeperate(value) + " to upgrade"
            };
            Private.set(e.id, "balance", Private.get(e.id, "balance") - value);
            AREA.sql(clients[id], {
                action: "add_mos",
                player_name: clients[id].name,
                amount: -value
            });
            Timers.set("update_" + id, function() {
                clients[id] && AREA.sql(clients[id], {
                    action: "mos_balance"
                });
            }, 1e3);
        }
        PlayerMap.edit.change_object_params(e.name, msg, {
            insu: !0
        });
        return {
            status: !0
        };
    },
    feed_pet: function(client, data, callback) {
        type = type || "coins";
        client = clients[client];
        if ("undefined" == typeof client) return {
            status: !1,
            reason: "Player not found"
        };
        if (!PlayerMap.can_edit(client.name, client.name, data)) return {
            status: !1,
            reason: "No permissions"
        };
        var cb = PlayerMap.get_packed_object(client.name, data);
        if (!cb || !cb.pet_id) return {
            status: !1,
            reason: "Pet not found"
        };
        var id1 = pets[cb.pet_id];
        if (100 <= Breeding.get_pet_hunger(client.name, data)) return {
            status: !1,
            reason: "Cannot feed a dead pet"
        };
        if (0 == Breeding.get_pet_hunger(client.name, data)) return {
            status: !1,
            reason: "Pet is not hungry"
        };
        if (0 == Inventory.get_item_count(client, callback)) return {
            status: !1,
            reason: "Not enough food"
        };
        if (!id1.params.eats[callback]) return {
            status: !1,
            reason: "Pet does not eat this"
        };
        cb = {
            l_a: Math.round(cb.l_a + 60 * id1.params.eat_interval * id1.params.eats[callback])
        };
        PlayerMap.edit.change_object_params(client.name, data, cb);
        Inventory.remove(clients[client.id], callback);
        return {
            status: !0
        };
    },
    get_nest_position: function() {
        return {
            i: pet_nest.i,
            j: pet_nest.j,
            map: pet_nest.map
        };
    },
    get_other_nest: function(bei, agoi) {},
    pet_x_likes_pet_y: function(i, elem) {
        for (var n = 0; n < pets[i].params.likes.length; n++) if (pets[i].params.likes[n].pet_id == elem) return !0;
        return !1;
    },
    ready_to_breed: function(a, b) {
        if (100 == Breeding.get_pet_happiness(a, b)) if ("undefined" == typeof iamserver) {
            var c = on_map[300][b.i][b.j];
            if (c.params.other_nest && on_map[c.map][c.params.other_nest.i + 10][c.params.other_nest.j + 10]) {
                var v = JSON.clone(c.params.other_nest);
                v.i += 10;
                v.j += 10;
                if (100 == Breeding.get_pet_happiness(a, v) && Breeding.pet_x_likes_pet_y(c.params.pet_id, on_map[c.map][v.i][v.j].params.pet_id)) return !0;
            }
        } else if (c = PlayerMap.get_packed_object(a, b), c.ot_n && PlayerMap.can_edit(a, a, c.ot_n) && (v = PlayerMap.get_packed_object(a, c.ot_n), 
        100 == Breeding.get_pet_happiness(a, c.ot_n) && Breeding.pet_x_likes_pet_y(c.pet_id, v.pet_id))) return !0;
        return !1;
    },
    activate_pet_alert: function(index) {
        if (!spectator_mode) {
            var key = "breeding_" + index.i + "_" + index.j, start = Breeding.get_pet_hunger(null, index);
            if (my_island() && 0 <= start && 75 > start) {
                index = on_map[300][index.i][index.j].params.pet_id;
                var id1 = pets[index], loop = pets[index].params.eat_interval, loop = (75 - start) / 100 * pets[index].params.eat_interval * 6e4;
                Timers.set(key, function() {
                    addChatText("Warning! Pet " + id1.name + " has reached 75% hunger.", void 0, COLOR.PINK);
                }, loop);
            } else Timers.clear(key);
        }
    },
    get_pet_hunger: function(a, b) {
        var offset = 100;
        if ("undefined" == typeof iamserver) {
            var c = on_map[300][b.i][b.j];
            if (!c || !c.params) return offset;
            var i = c.params.pet_id, c = c.params.last_ate;
        } else if (PlayerMap.can_edit(a, a, b)) c = PlayerMap.get_packed_object(a, b), i = c.pet_id, 
        c = c.l_a; else return 100;
        pets[i] && (offset = pets[i].params.eat_interval, offset = Math.floor(secondsPastDelta(c) / (60 * offset) * 100));
        return Math.range(offset, 0, 100);
    },
    get_pet_happiness: function(a, b) {
        var c = 0;
        if ("undefined" == typeof iamserver) var m = on_map[300][b.i][b.j], i = m.params.pet_id, m = m.params.secondstamp; else if (PlayerMap.can_edit(a, a, b)) m = PlayerMap.get_packed_object(a, b), 
        i = m.pet_id, m = m.t; else return 0;
        pets[i] && (c = Breeding.get_pet_hunger(a, b), i = pets[i].params.happiness, c = 100 <= c ? 0 : Math.floor(secondsPastDelta(m) / (60 * i) * 100));
        return Math.range(c, 0, 100);
    },
    nest_id: 479,
    place_pet_server: function(i, obj, item) {
        if ("object" != typeof obj || "number" != typeof item) return !1;
        var c = clients[i];
        if (!PlayerMap.can_edit(c.name, c.params.island, obj)) return !1;
        var table = PlayerMap.get_object(c.name, obj), b = PlayerMap.get_packed_object(c.name, obj);
        if (!table || table.b_i != Breeding.nest_id || !item_base[item] || item_base[item].b_t != ITEM_CATEGORY.PET || "undefined" == typeof item_base[item].params.pet) return !1;
        var id1 = pets[item_base[item].params.pet];
        if (!("undefined" == typeof id1.params.breeding_level || id1.params.breeding_level > Player.skills(c).breeding.current)) {
            if ("undefined" != typeof b.pet_id) return Player.send_message(i, "Nest is already occupied", COLOR.PINK, "cannot"), 
            !1;
            0 == Inventory.get_item_count(c, item) ? (Player.send_message(i, "No such pet in inventory", COLOR.PINK, "cannot"), 
            Player.send_inventory(i)) : (b = {
                pet_id: id1.b_i,
                t: secondstamp(),
                l_a: secondstamp()
            }, PlayerMap.edit.change_object_params(c.name, obj, b), Inventory.remove(c, item), 
            AREA.publish(clients[i], JSON.merge({
                action: "guild",
                sub: "place",
                map: 300,
                type: "object",
                id: table.b_i,
                i: obj.i + 10,
                j: obj.j + 10,
                r: obj.r,
                ot_n: PlayerMap.get_packed_object(c.name, obj).ot_n
            }, b), !0), Player.send_inventory(i), Player.request_captcha(i, !1));
        }
    },
    remove_pet_server: function(id, args) {
        if ("object" != typeof args) return !1;
        var data = clients[id];
        if (!PlayerMap.can_edit(data.name, data.name, args)) return !1;
        var output = PlayerMap.get_object(data.name, args), value = PlayerMap.get_packed_object(data.name, args);
        if (!output || output.b_i != Breeding.nest_id) return !1;
        var result = pets[value.pet_id];
        if ("undefined" == typeof result) return !1;
        result = result.params.item_id;
        100 == Breeding.get_pet_hunger(data.name, args) && !value.insu || Inventory.add(data, result) ? (value = {
            pet_id: void 0,
            insu: !1
        }, PlayerMap.edit.change_object_params(data.name, args, value), AREA.publish(clients[id], JSON.merge({
            action: "guild",
            sub: "place",
            map: 300,
            type: "object",
            id: output.b_i,
            i: args.i + 10,
            j: args.j + 10,
            r: args.r,
            ot_n: PlayerMap.get_packed_object(data.name, args).ot_n
        }, value), !0), Player.send_inventory(id)) : Player.send_message(id, "Your inventory is full", COLOR.PINK, "cannot");
    }
}, Minigames = {
    active: !1,
    type: void 0,
    id: "not active",
    restore_player: function(i) {
        clients[i] && clients[i].backup && (skills[i] = JSON.clone(clients[i].backup.skills), 
        clients[i].temp.inventory = JSON.clone(clients[i].backup.inventory), clients[i].temp.health = skills[i].health.current, 
        clients[i].pet = JSON.clone(clients[i].backup.pet), clients[i].params.magics = JSON.clone(clients[i].backup.magics), 
        clients[i].backup = void 0, Player.update_combat_level(clients[i]), Player.update_combat_attributes(clients[i]), 
        Player.update_player_look(clients[i]), SSocket.send(sockets[i], {
            action: "my_data",
            data: clients[i]
        }), Player.notify_skills(i));
    },
    backup_player: function(i) {
        clients[i] && "undefined" == typeof clients[i].backup && (clients[i].backup = {}, 
        clients[i].backup.skills = JSON.clone(skills[i]), clients[i].backup.inventory = JSON.clone(clients[i].temp.inventory), 
        clients[i].backup.pet = JSON.clone(clients[i].pet), clients[i].backup.magics = JSON.clone(clients[i].params.magics));
    },
    customize_player: function(i, date, object, data, obj) {
        clients[i] && (skills[i] = JSON.clone(date), clients[i].temp.inventory = JSON.clone(object), 
        clients[i].temp.health = skills[i].health.current, clients[i].pet = JSON.clone(data), 
        clients[i].params.magics = JSON.clone(obj), Player.update_combat_level(clients[i]), 
        Player.update_combat_attributes(clients[i]), Player.update_player_look(clients[i]), 
        SSocket.send(sockets[i], {
            action: "my_data",
            data: clients[i]
        }), Player.notify_skills(i));
    },
    player_left: function(alias, key) {
        var opts = clients[alias];
        opts && key && opts.backup && Minigames.force_restore_player(alias);
        if (Minigames.active && opts) switch (Minigames.type) {
          case "arena":
            Minigames.arena.player_left(opts);
        }
    },
    player_activate: function(current) {
        var client = clients[current];
        client && client.backup && client.temp.minigame != Minigames.id && Minigames.force_restore_player(current);
        if (Minigames.active && client) switch (Minigames.type) {
          case "arena":
            Minigames.arena.activate_player(client);
        }
    },
    force_restore_player: function(current) {
        var client = clients[current];
        Minigames.restore_player(current);
        clients[client.id].params.pvp = !1;
        Minigames.arena.remove_player(client);
        current = teleport_locations[map_names[clients[client.id].temp.last_map || 0]];
        Client.teleport_position(clients[client.id], {
            map: current.to_map,
            i: current.to_i,
            j: current.to_j
        });
        clients[client.id].temp.busy = !1;
    },
    trivia: {
        player_position: {
            i: 10,
            j: 86,
            map: 19
        },
        host_position: {
            i: 9,
            j: 95,
            map: 19
        },
        settings: {
            questions: 10,
            host: !1
        },
        questions: [],
        possible_answers: [],
        current_question: 0,
        current_timer: 0,
        scores: [],
        add_player: function(con) {
            Minigames.trivia.scores.push({
                name: con.name,
                score: 0,
                visible: !0,
                question: Minigames.trivia.current_question
            });
        },
        activate_player: function(player) {
            for (var i = 0; i < Minigames.trivia.scores.length; i++) if (Minigames.trivia.scores[i].name == player.name) {
                Minigames.trivia.scores[i].visible = !0;
                return;
            }
            Minigames.trivia.add_player(player);
            player.name == Minigames.trivia.settings.host && Minigames.trivia.deactivate_player(player);
        },
        deactivate_player: function(subgroup) {
            for (var i = 0; i < Minigames.trivia.scores.length; i++) if (Minigames.trivia.scores[i].name == subgroup.name) {
                Minigames.trivia.scores[i].visible = !1;
                break;
            }
        },
        open_host: function() {
            FormHelper.get_form("trivia_host").content.innerHTML = HandlebarTemplate.trivia_host()(Minigames.trivia.questions);
        },
        open_client: function() {
            var a = FormHelper.get_form("trivia"), b = JSON.clone(Minigames.trivia.scores), b = sortArrayOfObjectsByFieldValueDesc(b, "score"), c = !1, r;
            for (r in b) if (b[r].name == players[0].name) {
                b[r].bold = !0;
                b[r].question == Minigames.trivia.current_question && (c = !0);
                break;
            }
            r = "";
            var $foundCaller$$ = !1, row = document.getElementById("trivia_answer");
            row && !c && (r = row.value, document.activeElement && "trivia_answer" == document.activeElement.id && ($foundCaller$$ = !0));
            a.content.innerHTML = HandlebarTemplate.trivia_client()({
                button: 0 < Minigames.trivia.current_question && !c,
                question: 0 < Minigames.trivia.current_question ? Minigames.trivia.questions[Minigames.trivia.current_question - 1].question : "Waiting...",
                scores: b.splice(0, 16)
            });
            row && !c && (document.getElementById("trivia_answer").value = r, $foundCaller$$ ? (document.getElementById("trivia_answer").selectionStart = r.length, 
            document.getElementById("trivia_answer").selectionEnd = r.length, document.getElementById("trivia_answer").focus()) : GAME_STATE == GAME_STATES.GAME && document.getElementById("trivia_answer").focus());
            Minigames.trivia.update_time();
        },
        update_time: function() {
            if (FormHelper.is_form_visible("trivia")) {
                Timers.set("update_time", function() {
                    Minigames.trivia.update_time();
                }, 1e3);
                var desc = "-";
                0 < 1e3 * -secondsPastDelta(Minigames.trivia.current_timer) && (desc = beautifulTime(1e3 * -secondsPastDelta(Minigames.trivia.current_timer), 0), 
                document.getElementById("trivia_answer") && GAME_STATE == GAME_STATES.GAME && document.getElementById("trivia_answer").focus());
                document.getElementById("trivia_time_remaining").innerHTML = desc;
                19 != players[0].map && FormHelper.hide_form("trivia");
            }
        },
        process_answer: function(data) {
            return (data + "").trim().toLowerCase();
        },
        host_start: function() {
            var $scope = Minigames.trivia;
            if (10 > $scope.questions.length) addChatText("10 questions is minimum.", void 0, COLOR.PINK); else {
                for (var i in $scope.questions) if ($scope.questions[i].question = escapeHtml($scope.questions[i].question), 
                $scope.questions[i].answers = $scope.process_answer($scope.questions[i].answers), 
                "" == $scope.questions[i].question || "" == $scope.questions[i].answers) {
                    addChatText("Question " + (parseInt(i) + 1) + " is invalid.", void 0, COLOR.PINK);
                    return;
                }
                Minigames.trivia.open_host();
                Popup.prompt("Start the trivia?", function() {
                    Socket.send("minigames", {
                        sub: "trivia",
                        command: "start",
                        questions: $scope.questions
                    });
                    FormHelper.hide_form("trivia_host");
                }, null_function);
            }
        },
        update_question: function(i) {
            Minigames.trivia.questions[i].question = document.getElementById("trivia_host_question_" + i).value;
            Minigames.trivia.questions[i].answers = document.getElementById("trivia_host_question_answers_" + i).value;
        },
        remove_question: function(index) {
            Minigames.trivia.questions.splice(index, 1);
            Minigames.trivia.open_host();
        },
        add_question: function() {
            Minigames.trivia.questions.push({
                question: "",
                answers: ""
            });
            Minigames.trivia.open_host();
        },
        server_round: function() {
            Minigames.trivia.set_player_round();
            Minigames.trivia.current_question++;
            if (Minigames.trivia.current_question == Minigames.trivia.settings.questions + 1) Minigames.trivia.announce_winners(), 
            Minigames.type = void 0, Minigames.active = !1; else {
                Minigames.trivia.current_timer = secondstamp() + 60;
                Minigames.trivia.share_data();
                var props = Minigames.trivia.questions[Minigames.trivia.current_question - 1].answers.split(";"), i;
                for (i in props) props[i] = props[i].trim();
                Minigames.trivia.possible_answers = props;
                Timers.set("trivia_round", function() {
                    Minigames.trivia.server_round();
                }, 6e4);
            }
        },
        set_player_round: function() {
            for (var i in Minigames.trivia.scores) Minigames.trivia.scores[i].question = Minigames.trivia.current_question;
        },
        trivia_start_timer_count: 0,
        trivia_start_timer: function() {
            var props = Minigames.trivia.settings.host, obj = [ "Trivia starts in 15 minutes on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia starts in 10 minutes on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia starts in 5 minutes on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia starts in 3 minutes on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia starts in 1 minutes on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia starts in 30 seconds on world " + config.prefix + ", host - " + props + ", to join type /join", "Trivia has started on world " + config.prefix + ", please click on a table to start playing." ], props = [ 1e3, 3e5, 3e5, 12e4, 12e4, 3e4, 3e4 ], value = 0, i;
            for (i in props) value += props[i];
            0 == Minigames.trivia.trivia_start_timer_count && (Minigames.trivia.current_timer = secondstamp() + value / 1e3, 
            Timers.set("trivia_round", function() {
                Minigames.trivia.server_round();
            }, value));
            Timers.set("trivia_reminder", function() {
                AREA.all("chat", {
                    action: "message",
                    data: {
                        message: obj[Minigames.trivia.trivia_start_timer_count],
                        color: COLOR.TEAL
                    }
                });
                Minigames.trivia.trivia_start_timer_count++;
                Minigames.trivia.trivia_start_timer();
            }, props[Minigames.trivia.trivia_start_timer_count]);
        },
        handle_server: function(data, message) {
            var args = Minigames.trivia;
            switch (message.command) {
              case "start":
                if (data.permissions == PERMISSIONS.PLAYER_MOD || data.permissions == PERMISSIONS.MOD) {
                    if (Minigames.active) {
                        Player.send_message(data.id, "A minigame is already running!", COLOR.PINK);
                        break;
                    }
                    Minigames.active = !0;
                    Minigames.type = "trivia";
                    args.questions = message.questions;
                    args.current_question = 0;
                    args.settings.questions = message.questions.length;
                    args.settings.host = data.name;
                    args.scores = [];
                    args.trivia_start_timer_count = 0;
                    args.trivia_start_timer();
                    args.give_reward(data.name);
                }
                break;

              case "request_host":
                if (data.permissions == PERMISSIONS.PLAYER_MOD || data.permissions == PERMISSIONS.MOD) {
                    if (Minigames.active) {
                        Player.send_message(data.id, "A minigame is already running!", COLOR.PINK);
                        break;
                    }
                    SSocket.send(sockets[data.id], {
                        action: "minigames",
                        sub: "trivia",
                        command: "open_host"
                    });
                }
                break;

              case "request_client":
                if (!Minigames.active || "trivia" != Minigames.type) {
                    Player.send_message(data.id, "No active minigame on world " + config.prefix + "!", COLOR.PINK);
                    break;
                }
                args.activate_player(data);
                SSocket.send(sockets[data.id], {
                    action: "minigames",
                    sub: "trivia",
                    command: "open_client"
                });
                args = args.get_data();
                SSocket.send(sockets[data.id], args);
                break;

              case "deactivate_client":
                if (!Minigames.active || "trivia" != Minigames.type) break;
                Minigames.trivia.deactivate_player(data);
                break;

              case "answer":
                if (!Minigames.active || "trivia" != Minigames.type) break;
                Minigames.trivia.check_answer(data, message.answer);
            }
        },
        handle_client: function(data) {
            var b = Minigames.trivia;
            switch (data.command) {
              case "open_host":
                b.open_host();
                break;

              case "open_client":
                b.open_client();
                break;

              case "data":
                Minigames.trivia.scores = data.scores;
                Minigames.trivia.questions = data.questions;
                Minigames.trivia.current_question = data.current_question;
                Minigames.trivia.current_timer = data.current_timer;
                FormHelper.is_form_visible("trivia") && Minigames.trivia.open_client();
                break;

              case "close":
                FormHelper.hide_form("trivia");
            }
        },
        request_host: function() {
            Socket.send("minigames", {
                sub: "trivia",
                command: "request_host"
            });
        },
        request_client: function() {
            Socket.send("minigames", {
                sub: "trivia",
                command: "request_client"
            });
        },
        deactivate_client: function() {
            Socket.send("minigames", {
                sub: "trivia",
                command: "deactivate_client"
            });
        },
        get_data: function() {
            var query = Minigames.trivia, params = [];
            0 < query.current_question && (params = JSON.clone(query.questions).splice(0, query.current_question), 
            params[query.current_question - 1].answers = "");
            return {
                action: "minigames",
                sub: "trivia",
                command: "data",
                scores: query.scores,
                current_question: query.current_question,
                questions: params,
                current_timer: query.current_timer
            };
        },
        share_data: function() {
            if (Minigames.active && "trivia" == Minigames.type) {
                var args = Minigames.trivia, fn = [];
                0 < args.current_question && (fn = JSON.clone(args.questions).splice(0, args.current_question), 
                fn[args.current_question - 1].answers = "");
                var fn = args.get_data(), i;
                for (i in args.scores) if (args.scores[i].visible || args.scores[i].name == args.settings.host) users_list[args.scores[i].name] ? SSocket.send(sockets[users_list[args.scores[i].name]], fn) : args.scores[i].visible = !1;
            }
        },
        submit_answer: function() {
            Socket.send("minigames", {
                sub: "trivia",
                command: "answer",
                answer: document.getElementById("trivia_answer").value
            });
            document.getElementById("trivia_answer").value = "";
        },
        check_answer: function(server, data) {
            data = (data + "").trim().toLowerCase();
            if (0 <= Minigames.trivia.possible_answers.indexOf(data)) for (var i in Minigames.trivia.scores) if (Minigames.trivia.scores[i].name == server.name) {
                Minigames.trivia.scores[i].question < Minigames.trivia.current_question && (Minigames.trivia.scores[i].question = Minigames.trivia.current_question, 
                Minigames.trivia.scores[i].score += 10 * (Minigames.trivia.current_timer - secondstamp()), 
                Timers.set("trivia_share_data", function() {
                    Minigames.trivia.share_data();
                }, 500));
                break;
            }
        },
        announce_winners: function() {
            var a = JSON.clone(Minigames.trivia.scores), a = sortArrayOfObjectsByFieldValueDesc(a, "score"), b = [], c;
            for (c in a) if (a[c].visible && (b.push(a[c].name), 3 == b.length)) break;
            AREA.current("chat", {
                action: "minigames",
                sub: "trivia",
                command: "close"
            });
            AREA.all("chat", {
                action: "message",
                data: {
                    message: "Trivia on world " + config.prefix + " is over! Winners: " + b.join(", "),
                    color: COLOR.TEAL
                }
            });
            a = 2;
            for (c in b) Minigames.trivia.give_reward(b[c], a), a = 1;
        },
        give_reward: function(name, scale) {
            var id = users_list[name];
            if (clients[id]) {
                var side = Math.round(2 * Math.random()), iter = Math.range(Math.floor(skills[id].health.level / 10) - 1, 0, 9);
                scale = scale || 1;
                switch (side) {
                  case 0:
                    Player.send_message(id, "Reward: " + PartyQuests.kill_all_rewards[iter].reward[0] * scale + " experience", COLOR.GREEN);
                    Player.inc_xp(clients[id], "combat", PartyQuests.kill_all_rewards[iter].reward[0] * scale);
                    break;

                  case 1:
                    Player.send_message(id, "Reward: " + PartyQuests.kill_all_rewards[iter].reward[1] * scale + " coins", COLOR.GREEN);
                    clients[id].temp.coins += PartyQuests.kill_all_rewards[iter].reward[1] * scale;
                    Player.send_data(id);
                    break;

                  case 2:
                    Player.send_message(id, "Reward: " + PartyQuests.kill_all_rewards[iter].reward[2] * scale + " MOS", COLOR.GREEN), 
                    AREA.sql(clients[id], {
                        action: "add_mos",
                        player_name: clients[id].name,
                        amount: PartyQuests.kill_all_rewards[iter].reward[2] * scale
                    }), Timers.set("update_" + id, function() {
                        clients[id] && AREA.sql(clients[id], {
                            action: "mos_balance"
                        });
                    }, 1e3);
                }
            }
        }
    }
};

Minigames.arena = {
    victory_conditions: {
        LAST_MAN_STANDING: 0,
        MOST_KILLS: 1,
        TOTAL_EXPERIENCE: 2,
        0: "Last man standing",
        1: "Most kills",
        2: "Total experience"
    },
    settings: {
        max_players: 16,
        maximum_respawns: 0,
        victory_condition: 0,
        skills: getEmptySkills(),
        inventory: [],
        preparation_time: 15,
        maximum_arena_time: 15,
        bet_amount: 2500,
        maximum_bets: 5,
        host: !1,
        keep_items: !1
    },
    current_timer: !1,
    scores: [],
    players: {},
    bets: [],
    total_bets: 0,
    stage: 0,
    eliminated_counter: 0,
    xp_interval: 0,
    player_position: {
        i: 72,
        j: 27,
        map: 19
    },
    host_position: {
        i: 76,
        j: 23,
        map: 19
    },
    island_positions: [ {
        i: 95,
        j: 5
    }, {
        i: 95,
        j: 14
    }, {
        i: 95,
        j: 23
    }, {
        i: 95,
        j: 32
    }, {
        i: 95,
        j: 41
    }, {
        i: 86,
        j: 41
    }, {
        i: 77,
        j: 41
    }, {
        i: 68,
        j: 41
    }, {
        i: 59,
        j: 41
    }, {
        i: 59,
        j: 32
    }, {
        i: 59,
        j: 23
    }, {
        i: 59,
        j: 14
    }, {
        i: 59,
        j: 5
    }, {
        i: 68,
        j: 5
    }, {
        i: 77,
        j: 5
    }, {
        i: 86,
        j: 5
    } ],
    arena_positions: [ {
        i: 84,
        j: 15
    }, {
        i: 84,
        j: 19
    }, {
        i: 84,
        j: 24
    }, {
        i: 84,
        j: 28
    }, {
        i: 84,
        j: 32
    }, {
        i: 80,
        j: 32
    }, {
        i: 75,
        j: 32
    }, {
        i: 71,
        j: 32
    }, {
        i: 67,
        j: 32
    }, {
        i: 67,
        j: 28
    }, {
        i: 67,
        j: 24
    }, {
        i: 67,
        j: 19
    }, {
        i: 67,
        j: 15
    }, {
        i: 71,
        j: 15
    }, {
        i: 75,
        j: 15
    }, {
        i: 80,
        j: 15
    } ],
    get_client_data: function(ctx) {
        var obj = Minigames.arena;
        ctx = {
            stage: obj.stage,
            players: obj.players_count(),
            scores: obj.scores_pre_game(ctx),
            bets: obj.bets_pre_game(ctx),
            settings: {
                max_players: obj.settings.max_players,
                host: obj.settings.host,
                preparation_time: obj.settings.preparation_time,
                maximum_arena_time: obj.settings.maximum_arena_time,
                bet_amount: obj.settings.bet_amount,
                maximum_bets: obj.settings.maximum_bets,
                maximum_respawns: obj.settings.maximum_respawns,
                victory_condition: obj.settings.victory_condition,
                keep_items: obj.settings.keep_items,
                inventory: !1,
                skills: !1
            }
        };
        0 < obj.stage && (ctx.settings.skills = obj.settings.skills, ctx.settings.inventory = obj.settings.inventory, 
        ctx.scores = obj.scores, ctx.bets = obj.bets);
        return ctx;
    },
    open_client: function(data) {
        var game = Minigames.arena;
        data && (game.settings = data.settings, game.players = data.players, game.scores = data.scores, 
        game.stage = data.stage, game.bets = data.bets);
        FormHelper.get_form("arena");
        data = document.getElementById("arena_join_bet");
        0 === game.scores.length ? (data.innerHTML = "Join", game.client_join()) : (data.innerHTML = "Bet", 
        game.client_bet());
    },
    client_join: function() {
        var game = Minigames.arena;
        FormHelper.get_form("arena").content.innerHTML = HandlebarTemplate.arena_client_join()({
            players: game.players,
            max_players: game.settings.max_players,
            join_button: game.players < game.settings.max_players
        });
    },
    client_join_button: function() {
        Socket.send("minigames", {
            sub: "arena",
            command: "client_join"
        });
    },
    client_bet: function() {
        var env = Minigames.arena;
        FormHelper.get_form("arena").content.innerHTML = HandlebarTemplate.arena_client_bet()({
            bet_amount: env.settings.bet_amount,
            bets: env.client_bet_bets()
        });
    },
    client_bet_bets: function() {
        var obj = Minigames.arena, objs = [], i;
        for (i in obj.scores) {
            var o = {
                id: i,
                total: 0,
                my: 0,
                name: !1
            };
            obj.scores[i] && obj.scores[i].name && (o.name = obj.scores[i].name);
            for (var j in obj.bets[i]) obj.bets[i][j].name === players[0].name && (o.my += obj.settings.bet_amount * obj.bets[i][j].bet_count), 
            o.total += obj.settings.bet_amount * obj.bets[i][j].bet_count;
            objs.push(o);
        }
        return objs;
    },
    client_bet_make_bet: function(player) {
        var game_state = Minigames.arena;
        Popup.prompt("Bet " + game_state.settings.bet_amount + " on " + game_state.scores[player].name + "?", function() {
            Socket.send("minigames", {
                sub: "arena",
                command: "client_make_bet",
                id: player
            });
        }, null_function);
    },
    client_rules: function() {
        var data = Minigames.arena, template = FormHelper.get_form("arena"), html = JSON.clone(data.settings);
        html.victory_condition = data.victory_conditions[html.victory_condition];
        template.content.innerHTML = HandlebarTemplate.arena_client_rules()(html);
    },
    client_stats: function() {
        var scope = Minigames.arena, template = FormHelper.get_form("arena"), data = JSON.clone(scope.settings);
        delete data.skills.breeding;
        delete data.skills.carpentry;
        delete data.skills.farming;
        template.content.innerHTML = HandlebarTemplate.arena_client_stats()({
            data: data,
            available: 0 < scope.stage
        });
    },
    open_host: function() {
        Minigames.arena.host_skills();
    },
    host_skills: function() {
        var template = FormHelper.get_form("arena_host");
        Minigames.arena.settings.skills || (Minigames.arena.settings.skills = getEmptySkills());
        var field = JSON.clone(Minigames.arena.settings.skills);
        delete field.breeding;
        delete field.carpentry;
        delete field.farming;
        template.content.innerHTML = HandlebarTemplate.arena_host_skills()(field);
    },
    update_skills: function(ctx) {
        var obj = JSON.clone(Minigames.arena.settings.skills);
        delete obj.breeding;
        delete obj.carpentry;
        delete obj.farming;
        for (var id in obj) {
            var obj = Math.range(parseInt(document.getElementById("arena_host_skill_" + id).value), 1, 150) || 1, length = Math.range(parseInt(document.getElementById("arena_host_multiplier_" + id).value), 1, 1e3) || 1;
            Minigames.arena.settings.skills[id].level = obj;
            Minigames.arena.settings.skills[id].current = obj;
            Minigames.arena.settings.skills[id].xp = Level.xp_for_level(obj);
            Minigames.arena.settings.skills[id].multiplier = length;
        }
        FormHelper.remember_focus(ctx.id);
        Minigames.arena.host_skills();
        FormHelper.restore_focus();
    },
    host_inventory_active_id: -1,
    host_inventory: function() {
        var template = FormHelper.get_form("arena_host");
        Minigames.arena.settings.inventory || (Minigames.arena.settings.inventory = []);
        template.content.innerHTML = HandlebarTemplate.arena_host_inventory()(Minigames.arena.settings.inventory);
        FormHelper.update_item_list_select("arena_host_inventory", 1, Minigames.arena.host_inventory_active_id || -1);
        Minigames.arena.host_inventory_update_description();
    },
    host_inventory_update_description: function() {
        Minigames.arena.host_inventory_active_id = document.getElementById("arena_host_inventory_items").value;
        document.getElementById("arena_host_inventory_item_img").style.cssText = "display:inline-block;width:32px;height:32px;margin: 0px; margin-top: 3px;" + Items.get_background_image(Minigames.arena.host_inventory_active_id);
        document.getElementById("arena_host_inventory_item_description").innerHTML = Items.info(Minigames.arena.host_inventory_active_id).trim();
    },
    host_inventory_add_item: function() {
        40 > Minigames.arena.settings.inventory.length && Minigames.arena.settings.inventory.push({
            id: parseInt(document.getElementById("arena_host_inventory_items").value),
            selected: !1
        });
        Minigames.arena.host_inventory();
    },
    host_inventory_remove_item: function(which) {
        Minigames.arena.settings.inventory.splice(which, 1);
        Minigames.arena.host_inventory();
    },
    host_start: function() {
        FormHelper.get_form("arena_host").content.innerHTML = HandlebarTemplate.arena_host_start()(Minigames.arena.settings);
        el = document.getElementById("arena_host_start_victory_condition");
        el.options[Minigames.arena.settings.victory_condition].selected = !0;
    },
    host_start_update: function(_ref4) {
        var ctx = document.getElementById("arena_host_start_preparation_time");
        Minigames.arena.settings.preparation_time = Math.range(parseInt(ctx.value), 1, 30) || 1;
        var ctx = document.getElementById("arena_host_start_maximum_time"), radius = 5;
        1338 == config.http_port && (radius = 1);
        Minigames.arena.settings.maximum_arena_time = Math.range(parseInt(ctx.value), radius, 30) || radius;
        ctx = document.getElementById("arena_host_start_bet_amount");
        Minigames.arena.settings.bet_amount = Math.range(parseInt(ctx.value), 1e3, 1e4) || 1e3;
        ctx = document.getElementById("arena_host_start_maximum_bets");
        Minigames.arena.settings.maximum_bets = Math.range(parseInt(ctx.value), 1, 16) || 1;
        ctx = document.getElementById("arena_host_start_victory_condition");
        Minigames.arena.settings.victory_condition = parseInt(ctx.value) || 0;
        ctx = document.getElementById("arena_host_start_maximum_respawns");
        Minigames.arena.settings.maximum_respawns = Math.range(parseInt(ctx.value), 0, 100) || 0;
        0 == Minigames.arena.settings.victory_condition && (Minigames.arena.settings.maximum_respawns = 0);
        Minigames.arena.settings.keep_items = document.getElementById("arena_host_start_keep_items").checked;
        FormHelper.remember_focus(_ref4.id);
        Minigames.arena.host_start();
        FormHelper.restore_focus();
    },
    host_start_start: function() {
        Popup.prompt("Start the arena?", function() {
            Socket.send("minigames", {
                sub: "arena",
                command: "start",
                settings: Minigames.arena.settings
            });
            FormHelper.hide_form("arena_host");
        }, null_function);
    },
    server_round: function() {
        var obj = Minigames.arena;
        if (0 === obj.stage) {
            for (var i in obj.scores) if (obj.scores[i] && !obj.scores[i].active) {
                var name = obj.scores[i].name;
                delete obj.scores[i];
                delete obj.players[name];
            }
            for (var player in obj.scores) if (obj.scores[player]) if (name = obj.scores[player].name, 
            i = users_list[name]) {
                var name = clients[i], key = obj.island_positions[player % 16];
                Client.teleport_position(clients[i], key);
                Minigames.backup_player(i);
                key = getEmptyPlayer();
                Minigames.customize_player(name.id, obj.settings.skills, obj.settings.inventory, key.pet, []);
                clients[i].params.pvp = !0;
                clients[i].temp.minigame = Minigames.id;
                Player.send_message(name.id, "Preparation has begun, you have " + obj.settings.preparation_time + " minute" + sOrNoS(obj.settings.preparation_time), COLOR.TEAL);
            } else delete obj.scores[player], delete obj.players[name];
            obj.stage++;
            obj.current_timer = secondstamp() + 60 * obj.settings.preparation_time;
            obj.map_timer_announce(!1);
            Timers.set("arena_round", function() {
                obj.server_round();
            }, 6e4 * obj.settings.preparation_time);
            obj.settings.victory_condition == obj.victory_conditions.TOTAL_EXPERIENCE && (obj.xp_interval = setInterval(function() {
                obj.update_xp_scores();
            }, 1e4));
        } else if (1 === obj.stage) {
            Minigames.id = randomSalt(16);
            for (i in obj.scores) obj.scores[i] && !obj.scores[i].active && (name = obj.scores[i].name, 
            delete obj.scores[i], delete obj.players[name]);
            for (player in obj.scores) obj.scores[player] && (name = obj.scores[player].name, 
            (i = users_list[name]) ? (name = clients[i], key = obj.arena_positions[player % 16], 
            Client.teleport_position(clients[i], key), clients[i].temp.minigame = Minigames.id, 
            clients[i].temp.busy = !1, Player.send_message(name.id, "Arena has begun, you have " + obj.settings.maximum_arena_time + " minute" + sOrNoS(obj.settings.preparation_time), COLOR.TEAL)) : (delete obj.scores[player], 
            delete obj.players[name]));
            obj.stage++;
            obj.current_timer = secondstamp() + 60 * obj.settings.maximum_arena_time;
            obj.map_timer_announce(!1);
            Timers.set("arena_round", function() {
                obj.server_round();
            }, 6e4 * obj.settings.maximum_arena_time);
        } else Minigames.id = randomSalt(16), obj.current_timer = 0, Minigames.active = !1, 
        Minigames.type = void 0, obj.map_timer_announce(!1), obj.finish_arena(), obj.settings.victory_condition == obj.victory_conditions.TOTAL_EXPERIENCE && clearInterval(obj.xp_interval);
    },
    start_timer_count: 0,
    start_timer: function() {
        var a = Minigames.arena, z = [ "Arena starts in 10 minutes on world " + config.prefix + ", to join type /join and click on a table to register", "Arena starts in 5 minutes on world " + config.prefix + ", to join type /join and click on a table to register", "Arena starts in 3 minutes on world " + config.prefix + ", to join type /join and click on a table to register", "Arena starts in 1 minutes on world " + config.prefix + ", to join type /join and click on a table to register", "Arena starts in 30 seconds on world " + config.prefix + ", to join type /join and click on a table to register", "Arena has started on world " + config.prefix + ", good luck with preparations!" ], obj = [ 1e3, 3e5, 12e4, 12e4, 3e4, 3e4 ];
        config.production || (obj = [ 1e3, 1e4, 1e4, 5e3, 5e3, 5e3 ]);
        var length = 0, key;
        for (key in obj) length += obj[key];
        0 === a.start_timer_count && (a.current_timer = secondstamp() + length / 1e3, a.map_timer_announce(!1), 
        Timers.set("arena_round", function() {
            a.server_round();
        }, length));
        Timers.set("arena_reminder", function() {
            AREA.all("chat", {
                action: "message",
                data: {
                    message: z[a.start_timer_count],
                    color: COLOR.TEAL
                }
            });
            a.start_timer_count++;
            a.start_timer();
        }, obj[a.start_timer_count]);
    },
    handle_server: function(data, args) {
        var $ = Minigames.arena;
        switch (args.command) {
          case "start":
            if (-1 < [ PERMISSIONS.PLAYER_MOD, PERMISSIONS.MOD ].indexOf(data.permissions)) {
                if (Minigames.active) {
                    Player.send_message(data.id, "A minigame is already running!", COLOR.PINK);
                    break;
                }
                Minigames.active = !0;
                Minigames.type = "arena";
                $.settings = args.settings;
                $.settings.host = data.name;
                $.scores = [];
                $.bets = [];
                $.total_bets = 0;
                $.stage = 0;
                $.players = {};
                $.current_timer = !1;
                $.eliminated_counter = 0;
                Minigames.id = randomSalt(16);
                $.start_timer_count = 0;
                $.start_timer();
                Minigames.trivia.give_reward(data.name);
            }
            break;

          case "request_host":
            if (-1 < [ PERMISSIONS.PLAYER_MOD, PERMISSIONS.MOD ].indexOf(data.permissions)) {
                if (Minigames.active) {
                    Player.send_message(data.id, "A minigame is already running!", COLOR.PINK);
                    break;
                }
                SSocket.send(sockets[data.id], {
                    action: "minigames",
                    sub: "arena",
                    command: "open_host"
                });
            }
            break;

          case "request_client":
            if (19 != data.map) break;
            if (!Minigames.active || "arena" !== Minigames.type) {
                Player.send_message(data.id, "No active minigame on world " + config.prefix + "!", COLOR.PINK);
                break;
            }
            SSocket.send(sockets[data.id], {
                action: "minigames",
                sub: "arena",
                command: "open_client",
                data: $.get_client_data(data)
            });
            break;

          case "client_join":
            if (19 != data.map) break;
            if (!Minigames.active || "arena" !== Minigames.type) {
                Player.send_message(data.id, "No active minigame on world " + config.prefix + "!", COLOR.PINK);
                break;
            }
            if (0 !== $.stage) {
                Player.send_message(data.id, "Arena has already started!", COLOR.PINK);
                break;
            }
            if (void 0 !== $.players[data.name]) {
                Player.send_message(data.id, "Already joined!", COLOR.PINK);
                break;
            }
            if ($.players_count() >= $.settings.max_players) {
                Player.send_message(data.id, "No free seats!", COLOR.PINK);
                break;
            }
            $.add_player(data);
            SSocket.send(sockets[data.id], {
                action: "minigames",
                sub: "arena",
                command: "open_client",
                data: $.get_client_data(data)
            });
            break;

          case "client_make_bet":
            if (19 != data.map) break;
            if (!Minigames.active || "arena" !== Minigames.type) {
                Player.send_message(data.id, "No active minigame!", COLOR.PINK);
                break;
            }
            $.place_bet(data, args.id);
            SSocket.send(sockets[data.id], {
                action: "minigames",
                sub: "arena",
                command: "open_client",
                data: $.get_client_data(data)
            });
            Player.send_data(data.id);
        }
    },
    handle_client: function(message) {
        var Str = Minigames.arena;
        switch (message.command) {
          case "open_host":
            Str.open_host();
            break;

          case "open_client":
            Str.open_client(message.data);
            break;

          case "map_timer":
            MapTimer.init(function() {
                return message.data.title;
            }, message.data.end_time, 19, !0);
        }
    },
    request_host: function() {
        Socket.send("minigames", {
            sub: "arena",
            command: "request_host"
        });
    },
    request_client: function() {
        Socket.send("minigames", {
            sub: "arena",
            command: "request_client"
        });
    },
    add_player: function(player) {
        for (var state = Minigames.arena, line = {
            name: player.name,
            score: 0,
            active: !0,
            respawns: 0,
            eliminated: !1
        }, i = 0; i < state.scores.length; i++) if (!state.scores[i]) return state.scores[i] = line, 
        state.scores[i].index = i, state.players[player.name] = i, !0;
        if (16 <= state.scores.length) return !1;
        state.scores.push(line);
        state.players[player.name] = state.scores.length - 1;
        state.scores[state.scores.length - 1].index = state.scores.length - 1;
        return !0;
    },
    players_count: function() {
        var obj = Minigames.arena, detached = 0, i;
        for (i in obj.scores) obj.scores[i] && detached++;
        return detached;
    },
    scores_pre_game: function(form) {
        var game = Minigames.arena;
        if (void 0 !== game.players[form.name]) {
            var container = [];
            container[game.players[form.name]] = game.scores[game.players[form.name]];
            return container;
        }
        return [];
    },
    bets_pre_game: function(form) {
        var game = Minigames.arena;
        if (void 0 !== game.players[form.name]) {
            var container = [];
            container[game.players[form.name]] = game.bets[game.players[form.name]];
            return container;
        }
        return [];
    },
    player_left: function(player) {
        var event = Minigames.arena;
        void 0 !== event.players[player.name] && (Player.send_message(player.id, "You left the arena!", COLOR.PINK), 
        0 === event.stage && void 0 === event.bets[event.players[player.name]] ? event.remove_player(player) : (event.deactivate_player(player), 
        2 === event.stage && event.check_if_arena_is_finished()));
    },
    remove_player: function(form) {
        var game = Minigames.arena;
        void 0 !== game.players[form.name] && (delete game.scores[game.players[form.name]], 
        delete game.players[form.name]);
    },
    activate_player: function(player) {
        var game = Minigames.arena;
        void 0 !== game.players[player.name] ? (game.scores[game.players[player.name]].active = !0, 
        game.send_map_timer_player(player)) : game.send_map_timer_global(player);
    },
    deactivate_player: function(form) {
        var game = Minigames.arena;
        void 0 !== game.players[form.name] && (game.scores[game.players[form.name]].active = !1);
    },
    place_bet: function(attrs, i) {
        var obj = Minigames.arena;
        if (!attrs.backup && (0 !== obj.stage || obj.scores[i] && obj.scores[i].name === attrs.name)) if (1 < obj.stage) Player.send_message(attrs.id, "Betting is only possible during preparation time!", COLOR.PINK); else if (clients[attrs.id].temp.coins < obj.settings.bet_amount) Player.send_message(attrs.id, "Not enough coins!", COLOR.PINK); else if (obj.scores[i]) if (obj.count_bets(attrs) >= obj.settings.maximum_bets) Player.send_message(attrs.id, "Maximum bets reached!", COLOR.PINK); else {
            obj.bets[i] || (obj.bets[i] = []);
            var o = -1, a;
            for (a in obj.bets[i]) if (obj.bets[i][a].name == attrs.name) {
                o = a;
                break;
            }
            -1 === o ? obj.bets[i].push({
                name: attrs.name,
                bet_count: 1
            }) : obj.bets[i][o].bet_count++;
            obj.total_bets++;
            clients[attrs.id].temp.coins -= obj.settings.bet_amount;
            Player.send_message(attrs.id, "Bet of " + obj.settings.bet_amount + " coins placed!", COLOR.TEAL);
        }
    },
    count_bets: function(obj) {
        var view = Minigames.arena, result = 0, v;
        for (v in view.bets) if (view.bets[v]) for (var idx in view.bets[v]) view.bets[v][idx].name === obj.name && (result += view.bets[v][idx].bet_count);
        return result;
    },
    send_map_timer_global: function(details) {
        if (details) {
            var event = Minigames.arena, d;
            switch (event.stage) {
              case 0:
                d = "Recruiting";
                break;

              case 1:
                d = "Preparation";
                break;

              case 2:
                d = "Arena";
            }
            SSocket.send(sockets[details.id], {
                action: "minigames",
                sub: "arena",
                command: "map_timer",
                data: {
                    end_time: event.current_timer,
                    title: d
                }
            });
        }
    },
    send_map_timer_player: function(player) {
        if (player) {
            var game = Minigames.arena, collidables;
            if (1 > game.stage) return game.send_map_timer_global(player);
            var user = game.scores[game.players[player.name]];
            if (user) {
                switch (game.stage) {
                  case 1:
                    if (2 == game.settings.victory_condition) collidables = user.score + " xp"; else return game.send_map_timer_global(player);
                    break;

                  case 2:
                    if (2 == game.settings.victory_condition) collidables = user.score + " xp"; else if (1 == game.settings.victory_condition) collidables = user.score + " kill" + sOrNoS(user.score); else return game.send_map_timer_global(player);
                }
                SSocket.send(sockets[player.id], {
                    action: "minigames",
                    sub: "arena",
                    command: "map_timer",
                    data: {
                        end_time: game.current_timer,
                        title: collidables
                    }
                });
            }
        }
    },
    map_timer_announce: function(extend) {
        var node = Minigames.arena, b = AREA.get_players(node.host_position), attr;
        for (attr in node.players) users_list[attr] && -1 == b.indexOf(users_list[attr]) && b.push(users_list[attr]);
        for (var i in b) (attr = clients[b[i]]) && (void 0 !== node.players[attr.name] ? node.send_map_timer_player(attr) : extend || node.send_map_timer_global(attr));
    },
    player_died: function(client, i) {
        var game = Minigames.arena, user = game.scores[game.players[i]];
        !user || game.settings.victory_condition != game.victory_conditions.MOST_KILLS && game.settings.victory_condition != game.victory_conditions.LAST_MAN_STANDING || (user.score++, 
        (user = clients[users_list[i]]) && game.send_map_timer_player(user));
        user = game.scores[game.players[client.name]];
        "undefined" !== typeof user && (user.respawns++, game.settings.maximum_respawns < user.respawns ? (game.eliminated_counter++, 
        user.eliminated = game.eliminated_counter, user.active = !1, game.player_finished(client), 
        game.check_if_arena_is_finished()) : (game = game.arena_positions[game.players[client.name] % 16], 
        clients[client.id].temp.busy = !1, Client.teleport_position(clients[client.id], game), 
        clients[client.id].temp.busy = !1, SSocket.send(sockets[client.id], {
            action: "my_data",
            data: clients[client.id]
        })));
    },
    player_finished: function(socket) {
        var data = Minigames.arena, i = socket.id;
        Minigames.restore_player(i);
        delete data.players[socket.name];
        clients[i].temp.busy = !1;
        Client.teleport_position(clients[i], data.player_position);
        clients[i].params.pvp = !1;
        clients[i].temp.busy = !1;
        19 == clients[i].map && (clients[i].temp.fight_id = -1, clients[i].temp.target_id = -1);
        data.send_map_timer_global(socket);
        SSocket.send(sockets[socket.id], {
            action: "my_data",
            data: clients[socket.id]
        });
    },
    update_xp_scores: function() {
        var obj = Minigames.arena, i;
        for (i in obj.scores) if (obj.scores[i] && obj.scores[i].active) {
            var id = users_list[obj.scores[i].name];
            if (clients[id]) {
                var value = 0, key;
                for (key in skills[id]) value += skills[id][key].xp;
                obj.scores[i].score = value;
            }
        }
        obj.map_timer_announce(!0);
    },
    finish_arena: function() {
        var obj = Minigames.arena, data = JSON.clone(obj.scores);
        if (obj.settings.victory_condition == obj.victory_conditions.LAST_MAN_STANDING) for (var i in data) data[i].active ? data[i].score += 100 : data[i].eliminated && (data[i].score += 2 * data[i].eliminated);
        var data = sortArrayOfObjectsByFieldValueDesc(data, "score"), results = [];
        if ("undefined" != typeof data[0]) {
            var set = data[0].index;
            for (i in data) if (data[i] && (results.push(data[i].name), 3 == results.length)) break;
            for (i in obj.scores) obj.scores[i] && obj.scores[i].active && (data = users_list[obj.scores[i].name], 
            clients[data] && obj.player_finished(clients[data]));
            for (i in fights) fights[i] && 19 == fights[i].first.map && (fights[i].cancelled = !0);
            AREA.all("chat", {
                action: "message",
                data: {
                    message: "Arena on world " + config.prefix + " is over! Winners: " + results.join(", "),
                    color: COLOR.TEAL
                }
            });
            var expectedRenamingFile = 3;
            for (i in results) Minigames.trivia.give_reward(results[i], expectedRenamingFile), 
            expectedRenamingFile--;
            results = obj.bets[set];
            data = 0;
            for (i in results) data += results[i].bet_count;
            expectedRenamingFile = obj.total_bets / data;
            set = !1;
            for (i in results) if (data = users_list[results[i].name], clients[data]) {
                var set = set && set + ", " || "Betting rewards: ", key = Math.round(expectedRenamingFile * results[i].bet_count * obj.settings.bet_amount);
                Player.send_message(data, "Betting reward: " + key + " coins", COLOR.GREEN);
                clients[data].temp.coins += key;
                Player.send_data(data);
                set += clients[data].name + " - " + key;
            }
            set && AREA.all("chat", {
                action: "message",
                data: {
                    message: set,
                    color: COLOR.TEAL
                }
            });
        }
    },
    check_if_arena_is_finished: function() {
        var obj = Minigames.arena, detached = 0, i;
        for (i in obj.scores) obj.scores[i] && obj.scores[i].active && detached++;
        1 >= detached && (Timers.clear("arena_round"), obj.server_round());
    }
};

var Mailbox = {
    id: 520,
    last_opened: 0,
    show: function(f) {
        var context = {
            my_message: "",
            owner: my_island(),
            friends_only: last_mailbox.params.friends_only || !1,
            me: players[0].name
        }, i;
        for (i in f) f[i].date = f[i].date.split("T")[0];
        for (var e in f) if (f[e].from_player == players[0].name) {
            context.my_message = f[e].message;
            f.splice(e, 1);
            break;
        }
        context.messages = f;
        FormHelper.get_form("mailbox").content.innerHTML = HandlebarTemplate.mailbox_form()(context);
    },
    friends_toggle: function() {
        var enableCheckbox = document.getElementById("mailbox_friends_toggle");
        Socket.send("mailbox", {
            sub: "toggle_friends",
            friends_only: enableCheckbox.checked,
            position: {
                i: last_mailbox.i - (300 == current_map ? 10 : 0),
                j: last_mailbox.j - (300 == current_map ? 10 : 0)
            }
        });
    },
    change_my_message: function() {
        var src = document.getElementById("mailbox_my_message");
        src.value = src.value.filterChat("EN").sanitizeChat().substr(0, 160);
        removeClass(document.getElementById("mailbox_save_button"), "hidden");
    },
    delete_message: function(cb) {
        Socket.send("mailbox", {
            sub: "delete",
            name: cb,
            position: {
                i: last_mailbox.i - (300 == current_map ? 10 : 0),
                j: last_mailbox.j - (300 == current_map ? 10 : 0)
            }
        });
        Mailbox.request();
    },
    save_message: function(element) {
        element = document.getElementById("mailbox_my_message");
        Socket.send("mailbox", {
            sub: "save",
            message: element.value,
            position: {
                i: last_mailbox.i - (300 == current_map ? 10 : 0),
                j: last_mailbox.j - (300 == current_map ? 10 : 0)
            }
        });
        addClass(document.getElementById("mailbox_save_button"), "hidden");
    },
    request: function() {
        1e3 > timestamp() - Mailbox.last_opened || (Mailbox.last_opened = timestamp(), Socket.send("mailbox", {
            sub: "request",
            position: {
                i: last_mailbox.i - (300 == current_map ? 10 : 0),
                j: last_mailbox.j - (300 == current_map ? 10 : 0)
            }
        }));
    },
    server_request: function(id, pos) {
        var item = clients[id];
        if ("undefined" != typeof item) {
            var file = item.params.island;
            if ("undefined" != typeof player_maps[file] && "object" == typeof pos && "undefined" != typeof pos.i && "undefined" != typeof pos.j && inDistance(item.i - (300 === item.map ? 10 : 0), item.j - (300 === item.map ? 10 : 0), pos.i, pos.j)) {
                var obj = PlayerMap.get_packed_object(file, pos);
                obj && obj.i == Mailbox.id && AREA.sql(item, {
                    action: "mailbox",
                    sub: "fetch",
                    island: file,
                    position: pos.i + "-" + pos.j,
                    requester: item.name,
                    owner: item.name == file,
                    friends_only: obj.f_o || !1
                });
            }
        }
    },
    mysql_fetch: function(p, c) {
        if (c.friends_only && !c.owner) {
            var sql = "SELECT * FROM `rpgmo`.`contacts` WHERE `status` = 'friends' AND `player` = " + connection.escape(c.island) + " AND `with_player` = " + connection.escape(c.requester) + " LIMIT 1";
            connection.query(sql, function(err, rows) {
                if (err) return reportSQLError(err, sql);
                0 == rows.length ? AREA.channel(c.from_channel, {
                    action: "message",
                    to: p.name,
                    data: {
                        message: "This mailbox is only for friends!",
                        color: COLOR.PINK
                    }
                }) : (c.friends_only = !1, Mailbox.mysql_fetch(p, c));
            });
        } else sql = c.owner ? "SELECT * FROM `rpgmo`.`mailboxes` WHERE `player` = " + connection.escape(c.island) + " AND `position` = " + connection.escape(c.position) + " ORDER BY `date` DESC" : "SELECT * FROM `rpgmo`.`mailboxes` WHERE `player` = " + connection.escape(c.island) + " AND `position` = " + connection.escape(c.position) + " AND `from_player` IN (" + connection.escape(c.island) + ", " + connection.escape(c.requester) + ") ORDER BY `date` DESC", 
        connection.query(sql, function(err, rows) {
            if (err) return reportSQLError(err, sql);
            AREA.channel(c.from_channel, {
                action: "mailbox",
                sub: "fetch_result",
                player_id: p.id,
                position: c.position,
                messages: rows
            });
        });
    },
    server_delete: function(v, c, o) {
        v = clients[v];
        if ("string" == typeof o && "undefined" != typeof v) {
            var b = v.params.island;
            if ("undefined" != typeof player_maps[b] && "object" == typeof c && "undefined" != typeof c.i && "undefined" != typeof c.j && "undefined" != typeof o && inDistance(v.i - (300 === v.map ? 10 : 0), v.j - (300 === v.map ? 10 : 0), c.i, c.j)) {
                var e = PlayerMap.get_packed_object(b, c);
                e && e.i == Mailbox.id && AREA.sql(v, {
                    action: "mailbox",
                    sub: "delete",
                    island: b,
                    position: c.i + "-" + c.j,
                    requester: v.name,
                    owner: v.name == b,
                    friends_only: e.f_o || !1,
                    name: o
                });
            }
        }
    },
    mysql_delete: function(subgroup, room) {
        if (room.owner || room.name == subgroup.name) {
            var stress = "DELETE FROM `rpgmo`.`mailboxes` WHERE `player` = " + connection.escape(room.island) + " AND `position` = " + connection.escape(room.position) + "AND `from_player` = " + connection.escape(room.name);
            connection.query(stress, function(err, _result2) {
                err && reportSQLError(err, stress);
            });
        }
    },
    mysql_delete_all: function(txId, details) {
        var stress = "DELETE FROM `rpgmo`.`mailboxes` WHERE `player` = " + connection.escape(details.island) + " AND `position` = " + connection.escape(details.position);
        connection.query(stress, function(err, _result2) {
            err && reportSQLError(err, stress);
        });
    },
    server_save: function(a, b, c) {
        var o = clients[a];
        if ("undefined" != typeof o) {
            var id = o.params.island;
            if ("undefined" != typeof player_maps[id] && "object" == typeof b && "undefined" != typeof b.i && "undefined" != typeof b.j && inDistance(o.i - (300 === o.map ? 10 : 0), o.j - (300 === o.map ? 10 : 0), b.i, b.j)) {
                var obj = PlayerMap.get_packed_object(id, b);
                if (obj && obj.i == Mailbox.id && "string" == typeof c) {
                    c = c.filterChat("EN").sanitizeChat().substr(0, 160).trim();
                    if ("" == c) return Mailbox.server_delete(a, b, o.name);
                    AREA.sql(o, {
                        action: "mailbox",
                        sub: "save",
                        island: id,
                        position: b.i + "-" + b.j,
                        requester: o.name,
                        owner: o.name == id,
                        friends_only: obj.f_o || !1,
                        message: c
                    });
                }
            }
        }
    },
    mysql_save: function(host, details) {
        if (details.friends_only && !details.owner) {
            var sql = "SELECT * FROM `rpgmo`.`contacts` WHERE `status` = 'friends' AND `player` = " + connection.escape(details.island) + " AND `with_player` = " + connection.escape(details.requester) + " LIMIT 1";
            connection.query(sql, function(err, rows) {
                if (err) return reportSQLError(err, sql);
                0 == rows.length ? AREA.channel(details.from_channel, {
                    action: "message",
                    to: host.name,
                    data: {
                        message: "This mailbox is only for friends!",
                        color: COLOR.PINK
                    }
                }) : (details.friends_only = !1, Mailbox.mysql_save(host, details));
            });
        } else sql = "INSERT INTO `rpgmo`.`mailboxes` (`player`, `position`, `from_player`, `message`) VALUES (" + connection.escape(details.island) + ", " + connection.escape(details.position) + ", " + connection.escape(details.requester) + ", " + connection.escape(details.message) + ") ON DUPLICATE KEY UPDATE message=" + connection.escape(details.message) + ", date=CURRENT_TIMESTAMP", 
        connection.query(sql, function(err, rows) {
            err && reportSQLError(err, sql);
        });
    },
    server_toggle_friends: function(i, x, D) {
        var c = clients[i];
        if (300 == c.map && "undefined" != typeof x && "undefined" != typeof x.i && "undefined" != typeof x.j && PlayerMap.can_edit(c.name, c.params.island, x)) {
            var c = c.params.island, item = PlayerMap.get_packed_object(c, x);
            item && item.i == Mailbox.id && (PlayerMap.edit.change_object_params(c, x, {
                f_o: D || !1
            }), item = PlayerMap.get_packed_object(c, x), AREA.publish(clients[i], JSON.merge(item, {
                action: "guild",
                sub: "place",
                map: 300,
                type: "objects",
                id: item.i,
                i: x.i + 10,
                j: x.j + 10
            }), !0));
        }
    }
}, spectator_player = {}, total_spectators = 0, Spectate = {
    key: !1,
    keys: [],
    add_key: function(subDep) {
        -1 == Spectate.keys.indexOf(subDep) && Spectate.keys.push(subDep);
    },
    allowing_spectators: function(a, b) {
        return b && a.name === b.player || 16 == a.map ? !1 : a.temp.allow_spectators || b && -1 < Spectate.keys.indexOf(b.key) ? !0 : !1;
    },
    add_spectator: function(page, position, delta) {
        if (spectator_player[page.id]) return !1;
        var i = users_list[position];
        if (i) {
            if (!Spectate.allowing_spectators(clients[i], delta)) return Spectate.available_streams(page, delta);
            spectators[position] = spectators[position] || [];
            spectators[position].push(page);
            spectator_player[page.id] = position;
            Spectate.sync_watcher(page, clients[i]);
            total_spectators += 1;
        } else Spectate.available_streams(page, delta);
    },
    drop_spectators: function(x) {
        if (spectators[x]) {
            AREA.spectators(x, {
                action: "spectate",
                sub: "dropped"
            });
            for (var y in spectators[x]) delete spectator_player[spectators[x][y].id], --total_spectators;
            delete spectators[x];
        }
    },
    remove_spectator: function(id) {
        if (spectator_player[id]) {
            var room = spectator_player[id], i = spectators[room].indexOf(id);
            if (spectators[room]) for (i = 0; i < spectators[room].length; i++) if (spectators[room][i].id == id) {
                spectators[room].splice(i, 1);
                break;
            }
            delete spectator_player[id];
            --total_spectators;
        }
    },
    last_stream_time: 0,
    last_stream_list: [],
    server_streams_received: {},
    list_up_to_date: function() {
        return 1e4 > timestamp() - Spectate.last_stream_time;
    },
    get_my_list: function() {
        if (!Spectate.list_up_to_date()) {
            options = {
                key: Spectate.key,
                player: ""
            };
            var h = [], i;
            for (i in clients) Spectate.allowing_spectators(clients[i], options) && h.push({
                n: clients[i].name,
                l: Player.location_name(clients[i]),
                i: Player.idle_time(clients[i]),
                v: Math.round((timestamp() - clients[i].temp.idle_time) / 1e3),
                c: clients[i].params.combat_level,
                r: !clients[i].temp.allow_spectators,
                s: config.prefix
            });
            Spectate.last_stream_list = sortArrayOfObjectsByFieldValueAsc(h, "v");
            Spectate.last_stream_time = timestamp();
            AREA.all("streams", {
                action: "streams",
                list: Spectate.last_stream_list,
                server: config.prefix
            });
        }
        return Spectate.last_stream_list;
    },
    combined_stream_list: [],
    combine_stream_list: function(assert, async) {
        if (Spectate.list_up_to_date() && !async) return assert(Spectate.combined_stream_list);
        Spectate.combined_stream_list = JSON.clone(Spectate.get_my_list());
        for (var x in Spectate.server_streams_received) Spectate.server_streams_received[x].data && 3e4 > timestamp() - Spectate.server_streams_received[x].timestamp ? Spectate.combined_stream_list = Spectate.combined_stream_list.concat(Spectate.server_streams_received[x].data) : delete Spectate.server_streams_received[x];
        return async ? Spectate.combined_stream_list : setTimeout(function() {
            assert(Spectate.combined_stream_list);
        }, 1e3);
    },
    available_streams: function(socket, fn) {
        Spectate.combine_stream_list(function(b) {
            socket.json.send({
                action: "spectate",
                sub: "streams",
                data: b
            });
        });
    },
    sync_watcher: function(socket, p) {
        SSocket.send(socket, {
            action: "time",
            data: secondstamp()
        });
        300 == p.map ? PlayerMap.load(p.params.island, !1, function(err) {
            err && clients[p.id] && (socket.json.send({
                action: "player_map",
                map: err,
                player: p.name
            }), SSocket.send(socket, {
                action: "spectate",
                sub: "my_data",
                data: Player.share_data(p.id)
            }));
        }) : 120 <= p.map && p.map <= 120 + Guild.max_allowed ? GuildMap.load_data(p.temp.guild, p.map - 120, function(item) {
            item && clients[p.id] && (socket.json.send({
                action: "random_map",
                packed: !0,
                options: item,
                map_id: p.map
            }), SSocket.send(socket, {
                action: "spectate",
                sub: "my_data",
                data: Player.share_data(p.id)
            }));
        }) : 100 <= p.map && 120 > p.map ? (socket.json.send({
            action: "random_map",
            options: activeDungeons[p.map - 100].options,
            map_id: p.map
        }), SSocket.send(socket, {
            action: "spectate",
            sub: "my_data",
            data: Player.share_data(p.id)
        })) : socket.json.send({
            action: "spectate",
            sub: "my_data",
            data: Player.share_data(p.id)
        });
    },
    spectate_request: function(message) {
        socket.emit("spectator", {
            sub: "request",
            player: message,
            options: {
                player: SpectateWindow.player,
                key: SpectateWindow.key
            }
        });
    },
    spectate_stop: function() {
        socket.emit("spectator", {
            sub: "stop"
        });
    },
    spectate_streams: function() {
        5e3 < timestamp() - Spectate.last_stream_time ? (socket.emit("spectator", {
            sub: "streams",
            options: {
                player: SpectateWindow.player,
                key: SpectateWindow.key
            }
        }), Spectate.last_stream_time = timestamp()) : FormHelper.get_form("streams");
    },
    last_watch_requested: 0,
    watch: function(err, doc) {
        Spectate.last_watch_requested = timestamp();
        document.getElementById("streams_form").style.display = "none";
        spectator_mode && Spectate.spectate_stop();
        ServerList.connect_by_prefix(err, function() {
            Spectate.spectate_request(doc);
        });
    },
    set_spectator_text: function() {
        document.getElementById("settings_spectators").innerHTML = "Allow spectators(" + (players[0].temp.allow_spectators ? "on" : "off") + ")";
        document.getElementById("settings_spectators").style.display = "block";
    },
    toggle_spectators: function() {
        Socket.send("set_spectators", {
            status: !players[0].temp.allow_spectators
        });
    },
    toggle_spectators_link: function() {
        SpectateWindow.slave ? Spectate.spectate_streams() : hasClass(document.getElementById("login_box"), "hidden") ? (removeClass(document.getElementById("login_box"), "hidden"), 
        FormHelper.hide_form("streams"), document.getElementById("spectate_button_link").innerHTML = "Spectate other players") : (Spectate.spectate_streams(), 
        addClass(document.getElementById("login_box"), "hidden"), document.getElementById("spectate_button_link").innerHTML = "Show login dialog");
    },
    filter_window: function(regex) {
        regex = RegExp(regex, "i");
        for (var c = document.getElementsByClassName("spectate_row"), i = 0; i < c.length; i++) {
            for (var selectors = c[i].children, r = !1, s = 0; s < selectors.length; s++) if (regex.test(selectors[s].textContent)) {
                r = !0;
                break;
            }
            r ? removeClass(c[i], "hidden") : addClass(c[i], "hidden");
        }
    }
}, Cathedral = {
    entrance_position: {
        i: 86,
        j: 13,
        map: 20
    },
    cooldown: 2880,
    show_menu: function() {
        var a = FormHelper.get_form("cathedral_run"), counter = {};
        counter.timer = !Cathedral.enough_time_has_passed(players[0]);
        counter.time_remaining = Cathedral.time_left(players[0]);
        a.content.innerHTML = HandlebarTemplate.cathedral_new()(counter);
        counter.timer && Timers.set("cathedral_run", function() {
            FormHelper.is_form_visible("cathedral_run") && Cathedral.show_menu();
        }, 500);
    },
    close_menu: function() {
        Timers.clear("cathedral_run");
        FormHelper.hide_form("cathedral_run");
    },
    client_start: function() {
        Cathedral.close_menu();
        Cathedral.standing_next_to_entrance(players[0]) ? Socket.send("cathedral", {
            sub: "start"
        }) : addChatText("Need to be standing next to cathedral entrance!", void 0, COLOR.PINK);
    },
    client_reduce_time: function() {
        Cathedral.standing_next_to_entrance(players[0]) ? 0 < Inventory.get_item_count(players[0], 1031) ? Socket.send("cathedral", {
            sub: "reduce_time"
        }) : addChatText("You need a Repeat Quest Permission to reduce cooldown time", void 0, COLOR.PINK) : (addChatText("Need to be standing next to cathedral entrance!", void 0, COLOR.PINK), 
        Cathedral.close_menu());
    },
    init_timer: function() {
        players[0].map == Cathedral.map && MapTimer.init(function() {
            return players[0].temp.cathedral_level + "/102";
        }, players[0].temp.cathedral_time, Cathedral.map, !1);
    },
    show_hall_of_fame: function(e) {
        Timers.clear("cathedral_run");
        if (FormHelper.is_form_visible("cathedral_run")) {
            var template = FormHelper.get_form("cathedral_run");
            template.content.innerHTML = "Loading data...";
            if ("undefined" == typeof e) Socket.send("cathedral", {
                sub: "hall_of_fame"
            }); else {
                e = e.reverse();
                for (var property in e) e[property].player == players[0].name && (e[property].me = !0);
                switch (e.length) {
                  case 13:
                    e.splice(8, 2);
                    break;

                  case 12:
                    e.splice(9, 1);
                }
                template.content.innerHTML = HandlebarTemplate.cathedral_hall_of_fame()(e);
            }
        }
    },
    map: 22,
    killed_monster: function(i, cname) {
        var c = npc_base[cname], p = clients[i];
        p.temp.cathedral_level += 1;
        if (p && c && c.params.next_cathedral_npc_id) {
            Player.action(i);
            var tasks = Cathedral.monster_positions[c.params.next_cathedral_npc_id], task = tasks[Cathedral.monster_position_last[c.params.next_cathedral_npc_id]];
            Cathedral.monster_position_last[c.params.next_cathedral_npc_id] = (Cathedral.monster_position_last[c.params.next_cathedral_npc_id] + 1) % tasks.length;
            AREA.publish(p, {
                action: "magic_animation",
                id: 0,
                i: p.i,
                j: p.j,
                map: p.map
            }, !0);
            Client.teleport_position(clients[i], task);
            AREA.publish(clients[i], {
                action: "magic_animation",
                id: 1,
                i: task.i,
                j: task.j,
                map: task.map
            }, !0);
        }
    },
    monster_positions: {},
    monster_position_last: {},
    init_cathedral_monsters: function() {
        for (var id = 0; id < map_size_x; id++) for (var counter = 0; counter < map_size_y; counter++) {
            var e = obj_g(on_map[Cathedral.map][id][counter]);
            e && e.b_t == BASE_TYPE.NPC && e.type == OBJECT_TYPE.ENEMY && (Cathedral.monster_positions[e.b_i] = Cathedral.monster_positions[e.b_i] || [], 
            Cathedral.monster_positions[e.b_i].push({
                i: id,
                j: counter - 1,
                map: Cathedral.map
            }), Cathedral.monster_position_last[e.b_i] = 0);
        }
    },
    init_server: function() {
        Cathedral.init_cathedral_monsters();
    },
    standing_next_to_entrance: function(data) {
        return data.map == Cathedral.entrance_position.map && 0 == distance(data.i, data.j, Cathedral.entrance_position.i, Cathedral.entrance_position.j);
    },
    time_left: function(post) {
        return Math.max(0, Cathedral.cooldown - minutesPastDelta(post.temp.cathedral_time));
    },
    enough_time_has_passed: function(a) {
        return !Cathedral.time_left(a);
    },
    can_start: function(a) {
        return Cathedral.standing_next_to_entrance(a) && Cathedral.enough_time_has_passed(a);
    },
    reduce_time: function(client) {
        Cathedral.standing_next_to_entrance(client) && 0 < Inventory.get_item_count(clients[client.id], 1031) && !Cathedral.enough_time_has_passed(client) && (Items.take_from_player(client.id, 1031), 
        clients[client.id].temp.cathedral_time -= 3600, Player.send_data(client.id));
    },
    player_start: function(item) {
        if (Cathedral.can_start(item)) {
            var tasks = Cathedral.monster_positions[343], task = tasks[Cathedral.monster_position_last[343]];
            Cathedral.monster_position_last[343] = (Cathedral.monster_position_last[343] + 1) % tasks.length;
            clients[item.id].temp.cathedral_level = 1;
            clients[item.id].temp.cathedral_time = secondstamp();
            AREA.publish(item, {
                action: "magic_animation",
                id: 0,
                i: item.i,
                j: item.j,
                map: item.map
            }, !0);
            Client.teleport_position(clients[item.id], task);
            AREA.publish(clients[item.id], {
                action: "magic_animation",
                id: 1,
                i: task.i,
                j: task.j,
                map: task.map
            }, !0);
            Player.send_event(item.id, "cathedral");
        }
    },
    player_died: function(conn) {
        AREA.sql(conn, {
            action: "update_cathedral_score",
            time: secondstamp() - clients[conn.id].temp.cathedral_time,
            level: Math.min(102, clients[conn.id].temp.cathedral_level)
        });
        if (Private.get(conn.id, "steam")) {
            var wine = Private.get(conn.id, "steam");
            SteamPayments.post_user_stats_for_game(wine, [ {
                name: "cathedral_level",
                value: clients[conn.id].temp.cathedral_level
            } ]);
        }
        50 <= clients[conn.id].temp.cathedral_level && Player.send_achievement(conn.id, "CATHEDRAL_50");
        101 <= clients[conn.id].temp.cathedral_level && Player.send_achievement(conn.id, "CATHEDRAL_101");
        clients[conn.id].temp.cathedral_level = 0;
    }
};

"undefined" == typeof sprite && (sprite = {});

sprite.guild_buildings = {
    frames: [ {
        filename: "barracks_1.png",
        frame: {
            x: 727,
            y: 131,
            w: 108,
            h: 97
        }
    }, {
        filename: "barracks_2.png",
        frame: {
            x: 1177,
            y: 86,
            w: 122,
            h: 120
        }
    }, {
        filename: "barracks_3.png",
        frame: {
            x: 880,
            y: 2,
            w: 136,
            h: 120
        }
    }, {
        filename: "barracks_4.png",
        frame: {
            x: 602,
            y: 2,
            w: 137,
            h: 127
        }
    }, {
        filename: "barracks_5.png",
        frame: {
            x: 741,
            y: 2,
            w: 137,
            h: 127
        }
    }, {
        filename: "crystal_1.png",
        frame: {
            x: 987,
            y: 198,
            w: 54,
            h: 50
        }
    }, {
        filename: "estonian_flag.png",
        frame: {
            x: 947,
            y: 174,
            w: 38,
            h: 80
        }
    }, {
        filename: "graveyard_candle.png",
        frame: {
            x: 1043,
            y: 198,
            w: 54,
            h: 49
        }
    }, {
        filename: "hall_1.png",
        frame: {
            x: 617,
            y: 131,
            w: 108,
            h: 120
        }
    }, {
        filename: "hall_2.png",
        frame: {
            x: 466,
            y: 2,
            w: 134,
            h: 134
        }
    }, {
        filename: "hall_3.png",
        frame: {
            x: 330,
            y: 2,
            w: 134,
            h: 172
        }
    }, {
        filename: "hall_4.png",
        frame: {
            x: 2,
            y: 2,
            w: 162,
            h: 179
        }
    }, {
        filename: "hall_5.png",
        frame: {
            x: 166,
            y: 2,
            w: 162,
            h: 179
        }
    }, {
        filename: "meteor_altar.png",
        frame: {
            x: 837,
            y: 131,
            w: 54,
            h: 64
        }
    }, {
        filename: "mine_1.png",
        frame: {
            x: 2,
            y: 183,
            w: 125,
            h: 67
        }
    }, {
        filename: "mine_2.png",
        frame: {
            x: 1177,
            y: 2,
            w: 146,
            h: 82
        }
    }, {
        filename: "mine_3.png",
        frame: {
            x: 466,
            y: 138,
            w: 149,
            h: 95
        }
    }, {
        filename: "mine_4.png",
        frame: {
            x: 1018,
            y: 101,
            w: 157,
            h: 95
        }
    }, {
        filename: "mine_5.png",
        frame: {
            x: 1018,
            y: 2,
            w: 157,
            h: 97
        }
    }, {
        filename: "npc.png",
        frame: {
            x: 1099,
            y: 198,
            w: 54,
            h: 27
        }
    }, {
        filename: "shrine_1.png",
        frame: {
            x: 837,
            y: 198,
            w: 108,
            h: 56
        }
    }, {
        filename: "shrine_2.png",
        frame: {
            x: 893,
            y: 124,
            w: 93,
            h: 48
        }
    }, {
        filename: "shrine_3.png",
        frame: {
            x: 240,
            y: 183,
            w: 108,
            h: 66
        }
    }, {
        filename: "shrine_4.png",
        frame: {
            x: 129,
            y: 183,
            w: 109,
            h: 67
        }
    }, {
        filename: "shrine_5.png",
        frame: {
            x: 350,
            y: 176,
            w: 109,
            h: 77
        }
    } ],
    meta: {
        image: "guild_buildings.png",
        smartupdate: "$TexturePacker:SmartUpdate:a5e81b6e0340a43ddea13db9080c20b1:50454b19591691c80c5eb8212778485c:0f0f9722c326bb0f11aeb60586e881e2$"
    }
};

var release_version = 1259;

var release_checksum = "08df2e00363ef297744d555a030ed124";
